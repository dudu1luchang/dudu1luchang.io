<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/15/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5%E6%A8%A1%E6%9D%BF-%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/%E4%BB%BB%E5%8A%A1%E5%9B%9B_%20%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    <url>/2023/03/15/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5%E6%A8%A1%E6%9D%BF-%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/%E4%BB%BB%E5%8A%A1%E5%9B%9B_%20%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="任务八-综合案例"><a href="#任务八-综合案例" class="headerlink" title="任务八  综合案例"></a>任务八  综合案例</h1><h2 id="1-商城案例表设计"><a href="#1-商城案例表设计" class="headerlink" title="1.商城案例表设计"></a>1.商城案例表设计</h2><p>通过对商城项目的部分表关系进行分析,完成数据库表的设计</p><h3 id="1-1-表关系分析"><a href="#1-1-表关系分析" class="headerlink" title="1.1 表关系分析"></a>1.1 表关系分析</h3><p><img src="/02_%E5%9B%BE%E7%89%87%5C01.jpg"> </p><h3 id="1-2-建库-建表"><a href="#1-2-建库-建表" class="headerlink" title="1.2 建库,建表"></a>1.2 建库,建表</h3><ol><li>创建名为 store的数据库, 对应商城项目</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database db6 character set utf8;<br></code></pre></td></tr></table></figure><ol start="2"><li>创建用户表</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE user (<br>  uid varchar(32) PRIMARY KEY,-- 用户ID<br>  username varchar(20) , -- 用户名<br>  password varchar(20) , -- 密码<br>  telephone varchar(20) , -- 电话<br>  birthday date , -- 生日<br>  sex varchar(10) -- 性别<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO USER VALUES <br>(&#x27;001&#x27;,&#x27;渣渣辉&#x27;,&#x27;123456&#x27;,&#x27;13511112222&#x27;,&#x27;2015-11-04&#x27;,&#x27;男&#x27;),<br>(&#x27;002&#x27;,&#x27;药水哥&#x27;,&#x27;123456&#x27;,&#x27;13533334444&#x27;,&#x27;1990-02-01&#x27;,&#x27;男&#x27;),<br>(&#x27;003&#x27;,&#x27;大明白&#x27;,&#x27;123456&#x27;,&#x27;13544445555&#x27;,&#x27;2015-11-03&#x27;,&#x27;男&#x27;),<br>(&#x27;004&#x27;,&#x27;长海&#x27;,&#x27;123456&#x27;,&#x27;13566667777&#x27;,&#x27;2000-02-01&#x27;,&#x27;男&#x27;),<br>(&#x27;005&#x27;,&#x27;乔杉&#x27;,&#x27;123456&#x27;,&#x27;13588889999&#x27;,&#x27;2000-02-01&#x27;,&#x27;男&#x27;);<br></code></pre></td></tr></table></figure><ol start="3"><li>创建订单表</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE orders (<br>  oid varchar(32)   PRIMARY KEY, -- 订单id<br>  ordertime datetime ,-- 下单时间 <br>  total double , -- 总金额<br>  name varchar(20), -- 收货人姓名<br>  telephone varchar(20) , -- 电话<br>  address varchar(30) , -- 地址<br>  state int(11) ,  -- 订单状态<br>  uid varchar(32), -- 外键字段 对应用户表id<br>  CONSTRAINT ofk_0001 FOREIGN KEY (uid) REFERENCES user (uid)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 插入一条订单数据<br>INSERT INTO orders <br>VALUES(&#x27;order001&#x27;,&#x27;2019-10-11&#x27;,5500,&#x27;乔杉&#x27;,&#x27;15512342345&#x27;,&#x27;皇家洗浴&#x27;,0,&#x27;001&#x27;);<br></code></pre></td></tr></table></figure><ol start="4"><li>创建商品分类表</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE category (<br>  cid varchar(32) PRIMARY KEY,<br>  cname varchar(20)<br>); <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO `category` VALUES (&#x27;1&#x27;,&#x27;手机数码&#x27;),(&#x27;2&#x27;,&#x27;电脑办公&#x27;),(&#x27;3&#x27;,&#x27;运动鞋服&#x27;),(&#x27;4&#x27;,&#x27;图书音像&#x27;);<br></code></pre></td></tr></table></figure><ol start="5"><li>创建商品表</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE product (<br>  pid varchar(32)  PRIMARY KEY,-- 商品id<br>  pname varchar(50) , -- 商品名称 <br>  price double, -- 商品价格<br>  pdesc varchar(255), -- 商品描述<br>  pflag int(11) , -- 商品状态 1 上架 ,0 下架<br>  cid varchar(32) , -- 外键对应 分类表id<br>  KEY sfk_0001 (cid), <br>  CONSTRAINT sfk_0001 FOREIGN KEY (cid) REFERENCES category (cid)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO `product` VALUES <br>(&#x27;1&#x27;,&#x27;小米6&#x27;,2200,&#x27;小米 移动联通电信4G手机 双卡双待&#x27;,0,&#x27;1&#x27;),<br>(&#x27;2&#x27;,&#x27;华为Mate9&#x27;,2599,&#x27;华为 双卡双待 高清大屏&#x27;,0,&#x27;1&#x27;),<br>(&#x27;3&#x27;,&#x27;OPPO11&#x27;,3000,&#x27;移动联通 双4G手机&#x27;,0,&#x27;1&#x27;),<br>(&#x27;4&#x27;,&#x27;华为荣耀&#x27;,1499,&#x27;3GB内存标准版 黑色 移动4G手机&#x27;,0,&#x27;1&#x27;),<br>(&#x27;5&#x27;,&#x27;华硕台式电脑&#x27;,5000,&#x27;爆款直降，满千减百&#x27;,0,&#x27;2&#x27;),<br>(&#x27;6&#x27;,&#x27;MacBook&#x27;,6688,&#x27;128GB 闪存&#x27;,0,&#x27;2&#x27;),<br>(&#x27;7&#x27;,&#x27;ThinkPad&#x27;,4199,&#x27;轻薄系列1)&#x27;,0,&#x27;2&#x27;),<br>(&#x27;8&#x27;,&#x27;联想小新&#x27;,4499,&#x27;14英寸超薄笔记本电脑&#x27;,0,&#x27;2&#x27;),<br>(&#x27;9&#x27;,&#x27;李宁音速6&#x27;,500,&#x27;实战篮球鞋&#x27;,0,&#x27;3&#x27;),<br>(&#x27;10&#x27;,&#x27;AJ11&#x27;,3300,&#x27;乔丹实战系列&#x27;,0,&#x27;3&#x27;),<br>(&#x27;11&#x27;,&#x27;AJ1&#x27;,5800,&#x27;精神小伙系列&#x27;,0,&#x27;3&#x27;);<br></code></pre></td></tr></table></figure><ol start="5"><li>订单项表 (中间表)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 订单项表<br>CREATE TABLE orderitem (<br>  itemid VARCHAR(32) PRIMARY KEY, -- 订单项ID<br>  pid VARCHAR(32),  -- 外键 对应商品表 id<br>  oid VARCHAR(32), -- 外键 对应订单表 id<br>  KEY fk_0001 (pid),<br>  KEY fk_0002 (oid),<br>  CONSTRAINT fk_0001 FOREIGN KEY (pid) REFERENCES product (pid),<br>  CONSTRAINT fk_0002 FOREIGN KEY (oid) REFERENCES orders (oid)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 向中间表中插入两条数据<br>INSERT INTO orderitem VALUES(&#x27;item001&#x27;,&#x27;1&#x27;,&#x27;order001&#x27;);<br>INSERT INTO orderitem VALUES(&#x27;item002&#x27;,&#x27;11&#x27;,&#x27;order001&#x27;);<br></code></pre></td></tr></table></figure><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h2><h3 id="2-1-项目结构"><a href="#2-1-项目结构" class="headerlink" title="2.1 项目结构"></a>2.1 项目结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.lagou</span><span class="hljs-selector-class">.app</span> 测试包 用于对DAO代码进行测试<br>com<span class="hljs-selector-class">.lagou</span><span class="hljs-selector-class">.dao</span> dao包  数据访问层,包含所有对数据库的相关操作的类<br>com<span class="hljs-selector-class">.lagou</span><span class="hljs-selector-class">.entity</span> 实体包 保存根据数据库表 对应创建的JavaBean类<br>com<span class="hljs-selector-class">.lagou</span><span class="hljs-selector-class">.utils</span> 工具包<br></code></pre></td></tr></table></figure><p><img src="/02_%E5%9B%BE%E7%89%87%5C03.jpg"> </p><h3 id="2-2-导入所需Jar包"><a href="#2-2-导入所需Jar包" class="headerlink" title="2.2 导入所需Jar包"></a>2.2 导入所需Jar包</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">我们只需要导入myjar仓库到项目中就可以了<br></code></pre></td></tr></table></figure><p><img src="/02_%E5%9B%BE%E7%89%87%5C04.jpg"> </p><h3 id="2-3-导入配置文件及工具类"><a href="#2-3-导入配置文件及工具类" class="headerlink" title="2.3 导入配置文件及工具类"></a>2.3 导入配置文件及工具类</h3><p><img src="/02_%E5%9B%BE%E7%89%87%5C05.jpg"> </p><h2 id="3-JavaBean类创建"><a href="#3-JavaBean类创建" class="headerlink" title="3.JavaBean类创建"></a>3.JavaBean类创建</h2><h3 id="3-1-设计用户与订单"><a href="#3-1-设计用户与订单" class="headerlink" title="3.1 设计用户与订单"></a>3.1 设计用户与订单</h3><h4 id="3-1-1-一对多关系分析"><a href="#3-1-1-一对多关系分析" class="headerlink" title="3.1.1 一对多关系分析"></a>3.1.1 一对多关系分析</h4><ul><li><p>在Java一对多的数据关系中，需要遵循以下设计原则：</p></li><li><ol><li>Java类的名称 &#x3D; 实体表的名称</li><li>Java类的属性 &#x3D; 实体表的字段</li><li>Java类的一个对象 &#x3D; 表的一行记录</li><li>外键关系 &#x3D; 引用配置</li></ol></li><li><p>一个用户拥有多个订单,所以 用户是一的一方, 订单是多的一方</p><p><img src="/02_%E5%9B%BE%E7%89%87%5C06.jpg"></p></li></ul><h4 id="3-1-2-User类"><a href="#3-1-2-User类" class="headerlink" title="3.1.2 User类"></a>3.1.2 User类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *    用户表 对应 User类</span><br><span class="hljs-comment"> *   `uid` VARCHAR(32) NOT NULL,</span><br><span class="hljs-comment"> *   `username` VARCHAR(20) DEFAULT NULL,</span><br><span class="hljs-comment"> *   `password` VARCHAR(20) DEFAULT NULL,</span><br><span class="hljs-comment"> *   `telephone` VARCHAR(20) DEFAULT NULL,</span><br><span class="hljs-comment"> *   `birthday` DATE DEFAULT NULL,</span><br><span class="hljs-comment"> *   `sex` VARCHAR(10) DEFAULT NULL,</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String uid;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">private</span> String telephone;<br><br>    <span class="hljs-keyword">private</span> String birthday;<br><br>    <span class="hljs-keyword">private</span> String sex;<br><br>  <span class="hljs-comment">//提供 get set toString方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-3-Orders类"><a href="#3-1-3-Orders类" class="headerlink" title="3.1.3 Orders类"></a>3.1.3 Orders类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *   订单表</span><br><span class="hljs-comment"> *   `oid` VARCHAR(32) NOT NULL,</span><br><span class="hljs-comment"> *   `ordertime` DATETIME DEFAULT NULL,</span><br><span class="hljs-comment"> *   `total` DOUBLE DEFAULT NULL,</span><br><span class="hljs-comment"> *   `name` VARCHAR(20) DEFAULT NULL,</span><br><span class="hljs-comment"> *   `telephone` VARCHAR(20) DEFAULT NULL,</span><br><span class="hljs-comment"> *   `address` VARCHAR(30) DEFAULT NULL,</span><br><span class="hljs-comment"> *   `state` INT(11) DEFAULT NULL,</span><br><span class="hljs-comment"> *   `uid` VARCHAR(32) DEFAULT NULL,</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Orders</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String oid; <span class="hljs-comment">//订单号</span><br>    <span class="hljs-keyword">private</span> String ordertime; <span class="hljs-comment">//下单时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> total; <span class="hljs-comment">//订单的总金额</span><br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//收货人姓名</span><br>    <span class="hljs-keyword">private</span> String telephone; <span class="hljs-comment">//收货人电话</span><br>    <span class="hljs-keyword">private</span> String address;  <span class="hljs-comment">//收货人地址</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> state; <span class="hljs-comment">//订单状态 1 代表已支付 , 0 代表未支付</span><br><br>    <span class="hljs-comment">//订单属于哪个用户呢 ?</span><br>    <br>    <span class="hljs-comment">//提供 get set toString方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-4-Orders类设计分析"><a href="#3-1-4-Orders类设计分析" class="headerlink" title="3.1.4 Orders类设计分析"></a>3.1.4 Orders类设计分析</h4><ul><li><p>第一种方式</p><ul><li><p>根据两张表关系的描述  我们可以在 订单类中 添加一个uid 成员变量,表示订单属于哪个用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String uid;<br></code></pre></td></tr></table></figure></li><li><p>但是这样设计会存在一些问题,比如 我要查询的是订单是属于哪个用户的用户名 ? 但是我们只有一个uid</p></li></ul></li><li><p>第二种方式</p><ul><li><p>Java类表示一对多关系,可以在多的一方添加一个成员变量,这个成员变量的类型 就是一的一方的类型.</p></li><li><p>再在订单表中 添加一个 User对象,User对象中 ,保存该订单关联的用户的所有信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String uid;<br><span class="hljs-keyword">private</span> User user;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-1-4-修改Orders类"><a href="#3-1-4-修改Orders类" class="headerlink" title="3.1.4 修改Orders类"></a>3.1.4 修改Orders类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Orders</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String oid; <span class="hljs-comment">//订单号</span><br>    <span class="hljs-keyword">private</span> String ordertime; <span class="hljs-comment">//下单时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> total; <span class="hljs-comment">//订单的总金额</span><br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//收货人姓名</span><br>    <span class="hljs-keyword">private</span> String telephone; <span class="hljs-comment">//收货人电话</span><br>    <span class="hljs-keyword">private</span> String address;  <span class="hljs-comment">//收货人地址</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> state; <span class="hljs-comment">//订单状态 1 代表已支付 , 0 代表未支付</span><br><br>    <span class="hljs-comment">//订单属于哪个用户呢 ?</span><br>    <span class="hljs-keyword">private</span> String uid; <span class="hljs-comment">//表示外键</span><br>    <span class="hljs-keyword">private</span> User user; <span class="hljs-comment">//用来保存订单对应的详细的用户信息</span><br>    <br>    <span class="hljs-comment">//提供 get set toString方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-设计商品与分类"><a href="#3-2-设计商品与分类" class="headerlink" title="3.2 设计商品与分类"></a>3.2 设计商品与分类</h3><p>分类与商品 同样是一对多关系,  我们可以在多的一方进行操作 添加一个成员变量 类型是一的一方的类型</p><p><img src="/02_%E5%9B%BE%E7%89%87%5C07.jpg"> </p><h4 id="3-2-1-Category类"><a href="#3-2-1-Category类" class="headerlink" title="3.2.1 Category类"></a>3.2.1 Category类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Category</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String cid;<br>    <span class="hljs-keyword">private</span> String cname;<br>    <br>    <span class="hljs-comment">//提供 get set toString方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-Product类"><a href="#3-2-2-Product类" class="headerlink" title="3.2.2 Product类"></a>3.2.2 Product类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String pid;<br><br>    <span class="hljs-keyword">private</span> String pname;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">private</span> String pdesc;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pflag; <span class="hljs-comment">//是否上架 1 上架 ,0 下架</span><br><br>    <span class="hljs-keyword">private</span> String cid; <span class="hljs-comment">//外键 对应分类表主键</span><br><br>    <span class="hljs-keyword">private</span> Category category; <span class="hljs-comment">//用于保存Category的详细数据</span><br>    <br>     <span class="hljs-comment">//提供 get set toString方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-设计订单项"><a href="#3-3-设计订单项" class="headerlink" title="3.3 设计订单项"></a>3.3 设计订单项</h3><h4 id="3-3-1-多对多关系分析"><a href="#3-3-1-多对多关系分析" class="headerlink" title="3.3.1 多对多关系分析"></a>3.3.1 多对多关系分析</h4><p>商品与订单是多对多关系, 一个订单上可以有多个商品, 一个商品可以出现在多个订单中.</p><p>多对多建表原则 需要一张中间表,中间表中至少有两个字段,作为中间表的外键分别指向另外两张表的主键</p><p><img src="/02_%E5%9B%BE%E7%89%87%5C11.jpg">  </p><h4 id="3-3-2-创建OrderItem"><a href="#3-3-2-创建OrderItem" class="headerlink" title="3.3.2 创建OrderItem"></a>3.3.2 创建OrderItem</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *   订单项表(中间表)</span><br><span class="hljs-comment"> *   `itemid` VARCHAR(32) NOT NULL,</span><br><span class="hljs-comment"> *   `pid` VARCHAR(32) DEFAULT NULL,</span><br><span class="hljs-comment"> *   `oid` VARCHAR(32) DEFAULT NULL,</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderItem</span> &#123;<br><br>    <span class="hljs-comment">//订单项 指的是中间表中的一条数据</span><br>    <span class="hljs-keyword">private</span> String itemid; <span class="hljs-comment">//订单项的id</span><br><br>    <span class="hljs-keyword">private</span> String pid; <span class="hljs-comment">//外键 指向商品表主键</span><br><br>    <span class="hljs-keyword">private</span> String oid; <span class="hljs-comment">//外键 指向订单表的主键</span><br>    <br>    <span class="hljs-keyword">private</span> Product product;<span class="hljs-comment">//订单项内部的商品详细信息</span><br><br>    <span class="hljs-keyword">private</span> Orders orders;<span class="hljs-comment">//订单项属于哪个订单</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-编写DAO类"><a href="#4-编写DAO类" class="headerlink" title="4.编写DAO类"></a>4.编写DAO类</h2><h3 id="4-1-UserDao"><a href="#4-1-UserDao" class="headerlink" title="4.1 UserDao"></a>4.1 UserDao</h3><ul><li>需求一: 编写一个注册用户的方法,接收的参数是一个User对象</li><li>需求二: 编写一个 用户登录的方法,接收的参数是 用户名 和密码, 返回值是User对象</li></ul><h4 id="4-1-1-编写UserDao"><a href="#4-1-1-编写UserDao" class="headerlink" title="4.1.1 编写UserDao"></a>4.1.1 编写UserDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册用户</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">register</span><span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-comment">//1.获取QueryRunner</span><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">qr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(DruidUtils.getDataSource());<br><br>        <span class="hljs-comment">//2.编写SQL</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into user values(?,?,?,?,?,?)&quot;</span>;<br><br>        Object[] param = &#123;user.getUid(), user.getUsername(), user.getPassword(),<br>                user.getTelephone(), user.getBirthday(), user.getSex()&#125;;<br><br>        <span class="hljs-comment">//3.执行插入操作</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> qr.update(sql,param);<br><br>        <span class="hljs-comment">//4.返回受影响的行数</span><br>        <span class="hljs-keyword">return</span> update;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户注册</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span><span class="hljs-params">(String username , String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">qr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(DruidUtils.getDataSource());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from user where username = ? and password = ?&quot;</span>;<br><br>        <span class="hljs-comment">//返回的是一个User对象 使用BeanHandler将结果集的第一条和数据封装到一个Javabean中</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> qr.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;User&gt;(User.class), username, password);<br><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-2-测试注册与登录功能"><a href="#4-1-2-测试注册与登录功能" class="headerlink" title="4.1.2 测试注册与登录功能"></a>4.1.2 测试注册与登录功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUserDao</span> &#123;<br><br>    <span class="hljs-comment">//创建UserDao</span><br>    <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDao</span>();<br><br>    <span class="hljs-comment">//测试注册功能</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRegister</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-comment">//1. 创建User对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><br>        <span class="hljs-comment">//2. 对User对象进行赋值</span><br>        user.setUid(UUIDUtils.getUUID());<br>        user.setUsername(<span class="hljs-string">&quot;大郎&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;654321&quot;</span>);<br>        user.setTelephone(<span class="hljs-string">&quot;15052005200&quot;</span>);<br>        user.setSex(<span class="hljs-string">&quot;男&quot;</span>);<br>        user.setBirthday(DateUtils.getDateFormart());<br><br>        <span class="hljs-comment">//3.执行注册</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">register</span> <span class="hljs-operator">=</span> userDao.register(user);<br><br>        <span class="hljs-comment">//4.判断注册是否成功</span><br>        <span class="hljs-keyword">if</span>(register &gt; <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;注册成功,欢迎您: &quot;</span> + user.getUsername());<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;注册失败! !&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//测试登录功能</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLogin</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-comment">//调用UserDao的 login方法,传入用户名密码</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDao.login(<span class="hljs-string">&quot;大郎&quot;</span>, <span class="hljs-string">&quot;654321&quot;</span>);<br><br>        <span class="hljs-comment">//判断user不为空 登录成功</span><br>        <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(user.getUsername() +<span class="hljs-string">&quot; 欢迎您!&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;用户名或者密码错误! !&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-ProductDao"><a href="#4-2-ProductDao" class="headerlink" title="4.2 ProductDao"></a>4.2 ProductDao</h3><ul><li><p>需求1: 根据商品ID 获取商品名称 ,商品价格 以及商品所属分类的名称</p><ul><li>参数 pid, 返回值 product对象</li></ul></li><li><p>需求2: 根据分类ID 获取商品分类信息</p><ul><li>参数 cid , 返回值 category对象</li></ul></li><li><p>需求3: 查询指定分类ID 下的商品个数</p><ul><li>参数 cid , 返回值 int类型 商品个数</li></ul></li><li><p>需求4: 查询指定分类ID 下的所有商品信息</p><ul><li>参数分类ID ,返回值 List集合 集合中保存商品对象</li></ul></li></ul><h4 id="4-2-1-编写-ProductDao"><a href="#4-2-1-编写-ProductDao" class="headerlink" title="4.2.1 编写 ProductDao"></a>4.2.1 编写 ProductDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductDao</span> &#123;<br><br>    <span class="hljs-comment">//1.根据商品ID 获取商品名称 ,商品价格 以及商品所属分类的名称</span><br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">findProductById</span><span class="hljs-params">(String pid)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">qr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(DruidUtils.getDataSource());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from product where pid = ?&quot;</span>;<br><br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> qr.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;Product&gt;(Product.class), pid);<br><br>        <span class="hljs-comment">//调用 findCategoryById()方法, 传递外键cid 获取商品对应 的分类信息</span><br>        <span class="hljs-type">Category</span> <span class="hljs-variable">category</span> <span class="hljs-operator">=</span> findCategoryById(product.getCid());<br><br>        <span class="hljs-comment">//将category保存到商品对象中</span><br>        product.setCategory(category);<br><br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br><br>    <span class="hljs-comment">//2.根据分类ID 获取商品分类信息</span><br>    <span class="hljs-keyword">public</span> Category <span class="hljs-title function_">findCategoryById</span><span class="hljs-params">(String cid)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">qr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(DruidUtils.getDataSource());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from category where cid = ?&quot;</span>;<br><br>        <span class="hljs-type">Category</span> <span class="hljs-variable">category</span> <span class="hljs-operator">=</span> qr.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;Category&gt;(Category.class),cid);<br><br>        <span class="hljs-keyword">return</span> category;<br>    &#125;<br><br>    <span class="hljs-comment">//3.查询指定分类ID 下的商品个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">(String cid)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">qr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(DruidUtils.getDataSource());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) from product where cid = ?&quot;</span>;<br><br>        <span class="hljs-comment">//获取的单列数据 ,使用ScalarHandler 封装</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> (Long)qr.query(sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>&lt;&gt;(),cid);<br><br>        <span class="hljs-comment">//将Lang类型转换为 int 类型,并返回</span><br>        <span class="hljs-keyword">return</span> count.intValue();<br>    &#125;<br><br><br>    <span class="hljs-comment">//4.查询指定分类下的所有商品信息</span><br>    <span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-title function_">findProductByCid</span><span class="hljs-params">(String cid)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">qr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(DruidUtils.getDataSource());<br>        <br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from product where cid = ?&quot;</span>;<br><br>        <span class="hljs-comment">//查询结果是一个List集合, 使用BeanListHandler 封装结果集</span><br>        List&lt;Product&gt; list = qr.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;Product&gt;(Product.class), cid);<br>        <br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-2-2-测试-ProductDao"><a href="#4-2-2-测试-ProductDao" class="headerlink" title="4.2.2 测试 ProductDao"></a>4.2.2 测试 ProductDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestProductDao</span> &#123;<br><br>    <span class="hljs-type">ProductDao</span> <span class="hljs-variable">productDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductDao</span>();<br><br>    <span class="hljs-comment">//1.测试 根据商品ID 获取商品名称 ,商品价格 以及商品所属分类的名称</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFindProductById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productDao.findProductById(<span class="hljs-string">&quot;1&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;商品名称: &quot;</span>+product.getPname()+ <span class="hljs-string">&quot;, 商品价格: &quot;</span> + product.getPrice() +<br>                <span class="hljs-string">&quot;, 商品所属分类: &quot;</span>+ product.getCategory().getCname());<br>    &#125;<br><br><br>    <span class="hljs-comment">//2.测试 查询指定分类ID下的商品数</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetCount</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//查询 cid为3的分类下有多少个商品</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> productDao.getCount(<span class="hljs-string">&quot;3&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;分类ID为3的分类下商品个数: &quot;</span> + count);<br>    &#125;<br><br>    <span class="hljs-comment">//3.测试 查询指定分类下的所有商品信息</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFindProductByCid</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-comment">//查询cid为 2的分类下 所有的商品信息</span><br>        List&lt;Product&gt; list = productDao.findProductByCid(<span class="hljs-string">&quot;2&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (Product product : list) &#123;<br>            System.out.println(product);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-OrdersDao"><a href="#4-3-OrdersDao" class="headerlink" title="4.3 OrdersDao"></a>4.3 OrdersDao</h3><h4 id="4-3-1-多对一分析"><a href="#4-3-1-多对一分析" class="headerlink" title="4.3.1 多对一分析"></a>4.3.1 多对一分析</h4><p>OrderItem表与Orders表的关系是 多对一</p><p><img src="/02_%E5%9B%BE%E7%89%87%5C09.jpg"> </p><p>之前我们一直是在描述一对多,那么我们再反向描述一下 多对一</p><p>方式是在Orders中应该有一个 集合用来保存订单中的订单项信息</p><p><img src="/02_%E5%9B%BE%E7%89%87%5C10.jpg"> </p><p>在Orders类中添加 订单项的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//该订单中有多少订单项</span><br>  List&lt;OrderItem&gt; orderItems = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;OrderItem&gt;();<br><br>  <span class="hljs-keyword">public</span> List&lt;OrderItem&gt; <span class="hljs-title function_">getOrderItems</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> orderItems;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOrderItems</span><span class="hljs-params">(List&lt;OrderItem&gt; orderItems)</span> &#123;<br>      <span class="hljs-built_in">this</span>.orderItems = orderItems;<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-2-创建OrdersDao"><a href="#4-3-2-创建OrdersDao" class="headerlink" title="4.3.2 创建OrdersDao"></a>4.3.2 创建OrdersDao</h4><ul><li><p>需求1: 获取 uid为 001 的用户的所有订单信息</p></li><li><p>参数 uid, 返回值 LIst<Orders> 订单集合 </p></li><li><p>需求2: 获取订单编号为 order001的订单中的所有商品信息</p><ul><li>参数 oid, 返回值List<Product> 商品集合</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 获取订单编号为: order001的订单中的所有商品信息</span><br><br><span class="hljs-comment">-- 1.查询订单项表中 oid是order001的 所有商品信息</span><br><span class="hljs-keyword">SELECT</span> <br>oi.pid<br><span class="hljs-keyword">FROM</span> orderitem oi <span class="hljs-keyword">WHERE</span> oid <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;order001&#x27;</span>;<br><br><span class="hljs-comment">-- 2.将上面的查询语句作为in函数的条件, 查询product表</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> product <span class="hljs-keyword">WHERE</span> pid <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> <br>oi.pid<br><span class="hljs-keyword">FROM</span> orderitem oi <span class="hljs-keyword">WHERE</span> oid <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;order001&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrdersDao</span> &#123;<br><br>    <span class="hljs-comment">//需求1: 获取 uid为 001 的用户的所有订单信息</span><br>    <span class="hljs-keyword">public</span> List&lt;Orders&gt;  <span class="hljs-title function_">findAllOrders</span><span class="hljs-params">(String uid)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">qr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(DruidUtils.getDataSource());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from orders where uid = ?&quot;</span>;<br><br>        <span class="hljs-comment">//一个用户所有的订单信息</span><br>        List&lt;Orders&gt; ordersList = qr.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;Orders&gt;(Orders.class), uid);<br><br>        <span class="hljs-keyword">return</span> ordersList;<br>    &#125;<br><br>    <span class="hljs-comment">//需求2: 获取订单编号为 order001的订单中的所有商品信息</span><br>    <span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-title function_">findOrderById</span><span class="hljs-params">(String oid)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">qr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(DruidUtils.getDataSource());<br><br>        <span class="hljs-comment">//1.查询订单项表 获取订单项表中 订单ID为order001的数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT pid FROM orderitem WHERE oid = ? &quot;</span>;<br><br>        <span class="hljs-comment">//2.查询的结果是 多条订单项数据</span><br>        List&lt;OrderItem&gt; list = qr.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;OrderItem&gt;(OrderItem.class), oid);<br><br>        <span class="hljs-comment">//3.创建集合保存商品信息</span><br>        List&lt;Product&gt; productList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-type">ProductDao</span> <span class="hljs-variable">productDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductDao</span>();<br><br>        <span class="hljs-comment">//4.遍历订单项集合 获取Pid</span><br>        <span class="hljs-keyword">for</span> (OrderItem orderItem : list) &#123;<br><br>            <span class="hljs-comment">//4.1从orderitem中获取 pid</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> orderItem.getPid();<br><br>            <span class="hljs-comment">//4.2 调用productDao</span><br>            <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productDao.findProductById(pid);<br><br>            <span class="hljs-comment">//4.3 保存到集合</span><br>            productList.add(product);<br>        &#125;<br><br>        <span class="hljs-comment">//返回 订单中对应的商品信息</span><br>        <span class="hljs-keyword">return</span> productList;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-3-测试OrdersDao"><a href="#4-3-3-测试OrdersDao" class="headerlink" title="4.3.3 测试OrdersDao"></a>4.3.3 测试OrdersDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestOrderDao</span> &#123;<br><br>    <span class="hljs-type">OrdersDao</span> <span class="hljs-variable">ordersDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrdersDao</span>();<br><br>    <span class="hljs-comment">//1.获取 uid为 001 的用户的所有订单信息</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFindAllOrders</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        List&lt;Orders&gt; allOrders = ordersDao.findAllOrders(<span class="hljs-string">&quot;001&quot;</span>);<br><br>        <span class="hljs-comment">//遍历打印订单信息</span><br>        <span class="hljs-keyword">for</span> (Orders order : allOrders) &#123;<br>            System.out.println(order);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//测试 获取订单编号为: order001的订单中的所有商品信息</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFindOrderById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        List&lt;Product&gt; list = ordersDao.findOrderById(<span class="hljs-string">&quot;order001&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;订单编号为order001中的商品有: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (Product product : list) &#123;<br>            System.out.println(product);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【递归】-获取数组中所有组合</title>
    <link href="/2023/03/09/%E3%80%90%E9%80%92%E5%BD%92%E3%80%91-%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84%E4%B8%AD%E6%89%80%E6%9C%89%E7%BB%84%E5%90%88/"/>
    <url>/2023/03/09/%E3%80%90%E9%80%92%E5%BD%92%E3%80%91-%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84%E4%B8%AD%E6%89%80%E6%9C%89%E7%BB%84%E5%90%88/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liujunqiang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/3/9 17:10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 获取数组中有序的所有组合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testArr</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">(List&lt;String&gt; candidate, String prefix)</span>&#123;<br>        <span class="hljs-keyword">if</span>(prefix.length()!=<span class="hljs-number">0</span>)&#123;<br>            System.out.println(prefix);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;candidate.size(); i++)&#123;<br>            List&lt;String&gt; temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;String&gt;(candidate);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> (String)temp.remove(i);  <span class="hljs-comment">// 取出被删除的元素，这个元素当作一个组合用掉了</span><br>            <span class="hljs-keyword">if</span>(!<span class="hljs-string">&quot;&quot;</span>.equals(prefix))&#123;<br>                String[] split = prefix.split(<span class="hljs-string">&quot;,&quot;</span>);<br>                <span class="hljs-type">int</span> prefixInt= Integer.parseInt(split[split.length-<span class="hljs-number">1</span>]);;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">itemInt</span> <span class="hljs-operator">=</span> Integer.parseInt(item);<br>                <span class="hljs-keyword">if</span>(itemInt&lt;prefixInt) <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;&quot;</span>.equals(prefix) )&#123;<br>                DFS(temp, item);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                DFS(temp, prefix+<span class="hljs-string">&quot;,&quot;</span>+item);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] array = &#123;<span class="hljs-string">&quot;8271&quot;</span>,<span class="hljs-string">&quot;8272&quot;</span>,<span class="hljs-string">&quot;8273&quot;</span>,<span class="hljs-string">&quot;8274&quot;</span>&#125;;<br>        List&lt;String&gt; list = Arrays.asList(array);<br>        DFS(list, <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>textarea标签-控制部分内容不能编辑</title>
    <link href="/2023/02/14/textarea%E6%A0%87%E7%AD%BE-%E6%8E%A7%E5%88%B6%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9%E4%B8%8D%E8%83%BD%E7%BC%96%E8%BE%91/"/>
    <url>/2023/02/14/textarea%E6%A0%87%E7%AD%BE-%E6%8E%A7%E5%88%B6%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9%E4%B8%8D%E8%83%BD%E7%BC%96%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<h3 id="textarea标签-控制部分内容不能编辑"><a href="#textarea标签-控制部分内容不能编辑" class="headerlink" title="textarea标签-控制部分内容不能编辑"></a>textarea标签-控制部分内容不能编辑</h3><p>参考地址：<a href="https://blog.csdn.net/lfq761204/article/details/117361453">https://blog.csdn.net/lfq761204/article/details/117361453</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;禁止对文本输入框内指定字符进行修改&lt;/title&gt;<br>    &lt;script&gt;<br><br>        <span class="hljs-comment">//对textarea控件的onclick和onkeyup事件添加以下函数</span><br>        function <span class="hljs-title function_">SetSelected</span><span class="hljs-params">(obj,noEditText)</span> &#123;<br>            <span class="hljs-comment">//获取textarea对象</span><br>            <span class="hljs-keyword">var</span> textarea=document.getElementById(<span class="hljs-string">&quot;textarea&quot;</span>);<br>            <span class="hljs-comment">//获取文本框内选择文字的开始位置和结束位置</span><br>            <span class="hljs-comment">//如果未选择内容，开始位置和结束位置均为光标所在位置</span><br>            <span class="hljs-keyword">var</span> selectionStart=obj.selectionStart;<br>            <span class="hljs-keyword">var</span> selectionEnd=obj.selectionEnd;<br><span class="hljs-type">var</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> obj.innerHTML.lastIndexOf(noEditText);<br><span class="hljs-type">var</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> start+noEditText.length;<br><span class="hljs-keyword">var</span> k=window.event.keyCode;<br>console.log(k);<br><span class="hljs-keyword">if</span>((selectionStart&gt;start&amp;&amp;selectionStart&lt;=end)||(selectionEnd&gt;start&amp;&amp;selectionEnd&lt;=end))&#123;<br><span class="hljs-comment">// 如果是删除操作，使删除操作失效</span><br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">8</span>)&#123;<br>window.event.preventDefault();<br>&#125;<br>obj.selectionStart=end;<span class="hljs-comment">//将光标定位到禁止编辑内容之后</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br>        &#125;<br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;textarea id=<span class="hljs-string">&quot;textarea&quot;</span> cols=<span class="hljs-string">&quot;50&quot;</span> rows=<span class="hljs-string">&quot;5&quot;</span> onclick=<span class="hljs-string">&quot;SetSelected(this,&#x27;不可编辑&#x27;);&quot;</span> onkeydown=<span class="hljs-string">&quot;SetSelected(this,&#x27;不可编辑&#x27;);&quot;</span> &gt;河中鱼类离奇死亡,下游居民频染怪病，沿岸植物不断变异，是残留农药？还是生化攻击？不可编辑。&lt;/textarea&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拉钩高级9-项目环境部署</title>
    <link href="/2023/02/10/%E6%8B%89%E9%92%A9%E9%AB%98%E7%BA%A79-%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/02/10/%E6%8B%89%E9%92%A9%E9%AB%98%E7%BA%A79-%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>安装最新版本的docker:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">yum -y install docker-ce  -- 可能会报错，目前还没有解决这个问题<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">yum install -y docker-ce-<span class="hljs-number">19.03</span><span class="hljs-number">.9</span>-<span class="hljs-number">3.</span>el7 docker-ce-cli-<span class="hljs-number">19.03</span><span class="hljs-number">.9</span>-<span class="hljs-number">3.</span>el7 <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>环境部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【linux】解决连接外部网络问题</title>
    <link href="/2023/01/29/%E3%80%90linux%E3%80%91%E8%A7%A3%E5%86%B3%E8%BF%9E%E6%8E%A5%E5%A4%96%E9%83%A8%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/"/>
    <url>/2023/01/29/%E3%80%90linux%E3%80%91%E8%A7%A3%E5%86%B3%E8%BF%9E%E6%8E%A5%E5%A4%96%E9%83%A8%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="wget-unable-to-resolve-host-address解决方法"><a href="#wget-unable-to-resolve-host-address解决方法" class="headerlink" title="wget: unable to resolve host address解决方法"></a>wget: unable to resolve host address解决方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">vim /etc/resolv.conf<br>nameserver <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span> #google域名服务器<br>nameserver <span class="hljs-number">8.8</span><span class="hljs-number">.4</span><span class="hljs-number">.4</span> #google域名服务器<br></code></pre></td></tr></table></figure><p><strong>验证是否连接网络成功</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ping www.baodu.com<br>curl www.baidu.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【面试】需要掌握的问题</title>
    <link href="/2022/12/20/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/12/20/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="【面试】需要掌握的问题"><a href="#【面试】需要掌握的问题" class="headerlink" title="【面试】需要掌握的问题"></a>【面试】需要掌握的问题</h2><h3 id="【1】springBoot自动配置的原理"><a href="#【1】springBoot自动配置的原理" class="headerlink" title="【1】springBoot自动配置的原理"></a>【1】springBoot自动配置的原理</h3><p> 最后，我们再总结下SpringBoot自动配置的原理，主要做了以下事情： </p><ol><li>从spring.factories配置文件中加载自动配置类；</li><li>加载的自动配置类中排除掉 @EnableAutoConfiguration 注解的 exclude 属性指定的自动配置 类；</li><li>然后再用 AutoConfigurationImportFilter 接口去过滤自动配置类是否符合其标注注解（若有 标注的话） @ConditionalOnClass , @ConditionalOnBean 和 @ConditionalOnWebApplication 的条件，若都符合的话则返回匹配结果； </li><li>然后触发 AutoConfigurationImportEvent 事件，告诉 ConditionEvaluationReport 条件评 估报告器对象来分别记录符合条件和 exclude 的自动配置类。 </li><li>最后spring再将最后筛选后的自动配置类导入IOC容器中</li></ol>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【utils】-batch模式</title>
    <link href="/2022/12/13/%E5%90%8E%E7%AB%AF/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E3%80%90utils%E3%80%91-batch%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/12/13/%E5%90%8E%E7%AB%AF/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E3%80%90utils%E3%80%91-batch%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="【utils】-batch模式"><a href="#【utils】-batch模式" class="headerlink" title="【utils】-batch模式"></a>【utils】-batch模式</h2><p>参考地址：<a href="https://blog.csdn.net/weixin_50636650/article/details/121704882">https://blog.csdn.net/weixin_50636650/article/details/121704882</a></p><h3 id="1-批量新增的工具类（BatchInsertUtil）"><a href="#1-批量新增的工具类（BatchInsertUtil）" class="headerlink" title="1.批量新增的工具类（BatchInsertUtil）"></a>1.批量新增的工具类（BatchInsertUtil）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lh.utils;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.ExecutorType;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.function.BiConsumer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Mybatis 批量新增工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BatchInsertUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量新增方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list       要新增的集合</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz      Mapper类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> biConsumer 对应的单条新增方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;M&gt;        mapper类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;        结合元素类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  &lt;M, T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">batchInsert</span><span class="hljs-params">(List&lt;T&gt; list, Class&lt;M&gt; clazz, BiConsumer&lt;M, T&gt; biConsumer)</span> &#123;<br>        <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.size() == <span class="hljs-number">0</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;BatchInsertUtil batchInsert list data is null!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> SpringUtil.getBean(SqlSessionFactory.class);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(ExecutorType.BATCH);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">M</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(clazz);<br>            list.forEach(a -&gt; &#123;<br>                biConsumer.accept(mapper, a);<br>            &#125;);<br>            session.commit();<br>            session.clearCache();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            log.error(<span class="hljs-string">&quot;BatchInsertUtil batchInsert is exception！clazz=&#123;&#125;&quot;</span>, clazz.getName(), e);<br>            session.rollback();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            session.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-获取SpringBean的工具类（SpringUtil-）"><a href="#2-获取SpringBean的工具类（SpringUtil-）" class="headerlink" title="2.获取SpringBean的工具类（SpringUtil ）"></a>2.获取SpringBean的工具类（SpringUtil ）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lh.utils;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContextAware;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringUtil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-keyword">if</span> (SpringUtil.applicationContext == <span class="hljs-literal">null</span>) &#123;<br>            SpringUtil.applicationContext = applicationContext;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//获取applicationContext</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ApplicationContext <span class="hljs-title function_">getApplicationContext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> applicationContext;<br>    &#125;<br><br>    <span class="hljs-comment">//通过name获取 Bean.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> getApplicationContext().getBean(name);<br>    &#125;<br><br>    <span class="hljs-comment">//通过class获取Bean.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> getApplicationContext().getBean(clazz);<br>    &#125;<br><br>    <span class="hljs-comment">//通过name,以及Clazz返回指定的Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> getApplicationContext().getBean(name, clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-调用演示"><a href="#3-调用演示" class="headerlink" title="3.调用演示"></a>3.调用演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">atomic</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">10</span>);<br>    List&lt;CustDetail&gt; list = Arrays.asList(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustDetail</span>(<span class="hljs-string">&quot;202007130000&quot;</span> + atomic.incrementAndGet(), <span class="hljs-string">&quot;小麻花&quot;</span> + atomic.get(), <span class="hljs-string">&quot;18729872910&quot;</span> + atomic.get())<br>    );<br>    BatchInsertUtil.batchInsert(list, CustDetailMapper.class, CustDetailMapper::insert);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【测试】-jmeter工具的使用</title>
    <link href="/2022/12/01/%E6%B5%8B%E8%AF%95/%E3%80%90%E6%B5%8B%E8%AF%95%E3%80%91-jmeter%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/12/01/%E6%B5%8B%E8%AF%95/%E3%80%90%E6%B5%8B%E8%AF%95%E3%80%91-jmeter%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="【1】jmeter发送post请求"><a href="#【1】jmeter发送post请求" class="headerlink" title="【1】jmeter发送post请求"></a>【1】jmeter发送post请求</h2><p>参考地址：<a href="https://blog.csdn.net/luoxuexi2020/article/details/119459397">https://blog.csdn.net/luoxuexi2020/article/details/119459397</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">--测试计划<br>  --setUp线程组<br>  --Http请求<br>  --Http信息投管理器<br></code></pre></td></tr></table></figure><p>–Http请求</p><p>消息体数据：将json数据放进去</p><p>–Http信息投管理器</p><p>添加信息头配置：Content-Type  application&#x2F;json</p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【utils】-身份证工具类</title>
    <link href="/2022/12/01/%E5%90%8E%E7%AB%AF/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E3%80%90utils%E3%80%91-%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2022/12/01/%E5%90%8E%E7%AB%AF/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E3%80%90utils%E3%80%91-%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="【utils】-身份证工具类"><a href="#【utils】-身份证工具类" class="headerlink" title="【utils】-身份证工具类"></a>【utils】-身份证工具类</h3><p>参考地址：<a href="https://blog.csdn.net/weixin_43989102/article/details/125839610">https://blog.csdn.net/weixin_43989102/article/details/125839610</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 身份证工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auth</span> llp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/7/7 16:13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IdCardNumberUtils</span> &#123;<br>    <span class="hljs-comment">/** 检验码：余数作为索引，值代表所替换的值 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] CHECK_INDEX = &#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>&#125;;<br>    <span class="hljs-comment">/** 居民身份证 正则表达式 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SECOND_ID_CARD_REGULAR_EXP</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$|(^\\d&#123;15&#125;$))&quot;</span>;<br>    <span class="hljs-comment">/** 居民身份证 年份所在位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ID_CARD_YEAR_INDEX</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><br>    <span class="hljs-comment">/** 第一代居民身份证长度 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">FIRST_ID_CARD_LENGTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>    <span class="hljs-comment">/** 第一代居民身份证 年份值 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FIRST_ID_CARD_YEAR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;19&quot;</span>;<br><br>    <span class="hljs-comment">/** 第二代居民身份证长度 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SECOND_ID_CARD_LENGTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>    <span class="hljs-comment">/** 第二代居民身份证 校验码的模 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SECOND_ID_CARD_CHECK_MOD</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br><br>    <span class="hljs-comment">/** 性别表示的值 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MALE_SEX_INT</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MALE_SEX_STRING</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;男&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">FEMALE_SEX_INT</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FEMALE_SEX_STRING</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;女&quot;</span>;<br>    <span class="hljs-comment">/** 性别 map 中的 key 值 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SEX_BY_INT_MAP_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sex_by_int&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SEX_BY_STRING_MAP_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sex_by_string&quot;</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@desc</span> 通过身份证获取年龄</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@auth</span> llp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2022/7/11 17:09</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> idCard 身份证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAgeFromIdCard</span><span class="hljs-params">(String idCard)</span>&#123;<br>        <span class="hljs-keyword">if</span> (!isIdCard(idCard))&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 获取身份证的出生年月日串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">birth</span> <span class="hljs-operator">=</span> getIdCardBirthDayStr(idCard);<br>        <span class="hljs-comment">// 获取年月日</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> Integer.parseInt(birth.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> Integer.parseInt(birth.substring(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> Integer.parseInt(birth.substring(<span class="hljs-number">6</span>, <span class="hljs-number">8</span>));<br>        <span class="hljs-comment">// 计算年龄</span><br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">cal</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> cal.get(Calendar.YEAR) - year;<br>        <span class="hljs-comment">// 周岁计算</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">monthLtFlag</span> <span class="hljs-operator">=</span> cal.get(Calendar.MONTH)+<span class="hljs-number">1</span> &lt; month;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">monthDayFlag</span> <span class="hljs-operator">=</span> cal.get(Calendar.MONTH)+<span class="hljs-number">1</span> == month &amp;&amp; cal.get(Calendar.DATE) &lt; day;<br>        <span class="hljs-keyword">if</span> ( monthLtFlag || monthDayFlag)&#123;<br>            age--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@desc</span> 通过身份证获取出生日期</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@auth</span> llp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2022/7/15 16:39</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> idCard 身份证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getBirthDayFromIdCard</span><span class="hljs-params">(String idCard)</span>&#123;<br>        <span class="hljs-keyword">if</span> (!isIdCard(idCard))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;idCard error!&quot;</span>;<br>        &#125;<br>        <span class="hljs-comment">// 获取身份证的出生年月日串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">birth</span> <span class="hljs-operator">=</span> getIdCardBirthDayStr(idCard);<br>        <span class="hljs-comment">// 获取年月日</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> Integer.parseInt(birth.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> Integer.parseInt(birth.substring(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> Integer.parseInt(birth.substring(<span class="hljs-number">6</span>, <span class="hljs-number">8</span>));<br>        <span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;-&quot;</span> + month + <span class="hljs-string">&quot;-&quot;</span> + day;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@desc</span> 通过身份证获取性别</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@auth</span> llp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2022/7/15 16:10</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> idCard 身份证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getSexFromIdCard</span><span class="hljs-params">(String idCard)</span>&#123;<br>        <span class="hljs-keyword">if</span> (!isIdCard(idCard))&#123;<br>            <span class="hljs-keyword">return</span> Collections.emptyMap();<br>        &#125;<br>        Map&lt;String, Object&gt; sexMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 默认值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sexInt</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sexStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;未知&quot;</span>;<br>        <span class="hljs-comment">// 15 位身份证</span><br>        <span class="hljs-keyword">if</span> (idCard.length() == FIRST_ID_CARD_LENGTH)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> idCard.substring(<span class="hljs-number">14</span>, <span class="hljs-number">15</span>);<br>            <span class="hljs-comment">// 偶数表示女性，奇数表示男性</span><br>            <span class="hljs-keyword">if</span> (Integer.parseInt(sex) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                sexInt = FEMALE_SEX_INT;<br>                sexStr = FEMALE_SEX_STRING;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                sexInt = MALE_SEX_INT;<br>                sexStr = MALE_SEX_STRING;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 18 位身份证</span><br>        <span class="hljs-keyword">if</span> (idCard.length() == SECOND_ID_CARD_LENGTH)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> idCard.substring(<span class="hljs-number">16</span>, <span class="hljs-number">17</span>);<br>            <span class="hljs-comment">// 偶数表示女性，奇数表示男性</span><br>            <span class="hljs-keyword">if</span> (Integer.parseInt(sex) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                sexInt = FEMALE_SEX_INT;<br>                sexStr = FEMALE_SEX_STRING;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                sexInt = MALE_SEX_INT;<br>                sexStr = MALE_SEX_STRING;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 结果</span><br>        sexMap.put(SEX_BY_INT_MAP_KEY, sexInt);<br>        sexMap.put(SEX_BY_STRING_MAP_KEY, sexStr);<br><br>        <span class="hljs-keyword">return</span> sexMap;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@desc</span> 检测是否为身份证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@auth</span> llp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2022/7/11 15:32</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> idCard 身份证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> boolean</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isIdCard</span><span class="hljs-params">(String idCard)</span>&#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(idCard))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">idCardBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(idCard);<br>        <span class="hljs-comment">// 正则表达式</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">matches</span> <span class="hljs-operator">=</span> idCard.matches(SECOND_ID_CARD_REGULAR_EXP);<br>        <span class="hljs-comment">// 第二代身份证的验证</span><br>        <span class="hljs-keyword">if</span> (matches &amp;&amp; idCardBuilder.length() == SECOND_ID_CARD_LENGTH)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> getIdCardCheckIndex(idCardBuilder);<br>            <span class="hljs-comment">// 获取传入身份证的检验码</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">check</span> <span class="hljs-operator">=</span> String.valueOf(idCardBuilder.charAt(idCardBuilder.length()-<span class="hljs-number">1</span>));<br>            <span class="hljs-comment">// 检验码校验</span><br>            <span class="hljs-keyword">return</span> StringUtils.equalsIgnoreCase(CHECK_INDEX[index], check);<br>        &#125;<br>        <span class="hljs-keyword">return</span> matches;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@desc</span> 将 15位身份证号码转为 18位身份证号码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@auth</span> llp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2022/7/11 15:13</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> idCard 身份证号码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">idCardNumber15To18</span><span class="hljs-params">(String idCard)</span>&#123;<br>        <span class="hljs-keyword">if</span> (!isIdCard(idCard) || idCard.length() != FIRST_ID_CARD_LENGTH)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;idCard error!&quot;</span>;<br>        &#125;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">idCardBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(idCard);<br>        <span class="hljs-comment">// 在 第6位后插入年份</span><br>        idCardBuilder.insert(ID_CARD_YEAR_INDEX, FIRST_ID_CARD_YEAR);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span>getIdCardCheckIndex(idCardBuilder);<br>        <span class="hljs-comment">// 根据余数在校验码数组里取值</span><br>        idCardBuilder.append(CHECK_INDEX[index]);<br>        <span class="hljs-keyword">return</span> idCardBuilder.toString();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@desc</span> 将 18位身份证号码转为 15位身份证号码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@auth</span> llp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2022/7/15 16:40</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> idCard 身份证号码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">idCardNumber18To15</span><span class="hljs-params">(String idCard)</span>&#123;<br>        <span class="hljs-keyword">if</span> (!isIdCard(idCard) || idCard.length() != SECOND_ID_CARD_LENGTH)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;idCard error!&quot;</span>;<br>        &#125;<br>        <span class="hljs-comment">// 去掉18位身份证的年份前两位 去掉校验码</span><br>        <span class="hljs-keyword">return</span> idCard.substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)+idCard.substring(<span class="hljs-number">8</span>, <span class="hljs-number">17</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@desc</span> 计算出校验码所在校验码数组的下标值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@auth</span> llp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2022/7/13 9:51</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> idCardBuilder 身份证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> int 检验码下标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIdCardCheckIndex</span><span class="hljs-params">(StringBuilder idCardBuilder)</span>&#123;<br>        <span class="hljs-comment">// 判断传入的是17位还是18位身份证号</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> idCardBuilder.length() == SECOND_ID_CARD_LENGTH ? idCardBuilder.length()-<span class="hljs-number">1</span> : idCardBuilder.length();<br>        <span class="hljs-comment">// 计算出校验码</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// length=17, i=0、2、3...16</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            <span class="hljs-comment">// 前17位数字</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">numVal</span> <span class="hljs-operator">=</span> Integer.parseInt(String.valueOf(idCardBuilder.charAt(i)));<br>            <span class="hljs-type">int</span> <span class="hljs-variable">numMultiple</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.pow(<span class="hljs-number">2</span>, length - i) % SECOND_ID_CARD_CHECK_MOD);<br>            sum += (numVal * numMultiple);<br>        &#125;<br>        <span class="hljs-comment">// 总和取模11</span><br>        <span class="hljs-keyword">return</span> sum % SECOND_ID_CARD_CHECK_MOD;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@desc</span> 通过身份证获取出生日期的 str 串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@auth</span> llp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2022/7/15 16:37</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> idCard 身份证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getIdCardBirthDayStr</span><span class="hljs-params">(String idCard)</span>&#123;<br>        <span class="hljs-comment">// 获取身份证的出生年月日串</span><br>        <span class="hljs-keyword">if</span> (idCard.length() == FIRST_ID_CARD_LENGTH)&#123;<br>            <span class="hljs-keyword">return</span> FIRST_ID_CARD_YEAR + idCard.substring(ID_CARD_YEAR_INDEX, <span class="hljs-number">12</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (idCard.length() == SECOND_ID_CARD_LENGTH)&#123;<br>            <span class="hljs-keyword">return</span> idCard.substring(ID_CARD_YEAR_INDEX, <span class="hljs-number">14</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> StringUtils.EMPTY;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【日期】-工具类</title>
    <link href="/2022/12/01/%E5%90%8E%E7%AB%AF/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E3%80%90%E6%97%A5%E6%9C%9F%E3%80%91-%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2022/12/01/%E5%90%8E%E7%AB%AF/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E3%80%90%E6%97%A5%E6%9C%9F%E3%80%91-%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="【日期】-工具类"><a href="#【日期】-工具类" class="headerlink" title="【日期】-工具类"></a>【日期】-工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lagou.edu.common.util;<br><br><span class="hljs-keyword">import</span> java.text.DateFormat;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liujunqiang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/12/1 10:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateUtils</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验日期是否是符合指定格式的合法日期</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     *    此方法是为了解决接口入参的日期格式校验，我们需要接口入参是日期是一个合法的而且是指定格式的日期</span><br><span class="hljs-comment">     * &lt;/p&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> date 日期</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length 日期的长度,必须是date参数的长度，这样可以兼容多种格式的校验</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> format 日期的格式，需要与日期格式保持一致</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLegalDate</span><span class="hljs-params">(String date,<span class="hljs-type">int</span> length,String format)</span>&#123;<br>        <span class="hljs-keyword">if</span>(date == <span class="hljs-literal">null</span> || date.length() != length)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">DateFormat</span> <span class="hljs-variable">formatter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(format);<br>            <span class="hljs-comment">// 设置lenient为false. 否则SimpleDateFormat会比较宽松地验证日期，比如2018-02-29会被接受，并转换成2018-03-01</span><br>            <span class="hljs-comment">//&quot;2019022 &quot;|&quot;201902 2&quot; 这两种也能被Date转化，所以最后需要用date.equals(formatter.format(date1));</span><br>            formatter.setLenient(<span class="hljs-literal">false</span>);<br>            <span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> formatter.parse(date);<br>            log.info(<span class="hljs-string">&quot;入参：&quot;</span>+date+<span class="hljs-string">&quot;;转换后日期：&quot;</span>+formatter.format(date1));<br>            <span class="hljs-keyword">return</span> date.equals(formatter.format(date1));<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            log.info(e.getMessage(),e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2018-02- 9&quot;</span>;<br><span class="hljs-comment">// 调用isLegalDate方法的时候，length参数一定要是要校验日期的length</span><br>System.out.println(isLegalDate(date,date.length(),<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-comment">//如下面的示例，若length传入的是date的长度，则以下这种日期格式也能用isLegalDate方法进行校验</span><br>date = <span class="hljs-string">&quot;2018年02月09日&quot;</span>;<br>System.out.println(isLegalDate(date,date.length(),<span class="hljs-string">&quot;yyyy&#x27;年&#x27;MM&#x27;月&#x27;dd&#x27;日&#x27;&quot;</span>));<span class="hljs-comment">//true</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【springboot】-返回对象封装</title>
    <link href="/2022/11/24/%E5%90%8E%E7%AB%AF/springBoot/%E3%80%90springboot%E3%80%91-/"/>
    <url>/2022/11/24/%E5%90%8E%E7%AB%AF/springBoot/%E3%80%90springboot%E3%80%91-/</url>
    
    <content type="html"><![CDATA[<p>编写主响应类ResponseDTO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDTO</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1:成功</span><br><span class="hljs-comment">     * 1002：服务器内容错误</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> state;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> T content;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResponseDTO</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResponseDTO</span><span class="hljs-params">(<span class="hljs-type">int</span> state, String message, T content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>        <span class="hljs-built_in">this</span>.message = message;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">response</span><span class="hljs-params">(<span class="hljs-type">int</span> state,String message)</span>&#123;<br>        <span class="hljs-keyword">return</span> response(state,message,<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(T content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">response</span><span class="hljs-params">(<span class="hljs-type">int</span> state, String message, T content)</span>&#123;<br>        <span class="hljs-type">ResponseDTO</span> <span class="hljs-variable">responseDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseDTO</span>();<br>        responseDTO.setState(state);<br>        responseDTO.setContent(content);<br>        responseDTO.setMessage(message);<br>        <span class="hljs-keyword">return</span> responseDTO;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T content)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,content);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">ofError</span><span class="hljs-params">(<span class="hljs-type">int</span> state,String message,T content)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(state,message,content);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">ofError</span><span class="hljs-params">(<span class="hljs-type">int</span> state,String message)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(state,message,<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">ofError</span><span class="hljs-params">(String message)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(<span class="hljs-number">1002</span>,message,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建错误状态定义类"><a href="#创建错误状态定义类" class="headerlink" title="创建错误状态定义类"></a>创建错误状态定义类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><p>路径为resources文件夹下的路径</p><hr><h3 id="【2】获取服务器上的文件流"><a href="#【2】获取服务器上的文件流" class="headerlink" title="【2】获取服务器上的文件流"></a>【2】获取服务器上的文件流</h3>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【springboot】-获取资源对象</title>
    <link href="/2022/11/24/%E5%90%8E%E7%AB%AF/springBoot/%E3%80%90springboot%E3%80%91-%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/11/24/%E5%90%8E%E7%AB%AF/springBoot/%E3%80%90springboot%E3%80%91-%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="【1】获取项目中的文件流"><a href="#【1】获取项目中的文件流" class="headerlink" title="【1】获取项目中的文件流"></a>【1】获取项目中的文件流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">InputStream in=<span class="hljs-built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;com/liu/template/XXX.xls&quot;</span>);<br></code></pre></td></tr></table></figure><p>路径为resources文件夹下的路径</p><hr><h3 id="【2】获取服务器上的文件流"><a href="#【2】获取服务器上的文件流" class="headerlink" title="【2】获取服务器上的文件流"></a>【2】获取服务器上的文件流</h3>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【springboot】-返回对象封装</title>
    <link href="/2022/11/24/%E5%90%8E%E7%AB%AF/springBoot/%E3%80%90springboot%E3%80%91-%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E5%B0%81%E8%A3%85/"/>
    <url>/2022/11/24/%E5%90%8E%E7%AB%AF/springBoot/%E3%80%90springboot%E3%80%91-%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>编写主响应类ResponseDTO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDTO</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1:成功</span><br><span class="hljs-comment">     * 1002：服务器内容错误</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> state;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> T content;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResponseDTO</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResponseDTO</span><span class="hljs-params">(<span class="hljs-type">int</span> state, String message, T content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>        <span class="hljs-built_in">this</span>.message = message;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">response</span><span class="hljs-params">(<span class="hljs-type">int</span> state,String message)</span>&#123;<br>        <span class="hljs-keyword">return</span> response(state,message,<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(T content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">response</span><span class="hljs-params">(<span class="hljs-type">int</span> state, String message, T content)</span>&#123;<br>        <span class="hljs-type">ResponseDTO</span> <span class="hljs-variable">responseDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseDTO</span>();<br>        responseDTO.setState(state);<br>        responseDTO.setContent(content);<br>        responseDTO.setMessage(message);<br>        <span class="hljs-keyword">return</span> responseDTO;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T content)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,content);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">ofError</span><span class="hljs-params">(<span class="hljs-type">int</span> state,String message,T content)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(state,message,content);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">ofError</span><span class="hljs-params">(<span class="hljs-type">int</span> state,String message)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(state,message,<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">ofError</span><span class="hljs-params">(String message)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(<span class="hljs-number">1002</span>,message,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建错误状态定义类"><a href="#创建错误状态定义类" class="headerlink" title="创建错误状态定义类"></a>创建错误状态定义类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><p>路径为resources文件夹下的路径</p><hr><h3 id="【2】获取服务器上的文件流"><a href="#【2】获取服务器上的文件流" class="headerlink" title="【2】获取服务器上的文件流"></a>【2】获取服务器上的文件流</h3>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【GitHub】配置SSH-Key</title>
    <link href="/2022/11/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/github/%E3%80%90GitHub%E3%80%91%E9%85%8D%E7%BD%AESSH-Key/"/>
    <url>/2022/11/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/github/%E3%80%90GitHub%E3%80%91%E9%85%8D%E7%BD%AESSH-Key/</url>
    
    <content type="html"><![CDATA[<h2 id="【GitHub】配置SSH-Key"><a href="#【GitHub】配置SSH-Key" class="headerlink" title="【GitHub】配置SSH-Key"></a>【GitHub】配置SSH-Key</h2><p>参考文章：<a href="https://www.jb51.net/article/241929.htm">https://www.jb51.net/article/241929.htm</a></p><h3 id="【1】设置git的user-name和email"><a href="#【1】设置git的user-name和email" class="headerlink" title="【1】设置git的user name和email"></a>【1】设置git的user name和email</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">git config --global user.name <span class="hljs-string">&quot;xuebaqiang&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;2836158915@qq.com&quot;</span><br></code></pre></td></tr></table></figure><p> 说明：git config –list 查看当前Git环境所有配置，还可以配置一些命令别名之类的。</p><hr><h3 id="【2】检查是否存在SSH-Key"><a href="#【2】检查是否存在SSH-Key" class="headerlink" title="【2】检查是否存在SSH Key"></a>【2】检查是否存在SSH Key</h3><p>查看C:\Users\28361.ssh目录下是否存在 id_rsa 和 id_rsa.pub文件 </p><p>如果有说明存在SSH key，否则生成SSH key;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ssh-keygen -t rsa -C <span class="hljs-string">&quot;2836158915@qq.com&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="【3】获取SSH-Key"><a href="#【3】获取SSH-Key" class="headerlink" title="【3】获取SSH Key"></a>【3】获取SSH Key</h3><p>进入C:\Users\28361.ssh目录；</p><p>id_rsa.pub文件中的内容就是生成的SSH key;</p><hr><h3 id="【4】GitHub添加SSH-Key"><a href="#【4】GitHub添加SSH-Key" class="headerlink" title="【4】GitHub添加SSH Key"></a>【4】GitHub添加SSH Key</h3><p> GitHub点击用户头像，选择setting ;</p><p> 新建一个SSH Key ;</p><p> 取个名字，把之前拷贝的秘钥复制进去，添加就好啦。 </p><hr><h3 id="【5】验证和修改"><a href="#【5】验证和修改" class="headerlink" title="【5】验证和修改"></a>【5】验证和修改</h3><p> 测试是否成功配置SSH Key </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ssh -T git<span class="hljs-meta">@github</span>.com<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;运行结果出现类似如下<br>Hi xiangshuo1992! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>可能出现的问题：<a href="https://www.cnblogs.com/smh2015/p/11444415.html">GitHub 无法上传 fatal: Authentication failed for ‘h</a></p><p>需要还需要配置一个认证</p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【拉钩高级】9-1在线教育项目开发实战和解决方案</title>
    <link href="/2022/11/22/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%A4%A7%E5%9E%8B%E4%BA%92%E8%81%94%E7%BD%91%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E5%92%8C%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%88%E4%B8%80%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E9%AB%98%E7%BA%A7%E3%80%919-1%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2022/11/22/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%A4%A7%E5%9E%8B%E4%BA%92%E8%81%94%E7%BD%91%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E5%92%8C%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%88%E4%B8%80%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E9%AB%98%E7%BA%A7%E3%80%919-1%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="拉勾在线教育项目实战"><a href="#拉勾在线教育项目实战" class="headerlink" title="拉勾在线教育项目实战"></a>拉勾在线教育项目实战</h1><p>​项目实战目的是将之前所学的技术进行回顾和综合应用。</p><p>​模块一：功能实现</p><ol><li>项目介绍：项目背景，主要功能，项目特点。</li><li>需求分析：详细介绍平台软件实现的功能。</li><li>系统设计：模块划分，系统架构，技术选型，开发规约。</li><li>项目开发：实现模块的功能，典型场景（单点登录，秒杀，权限管理）的解决方案</li></ol><p>​模块二：部署实施</p><ol><li>项目测试：单体测试，集成测试。</li><li>部署实施：容器化部署，SkyWalking，ELK日志平台。</li></ol><h2 id="第一部分-项目介绍"><a href="#第一部分-项目介绍" class="headerlink" title="第一部分 项目介绍"></a>第一部分 项目介绍</h2><h4 id="第1节-项目背景"><a href="#第1节-项目背景" class="headerlink" title="第1节 项目背景"></a>第1节 项目背景</h4><p>​拉勾教育成立之初专注于技术专栏课的研发和推广,成立这段时间已经上线了一大批优秀的专栏课程视频.但是专栏课程针对于大家某项技能的提升有很大的帮助,如果想要进行整体技术的提升,就需要系统性的学习.因此,拉勾教育推出了训练营课程，训练营课程会包含很多技术点，因此课时和内容比专栏课要多很多，我们也称之为大课.</p><p>​增加了训练营大课业务后，我们的拉勾教育在线平台，也在原有专栏课业务平台基础之上进行了功能扩展和升级。但是随着业务的不断增长和用户的不断增多.现有的系统也遇到了些问题.两个业务的用户和数据全部混杂在一起不利于管理和分析.专栏课的促销活动,秒杀等业务甚至已经影响了训练营课程的关键业务功能.因此需要将现有的平台进行业务拆分，拆分成专栏课在线教育平台和训练营在线教育平台.我们的项目实战就是专栏课在线教育平台,以分布式微服务架构对专栏课业务进行拆分和重构.</p><h4 id="第2节-主要功能"><a href="#第2节-主要功能" class="headerlink" title="第2节 主要功能"></a>第2节 主要功能</h4><p>​专栏课在线教育平台,主要功能包括专栏课的的选购以及在线点播,课程评论等,拥有后台管理功能,可以对课程的课时,详情等内容就行编辑,以及对系统用户的权限进行分配和撤销.平台涵盖了目前互联网应用面临的绝大部分热门应用场景.</p><p>​典型场景：</p><ol><li><p>单点登录：一次登录，服务之间的调用不再受限</p></li><li><p>课程秒杀：具备处理高并发的能力</p></li><li><p>三方支付：允许使用第三发支付平台支付。（微信，支付宝）</p></li><li><p>消息推送：异步方式将课程上线的信息推送给已经登录的用户和未登录的用户</p></li><li><p>视频点播功能：随时随地，都可以进行观看学习。</p></li><li><p>权限管理：RBAC，保证平台的安全性</p></li><li><p>分布式事务：Seata</p><p>。。。</p></li></ol><h4 id="第3节-项目特点"><a href="#第3节-项目特点" class="headerlink" title="第3节 项目特点"></a>第3节 项目特点</h4><p>​拉勾在线教育平台的显著特点包括高用户量,高数据量,高并发,高可用以及可扩展.</p><p>​高用户量：千万级别</p><p>​高数据量：亿级别</p><p>​高并发量：处理万级别的并发</p><p>​高可用：以分布式微服务的方式开发，集群化方式部署</p><p>​可扩展：性能和功能</p><p>​互联网应用。</p><hr><h2 id="第二部分-需求分析"><a href="#第二部分-需求分析" class="headerlink" title="第二部分 需求分析"></a>第二部分 需求分析</h2><p>​专栏课在线教育平台的研发过程由拉勾教育的研发团队与拉勾网一线的产品，开发，运维等全程共同参与。在项目立项之初，拉勾教育的研发团队与现有平台的产品经理进行了深入的沟通与交流，再经过精心的打磨之后，形成一套详细的需求文档。</p><p>前台用户需求文档：详见 <a href="%E6%96%87%E6%A1%A3/01%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3/%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E%E4%B9%A6--%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E7%94%A8%E6%88%B7%E5%B9%B3%E5%8F%B0V1.0.pdf">需求说明书–拉勾教育用户平台V1.0.pdf</a> </p><p>​主要功能：</p><pre><code class="hljs">- 广告的展示（顶部广告，右边栏广告）- 课程列表的展示（所有的课程列表，已购课程的列表）- 课程详情展示（基本信息，课程消息介绍，目录，评论）- 课程扫码购买- 视频点播- 登录（手机号+验证码，手机号+密码，微信扫码）- 修改信息（头像，昵称，密码）- 微信的绑定和解除绑定- 消息列表</code></pre><p>后台管理需求文档：详见  <a href="%E6%96%87%E6%A1%A3/01%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3/%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E%E4%B9%A6--%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0V1.0.pdf">需求说明书–拉勾教育管理后台V1.0.pdf</a> </p><p>​主要功能：</p><ul><li>角色的管理（新增，编辑和列表展示）</li><li>菜单项的管理（新增，编辑和列表展示）</li><li>资源的管理（新增，编辑，列表展示）</li><li>角色管理菜单项</li><li>角色关联资源</li><li>新增课程</li><li>配置课程的章节和课时（新增和编辑章节，新增和编辑课时）</li><li>章节和课时的状态修改</li><li>课时视频上传</li><li>课程列表展示</li><li>用户列表展示</li><li>用户关联角色</li><li>广告位的管理（新增，编辑和列表展示）</li><li>广告的管理（新增，编辑，列表展示）</li></ul><hr><h2 id="第三部分-系统设计"><a href="#第三部分-系统设计" class="headerlink" title="第三部分 系统设计"></a>第三部分 系统设计</h2><p>系统设计可以分为功能设计和数据库设计。</p><p>​功能设计： 详见  <a href="%E6%96%87%E6%A1%A3/02%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6.pdf">系统设计说明书.pdf</a> </p><p>​数据库设计：详见  <a href="%E6%96%87%E6%A1%A3/02%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3.pdf">数据库设计文档.pdf</a> </p><p>​<strong>热门场景的解决方案：</strong></p><ol><li>第三方支付解决方案：详见  <a href="%E6%96%87%E6%A1%A3/04%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.pdf">第三方支付解决方案.pdf</a> </li><li>秒杀场景解决方案：详见   <a href="%E6%96%87%E6%A1%A3/04%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%A7%92%E6%9D%80%E5%9C%BA%E6%99%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.pdf">秒杀场景解决方案.pdf</a> </li><li>单点登录+第三方登录解决方案：详见   <a href="%E6%96%87%E6%A1%A3/04%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95+%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.pdf">单点登录+第三方登录解决方案.pdf</a> </li><li>服务推送解决方案：详见   <a href="%E6%96%87%E6%A1%A3/04%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%9C%8D%E5%8A%A1%E6%8E%A8%E9%80%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.pdf">服务推送解决方案.pdf</a> </li><li>后台权限管理解决方案：详见   <a href="%E6%96%87%E6%A1%A3/04%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%90%8E%E5%8F%B0%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.pdf">后台权限管理解决方案.pdf</a> </li><li>视频点播解决方案 ：详见   <a href="%E6%96%87%E6%A1%A3/04%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E8%A7%86%E9%A2%91%E7%82%B9%E6%92%AD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.pdf">视频点播解决方案.pdf</a> </li><li>分布式事务解决方案：详见   <a href="%E6%96%87%E6%A1%A3/04%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.pdf">分布式事务解决方案.pdf</a></li></ol><hr><h2 id="第四部分-系统开发"><a href="#第四部分-系统开发" class="headerlink" title="第四部分 系统开发"></a>第四部分 系统开发</h2><h3 id="搭建系统架构"><a href="#搭建系统架构" class="headerlink" title="搭建系统架构"></a>搭建系统架构</h3><h4 id="1-系统架构图："><a href="#1-系统架构图：" class="headerlink" title="1. 系统架构图："></a>1. 系统架构图：</h4><p>​后台架构，需要创建的服务</p><p><img src="/2022/11/22/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%A4%A7%E5%9E%8B%E4%BA%92%E8%81%94%E7%BD%91%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E5%92%8C%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%88%E4%B8%80%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E9%AB%98%E7%BA%A7%E3%80%919-1%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20200803211129482.png" alt="image-20200803211129482"></p><p>​服务间的关系</p><p><img src="/2022/11/22/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%A4%A7%E5%9E%8B%E4%BA%92%E8%81%94%E7%BD%91%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E5%92%8C%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%88%E4%B8%80%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E9%AB%98%E7%BA%A7%E3%80%919-1%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20200820104415382.png" alt="image-20200820104415382"></p><h4 id="2-工具类模块"><a href="#2-工具类模块" class="headerlink" title="2. 工具类模块"></a>2. 工具类模块</h4><p>​创建项目edu-common，作为存放工具类的项目，</p><p>​添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​封装拷贝属性的工具类：ConverUtil</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConverUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将原对象的属性值，拷贝到目标对象对应的属性中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> source   原对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target   目标对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;S&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>         属性拷贝完成的目标对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;S,T&gt; T <span class="hljs-title function_">convert</span><span class="hljs-params">(S source,T target)</span>&#123;<br>        <span class="hljs-keyword">if</span>(source == <span class="hljs-literal">null</span> || target == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">BeanCopier</span> <span class="hljs-variable">copier</span> <span class="hljs-operator">=</span> BeanCopier.create(source.getClass(),target.getClass(),<span class="hljs-literal">false</span>);<br>        <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> target;<br>        copier.copy(source,result,<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;S,T&gt; T <span class="hljs-title function_">convert</span><span class="hljs-params">(S source, Class&lt;T&gt; target)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> convert(source,target.newInstance());<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*拷贝列表</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;S,T&gt; List&lt;T&gt; <span class="hljs-title function_">convertList</span><span class="hljs-params">(List&lt;S&gt; source, Class&lt;T&gt; target)</span>&#123;<br>        <span class="hljs-keyword">if</span>(source == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> source.stream().map(item -&gt; &#123;<br>            <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                result = target.newInstance();<br>                convert(item,result);<br>            &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;).collect(Collectors.toList());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>封装返回结果对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDTO</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1:成功</span><br><span class="hljs-comment">     * 1002：服务器内容错误</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> state;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> T content;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResponseDTO</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResponseDTO</span><span class="hljs-params">(<span class="hljs-type">int</span> state, String message, T content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>        <span class="hljs-built_in">this</span>.message = message;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">response</span><span class="hljs-params">(<span class="hljs-type">int</span> state,String message)</span>&#123;<br>        <span class="hljs-keyword">return</span> response(state,message,<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">response</span><span class="hljs-params">(<span class="hljs-type">int</span> state,String message,T content)</span>&#123;<br>        <span class="hljs-type">ResponseDTO</span> <span class="hljs-variable">responseDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseDTO</span>();<br>        responseDTO.setState(state);<br>        responseDTO.setContent(content);<br>        responseDTO.setMessage(message);<br>        <span class="hljs-keyword">return</span> responseDTO;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T content)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,content);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">ofError</span><span class="hljs-params">(<span class="hljs-type">int</span> state,String message,T content)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(state,message,content);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">ofError</span><span class="hljs-params">(<span class="hljs-type">int</span> state,String message)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(state,message,<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseDTO&lt;T&gt; <span class="hljs-title function_">ofError</span><span class="hljs-params">(String message)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseDTO.response(<span class="hljs-number">1002</span>,message,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-依赖统一管理："><a href="#3-依赖统一管理：" class="headerlink" title="3.依赖统一管理："></a>3.依赖统一管理：</h4><p>​创建项目edu-bow：</p><p>​编辑pom文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--springcloud--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Greenwich.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-搭建注册中心："><a href="#4-搭建注册中心：" class="headerlink" title="4. 搭建注册中心："></a>4. 搭建注册中心：</h4><p>​创建项目edu-eureka-boot，</p><p>​编辑pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>创建application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8761</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-eureka-boot</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></code></pre></td></tr></table></figure><p>创建启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaServer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaServer.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-搭建配置中心"><a href="#5-搭建配置中心" class="headerlink" title="5. 搭建配置中心"></a>5. 搭建配置中心</h4><p>创建git仓库lagou-edu-repo，新建文件lagou-edu-ad-dev.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql:///edu_ad?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">admin</span><br></code></pre></td></tr></table></figure><p>创建项目edu-config-boot</p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml文件中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8090</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-config-boot</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">server:</span><br>        <span class="hljs-attr">git:</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">uri</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">用户名</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-string">密码</span><br>          <span class="hljs-attr">default-label:</span> <span class="hljs-string">分支</span><br></code></pre></td></tr></table></figure><p>新建启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableConfigServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LagouConfigServer</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(LagouConfigServer.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="广告模块"><a href="#广告模块" class="headerlink" title="广告模块"></a>广告模块</h3><p>功能设计：详见   <a href="%E6%96%87%E6%A1%A3/02%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6.pdf">系统设计说明书.pdf</a> </p><p>数据库设计：详见   <a href="%E6%96%87%E6%A1%A3/02%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3.pdf">数据库设计文档.pdf</a> </p><h4 id="1-创建数据库，新建表"><a href="#1-创建数据库，新建表" class="headerlink" title="1. 创建数据库，新建表"></a>1. 创建数据库，新建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database edu_ad;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for promotion_space</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `promotion_space`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `promotion_space` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;名称&#x27;</span>,<br>  `spaceKey` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;广告位key&#x27;</span>,<br>  `createTime` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `updateTime` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `isDel` <span class="hljs-type">int</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE,<br>  KEY `promotion_space_key_isDel` (`spaceKey`,`isDel`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">172</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 ROW_FORMAT<span class="hljs-operator">=</span>COMPACT;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for promotion_ad</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `promotion_ad`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `promotion_ad` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;广告名&#x27;</span>,<br>  `spaceId` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;广告位id&#x27;</span>,<br>  `keyword` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;精确搜索关键词&#x27;</span>,<br>  `htmlContent` text COMMENT <span class="hljs-string">&#x27;静态广告的内容&#x27;</span>,<br>  `text` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;文字&#x27;</span>,<br>  `link` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;链接&#x27;</span>,<br>  `startTime` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;开始时间&#x27;</span>,<br>  `endTime` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;结束时间&#x27;</span>,<br>  `createTime` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `updateTime` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `status` <span class="hljs-type">int</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  `priority` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;优先级&#x27;</span>,<br>  `img` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE,<br>  KEY `promotion_ad_SEG` (`spaceId`,`startTime`,`endTime`,`status`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1090</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 ROW_FORMAT<span class="hljs-operator">=</span>COMPACT;<br><br><br></code></pre></td></tr></table></figure><h4 id="2-创建项目，引入依赖"><a href="#2-创建项目，引入依赖" class="headerlink" title="2. 创建项目，引入依赖"></a>2. 创建项目，引入依赖</h4><p>​创建项目edu-ad-boot，添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​以及两个子项目edu-ad-boot-api和edu-ad-boot-impl。添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-ad-boot-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-代码自动生成"><a href="#3-代码自动生成" class="headerlink" title="3. 代码自动生成"></a>3. 代码自动生成</h4><p>​创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generator</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 读取控制台内容</span><br><span class="hljs-comment">     * &lt;/p&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">scanner</span><span class="hljs-params">(String tip)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">help</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        help.append(<span class="hljs-string">&quot;请输入&quot;</span> + tip + <span class="hljs-string">&quot;：&quot;</span>);<br>        System.out.println(help.toString());<br>        <span class="hljs-keyword">if</span> (scanner.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">ipt</span> <span class="hljs-operator">=</span> scanner.next();<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(ipt)) &#123;<br>                <span class="hljs-keyword">return</span> ipt;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusException</span>(<span class="hljs-string">&quot;请输入正确的&quot;</span> + tip + <span class="hljs-string">&quot;！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 代码生成器</span><br>        <span class="hljs-type">AutoGenerator</span> <span class="hljs-variable">mpg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoGenerator</span>();<br><br>        <span class="hljs-comment">// 全局配置</span><br>        <span class="hljs-type">GlobalConfig</span> <span class="hljs-variable">gc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalConfig</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">projectPath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>        gc.setOutputDir(projectPath + <span class="hljs-string">&quot;/src/main/java&quot;</span>);<br>        gc.setAuthor(<span class="hljs-string">&quot;felix&quot;</span>);<br>        gc.setOpen(<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span><br>        mpg.setGlobalConfig(gc);<br><br>        <span class="hljs-comment">// 数据源配置</span><br>        <span class="hljs-type">DataSourceConfig</span> <span class="hljs-variable">dsc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceConfig</span>();<br>        dsc.setUrl(<span class="hljs-string">&quot;jdbc:mysql://113.31.119.154:3306/edu_ad?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;</span>);<br>        <span class="hljs-comment">// dsc.setSchemaName(&quot;public&quot;);</span><br>        dsc.setDriverName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dsc.setUsername(<span class="hljs-string">&quot;edurw&quot;</span>);<br>        dsc.setPassword(<span class="hljs-string">&quot;edurw&quot;</span>);<br>        mpg.setDataSource(dsc);<br><br>        <span class="hljs-comment">// 包配置</span><br>        <span class="hljs-type">PackageConfig</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageConfig</span>();<br>        pc.setModuleName(scanner(<span class="hljs-string">&quot;模块名&quot;</span>));<br>        pc.setParent(<span class="hljs-string">&quot;com.lagou.edu&quot;</span>);<br>        mpg.setPackageInfo(pc);<br><br>        <span class="hljs-comment">// 自定义配置</span><br>        <span class="hljs-type">InjectionConfig</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InjectionConfig</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMap</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">// to do nothing</span><br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// 如果模板引擎是 freemarker</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">templatePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/templates/mapper.xml.ftl&quot;</span>;<br>        <span class="hljs-comment">// 如果模板引擎是 velocity</span><br>        <span class="hljs-comment">// String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span><br><br>        <span class="hljs-comment">// 自定义输出配置</span><br>        List&lt;FileOutConfig&gt; focList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 自定义配置会被优先输出</span><br>        focList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutConfig</span>(templatePath) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">outputFile</span><span class="hljs-params">(TableInfo tableInfo)</span> &#123;<br>                <span class="hljs-comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span><br>                <span class="hljs-keyword">return</span> projectPath + <span class="hljs-string">&quot;/src/main/resources/mapper/&quot;</span> + pc.getModuleName()<br>                        + <span class="hljs-string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="hljs-string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        cfg.setFileCreate(new IFileCreate() &#123;</span><br><span class="hljs-comment">            @Override</span><br><span class="hljs-comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span><br><span class="hljs-comment">                // 判断自定义文件夹是否需要创建</span><br><span class="hljs-comment">                checkDir(&quot;调用默认方法创建的目录，自定义目录用&quot;);</span><br><span class="hljs-comment">                if (fileType == FileType.MAPPER) &#123;</span><br><span class="hljs-comment">                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false</span><br><span class="hljs-comment">                    return !new File(filePath).exists();</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">                // 允许生成模板文件</span><br><span class="hljs-comment">                return true;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;);</span><br><span class="hljs-comment">        */</span><br>        cfg.setFileOutConfigList(focList);<br>        mpg.setCfg(cfg);<br><br>        <span class="hljs-comment">// 配置模板</span><br>        <span class="hljs-type">TemplateConfig</span> <span class="hljs-variable">templateConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplateConfig</span>();<br><br>        <span class="hljs-comment">// 配置自定义输出模板</span><br>        <span class="hljs-comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span><br>        <span class="hljs-comment">// templateConfig.setEntity(&quot;templates/entity2.java&quot;);</span><br>        <span class="hljs-comment">// templateConfig.setService();</span><br>        <span class="hljs-comment">// templateConfig.setController();</span><br><br>        templateConfig.setXml(<span class="hljs-literal">null</span>);<br>        mpg.setTemplate(templateConfig);<br><br>        <span class="hljs-comment">// 策略配置</span><br>        <span class="hljs-type">StrategyConfig</span> <span class="hljs-variable">strategy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrategyConfig</span>();<br>        strategy.setNaming(NamingStrategy.underline_to_camel);<br>        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<br>        <span class="hljs-comment">//strategy.setSuperEntityClass(&quot;你自己的父类实体,没有就不用设置!&quot;);</span><br>        strategy.setEntityLombokModel(<span class="hljs-literal">true</span>);<br>        strategy.setRestControllerStyle(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 公共父类</span><br>        <span class="hljs-comment">//strategy.setSuperControllerClass(&quot;你自己的父类控制器,没有就不用设置!&quot;);</span><br>        <span class="hljs-comment">// 写于父类中的公共字段</span><br>        <span class="hljs-comment">//strategy.setSuperEntityColumns(&quot;id&quot;);</span><br>        strategy.setInclude(scanner(<span class="hljs-string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="hljs-string">&quot;,&quot;</span>));<br>        strategy.setControllerMappingHyphenStyle(<span class="hljs-literal">true</span>);<br>        strategy.setTablePrefix(pc.getModuleName() + <span class="hljs-string">&quot;_&quot;</span>);<br>        mpg.setStrategy(strategy);<br>        mpg.setTemplateEngine(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FreemarkerTemplateEngine</span>());<br>        mpg.execute();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-创建远程调用接口与实现类"><a href="#4-创建远程调用接口与实现类" class="headerlink" title="4. 创建远程调用接口与实现类"></a>4. 创建远程调用接口与实现类</h4><p>​</p><p>​在edu-ad-boot-api项目中创建PromotionSpaceDTO与PromotionAdDTO，属性与entity实体对象的属性相同。</p><p>​创建远程调用的接口AdRemoteService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;edu-ad-boot&quot;,path = &quot;/ad&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AdRemoteService</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/space/getAllSpaces&quot;)</span><br>    List&lt;PromotionSpaceDTO&gt; <span class="hljs-title function_">getAllSpaces</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​edu-ad-boot-impl中创建服务远程调用的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/ad&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AdRemoteService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IPromotionSpaceService promotionSpaceService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IPromotionAdService promotionAdService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/space/getAllSpaces&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;PromotionSpaceDTO&gt; <span class="hljs-title function_">getAllSpaces</span><span class="hljs-params">()</span> &#123;<br>        List&lt;PromotionSpace&gt; promotionSpaceList = promotionSpaceService.list();<br>        <span class="hljs-keyword">return</span> ConverUtil.convertList(promotionSpaceList,PromotionSpaceDTO.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​添加bootstrap.yml配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">lagou-edu-ad</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:8090</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span><br>      <span class="hljs-attr">profile:</span> <span class="hljs-string">dev</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">lagou-edu-ad</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:8761/eureka/</span><br><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br></code></pre></td></tr></table></figure><p>​创建启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@MapperScan(&quot;com.lagou.edu.ad.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LagouEduAdApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(LagouEduAdApplication.class,args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-创建edu-boss-boot项目，添加依赖"><a href="#5-创建edu-boss-boot项目，添加依赖" class="headerlink" title="5. 创建edu-boss-boot项目，添加依赖"></a>5. 创建edu-boss-boot项目，添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>my-lagou-edu-ad-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-远程调用"><a href="#6-远程调用" class="headerlink" title="6. 远程调用"></a>6. 远程调用</h4><p>​创建AdController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/ad&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AdRemoteService adRemoteService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/space/getAllSpaces&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseDTO <span class="hljs-title function_">getAllSpace</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        List&lt;PromotionSpaceDTO&gt; dtoList = adRemoteService.getAllSpaces();<br>        <span class="hljs-keyword">return</span> ResponseDTO.success(dtoList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​配置文件application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-boss-boot</span><br><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:8761/eureka/</span><br><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br></code></pre></td></tr></table></figure><p>​创建启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@EnableFeignClients(&quot;com.lagou.edu&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LagouFrontApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        SpringApplication.run(LagouFrontApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>请求的URL路径：<a href="http://localhost:8081/ad/space/getAllSpaces">http://localhost:8081/ad/space/getAllSpaces</a></p><h4 id="7-创建edu-front-boot"><a href="#7-创建edu-front-boot" class="headerlink" title="7. 创建edu-front-boot"></a>7. 创建edu-front-boot</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>my-lagou-edu-ad-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>my-lagou-edu-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-front-boot</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:8761/eureka/</span><br><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br></code></pre></td></tr></table></figure><h4 id="8-根据spaceKey获取广告"><a href="#8-根据spaceKey获取广告" class="headerlink" title="8. 根据spaceKey获取广告"></a>8. 根据spaceKey获取广告</h4><p>edu-ad-boot-api的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;edu-ad-boot&quot;,path = &quot;/ad&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AdRemoteService</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getAdBySpaceKey&quot;)</span><br>    List&lt;PromotionSpaceDTO&gt; <span class="hljs-title function_">getAdBySpaceKey</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;spaceKey&quot;)</span>String[] spaceKey)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>edu-ad-boot-impl的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/space/getAdBySpaceKey&quot;)</span><br>   <span class="hljs-keyword">public</span> List&lt;PromotionSpaceDTO&gt; <span class="hljs-title function_">getAdBySpaceKey</span><span class="hljs-params">(String[] spaceKey)</span> &#123;<br><br>List&lt;PromotionSpaceDTO&gt; promotionSpaceDTOList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>       <span class="hljs-keyword">for</span> (String key : spaceKey) &#123;<br>           <span class="hljs-comment">//获取spaceKey对应的广告位</span><br>           QueryWrapper&lt;PromotionSpace&gt; spaceQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>           spaceQueryWrapper.eq(<span class="hljs-string">&quot;spaceKey&quot;</span>,key);<br>           <span class="hljs-type">PromotionSpace</span> <span class="hljs-variable">promotionSpace</span> <span class="hljs-operator">=</span>        promotionSpaceService.getOne(spaceQueryWrapper);<br><br>           <span class="hljs-comment">//获取该space对应的所有的广告</span><br>           QueryWrapper&lt;PromotionAd&gt; adQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>           adQueryWrapper.eq(<span class="hljs-string">&quot;spaceId&quot;</span>,promotionSpace.getId());<br>           <span class="hljs-comment">//状态为上线状态</span><br>           adQueryWrapper.eq(<span class="hljs-string">&quot;status&quot;</span>,<span class="hljs-number">1</span>);<br>           <span class="hljs-comment">//有效期内</span><br>           <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>           adQueryWrapper.lt(<span class="hljs-string">&quot;startTime&quot;</span>,now);<br>           adQueryWrapper.gt(<span class="hljs-string">&quot;endTime&quot;</span>,now);<br><br>           List&lt;PromotionAd&gt; adList = promotionAdService.list(adQueryWrapper);<br>           <span class="hljs-comment">//属性拷贝</span><br>           <span class="hljs-type">PromotionSpaceDTO</span> <span class="hljs-variable">promotionSpaceDTO</span> <span class="hljs-operator">=</span> ConverUtil.convert(promotionSpace, PromotionSpaceDTO.class);<br>           List&lt;PromotionAdDTO&gt; promotionAdDTOList = ConverUtil.convertList(adList, PromotionAdDTO.class);<br>           promotionSpaceDTO.setPromotionAdDTOList(promotionAdDTOList);<br><br>           promotionSpaceDTOList.add(promotionSpaceDTO);<br>       &#125;<br><br>       <span class="hljs-keyword">return</span> promotionSpaceDTOList;<br>   &#125;<br></code></pre></td></tr></table></figure><p>edu-front-boot：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/space/getAdBySpaceKey&quot;)</span><br>   <span class="hljs-keyword">public</span> ResponseDTO <span class="hljs-title function_">getAdBySpaceKey</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;spaceKey&quot;)</span> String[] spaceKey)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>       List&lt;PromotionSpaceDTO&gt; dtoList = adRemoteService.getAdBySpaceKey(spaceKey);<br>       <span class="hljs-keyword">return</span> ResponseDTO.success(dtoList);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="9-根据id获取广告位"><a href="#9-根据id获取广告位" class="headerlink" title="9. 根据id获取广告位"></a>9. 根据id获取广告位</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/space/getSpaceById&quot;)</span><br>   PromotionSpaceDTO <span class="hljs-title function_">getSpaceById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/space/getSpaceById&quot;)</span><br>   <span class="hljs-keyword">public</span> PromotionSpaceDTO <span class="hljs-title function_">getSpaceById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span> &#123;<br>       <span class="hljs-type">PromotionSpace</span> <span class="hljs-variable">promotionSpace</span> <span class="hljs-operator">=</span> promotionSpaceService.getById(id);<br>       <span class="hljs-keyword">return</span> ConverUtil.convert(promotionSpace,PromotionSpaceDTO.class);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="10-编辑广告位"><a href="#10-编辑广告位" class="headerlink" title="10. 编辑广告位"></a>10. 编辑广告位</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/space/saveOrUpdate&quot;)</span><br>ResponseDTO <span class="hljs-title function_">saveOrUpdateSpace</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> PromotionSpaceDTO spaceDTO)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/space/saveOrUpdate&quot;)</span><br>   <span class="hljs-keyword">public</span> ResponseDTO <span class="hljs-title function_">saveOrUpdateSpace</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> PromotionSpaceDTO spaceDTO)</span> &#123;<br>       <span class="hljs-type">PromotionSpace</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> ConverUtil.convert(spaceDTO, PromotionSpace.class);<br><br>       <span class="hljs-keyword">if</span>(entity.getId() == <span class="hljs-literal">null</span>)&#123;<br>           entity.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>           entity.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>           entity.setIsDel(<span class="hljs-number">0</span>);<br>       &#125;<span class="hljs-keyword">else</span> &#123;<br>           entity.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>       &#125;<br><br>       <span class="hljs-type">ResponseDTO</span> <span class="hljs-variable">responseDTO</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>       <span class="hljs-keyword">try</span> &#123;<br>           promotionSpaceService.saveOrUpdate(entity);<br>           responseDTO = ResponseDTO.success();<br>       &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>           responseDTO = ResponseDTO.ofError(e.getMessage());<br>           e.printStackTrace();<br>       &#125;<br>       <span class="hljs-keyword">return</span> responseDTO;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="11-获取广告列表"><a href="#11-获取广告列表" class="headerlink" title="11. 获取广告列表"></a>11. 获取广告列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/getAllAds&quot;)</span><br>List&lt;PromotionAdDTO&gt; <span class="hljs-title function_">getAllAds</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/getAllAds&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;PromotionAdDTO&gt; <span class="hljs-title function_">getAllAds</span><span class="hljs-params">()</span> &#123;<br>    List&lt;PromotionAd&gt; promotionAdList = promotionAdService.list();<br>    <span class="hljs-keyword">return</span> ConverUtil.convertList(promotionAdList,PromotionAdDTO.class);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="12-根据id获取广告"><a href="#12-根据id获取广告" class="headerlink" title="12. 根据id获取广告"></a>12. 根据id获取广告</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/getAdById&quot;)</span><br>PromotionAdDTO <span class="hljs-title function_">getAdById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/getAdById&quot;)</span><br><span class="hljs-keyword">public</span> PromotionAdDTO <span class="hljs-title function_">getAdById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span> &#123;<br>    <span class="hljs-type">PromotionAd</span> <span class="hljs-variable">promotionAd</span> <span class="hljs-operator">=</span> promotionAdService.getById(id);<br>    <span class="hljs-keyword">return</span> ConverUtil.convert(promotionAd,PromotionAdDTO.class);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="13-编辑广告"><a href="#13-编辑广告" class="headerlink" title="13. 编辑广告"></a>13. 编辑广告</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/saveOrUpdate&quot;)</span><br>ResponseDTO <span class="hljs-title function_">saveOrUpdateAd</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> PromotionAdDTO adDTO)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/saveOrUpdate&quot;)</span><br>   <span class="hljs-keyword">public</span> ResponseDTO <span class="hljs-title function_">saveOrUpdateAd</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> PromotionAdDTO adDTO)</span> &#123;<br>       <span class="hljs-type">PromotionAd</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> ConverUtil.convert(adDTO, PromotionAd.class);<br><br>       System.out.println(adDTO.getStartTime());<br><br>       <span class="hljs-keyword">if</span>(entity.getId() == <span class="hljs-literal">null</span>)&#123;<br>           entity.setStatus(<span class="hljs-number">1</span>);<br>           entity.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>           entity.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>       &#125;<span class="hljs-keyword">else</span> &#123;<br>           entity.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>       &#125;<br><br>       <span class="hljs-type">ResponseDTO</span> <span class="hljs-variable">responseDTO</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>       <span class="hljs-keyword">try</span> &#123;<br>           promotionAdService.saveOrUpdate(entity);<br>           responseDTO = ResponseDTO.success();<br>       &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>           responseDTO = ResponseDTO.ofError(e.getMessage());<br>           e.printStackTrace();<br>       &#125;<br>       <span class="hljs-keyword">return</span> responseDTO;<br>   &#125;<br></code></pre></td></tr></table></figure><hr><h3 id="搭建网关"><a href="#搭建网关" class="headerlink" title="搭建网关"></a>搭建网关</h3><p>创建项目edu-gateway-boot</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编辑application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-gateway-boot</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">lagou-edu-front</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://edu-front-boot</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/front/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>            <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">lagou-edu-boss</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://edu-boss-boot</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/boss/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:8761/eureka/</span><br><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br></code></pre></td></tr></table></figure><p>创建启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LagouGatewayApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(LagouGatewayApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h3><h4 id="1-建库建表"><a href="#1-建库建表" class="headerlink" title="1.建库建表"></a>1.建库建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database edu_user;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户昵称&#x27;</span>,<br>  `portrait` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户头像地址&#x27;</span>,<br>  `phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;注册手机&#x27;</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户密码（可以为空，支持只用验证码注册、登录）&#x27;</span>,<br>  `reg_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;注册ip&#x27;</span>,<br>  `account_non_expired` bit(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> b<span class="hljs-string">&#x27;1&#x27;</span> COMMENT <span class="hljs-string">&#x27;是否有效用户&#x27;</span>,<br>  `credentials_non_expired` bit(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> b<span class="hljs-string">&#x27;1&#x27;</span> COMMENT <span class="hljs-string">&#x27;账号是否未过期&#x27;</span>,<br>  `account_non_locked` bit(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> b<span class="hljs-string">&#x27;1&#x27;</span> COMMENT <span class="hljs-string">&#x27;是否未锁定&#x27;</span>,<br>  `status` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;ENABLE&#x27;</span> COMMENT <span class="hljs-string">&#x27;用户状态：ENABLE能登录，DISABLE不能登录&#x27;</span>,<br>  `is_del` bit(<span class="hljs-number">1</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> b<span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;是否删除&#x27;</span>,<br>  `create_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;注册时间&#x27;</span>,<br>  `update_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;记录更新时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE,<br>  <span class="hljs-keyword">UNIQUE</span> KEY `idx_phone_is_del` (`phone`,`is_del`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 ROW_FORMAT<span class="hljs-operator">=</span>COMPACT;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `user_weixin` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `user_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>  `union_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;认证id,微信对应的时unionId&#x27;</span>,<br>  `open_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;openId&#x27;</span>,<br>  `nick_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;昵称&#x27;</span>,<br>  `portrait` <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;头像&#x27;</span>,<br>  `city` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;城市&#x27;</span>,<br>  `sex` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;性别, 1-男，2-女&#x27;</span>,<br>  `create_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `update_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>  `is_del` bit(<span class="hljs-number">1</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> b<span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;是否删除&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE,<br>  <span class="hljs-keyword">UNIQUE</span> KEY `oauthId_and_oauthType_unique` (`union_id`,`open_id`,`is_del`) <span class="hljs-keyword">USING</span> BTREE,<br>  <span class="hljs-keyword">UNIQUE</span> KEY `userId_and_oauthType_unique_index` (`user_id`,`open_id`,`is_del`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 ROW_FORMAT<span class="hljs-operator">=</span>COMPACT;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `user_phone_verification_code` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;手机号&#x27;</span>,<br>  `verification_code` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;验证码&#x27;</span>,<br>  `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `isCheck` bit(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> b<span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;验证码是否校验过&#x27;</span>,<br>  `check_times` <span class="hljs-type">int</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;校验次数&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE,<br>  KEY `l_phone_verification_code_ind_01` (`phone`,`create_time`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><h4 id="2-新建项目，添加依赖"><a href="#2-新建项目，添加依赖" class="headerlink" title="2.新建项目，添加依赖"></a>2.新建项目，添加依赖</h4><p>创建项目：edu-user-boot</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建项目：edu-user-boot-api</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建项目：edu-user-boot-impl</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-user-boot-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-代码生成"><a href="#3-代码生成" class="headerlink" title="3.代码生成"></a>3.代码生成</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generate</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 读取控制台内容</span><br><span class="hljs-comment">     * &lt;/p&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">scanner</span><span class="hljs-params">(String tip)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">help</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        help.append(<span class="hljs-string">&quot;请输入&quot;</span> + tip + <span class="hljs-string">&quot;：&quot;</span>);<br>        System.out.println(help.toString());<br>        <span class="hljs-keyword">if</span> (scanner.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">ipt</span> <span class="hljs-operator">=</span> scanner.next();<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(ipt)) &#123;<br>                <span class="hljs-keyword">return</span> ipt;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusException</span>(<span class="hljs-string">&quot;请输入正确的&quot;</span> + tip + <span class="hljs-string">&quot;！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 代码生成器</span><br>        <span class="hljs-type">AutoGenerator</span> <span class="hljs-variable">mpg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoGenerator</span>();<br><br>        <span class="hljs-comment">// 全局配置</span><br>        <span class="hljs-type">GlobalConfig</span> <span class="hljs-variable">gc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalConfig</span>();<br>        <span class="hljs-comment">//String projectPath = System.getProperty(&quot;user.dir&quot;);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">projectPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\IdeaProject\\cloud-exercise\\my-lagou-edu-boot\\my-lagou-edu-user\\my-lagou-edu-user-impl&quot;</span>;<br><br>        gc.setOutputDir(projectPath+<span class="hljs-string">&quot;/src/main/java&quot;</span>);<br>        gc.setAuthor(<span class="hljs-string">&quot;felix&quot;</span>);<br>        gc.setOpen(<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span><br>        mpg.setGlobalConfig(gc);<br><br>        <span class="hljs-comment">// 数据源配置</span><br>        <span class="hljs-type">DataSourceConfig</span> <span class="hljs-variable">dsc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceConfig</span>();<br>        dsc.setUrl(<span class="hljs-string">&quot;jdbc:mysql://113.31.119.154:3306/edu_user?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;</span>);<br>        <span class="hljs-comment">// dsc.setSchemaName(&quot;public&quot;);</span><br>        dsc.setDriverName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dsc.setUsername(<span class="hljs-string">&quot;edurw&quot;</span>);<br>        dsc.setPassword(<span class="hljs-string">&quot;edurw&quot;</span>);<br>        mpg.setDataSource(dsc);<br><br>        <span class="hljs-comment">// 包配置</span><br>        <span class="hljs-type">PackageConfig</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageConfig</span>();<br>        pc.setModuleName(scanner(<span class="hljs-string">&quot;模块名&quot;</span>));<br>        pc.setParent(<span class="hljs-string">&quot;com.lagou.edu&quot;</span>);<br>        mpg.setPackageInfo(pc);<br><br>        <span class="hljs-comment">// 自定义配置</span><br>        <span class="hljs-type">InjectionConfig</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InjectionConfig</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMap</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">// to do nothing</span><br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// 如果模板引擎是 freemarker</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">templatePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/templates/mapper.xml.ftl&quot;</span>;<br>        <span class="hljs-comment">// 如果模板引擎是 velocity</span><br>        <span class="hljs-comment">// String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span><br><br>        <span class="hljs-comment">// 自定义输出配置</span><br>        List&lt;FileOutConfig&gt; focList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 自定义配置会被优先输出</span><br>        focList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutConfig</span>(templatePath) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">outputFile</span><span class="hljs-params">(TableInfo tableInfo)</span> &#123;<br>                <span class="hljs-comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span><br>                <span class="hljs-keyword">return</span> projectPath + <span class="hljs-string">&quot;/src/main/resources/mapper/&quot;</span> + pc.getModuleName()<br>                        + <span class="hljs-string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="hljs-string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        cfg.setFileCreate(new IFileCreate() &#123;</span><br><span class="hljs-comment">            @Override</span><br><span class="hljs-comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span><br><span class="hljs-comment">                // 判断自定义文件夹是否需要创建</span><br><span class="hljs-comment">                checkDir(&quot;调用默认方法创建的目录，自定义目录用&quot;);</span><br><span class="hljs-comment">                if (fileType == FileType.MAPPER) &#123;</span><br><span class="hljs-comment">                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false</span><br><span class="hljs-comment">                    return !new File(filePath).exists();</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">                // 允许生成模板文件</span><br><span class="hljs-comment">                return true;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;);</span><br><span class="hljs-comment">        */</span><br>        cfg.setFileOutConfigList(focList);<br>        mpg.setCfg(cfg);<br><br>        <span class="hljs-comment">// 配置模板</span><br>        <span class="hljs-type">TemplateConfig</span> <span class="hljs-variable">templateConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplateConfig</span>();<br><br>        <span class="hljs-comment">// 配置自定义输出模板</span><br>        <span class="hljs-comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span><br>        <span class="hljs-comment">// templateConfig.setEntity(&quot;templates/entity2.java&quot;);</span><br>        <span class="hljs-comment">// templateConfig.setService();</span><br>        <span class="hljs-comment">// templateConfig.setController();</span><br><br>        templateConfig.setXml(<span class="hljs-literal">null</span>);<br>        mpg.setTemplate(templateConfig);<br><br>        <span class="hljs-comment">// 策略配置</span><br>        <span class="hljs-type">StrategyConfig</span> <span class="hljs-variable">strategy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrategyConfig</span>();<br>        strategy.setNaming(NamingStrategy.underline_to_camel);<br>        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<br>        <span class="hljs-comment">//strategy.setSuperEntityClass(&quot;你自己的父类实体,没有就不用设置!&quot;);</span><br>        strategy.setEntityLombokModel(<span class="hljs-literal">true</span>);<br>        strategy.setRestControllerStyle(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 公共父类</span><br>        <span class="hljs-comment">//strategy.setSuperControllerClass(&quot;你自己的父类控制器,没有就不用设置!&quot;);</span><br>        <span class="hljs-comment">// 写于父类中的公共字段</span><br>        <span class="hljs-comment">//strategy.setSuperEntityColumns(&quot;id&quot;);</span><br>        strategy.setInclude(scanner(<span class="hljs-string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="hljs-string">&quot;,&quot;</span>));<br>        strategy.setControllerMappingHyphenStyle(<span class="hljs-literal">true</span>);<br>        strategy.setTablePrefix(pc.getModuleName() + <span class="hljs-string">&quot;_&quot;</span>);<br>        mpg.setStrategy(strategy);<br>        mpg.setTemplateEngine(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FreemarkerTemplateEngine</span>());<br>        mpg.execute();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value = &quot;/getUserPages&quot;)</span><br>Page&lt;UserDTO&gt; <span class="hljs-title function_">getUserPages</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserQueryParam userQueryParam)</span>;<br></code></pre></td></tr></table></figure><h4 id="4-用户基本功能实现"><a href="#4-用户基本功能实现" class="headerlink" title="4.用户基本功能实现"></a>4.用户基本功能实现</h4><p>保存用户，更新用户，是否更新密码，设置密码，修改密码。</p><p>分页查询用户列表：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>定义查询参数对象：UserQueryParam</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserQueryParam</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer currentPage;<br>    <span class="hljs-keyword">private</span> Integer pageSize;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-keyword">private</span> Integer userId;<br>    <span class="hljs-keyword">private</span> Date startCreateTime;<br>    <span class="hljs-keyword">private</span> Date endCreateTime;<br>&#125;<br></code></pre></td></tr></table></figure><p>分页查询的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/getUserPages&quot;)</span><br>    <span class="hljs-keyword">public</span> Page&lt;UserDTO&gt; <span class="hljs-title function_">getUserPages</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserQueryParam userQueryParam)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> userQueryParam.getPhone();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> userQueryParam.getUserId();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">currentPage</span> <span class="hljs-operator">=</span> userQueryParam.getCurrentPage();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> userQueryParam.getPageSize();<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">startCreateTime</span> <span class="hljs-operator">=</span> userQueryParam.getStartCreateTime();<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">endCreateTime</span> <span class="hljs-operator">=</span> userQueryParam.getEndCreateTime();<br><br>        Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(currentPage, pageSize);<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        <span class="hljs-comment">//根据电话号码查询用户</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(phone)) &#123;<br>            queryWrapper.like(<span class="hljs-string">&quot;phone&quot;</span>, phone);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != startCreateTime &amp;&amp; <span class="hljs-literal">null</span> != endCreateTime) &#123;<br>            queryWrapper.ge(<span class="hljs-string">&quot;create_time&quot;</span>, startCreateTime);<br>            queryWrapper.le(<span class="hljs-string">&quot;create_time&quot;</span>, endCreateTime);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != userId &amp;&amp; userId &gt; <span class="hljs-number">0</span>) &#123;<br>            queryWrapper.eq(<span class="hljs-string">&quot;id&quot;</span>, userId);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> userService.count(queryWrapper);<br>        queryWrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);<br>        IPage&lt;User&gt; selectPage = <span class="hljs-built_in">this</span>.userService.getBaseMapper().selectPage(page, queryWrapper);<br><br>        List&lt;UserDTO&gt; userDTOList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//获取课程对应的模块的信息</span><br>        <span class="hljs-keyword">for</span> (User user : selectPage.getRecords()) &#123;<br>            <span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> ConverUtil.convert(user,UserDTO.class);<br>            userDTOList.add(userDTO);<br>        &#125;<br><br>        Page&lt;UserDTO&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;();<br>        <span class="hljs-comment">//分页查询结果对象属性的拷贝</span><br>        ConverUtil.convert(selectPage, result);<br>        <span class="hljs-comment">//设置分页结果对象record属性</span><br>        result.setRecords(userDTOList);<br>        result.setTotal(count);<br>        <span class="hljs-keyword">return</span> result;  <br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="5-用户登录"><a href="#5-用户登录" class="headerlink" title="5.用户登录"></a>5.用户登录</h4><p><img src="/2022/11/22/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%A4%A7%E5%9E%8B%E4%BA%92%E8%81%94%E7%BD%91%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E5%92%8C%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%88%E4%B8%80%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E9%AB%98%E7%BA%A7%E3%80%919-1%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20200908164154716.png" alt="image-20200908164154716"></p><h4 id="6-统一认证服务"><a href="#6-统一认证服务" class="headerlink" title="6.统一认证服务"></a>6.统一认证服务</h4><p>​<a href="%E6%96%87%E6%A1%A3/04%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95+%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.pdf">单点登录+第三方登录解决方案.pdf</a> </p><h4 id="7-网关配置"><a href="#7-网关配置" class="headerlink" title="7.网关配置"></a>7.网关配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>            Jws&lt;Claims&gt; jwt = authService.getJwt(authentication);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != jwt &amp;&amp; <span class="hljs-literal">null</span> != jwt.getBody()) &#123;<br>                userId = (String) jwt.getBody().get(<span class="hljs-string">&quot;user_id&quot;</span>);<br>                userName = (String) jwt.getBody().get(<span class="hljs-string">&quot;user_name&quot;</span>);<br><br>                <span class="hljs-comment">// 拼装用户id、用户名放到请求里面</span><br>                ServerHttpRequest.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> request.mutate();<br>                <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(userName)) &#123;<br>                    builder.header(X_USER_NAME, userName);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(userId)) &#123;<br>                    builder.header(X_USER_ID, userId);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(ip)) &#123;<br>                    builder.header(X_USER_IP, ip);<br>                &#125;<br>                exchange = exchange.mutate().request(builder.build()).build();<br>                log.info(<span class="hljs-string">&quot;userId:&#123;&#125;, userName:&#123;&#125;, access_token:&#123;&#125;, url:&#123;&#125;&quot;</span>, userId, userName, authentication, url);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ExpiredJwtException | MalformedJwtException | SignatureException var4) &#123;<br>            log.error(<span class="hljs-string">&quot;user token error :&#123;&#125;&quot;</span>, var4.getMessage());<br>            <span class="hljs-comment">// 如果不是忽略url，则返回401，需要登录</span><br>            <span class="hljs-keyword">if</span> (!authService.ignoreAuthentication(url)) &#123;<br>                <span class="hljs-keyword">return</span> unauthorized(exchange);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="8-微信基本功能实现"><a href="#8-微信基本功能实现" class="headerlink" title="8.微信基本功能实现"></a>8.微信基本功能实现</h4><p>​用户名：15510792995   密码：111111</p><p>​用户微信绑定表新增数据和修改数据</p><p>​绑定微信功能和解除绑定功能</p><p>​根据userId，openId，unionId获取用户微信绑定信息</p><h4 id="9-微信绑定"><a href="#9-微信绑定" class="headerlink" title="9.微信绑定"></a>9.微信绑定</h4><p>​    <a href="https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html">https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.binarywang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>weixin-java-mp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.4.B<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">wx:</span><br>  <span class="hljs-attr">mp:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">appId:</span> <span class="hljs-string">wx50ab08eeb720bc91</span>  <span class="hljs-comment"># （开放平台的appid）</span><br>      <span class="hljs-attr">secret:</span> <span class="hljs-string">61bc2098c66aa3b8f3b690996f51c269</span> <span class="hljs-comment">#（开放平台的appsecret）</span><br></code></pre></td></tr></table></figure><h4 id="10-微信登录"><a href="#10-微信登录" class="headerlink" title="10.微信登录"></a>10.微信登录</h4><h4 id="11-验证码功能"><a href="#11-验证码功能" class="headerlink" title="11.验证码功能"></a>11.验证码功能</h4><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="课程模块"><a href="#课程模块" class="headerlink" title="课程模块"></a>课程模块</h3><h4 id="1-需要实现的功能"><a href="#1-需要实现的功能" class="headerlink" title="1.需要实现的功能"></a>1.需要实现的功能</h4><h4 id="2-数据库表结构"><a href="#2-数据库表结构" class="headerlink" title="2.数据库表结构"></a>2.数据库表结构</h4><h4 id="3-基础功能实现"><a href="#3-基础功能实现" class="headerlink" title="3.基础功能实现"></a>3.基础功能实现</h4><h4 id="4-远程调用功能实现"><a href="#4-远程调用功能实现" class="headerlink" title="4.远程调用功能实现"></a>4.远程调用功能实现</h4><h4 id="5-视频加密原理"><a href="#5-视频加密原理" class="headerlink" title="5.视频加密原理"></a>5.视频加密原理</h4><p><img src="/2022/11/22/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%A4%A7%E5%9E%8B%E4%BA%92%E8%81%94%E7%BD%91%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E5%92%8C%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%88%E4%B8%80%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E9%AB%98%E7%BA%A7%E3%80%919-1%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20200918170348950.png" alt="image-20200918170348950"></p><h4 id="6-OSS视频上传"><a href="#6-OSS视频上传" class="headerlink" title="6.OSS视频上传"></a>6.OSS视频上传</h4><h4 id="7-课程播放"><a href="#7-课程播放" class="headerlink" title="7.课程播放"></a>7.课程播放</h4><h4 id="8-课程评论"><a href="#8-课程评论" class="headerlink" title="8.课程评论"></a>8.课程评论</h4><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--mongodb依赖配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">mongodb:</span><br>      <span class="hljs-attr">database:</span> <span class="hljs-string">edu_comment</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;port&#125;</span><br><br></code></pre></td></tr></table></figure><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CourseCommentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;CourseComment,Long&gt; &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CourseCommentFavoriteRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;CourseCommentFavorite, Long&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h3><h4 id="1-订单服务基本功能"><a href="#1-订单服务基本功能" class="headerlink" title="1.订单服务基本功能"></a>1.订单服务基本功能</h4><p>保存订单，秒杀，更新订单状态，记录订单状态变更</p><h4 id="2-分库算法"><a href="#2-分库算法" class="headerlink" title="2.分库算法"></a>2.分库算法</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">shardingsphere:</span><br>        <span class="hljs-attr">datasource:</span><br>            <span class="hljs-attr">names:</span> <span class="hljs-string">ds0</span><br>            <span class="hljs-attr">ds0:</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>                <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>                <span class="hljs-attr">username:</span> <span class="hljs-string">$&#123;usrename&#125;</span><br>                <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;password&#125;</span><br>                <span class="hljs-attr">url:</span> <span class="hljs-string">$&#123;url&#125;</span><br>                <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j</span><br>                <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span><br>                <span class="hljs-attr">initialSize:</span> <span class="hljs-number">1</span><br>                <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span><br>                <span class="hljs-attr">minIdle:</span> <span class="hljs-number">1</span><br>                <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span><br>                <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span><br>                <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">select</span> <span class="hljs-string">&#x27;x&#x27;</span><br>                <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>                <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>                <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>                <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br>                <span class="hljs-attr">maxOpenPreparedStatements:</span> <span class="hljs-number">20</span><br>                <span class="hljs-attr">connection-properties:</span> <span class="hljs-string">druid.stat.merggSql=ture;druid.stat.slowSqlMillis=5000</span><br>        <span class="hljs-attr">sharding:</span><br>            <span class="hljs-attr">tables:</span><br>                <span class="hljs-attr">user_course_order:</span><br>                    <span class="hljs-attr">actual-data-nodes:</span> <span class="hljs-string">ds$-&gt;&#123;0&#125;.user_course_order_$-&gt;&#123;0..9&#125;</span><br>                    <span class="hljs-attr">table-strategy:</span><br>                        <span class="hljs-attr">inline:</span><br>                            <span class="hljs-attr">sharding-column:</span> <span class="hljs-string">user_id</span><br>                            <span class="hljs-attr">algorithm-expression:</span> <span class="hljs-string">user_course_order_$-&gt;&#123;user_id</span> <span class="hljs-string">%</span> <span class="hljs-number">10</span><span class="hljs-string">&#125;</span><br>                    <span class="hljs-attr">key-generator:</span><br>                        <span class="hljs-attr">column:</span> <span class="hljs-string">id</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">SNOWFLAKE</span><br>                        <span class="hljs-attr">props:</span><br>                            <span class="hljs-attr">worker.id:</span> <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><h4 id="3-秒杀解决方案"><a href="#3-秒杀解决方案" class="headerlink" title="3.秒杀解决方案"></a>3.秒杀解决方案</h4><p> 详见  <a href="%E6%96%87%E6%A1%A3/04%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%A7%92%E6%9D%80%E5%9C%BA%E6%99%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.pdf">秒杀场景解决方案.pdf</a> </p><h4 id="4-记录状态变更记录"><a href="#4-记录状态变更记录" class="headerlink" title="4.记录状态变更记录"></a>4.记录状态变更记录</h4><hr><h3 id="支付模块"><a href="#支付模块" class="headerlink" title="支付模块"></a>支付模块</h3><p>详见   <a href="%E6%96%87%E6%A1%A3/04%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.pdf">第三方支付解决方案.pdf</a> </p><hr><h3 id="权限模块"><a href="#权限模块" class="headerlink" title="权限模块"></a>权限模块</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p>​为了系统的安全</p><p>​分为菜单（菜单）权限，操作（资源）权限。</p><p>​基于角色的权限管理系统，用户并不直接管理权限，而是直接关联角色，角色关联权限。</p><h4 id="2-图示"><a href="#2-图示" class="headerlink" title="2.图示"></a>2.图示</h4><p><img src="/md%E5%9B%BE%E7%89%87%5Cimage-20200927181743729.png" alt="image-20200927181743729"></p><h4 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3.解决方案"></a>3.解决方案</h4><p>详见：  <a href="%E6%96%87%E6%A1%A3/04%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%90%8E%E5%8F%B0%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.pdf">后台权限管理解决方案.pdf</a> </p><h4 id="4-创建数据库，创建项目"><a href="#4-创建数据库，创建项目" class="headerlink" title="4.创建数据库，创建项目"></a>4.创建数据库，创建项目</h4><h4 id="5-角色管理"><a href="#5-角色管理" class="headerlink" title="5.角色管理"></a>5.角色管理</h4><h4 id="6-菜单管理"><a href="#6-菜单管理" class="headerlink" title="6.菜单管理"></a>6.菜单管理</h4><h4 id="7-资源管理"><a href="#7-资源管理" class="headerlink" title="7.资源管理"></a>7.资源管理</h4><h4 id="8-权限校验"><a href="#8-权限校验" class="headerlink" title="8.权限校验"></a>8.权限校验</h4><hr><h3 id="消息模块"><a href="#消息模块" class="headerlink" title="消息模块"></a>消息模块</h3><h4 id="1-功能概述"><a href="#1-功能概述" class="headerlink" title="1.功能概述"></a>1.功能概述</h4><h4 id="2-netty-socketIO的使用"><a href="#2-netty-socketIO的使用" class="headerlink" title="2.netty-socketIO的使用"></a>2.netty-socketIO的使用</h4><p>​Netty-SocketIO是一个开源的、基于Netty的、Java版的即时消息推送项目。通过Netty-SocketIO，我们可以轻松的实现服务端主动向客户端推送消息的场景。它和websocket有相同的作用，只不过Netty-SocketIO可支持所有的浏览器。</p><p>​Socket.IO除了支持WebSocket通讯协议外，还支持许多种轮询（Polling）机制以及其它实时通信方式，并封装成了通用的接口，并且在服务端实现了这些实时机制的相应代码。Socket.IO能够根据浏览器对通讯机制的支持情况自动地选择最佳的方式来实现网络实时应用。</p><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.corundumstudio.socketio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>netty-socketio<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>实现功能：服务端向前台页面每隔一秒钟，推送两个100以内的正整数，前台页面进行实时的显示。</p><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;SocketIOClient&gt; clients = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;SocketIOClient&gt;();<span class="hljs-comment">//用于保存所有客户端</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>       <span class="hljs-type">Configuration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>       config.setHostname(<span class="hljs-string">&quot;localhost&quot;</span>);<br>       config.setPort(<span class="hljs-number">9092</span>);<br><br>       <span class="hljs-keyword">final</span> <span class="hljs-type">SocketIOServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SocketIOServer</span>(config);<br>       <span class="hljs-comment">//添加创建连接的监听器</span><br>       server.addConnectListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectListener</span>() &#123;<br><br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onConnect</span><span class="hljs-params">(SocketIOClient client)</span> &#123;<br>               clients.add(client);<br>           &#125;<br>       &#125;);<br>       <span class="hljs-comment">//添加断开连接的监听器</span><br>       server.addDisconnectListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DisconnectListener</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDisconnect</span><span class="hljs-params">(SocketIOClient client)</span> &#123;<br>               clients.remove(client);<br>           &#125;<br>       &#125;);<br><br>       <span class="hljs-comment">//启动服务</span><br>       server.start();<br><br>       System.out.println(<span class="hljs-string">&quot;开始推送了..................&quot;</span>);<br>       <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>       timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>               <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>               <span class="hljs-type">Packet</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Packet</span>(PacketType.EVENT);<br>               packet.setData(random.nextInt(<span class="hljs-number">100</span>));<br><br>               <span class="hljs-keyword">for</span>(SocketIOClient client : clients) &#123;<br>                   client.sendEvent(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(random.nextInt(<span class="hljs-number">100</span>), random.nextInt(<span class="hljs-number">100</span>)));<br>                   <span class="hljs-comment">//client.sendEvent(&quot;hello&quot;, packet);</span><br>               &#125;<br>               <span class="hljs-comment">//System.out.println(clients.size());</span><br>           &#125;<br>       &#125;, <span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>);  <span class="hljs-comment">//每隔一秒推送一次</span><br><br><br>   &#125;<br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;application/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://lib.baomitu.com/socket.io/2.3.0/socket.io.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;application/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> socket =  io.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;http://127.0.0.1:9092&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">//监听名为hello的事件，这与服务端推送的那个事件名称必须一致</span></span><br><span class="language-javascript">            socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//console.log(data);</span></span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;#x&#x27;</span>).<span class="hljs-title function_">text</span>(data.<span class="hljs-property">x</span>);</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;#y&#x27;</span>).<span class="hljs-title function_">text</span>(data.<span class="hljs-property">y</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;display&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:50px;&quot;</span>&gt;</span><br>        x=<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;x&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>, y=<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;y&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-创建项目，创建数据库"><a href="#3-创建项目，创建数据库" class="headerlink" title="3.创建项目，创建数据库"></a>3.创建项目，创建数据库</h4><h4 id="4-基础功能实现"><a href="#4-基础功能实现" class="headerlink" title="4.基础功能实现"></a>4.基础功能实现</h4><h4 id="5-消息推送"><a href="#5-消息推送" class="headerlink" title="5.消息推送"></a>5.消息推送</h4><p>详见：   <a href="%E6%96%87%E6%A1%A3/04%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%9C%8D%E5%8A%A1%E6%8E%A8%E9%80%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.pdf">服务推送解决方案.pdf</a> </p>]]></content>
    
    
    <categories>
      
      <category>拉钩</category>
      
    </categories>
    
    
    <tags>
      
      <tag>拉钩高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【面试】网址大全</title>
    <link href="/2022/11/17/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E7%BD%91%E5%9D%80%E5%A4%A7%E5%85%A8/"/>
    <url>/2022/11/17/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E7%BD%91%E5%9D%80%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Java面试基础："><a href="#Java面试基础：" class="headerlink" title="Java面试基础："></a>Java面试基础：</h2><p>ThinkWon的全都看下</p><p>序号 内容链接地址<br>1Java基础知识面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104390612">https://thinkwon.blog.csdn.net/article/details/104390612</a><br>2Java集合容器面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104588551">https://thinkwon.blog.csdn.net/article/details/104588551</a><br>3Java异常面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104390689">https://thinkwon.blog.csdn.net/article/details/104390689</a><br>4并发编程面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104863992">https://thinkwon.blog.csdn.net/article/details/104863992</a><br>5JVM面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104390752">https://thinkwon.blog.csdn.net/article/details/104390752</a><br>6Spring面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104397516">https://thinkwon.blog.csdn.net/article/details/104397516</a><br>7Spring MVC面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104397427">https://thinkwon.blog.csdn.net/article/details/104397427</a><br>8Spring Boot面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104397299">https://thinkwon.blog.csdn.net/article/details/104397299</a><br>9Spring Cloud面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104397367">https://thinkwon.blog.csdn.net/article/details/104397367</a><br>10MyBatis面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/101292950">https://thinkwon.blog.csdn.net/article/details/101292950</a><br>11Redis面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/103522351">https://thinkwon.blog.csdn.net/article/details/103522351</a><br>12MySQL数据库面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104778621">https://thinkwon.blog.csdn.net/article/details/104778621</a><br>13消息中间件MQ与RabbitMQ面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104588612">https://thinkwon.blog.csdn.net/article/details/104588612</a><br>14Dubbo面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104390006">https://thinkwon.blog.csdn.net/article/details/104390006</a><br>15Linux面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104588679">https://thinkwon.blog.csdn.net/article/details/104588679</a><br>16Tomcat面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104397665">https://thinkwon.blog.csdn.net/article/details/104397665</a><br>17ZooKeeper面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104397719">https://thinkwon.blog.csdn.net/article/details/104397719</a><br>18Netty面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/104391081">https://thinkwon.blog.csdn.net/article/details/104391081</a><br>19架构设计&amp;分布式&amp;数据结构与算法面试题（2020最新版）<a href="https://thinkwon.blog.csdn.net/article/details/105870730">https://thinkwon.blog.csdn.net/article/details/105870730</a></p><p>如果感觉还不够可以看看骆昊的Java面试题全集（上）（中）（下）</p><p><a href="https://blog.csdn.net/jackfrued?type=blog">https://blog.csdn.net/jackfrued?type=blog</a></p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【拉钩就业】拉勾教育PC站-微服务版</title>
    <link href="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/"/>
    <url>/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h1 id="拉勾教育PC站-微服务版"><a href="#拉勾教育PC站-微服务版" class="headerlink" title="拉勾教育PC站-微服务版"></a>拉勾教育PC站-微服务版</h1><p>— 老孙</p><h1 id="01-概述与搭建服务中心"><a href="#01-概述与搭建服务中心" class="headerlink" title="01 概述与搭建服务中心"></a>01 概述与搭建服务中心</h1><h2 id="1、回顾微服务"><a href="#1、回顾微服务" class="headerlink" title="1、回顾微服务"></a>1、回顾微服务</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>我们先看微服务的提出者马丁福勒的论文中，是如何描述微服务的</p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/1.png" alt="1"></p><p>微服务是一种架构模式或者架构风格，它提倡将单一的应用程序划分成一组小的服务，每个服务运行在其独立的进程中-，服务之间相互协调，配置，共同为用户提供最终的价值；</p><p><strong>通俗点：</strong></p><p>封建王朝，很有多州郡，每个州郡都是皇上的亲戚，也有贡献突出的将军，镇南侯，平西王等等封疆大吏，他们每个人在自己的管辖区域，就是最高权力的象征。</p><p>自己的州郡都独立运营（<strong>单一架构</strong>）</p><p>但是风土人情不同，统治的策略也要满足不同的需求。（南方有文化底蕴，孔夫子教化即可。西北民风彪悍，肯定要用雷霆手段）</p><p>这样大大小小的不同州郡，统一起来，就是一个至高权力的朝廷（<strong>总架构</strong>）</p><p><strong>总结：</strong></p><p>将传统的一站式应用，拆分成一个一个独立的服务，彻底的解除耦合，每个服务提供单个业务功能的服务，一个服务就做一件事，成立一个独立的进程，能够自行启动和销毁，甚至拥有独立的数据库。</p><h3 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h3><ol><li><p>每个服务内聚，足够小，开发简单，效率高，一个服务做一件事；</p></li><li><p>微服务是松耦合的，无论是开发还是部署阶段都是独立；</p></li><li><p>微服务能使用不同的语言开发；</p></li></ol><p><strong>4)</strong> <strong>微服务只是业务逻辑代码，不会和HTML，CSS或其他页面组件混合；</strong></p><ol start="5"><li>每个服务都有自己的储存能力，可以有自己的数据库，当然，也可以有统一的数据；</li></ol><h3 id="3-缺点"><a href="#3-缺点" class="headerlink" title="3. 缺点"></a>3. 缺点</h3><ol><li><p>开发人员要处理分布式系统的复杂性；</p></li><li><p>随着服务的增加，运维的难度越大；</p></li><li><p>系统部署依赖</p></li><li><p>通信成本加大</p></li><li><p>数据一致性难搞</p></li><li><p>系统集成测试麻烦</p></li><li><p>性能监控不易</p></li><li><p>。。。。</p></li></ol><h3 id="4-微服务与微服务架构"><a href="#4-微服务与微服务架构" class="headerlink" title="4. 微服务与微服务架构"></a>4. 微服务与微服务架构</h3><h4 id="4-1-微服务"><a href="#4-1-微服务" class="headerlink" title="4.1 微服务"></a>4.1 微服务</h4><ul><li><p>强调的是一个服务的大小，**关注的是一个点 **，能够解决某个问题而存在的应用，类似于项目中的某个工程&#x2F;module；</p></li><li><p>单独的牙科医院，眼科医院；</p></li><li><p>手机，电脑，沙发，床垫，运动服，每一个都是微服务；</p></li><li><p>**专注个体，每个个体完成一个具体的任务或功能； **</p></li></ul><h4 id="4-2-微服务架构"><a href="#4-2-微服务架构" class="headerlink" title="4.2 微服务架构"></a>4.2 微服务架构</h4><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/2.png"></p><ul><li><p>一种架构模式，它提倡单一应用程序划分一组小的服务，服务之间相互协调，相互配合，为用户提供最终的价值；</p></li><li><p>服务之间采用轻量级通信机制，（HTTP协议的RESTfull）</p></li><li><p>每个服务都围绕具体的业务进行构建，并且能够独立部署到生产环境中；</p></li><li><p>尽量避免统一的，集中式的服务管理机制</p></li><li><p><b style='color:red'>单独的门诊就不要了，我们所有的门诊整合，形成了一个综合性医院</b></p></li><li><p>小米生态链，牙刷，电饭锅，手机，路由器，全是小米的。</p></li></ul><h4 id="4-3-SpringCloud和SpringBoot区别？"><a href="#4-3-SpringCloud和SpringBoot区别？" class="headerlink" title="4.3 SpringCloud和SpringBoot区别？"></a>4.3 SpringCloud和SpringBoot区别？</h4><ul><li>SpringBoot专注于快速方便的开发单个个体服务；</li><li>SpringCloud关注全局微服务的协调和整理，它将SpringBoot开发的一个个单体微服务整合起来；</li><li>SpringBoot可以独立使用开发，但是SpringCloud离不开SpringBoot，属于依赖关系；</li><li>**SpringBoot属于一个科室，SpringCloud是综合医院； **</li></ul><h4 id="4-4-SpringCloud对比Dubbo"><a href="#4-4-SpringCloud对比Dubbo" class="headerlink" title="4.4 SpringCloud对比Dubbo"></a>4.4 SpringCloud对比Dubbo</h4><table><thead><tr><th></th><th>**Dubbo **</th><th>**SpringCloud **</th></tr></thead><tbody><tr><td>服务注册中心</td><td>Zookeeper</td><td>String Cloud Netflix Eureka</td></tr><tr><td>服务调用方式</td><td>RPC</td><td>REST API</td></tr><tr><td>服务监控</td><td>Dubbo-monitor</td><td>Spring Boot Admin</td></tr><tr><td>断路器</td><td>不完善</td><td>Spring Cloud Netflix Hystrix</td></tr><tr><td>服务网关</td><td>无</td><td>Spring Cloud Netflix Zuul</td></tr><tr><td>分布式配置</td><td>无</td><td>Spring Cloud Config</td></tr><tr><td>服务跟踪</td><td>无</td><td>Spring Cloud Sleuth</td></tr><tr><td>消息总线</td><td>无</td><td>Spring Cloud Bus</td></tr><tr><td>数据流</td><td>无</td><td>Spring Cloud Stream</td></tr><tr><td>批量任务</td><td>无</td><td>Spring Cloud Task</td></tr></tbody></table><p><strong>品牌机和组装机</strong></p><h2 id="2、微服务架构项目"><a href="#2、微服务架构项目" class="headerlink" title="2、微服务架构项目"></a>2、微服务架构项目</h2><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/3.png" alt="3.png"></p><ul><li><h5 id="edu-lagou：父工程"><a href="#edu-lagou：父工程" class="headerlink" title="edu-lagou：父工程"></a>edu-lagou：父工程</h5></li><li><h5 id="edu-api：通用的公共子模块"><a href="#edu-api：通用的公共子模块" class="headerlink" title="edu-api：通用的公共子模块"></a>edu-api：通用的公共子模块</h5></li><li><h5 id="edu-eureka-boot：服务中心：7001"><a href="#edu-eureka-boot：服务中心：7001" class="headerlink" title="edu-eureka-boot：服务中心：7001"></a>edu-eureka-boot：服务中心：<font style='color:red;'>7001</font></h5></li><li><p><strong>edu-ad-boot：广告微服务：<font style='color:red;'>8001</font></strong></p></li><li><h5 id="edu-user-boot：用户微服务：8002"><a href="#edu-user-boot：用户微服务：8002" class="headerlink" title="edu-user-boot：用户微服务：8002"></a>edu-user-boot：用户微服务：<font style='color:red;'>8002</font></h5></li><li><p><strong>edu-authority-boot：认证微服务：<font style='color:red;'>80</font></strong></p></li><li><h5 id="edu-course-boot：课程微服务：8004"><a href="#edu-course-boot：课程微服务：8004" class="headerlink" title="edu-course-boot：课程微服务：8004"></a>edu-course-boot：课程微服务：<font style='color:red;'>8004</font></h5></li><li><p><strong>edu-comment-boot：留言微服务：<font style='color:red;'>8005</font></strong></p></li><li><h5 id="edu-pay-boot：支付微服务：8006"><a href="#edu-pay-boot：支付微服务：8006" class="headerlink" title="edu-pay-boot：支付微服务：8006"></a>edu-pay-boot：支付微服务：<font style='color:red;'>8006</font></h5></li><li><p><strong>edu-order-boot：订单微服务：<font style='color:red;'>8007</font></strong></p></li><li><p><strong>edu-config-boot：配置中心：<font style='color:red;'>8008</font></strong></p></li><li><p><strong>edu-gateway-boot：网关微服务：<font style='color:red;'>9001</font></strong></p></li></ul><h2 id="3、搭建项目"><a href="#3、搭建项目" class="headerlink" title="3、搭建项目"></a>3、搭建项目</h2><h3 id="3-1-父工程"><a href="#3-1-父工程" class="headerlink" title="3.1 父工程"></a>3.1 父工程</h3><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210319182134660.png" alt="image-20210319182134660"></p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210319182308234.png" alt="image-20210319182308234"></p><ul><li>父工程为聚合项目，打包方式为pom</li><li>src目录也没有意义，可以删除</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-lagou<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>2020.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-创建服务中心"><a href="#3-2-创建服务中心" class="headerlink" title="3.2 创建服务中心"></a>3.2 创建服务中心</h3><ul><li>在父工程中创建一个新的Module</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20201012170225301.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-lagou<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-eureka-boot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>edu-eureka-boot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>开启服务管理器，调试会方便一些</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20201012170702860.png" alt="image-20201012170702860"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span> <span class="hljs-comment">//开启Eureka服务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduEurekaBootApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EduEurekaBootApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改配置文件后缀为 yml</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20201012171330757.png" alt="image-20201012171330757"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-comment"># 配置服务端口</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7001</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment"># 配置eureka服务器地址</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br>    <span class="hljs-comment">#是否需要将自己注册到注册中心(注册中心集群需要设置为true)</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#是否需要搜索服务信息 因为自己是注册中心所以为false</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><ul><li>启动项目</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20201012171736350.png" alt="image-20201012171736350"></p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20201012171932331.png" alt="image-20201012171932331"></p><hr><h1 id="02-广告微服务"><a href="#02-广告微服务" class="headerlink" title="02 广告微服务"></a>02 广告微服务</h1><h2 id="广告微服务：8001"><a href="#广告微服务：8001" class="headerlink" title="广告微服务：8001"></a>广告微服务：<font style='color:red;'>8001</font></h2><p>edu-ad-boot：广告微服务：<font style='color:red;'>8001</font></p><ul><li><p>通过spring初始化器创建项目，引入web和eureka client</p></li><li><p>父工程加入dao相关依赖：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-lagou<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-ad-boot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>edu-ad-boot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- web --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- eureka客户端 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mybatis plus --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- mysql --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--pojo持久化使用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.persistence<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.persistence-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lagou.eduadboot.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> javax.persistence.Id;<br><span class="hljs-keyword">import</span> javax.persistence.Table;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Table(name=&quot;promotion_ad&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PromotionAd</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">29054335318173039L</span>;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Integer  id;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 广告名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer spaceId;<br>    <span class="hljs-keyword">private</span> String keyword;<br>    <span class="hljs-keyword">private</span> String htmlContent;<br>    <span class="hljs-keyword">private</span> String text;<br>    <span class="hljs-keyword">private</span> String link;<br>    <span class="hljs-keyword">private</span> Date startTime;<br>    <span class="hljs-keyword">private</span> Date endTime;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-keyword">private</span> Integer status ;<br>    <span class="hljs-keyword">private</span> Integer priority;<br>    <span class="hljs-keyword">private</span> String img;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>dao实现 通过广告位查询广告</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lagou.eduadboot.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.lagou.eduadboot.entity.PromotionAd;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AdDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;PromotionAd&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AdService</span> &#123;<br>    List&lt;PromotionAd&gt; <span class="hljs-title function_">getAdsBySpaceId</span><span class="hljs-params">(Integer sid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lagou.eduadboot.service.impl;<br><br><span class="hljs-keyword">import</span> com.lagou.eduadboot.entity.PromotionAd;<br><span class="hljs-keyword">import</span> com.lagou.eduadboot.service.AdService;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class="hljs-keyword">import</span> com.lagou.eduadboot.mapper.AdDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AdService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AdDao adDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;PromotionAd&gt; <span class="hljs-title function_">getAdsBySpaceId</span><span class="hljs-params">(Integer sid)</span>&#123;<br>        QueryWrapper&lt;PromotionAd&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        qw.eq(<span class="hljs-string">&quot;space_id&quot;</span>, sid); <span class="hljs-comment">// where comment_id = #&#123;cid&#125;</span><br>        <span class="hljs-keyword">return</span> adDao.selectList(qw);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lagou.eduadboot.controller;<br><br><span class="hljs-keyword">import</span> com.lagou.eduadboot.entity.PromotionAd;<br><span class="hljs-keyword">import</span> com.lagou.eduadboot.service.AdService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;ad&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AdService adService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;getAdsBySpaceId/&#123;spaceid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;PromotionAd&gt; <span class="hljs-title function_">getAdsBySpaceId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;spaceid&quot;)</span> Integer sid)</span>&#123;<br>        List&lt;PromotionAd&gt; list = adService.getAdsBySpaceId(sid);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-ad-boot</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.204.141:3306/edu_ad?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123123</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka/</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></code></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">// 注册到中心的客户端</span><br><span class="hljs-meta">@MapperScan(&quot;com.lagou.eduadboot.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduAdBootApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EduAdBootApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li>使用Element-UI的轮播组件展示广告：<a href="https://element.faas.ele.me/#/zh-CN/component/installation">https://element.faas.ele.me/#/zh-CN/component/installation</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Header</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--广告--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot; width:1200px; margin:0px auto; margin-top:20px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-carousel</span> <span class="hljs-attr">indicator-position</span>=<span class="hljs-string">&quot;outside&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-carousel-item</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item , index) in adList&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;item.link&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;item.img&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 100%;height: 100%;object-fit: cover;&#x27;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-carousel-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-carousel</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 1200PX; min-height:500px; margin:0px auto;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAdList</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br><span class="hljs-comment">// 获取顶部轮播广告</span><br>    <span class="hljs-title function_">getAdList</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>      .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:8001/ad/getAdsBySpaceId/&quot;</span>+<span class="hljs-number">1</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">adList</span> = result.<span class="hljs-property">data</span>;<br>      &#125;).<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;获取轮播广告失败！&quot;</span>);<br>      &#125; );<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="首页侧面广告"><a href="#首页侧面广告" class="headerlink" title="首页侧面广告"></a>首页侧面广告</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--微信连接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:330px; height:350px; display: inline-block; float:right; border:1px solid red;&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>精选文章<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article-content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;split-line&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom:20px;&quot;</span>   &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;split-word&quot;</span>&gt;</span>还可以在这里找到我们<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-list&quot;</span> &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-item&quot;</span>  &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;qr-wrapper&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;qr-wrapper&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none;&quot;</span> @<span class="hljs-attr">mouseout</span>=<span class="hljs-string">&quot;hideqr()&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">img</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../assets/wechat-qr.47ac3f5.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;二维码&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;qr-wrapper-img&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> @<span class="hljs-attr">mouseover</span>=<span class="hljs-string">&quot;showqr()&quot;</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图1&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;微信&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-item-img&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-name&quot;</span>&gt;</span>微信<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-item hover-pointer&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;gozhihu()&quot;</span> &gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">img</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图2&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;知乎&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-item-img&quot;</span>&gt;</span> <br>          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-name&quot;</span>&gt;</span>知乎<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-item hover-pointer&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;gowb()&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图3&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;微博&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-item-img&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-name&quot;</span>&gt;</span>微博<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 显示微信公众号二维码</span><br><span class="hljs-title function_">showqr</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;qr-wrapper&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;block&quot;</span>;<br>&#125;,<br><span class="hljs-comment">// 隐藏微信公众号二维码</span><br><span class="hljs-title function_">hideqr</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;qr-wrapper&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;<br>&#125;,<br><span class="hljs-comment">// 跳转到知乎</span><br><span class="hljs-title function_">gozhihu</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;https://www.zhihu.com/org/la-gou-kai-wu-xun-lian-ying&#x27;</span>);<br>&#125;,<br><span class="hljs-comment">// 跳转到微博</span><br><span class="hljs-title function_">gowb</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;https://weibo.com/p/1006066707072494/home?from=page_100606&amp;mod=TAB&amp;is_hot=1#place&#x27;</span>);<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="网关微服务：9001"><a href="#网关微服务：9001" class="headerlink" title="网关微服务：9001"></a>网关微服务：<font style='color:red;'>9001</font></h2><p>edu-gateway-boot：网关微服务：<font style='color:red;'>9001</font></p><ul><li>你想吃到饺子馅，得先吃饺子皮</li><li>每个提供服务的url如果都暴露出来的话，不安全。我们应该采用一种转发的形式来提供统一的url，将具体的服务url隐藏</li><li>在父工程下通过spring初始化器创建新模块，不需要引入任何提供的依赖，而是手动修改依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-lagou<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-gateway-boot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>edu-gateway-boot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- eureka 客户端 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--GateWay 网关--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--引入webflux--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduGatewayBootApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EduGatewayBootApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-gateway-boot</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">edu-routes-ad</span> <span class="hljs-comment"># 路由名</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://edu-ad-boot</span>  <span class="hljs-comment"># 去注册中心查找的微服务名</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment"># 当断言成功后，交给某一个微服务处理时使用的是转发</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/ad/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span>   <span class="hljs-comment"># 去掉uri中的第一部分</span><br></code></pre></td></tr></table></figure><p>测试1：<a href="http://localhost:9001/ad/ad/getAdsBySpaceId/1">http://localhost:9001/ad/ad/getAdsBySpaceId/1</a></p><p>配置多个微服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-gateway-boot</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">edu-routes-course</span> <br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://edu-course-boot</span>  <br>          <span class="hljs-attr">predicates:</span> <br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/course/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span>   <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">edu-routes-comment</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://edu-comment-boot</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/comment/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">edu-routes-order</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://edu-order-boot</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">edu-routes-pay</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://edu-pay-boot</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/pay/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">edu-routes-user</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://edu-user-boot</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br></code></pre></td></tr></table></figure><hr><h1 id="03-单点登录（SSO）"><a href="#03-单点登录（SSO）" class="headerlink" title="03 单点登录（SSO）"></a>03 单点登录（SSO）</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><ul><li>传统的单体架构项目，我们将登陆信息保存在session中，需要的获取getSession就可以了，但是要知道session是属于服务器的，也就是一个tomcat对应一个session</li><li>当我们做分布式集群架构的项目时，tomcat多个，session就对应多个，那在tomcat1中保存的用户信息，在tomcat3中就获取不到了</li><li>所以，session做是否登录的验证并不全面</li><li>而且，我们发现一个有意思的事情</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210214133410732.png"></p><ul><li>要知道，两个网站的网址分别是：<a href="https://www.taobao.com/">https://www.taobao.com</a> 和 <a href="https://www.tmall.com,域名完全不一样,是如何做到一次登录,两个系统都登录呢!/">https://www.tmall.com，域名完全不一样，是如何做到一次登录，两个系统都登录呢！</a></li><li>原因是“阿里巴巴”专门为这些应用搭建了一个“登录身份认证中心”，无论谁登录，都要得到这个中心统一颁发的“令牌”，方可成功</li><li>搭建“颁发令牌的中心”的解决方案，我们就叫做“单点登录系统”</li><li>单点登录全称 Single Sign On（以下简称SSO），是指在多系统应用群中登录一个系统，便可在其他所有系统中得到授权而无需再次登录，包括单点登录与单点注销两部分</li></ul><h2 id="2、流程详述"><a href="#2、流程详述" class="headerlink" title="2、流程详述"></a>2、流程详述</h2><ol><li>接收用户名和密码</li><li>验证用户名和密码</li><li>生成token（使用JWT），将用户信息写到token中</li><li>把token写到redis中，并设置过期时间</li><li>把token返回给客户端，并写到cookie中</li><li>客户端每次打开浏览器都会从cookie中获取token，然后去sso校验token（是否存在或是否正确）</li></ol><p><strong>详情参考下图：</strong></p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210224173221295.png" alt="image-20210224173221295"></p><h2 id="3、JWT"><a href="#3、JWT" class="headerlink" title="3、JWT"></a>3、JWT</h2><p>Json Web Token，基于json格式信息一种token令牌。</p><p>JWT token 包含三部分，第一部分header、第二部分payload、第三部分签证</p><ol><li><p><strong>第一部分</strong>：利用base64算法处理json信息，作为token第一部分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>typ<span class="hljs-punctuation">:</span> jwt<span class="hljs-punctuation">,</span><br>alg<span class="hljs-punctuation">:</span> HS256<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>第二部分</strong>：利用base64算法处理json信息，作为token第二部分，可存放用户的各项信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>exp<span class="hljs-punctuation">:</span>xxx<span class="hljs-punctuation">,</span><br>uid<span class="hljs-punctuation">:</span>xxx<span class="hljs-punctuation">,</span><br>name<span class="hljs-punctuation">:</span>xxx<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>第三部分</strong>：将“<strong>第一部分</strong>.<strong>第二部分</strong>”，然后调用header中指定的alg算法HS256进行加密处理。（需要一个secret秘钥，不对外公开）,作为第三部分结果</p></li></ol><p>例如：</p><pre><code class="hljs">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXNzd29yZCI6IjEiLCJuaWNrbmFtZSI6IuW5sumlreS6uiIsInBvcnRyYWl0IjoiaHR0cDovLzE5Mi4xNjguMjA0LjE0MS9ncm91cDEvTTAwLzAwLzAwL3dLak1qV0FhWVJxQVJ0TWxBQVdJQ2ZRbkh1azk2MS5qcGciLCJleHAiOjE2MTMyMDI0MDksInVzZXJpZCI6MTAwMDMwMDI0fQ.s38sQnGe9Eybr8hfcFuJyDIg-tHpQo7vgRDAStthuRc</code></pre><h2 id="4、核心代码"><a href="#4、核心代码" class="headerlink" title="4、核心代码"></a>4、核心代码</h2><p><strong>edu-authority-boot：认证微服务：<font style='color:red;'>8003</font></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-lagou<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-authority-boot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>edu-authority-boot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- web --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- eureka客户端 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mybatis plus --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- mysql --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--pojo持久化使用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.persistence<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.persistence-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--自动getset--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--jwt--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--redis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span>  <span class="hljs-comment">//get和set都全部生成了</span><br><span class="hljs-meta">@Table(name=&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">89788707895046947L</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//@Id</span><br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户昵称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户头像地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String portrait;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册手机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户密码（可以为空，支持只用验证码注册、登录）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册ip</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String regIp;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否有效用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object accountNonExpired;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 账号是否未过期</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object credentialsNonExpired;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否未锁定</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object accountNonLocked;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户状态：ENABLE能登录，DISABLE不能登录</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String status;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否删除</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object isDel;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 记录更新时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-comment">// 数据传输对象（DTO) Data Transfer Object</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDTO</span>&lt;User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> state;  <span class="hljs-comment">// 操作状态</span><br>    <span class="hljs-keyword">private</span> String message;  <span class="hljs-comment">// 状态描述</span><br>    <span class="hljs-keyword">private</span> User content;  <span class="hljs-comment">// 响应内容</span><br><br>    <span class="hljs-keyword">private</span> String token;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>常量类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">常量内容说明</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduConstant</span> &#123;<br><br>    <span class="hljs-comment">// 状态码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">ERROR_NOT_FOUND_PHONE_CODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">ERROR_PASSWORD_CODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">LOGIN_SUCCESS_CODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">TOKEN_SUCCESS_CODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">TOKEN_TIMEOUT_CDOE</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">TOKEN_NULL_CODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">TOKEN_ERROR_CDOE</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><br><br><span class="hljs-comment">// 状态描述</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">ERROR_NOT_FOUND_PHONE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;该手机尚未注册&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">ERROR_PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;登录失败，帐号密码不匹配&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">LOGIN_SUCCESS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;登录成功&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">TOKEN_SUCCESS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;令牌校验通过&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">TOKEN_TIMEOUT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;令牌过期&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">TOKEN_ERROR1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;令牌格式错误！或为空令牌&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">TOKEN_ERROR2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;校验失败,token令牌就是错误的&quot;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>封装好的jwt工具类 JwtUtil.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lagou.eduauthorityboot.tools;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> com.auth0.jwt.JWT;<br><span class="hljs-keyword">import</span> com.auth0.jwt.algorithms.Algorithm;<br><span class="hljs-keyword">import</span> com.auth0.jwt.exceptions.JWTDecodeException;<br><span class="hljs-keyword">import</span> com.auth0.jwt.exceptions.JWTVerificationException;<br><span class="hljs-keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;<br><span class="hljs-keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;<br><span class="hljs-keyword">import</span> com.auth0.jwt.interfaces.JWTVerifier;<br><span class="hljs-keyword">import</span> com.lagou.eduauthorityboot.entity.User;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtUtil</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">EXPIRE_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TOKEN_SECRET</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;laosunshigedashuaige666&quot;</span>;  <span class="hljs-comment">//secret秘钥：自定义</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成签名，15分钟过期</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> **username**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> **password**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createToken</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 设置过期时间</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + EXPIRE_TIME);<br>        <span class="hljs-comment">// 私钥和加密算法</span><br>        <span class="hljs-type">Algorithm</span> <span class="hljs-variable">algorithm</span> <span class="hljs-operator">=</span> Algorithm.HMAC256(TOKEN_SECRET);<br>        <span class="hljs-comment">// 设置头部信息</span><br>        Map&lt;String, Object&gt; header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">2</span>);<br>        header.put(<span class="hljs-string">&quot;typ&quot;</span>, <span class="hljs-string">&quot;JWT&quot;</span>);<br>        header.put(<span class="hljs-string">&quot;alg&quot;</span>, <span class="hljs-string">&quot;HS256&quot;</span>);<br>        <span class="hljs-comment">// 返回token字符串</span><br>        <span class="hljs-keyword">return</span> JWT.create()<br>                .withHeader(header)  <span class="hljs-comment">// 第一部分</span><br>                .withClaim(<span class="hljs-string">&quot;nickname&quot;</span>, user.getName())  <span class="hljs-comment">// 第二部分</span><br>                .withClaim(<span class="hljs-string">&quot;userid&quot;</span>, user.getId())<br>.withClaim(<span class="hljs-string">&quot;password&quot;</span>, user.getPassword())<br>.withClaim(<span class="hljs-string">&quot;portrait&quot;</span>, user.getPortrait())<br>                .withExpiresAt(date)    <span class="hljs-comment">//设置过期时间</span><br>                .sign(algorithm);   <span class="hljs-comment">// 第三部分</span><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 检验token是否正确</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> **token**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">isVerify</span><span class="hljs-params">(String token)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Algorithm</span> <span class="hljs-variable">algorithm</span> <span class="hljs-operator">=</span> Algorithm.HMAC256(TOKEN_SECRET); <span class="hljs-comment">//使用HMAC256加密算法，生成签名</span><br><span class="hljs-type">JWTVerifier</span> <span class="hljs-variable">verifier</span> <span class="hljs-operator">=</span> JWT.require(algorithm).build();<br>verifier.verify(token); <span class="hljs-comment">// 解析token</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// 校验通过</span><br>&#125; <span class="hljs-keyword">catch</span> (TokenExpiredException e) &#123;<br>e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;令牌过期&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 令牌过期</span><br>&#125; <span class="hljs-keyword">catch</span> (JWTDecodeException e) &#123;<br>e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;令牌格式错误！或为空令牌！&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<span class="hljs-comment">// 校验失败,token令牌就是错误的</span><br>&#125; <span class="hljs-keyword">catch</span> (JWTVerificationException e) &#123;<br>e.printStackTrace();<br>System.out.println(<span class="hljs-string">&quot;校验失败,token令牌就是错误的&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<span class="hljs-comment">// 校验失败,token令牌就是错误的</span><br>&#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *从token解析出 用户编号 信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">parseTokenUserid</span><span class="hljs-params">(String token)</span> &#123;<br><span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> JWT.decode(token);<br><span class="hljs-keyword">return</span> jwt.getClaim(<span class="hljs-string">&quot;userid&quot;</span>).asInt();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *从token解析出 昵称 信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">parseTokenNickname</span><span class="hljs-params">(String token)</span> &#123;<br><span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> JWT.decode(token);<br><span class="hljs-keyword">return</span> jwt.getClaim(<span class="hljs-string">&quot;nickname&quot;</span>).asString();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *从token解析出 头像 信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">parseTokenPortrait</span><span class="hljs-params">(String token)</span> &#123;<br><span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> JWT.decode(token);<br><span class="hljs-keyword">return</span> jwt.getClaim(<span class="hljs-string">&quot;portrait&quot;</span>).asString();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *从token解析出 密码 信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">parseTokenPassword</span><span class="hljs-params">(String token)</span> &#123;<br><span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> JWT.decode(token);<br><span class="hljs-keyword">return</span> jwt.getClaim(<span class="hljs-string">&quot;password&quot;</span>).asString();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;user&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorityContoller</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;login&quot;)</span><br>    <span class="hljs-keyword">public</span> UserDTO <span class="hljs-title function_">login</span><span class="hljs-params">(String phone, String password)</span>&#123;<br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">dto</span> <span class="hljs-operator">=</span> userService.login(phone, password);<br>        <span class="hljs-keyword">return</span> dto;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;checkToken&quot;)</span><br>    <span class="hljs-keyword">public</span> UserDTO <span class="hljs-title function_">checkToken</span><span class="hljs-params">(String token)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;待校验的token = &quot;</span> + token);<br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">dto</span> <span class="hljs-operator">=</span> userService.checkToken(token);<br>        <span class="hljs-keyword">return</span> dto;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service<ul><li>登录的两种方案：</li><li>1、将帐号和密码同时传入到数据库进行匹配</li><li>2、先传入帐号匹配，成功的话，再验证密码</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDTO <span class="hljs-title function_">login</span><span class="hljs-params">(String phone, String password)</span> &#123;<br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">dto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDTO</span>();<br>        <span class="hljs-comment">// 创建条件构造</span><br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        <span class="hljs-comment">// 编写具体的查询条件</span><br>        queryWrapper.eq(<span class="hljs-string">&quot;phone&quot;</span>, phone);<br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> userMapper.selectCount(queryWrapper);<br>        <span class="hljs-keyword">if</span>(i1 == <span class="hljs-number">0</span>)&#123;  <span class="hljs-comment">// 手机号不存在</span><br>            dto.setState(EduConstant.ERROR_NOT_FOUND_PHONE_CODE);<br>            dto.setMessage(EduConstant.ERROR_NOT_FOUND_PHONE);<br>            dto.setContent(<span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">return</span> dto;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            queryWrapper.eq(<span class="hljs-string">&quot;password&quot;</span>, password);<br>            <span class="hljs-comment">// 调用mp的查询方法selectOne</span><br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(queryWrapper);<br>            <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">// 帐号密码不匹配</span><br>                dto.setState(EduConstant.ERROR_PASSWORD_CODE);<br>                dto.setMessage(EduConstant.ERROR_PASSWORD);<br>                dto.setContent(<span class="hljs-literal">null</span>);<br>                <span class="hljs-keyword">return</span> dto;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// 登录成功</span><br>                dto.setState(EduConstant.LOGIN_SUCCESS_CODE);<br>                dto.setMessage(EduConstant.LOGIN_SUCCESS);<br>                <span class="hljs-comment">//dto.setContent(user);</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtUtil.createToken(user);<br>                dto.setToken(token);<br><br>                <span class="hljs-comment">// 将token和用户信息存在redis中</span><br>                redisTemplate.opsForValue().set(token, token,<span class="hljs-number">15</span>, TimeUnit.SECONDS);<br>                System.out.println(<span class="hljs-string">&quot;token = &quot;</span> + token);<br>                <span class="hljs-keyword">return</span> dto;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> UserDTO <span class="hljs-title function_">checkToken</span><span class="hljs-params">(String token)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> JwtUtil.isVerify(token);<br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">dto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDTO</span>();<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123;<br>            dto.setState(EduConstant.TOKEN_SUCCESS_CODE);<br>            dto.setMessage(EduConstant.TOKEN_SUCCESS);<br>            <span class="hljs-comment">// 校验通过，重新设置过期时间</span><br>            redisTemplate.opsForValue().set(token, token,<span class="hljs-number">15</span>*<span class="hljs-number">1000</span>, TimeUnit.SECONDS);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;<br>            dto.setState(EduConstant.TOKEN_TIMEOUT_CDOE);<br>            dto.setMessage(EduConstant.TOKEN_TIMEOUT);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == <span class="hljs-number">2</span>)&#123;<br>            dto.setState(EduConstant.TOKEN_NULL_CODE);<br>            dto.setMessage(EduConstant.TOKEN_ERROR1);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            dto.setState(EduConstant.TOKEN_ERROR_CDOE);<br>            dto.setMessage(EduConstant.TOKEN_ERROR2);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dto;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>mapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-comment"># 服务端口号</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8003</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment"># 服务名称 - 服务之间使用名称进行通讯</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-authority-boot</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.204.141:3306/edu_user?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123123</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.204</span><span class="hljs-number">.141</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment"># 填写注册中心服务器地址</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br>    <span class="hljs-comment"># 是否需要将自己注册到注册中心</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 是否需要搜索服务信息</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-comment"># 使用ip地址注册到注册中心</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 注册中心列表中显示的状态参数</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></code></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">// 注册到中心的客户端</span><br><span class="hljs-meta">@MapperScan(&quot;com.lagou.eduauthorityboot.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduAuthorityBootApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EduAuthorityBootApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、前端联调"><a href="#5、前端联调" class="headerlink" title="5、前端联调"></a>5、前端联调</h2><ul><li>vue中解析token</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">npm install jwt-decode --save<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> jwtDecode <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jwt-decode&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> code = <span class="hljs-title function_">jwtDecode</span>(result.<span class="hljs-property">data</span>.<span class="hljs-property">token</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( code );<br></code></pre></td></tr></table></figure><ul><li>vue中使用cookie</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//设置cookie</span><br><span class="hljs-title function_">setCookie</span>(<span class="hljs-params">key,value,expires</span>)&#123;<br>  <span class="hljs-keyword">var</span> exp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  exp.<span class="hljs-title function_">setTime</span>(exp.<span class="hljs-title function_">getTime</span>() + expires*<span class="hljs-number">1000</span>);<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = key + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">escape</span> (value) + <span class="hljs-string">&quot;;expires=&quot;</span> + exp.<span class="hljs-title function_">toGMTString</span>();<br>&#125;,<br><span class="hljs-comment">//从cookie中获取token</span><br><span class="hljs-title function_">getCookie</span>(<span class="hljs-params">key</span>)&#123;<br>  <span class="hljs-keyword">var</span> name = key + <span class="hljs-string">&quot;=&quot;</span>;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;;&#x27;</span>) &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">var</span> ca = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;;&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;ca.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> c = ca[i].<span class="hljs-title function_">trim</span>();<br>        <span class="hljs-keyword">if</span> (c.<span class="hljs-title function_">indexOf</span>(name)==<span class="hljs-number">0</span>) &#123; <br>          <span class="hljs-keyword">return</span> c.<span class="hljs-title function_">substring</span>(name.<span class="hljs-property">length</span>,c.<span class="hljs-property">length</span>); <br>        &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setCookie</span>(key,value,expires);<span class="hljs-comment">// 保存cookie</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setCookie</span>(<span class="hljs-string">&quot;user&quot;</span>,result.<span class="hljs-property">data</span>.<span class="hljs-property">token</span>,<span class="hljs-number">60</span>);<br>-------------------------------------------------------------<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getCookie</span>(key); <span class="hljs-comment">// 取出cookie</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&quot;user&quot;</span>);<br></code></pre></td></tr></table></figure><p>如果是多域名的分布式系统，记得要在去往sso验证之前，吧当前访问的域名url当参数传过去，否则sso不知道你是从哪里来的，也就无法跳回去！</p><p>例如：从<a href="http://www.aaa.com前往sso，和www.bbb.com前往sso，sso验证通过之后要调回进入时的页面，到底是a？还是b？">www.aaa.com前往sso，和www.bbb.com前往sso，sso验证通过之后要调回进入时的页面，到底是a？还是b？</a></p><p>所以我们前往sso的时候，就要这样写条状url：<a href="http://192.168.1.1:8010/user?param=www.aaa.com">http://192.168.1.1:8010/user?param=www.aaa.com</a></p><h2 id="6、微信扫码登录改造"><a href="#6、微信扫码登录改造" class="headerlink" title="6、微信扫码登录改造"></a>6、微信扫码登录改造</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>commons</p><ul><li>HttpClientUtil.java</li></ul></li><li><p>entity</p><ul><li>Token.java</li><li>WxUser.java</li></ul></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;user&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WxLoginController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">// 自定注入</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;wxlogin&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">wxlogin</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 1. 微信官方发给我们一个临时凭证</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;【临时凭证】code = &quot;</span> + code);<br>        <span class="hljs-comment">// 2. 通过code，去微信官方申请一个正式的token（令牌）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">getTokenByCode_url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=wxd99431bbff8305a0&amp;secret=60f78681d063590a469f1b297feff3c4&amp;code=&quot;</span> + code + <span class="hljs-string">&quot;&amp;grant_type=authorization_code&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tokenString</span> <span class="hljs-operator">=</span> HttpClientUtil.doGet(getTokenByCode_url);<br>        System.out.println(<span class="hljs-string">&quot;tokenString = &quot;</span> + tokenString);<br>        <span class="hljs-comment">// 将json格式的token字符串转换成实体对象，方便存和取</span><br>        <span class="hljs-type">Token</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JSON.parseObject(tokenString, Token.class);<br><br>        <span class="hljs-comment">// 3. 通过token，去微信官方获取用户的信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">getUserByToken_url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/userinfo?access_token=&quot;</span> + token.getAccess_token() + <span class="hljs-string">&quot;&amp;openid=&quot;</span> + token.getOpenid();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userinfoString</span> <span class="hljs-operator">=</span> HttpClientUtil.doGet(getUserByToken_url);<br>        System.out.println(<span class="hljs-string">&quot;userinfoString = &quot;</span> + userinfoString);<br>        <span class="hljs-comment">// 将json格式的user字符串转换成实体对象，方便存和取</span><br>        <span class="hljs-type">WxUser</span> <span class="hljs-variable">wxUser</span> <span class="hljs-operator">=</span> JSON.parseObject(userinfoString, WxUser.class);<br>        System.out.println(<span class="hljs-string">&quot;微信昵称 = &quot;</span> + wxUser.getNickname());<br>        System.out.println(<span class="hljs-string">&quot;微信头像 = &quot;</span> + wxUser.getHeadimgurl());<br><br>        <span class="hljs-comment">// 拉勾的业务流程！ 需要 手机号（wxUser.getUnionid()）和密码（wxUser.getUnionid()）,头像和昵称</span><br><br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">dto</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 检测手机号是否注册</span><br>        dto = userService.login(wxUser.getUnionid(), wxUser.getUnionid());<br>        <span class="hljs-keyword">if</span>(dto.getState == EduConstant.ERROR_NOT_FOUND_PHONE_CODE)&#123;<br>            <span class="hljs-comment">// 未注册，先自动注册</span><br>            userService.register(wxUser.getUnionid(), wxUser.getUnionid(),wxUser.getNickname(),wxUser.getHeadimgurl());<br>            <span class="hljs-comment">// 再次登录</span><br>            dto = userService.login(wxUser.getUnionid(), wxUser.getUnionid());<br>        &#125;<br><br>        response.sendRedirect(<span class="hljs-string">&quot;http://localhost:8080&quot;</span>);<br>        <span class="hljs-keyword">return</span> dto;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;logout&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logout</span><span class="hljs-params">(String token)</span>&#123;<br>         redisTemplate.delete(token);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户注册</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> phone    手机号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> nickname 昵称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> headimg 头像</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment"> */</span><br>Integer <span class="hljs-title function_">register</span><span class="hljs-params">( String phone, String password,String nickname,String headimg)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">register</span><span class="hljs-params">(String phone, String password, String nickname, String headimg)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setPhone(phone);<br>    user.setPassword(password);<br>    user.setName(nickname);<br>    user.setPortrait(headimg);<br>    <span class="hljs-keyword">return</span> userMapper.insert(user);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>vue</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> token = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getValueByUrlParams</span>(<span class="hljs-string">&#x27;token&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(token == <span class="hljs-literal">null</span> || token == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>      <span class="hljs-comment">// 从cookie中获取user的token</span><br>     token = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&quot;user&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;刷新页面token=&gt;&quot;</span>+token);<br>    <span class="hljs-keyword">if</span>(token != <span class="hljs-literal">null</span> || token != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>      <span class="hljs-comment">// 将token发送到sso进行校验</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>      .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:80/user/checkToken&quot;</span>,&#123;<br>        <span class="hljs-attr">params</span>:&#123;<br>          <span class="hljs-attr">token</span>:token<br>        &#125;<br>      &#125;)<br>      .<span class="hljs-title function_">then</span>( <span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(result.<span class="hljs-property">data</span>.<span class="hljs-property">state</span> == <span class="hljs-number">4</span>)&#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">isLogin</span> = <span class="hljs-literal">true</span>;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setCookie</span>(<span class="hljs-string">&quot;user&quot;</span>,token,<span class="hljs-number">600</span>);<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = <span class="hljs-title function_">jwtDecode</span>(token);<br>        &#125;<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>       &#125;);<br>    &#125;<br>    <br>--------------------------------------------<br><span class="hljs-title function_">getValueByUrlParams</span>(<span class="hljs-params">paras</span>) &#123;<br>    <span class="hljs-keyword">var</span> url = location.<span class="hljs-property">href</span>;<br>    <span class="hljs-keyword">var</span> paraString = url.<span class="hljs-title function_">substring</span>(url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;?&quot;</span>) + <span class="hljs-number">1</span>, url.<span class="hljs-property">length</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>    <span class="hljs-keyword">var</span> paraObj = &#123;&#125;<br>    <span class="hljs-keyword">var</span> i, j<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; j = paraString[i]; i++) &#123;<br>        paraObj[j.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, j.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;=&quot;</span>)).<span class="hljs-title function_">toLowerCase</span>()] = j.<span class="hljs-title function_">substring</span>(j.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;=&quot;</span>) + <span class="hljs-number">1</span>, j.<span class="hljs-property">length</span>);<br>    &#125;<br>    <span class="hljs-keyword">var</span> returnValue = paraObj[paras.<span class="hljs-title function_">toLowerCase</span>()];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">typeof</span>(returnValue) == <span class="hljs-string">&quot;undefined&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> returnValue;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="7、短信验证码登录"><a href="#7、短信验证码登录" class="headerlink" title="7、短信验证码登录"></a>7、短信验证码登录</h2><ul><li><p>通过第三方短信平台向用户手机发出验证码，用户得到验证码进行登录</p></li><li><p>第三方平台，我们使用阿里云短信平台，使用手册<b style='color:blue'>《阿里云短信平台.docx》</b>（<a href="%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E5%B9%B3%E5%8F%B0.docx" title=" 阿里云短信平台.docx">点击下载</a>）</p></li><li><p><b style='color:red'>注意</b>：阿里为了防止恶意高频发送验证码，加入了流量限制，当返回下面的结果就是这个原因：</p><p><b>{“RequestId”:”D0558EEE-8331-47F4-99B5-1B4A4148373A”,”Message”:”触发天级流控Permits:10”,”Code”:”isv.BUSINESS_LIMIT_CONTROL”}</b></p><blockquote><p>短信验证码 ：使用同一个签名，对同一个手机号码发送短信验证码，支持1条&#x2F;分钟，5条&#x2F;小时 ，累计10条&#x2F;天。</p><p>短信通知： 使用同一个签名和同一个短信模板ID，对同一个手机号码发送短信通知，支持50条&#x2F;日 </p></blockquote><ul><li>所以我们个人开发测试的时候，对一个手机发送验证码太多次，就发不过去了。换个手机号发送就可以了。</li><li>或者可以进入短信的管理后台调整流量频次</li></ul></li></ul><h3 id="7-1-发送验证码"><a href="#7-1-发送验证码" class="headerlink" title="7.1 发送验证码"></a>7.1 发送验证码</h3><ul><li>yml 注意：如果yml中有中文，必须修改文件为<b style='color:red'>UTF-8</b>，否则加载yml时报错</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ali:</span><br>  <span class="hljs-attr">sms:</span><br>    <span class="hljs-attr">signName:</span> <span class="hljs-string">拉勾教育通知</span><br>    <span class="hljs-attr">templateCode:</span> <span class="hljs-string">SMS_xxx</span> <br>    <span class="hljs-attr">assessKeyId:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">assessKeySecret:</span> <span class="hljs-string">xxx</span><br></code></pre></td></tr></table></figure><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>AuthorityContoller.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;ali.sms.signName&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String signName;<br><br><span class="hljs-meta">@Value(&quot;$&#123;ali.sms.templateCode&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String templateCode;<br><br><span class="hljs-meta">@Value(&quot;$&#123;ali.sms.assessKeyId&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String assessKeyId;<br><br><span class="hljs-meta">@Value(&quot;$&#123;ali.sms.assessKeySecret&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String assessKeySecret;<br><br><span class="hljs-meta">@GetMapping(&quot;sendSms&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">(String phoneNumber)</span> &#123;<br>    <span class="hljs-type">DefaultProfile</span> <span class="hljs-variable">profile</span> <span class="hljs-operator">=</span> DefaultProfile.getProfile(<span class="hljs-string">&quot;cn-hangzhou&quot;</span>, accessKeyId, assessKeySecret);<br>    <span class="hljs-type">IAcsClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAcsClient</span>(profile);<br><br>    <span class="hljs-type">CommonRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonRequest</span>();<br>    request.setSysMethod(MethodType.POST);<br>    request.setSysDomain(<span class="hljs-string">&quot;dysmsapi.aliyuncs.com&quot;</span>);<br>    request.setSysVersion(<span class="hljs-string">&quot;2017-05-25&quot;</span>);<br>    request.setSysAction(<span class="hljs-string">&quot;SendSms&quot;</span>);<br>    request.putQueryParameter(<span class="hljs-string">&quot;RegionId&quot;</span>, <span class="hljs-string">&quot;cn-hangzhou&quot;</span>);<br>    request.putQueryParameter(<span class="hljs-string">&quot;PhoneNumbers&quot;</span>, phoneNumber);<br>    request.putQueryParameter(<span class="hljs-string">&quot;SignName&quot;</span>, signName);<br>    request.putQueryParameter(<span class="hljs-string">&quot;TemplateCode&quot;</span>, templateCode);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">vcode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)&#123;<br>        vcode = vcode + (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">9</span>);<br>    &#125;<br>    request.putQueryParameter(<span class="hljs-string">&quot;TemplateParam&quot;</span>, <span class="hljs-string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span> + vcode + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">CommonResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.getCommonResponse(request);<br>        System.out.println(response.getData());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> response.getData();<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSONObject.parseObject(jsonStr);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;OK&quot;</span>.equals(jsonObject.get(<span class="hljs-string">&quot;Message&quot;</span>)))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (ServerException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (ClientException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/qq1.png"></p><h3 id="7-2-验证码登录流程"><a href="#7-2-验证码登录流程" class="headerlink" title="7.2 验证码登录流程"></a>7.2 验证码登录流程</h3><h4 id="后端业务"><a href="#后端业务" class="headerlink" title="后端业务"></a>后端业务</h4><p>1、通过短信平台向手机发验证码，验证通过后将手机号和验证码返回给前端进行判断</p><p>2、前端比对通过，将手机号进行登录</p><ul><li>user表中如果不存在该手机号，则自动注册（插入手机号，密码为手机号，头像默认和昵称默认：手机新用户），然后登录</li><li>user表中如果存在该手机号，则登录成功（不需要比对密码）</li></ul><p>3、生成token，并返回</p><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;loginPhoneSms&quot;)</span><br><span class="hljs-keyword">public</span> UserDTO <span class="hljs-title function_">loginPhoneSms</span><span class="hljs-params">(String phoneNumber)</span> &#123;<br>    <span class="hljs-keyword">return</span> userService.loginPhoneSms(String phoneNumber);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">UserDTO <span class="hljs-title function_">loginPhoneSms</span><span class="hljs-params">( phoneNumber )</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDTO <span class="hljs-title function_">loginPhoneSms</span><span class="hljs-params">(String phoneNumber)</span> &#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(<span class="hljs-string">&quot;phone&quot;</span>,phoneNumber);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(queryWrapper);<br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//手机号不存在</span><br>            <span class="hljs-comment">// 先注册</span><br>            register(phoneNumber,phoneNumber,<span class="hljs-string">&quot;手机新用户&quot;</span>,<span class="hljs-string">&quot;xxx&quot;</span>);<br>            <span class="hljs-keyword">return</span> loginPhoneSms(phoneNumber);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>        <span class="hljs-comment">// 创建token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtUtil.createToken(user);<br>        <span class="hljs-comment">// 封装DTO</span><br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">dto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDTO</span>();<br>        dto.setState(EduConstant.LOGIN_SUCCESS_CODE);<br>        dto.setMessage(EduConstant.LOGIN_SUCCESS);<br>        dto.setToken(token);<br>        <span class="hljs-keyword">return</span> dto;<br>    &#125;<br>    <br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">register</span><span class="hljs-params">(String phone, String password, String nickname, String headimg)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setPhone(phone);<br>        user.setPassword(password);<br>        user.setName(nickname);<br>        user.setPortrait(headimg);<br>        <span class="hljs-keyword">return</span> userMapper.insert(user);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-tab-pane</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;手机登录&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginForm&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;phoneNumber&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入手机号&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;smsCode&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入验证码&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;get-verify-code&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sendSms&quot;</span>&gt;</span><br>          &#123;&#123; smsCodeTimeSecond&gt;0 ? (smsCodeTimeSecond + &#x27;s 后重试&#x27;) : &#x27;获取验证码&#x27; &#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span><br><span class="hljs-tag">      <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%;margin:0px auto;background-color: #00B38A;font-size:20px&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span><br><span class="hljs-tag">      @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;loginPhone&quot;</span>&gt;</span>登 录<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-tab-pane</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">smsCodeTimeSecond</span>:<span class="hljs-number">0</span>, <span class="hljs-comment">// 验证码倒计时的秒数</span><br>      <span class="hljs-attr">phoneNumber</span>:<span class="hljs-literal">null</span>, <span class="hljs-comment">// 发送验证码的手机号</span><br>      <span class="hljs-attr">smsCode</span>:<span class="hljs-literal">null</span>, <span class="hljs-comment">// 输入的验证码</span><br>      <span class="hljs-attr">resultPhoneNumber</span>:<span class="hljs-literal">null</span>, <span class="hljs-comment">// 返回的手机号</span><br>      <span class="hljs-attr">resultSmsCode</span>:<span class="hljs-literal">null</span>,<span class="hljs-comment">// 返回的验证码</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 给手机发验证码</span><br><span class="hljs-title function_">startSense</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:80/user/sendSms&quot;</span> , &#123;<br>    <span class="hljs-attr">params</span>:&#123;<br>      <span class="hljs-attr">phoneNumber</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">phone</span><br>    &#125;<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>( <span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( result );<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setTimeOfCode</span>();<br>  &#125; )<br>  .<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;验证码发送失败！&quot;</span>);<br>  &#125;);<br>&#125;,<br><span class="hljs-comment">// 启动验证码倒计时</span><br><span class="hljs-title function_">setTimeOfCode</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">identifyingCodeSecond</span> = <span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">let</span> identifyingCodeTimer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">identifyingCodeSecond</span>--;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">identifyingCodeSecond</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 停止计时</span><br>            <span class="hljs-built_in">clearInterval</span>(identifyingCodeTimer); <br>        &#125;<br>    &#125;, <span class="hljs-number">1000</span>);<br>&#125;,<br><span class="hljs-comment">// 手机验证码登录</span><br><span class="hljs-title function_">loginPhone</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">phoneNumber</span> == <span class="hljs-variable language_">this</span>.<span class="hljs-property">resultPhoneNumber</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">smsCode</span> == <span class="hljs-variable language_">this</span>.<span class="hljs-property">resultSmsCode</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>          .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:80/user/loginPhoneSms&quot;</span> , &#123;<br>            <span class="hljs-attr">params</span>:&#123;<br>              <span class="hljs-attr">phoneNumber</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">phoneNumber</span><br>            &#125;<br>          &#125;)<br>          .<span class="hljs-title function_">then</span>( <span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( result );<br>            <span class="hljs-keyword">if</span>(result.<span class="hljs-property">data</span>.<span class="hljs-property">state</span> == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-comment">// 1.关闭登录框</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogFormVisible</span> = <span class="hljs-literal">false</span> ; <br>            <span class="hljs-comment">// 2.更新登录状态</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">isLogin</span> = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">// 3.将返回的token保存在cookie中</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setCookie</span>(<span class="hljs-string">&quot;user&quot;</span>,result.<span class="hljs-property">data</span>.<span class="hljs-property">token</span>,<span class="hljs-number">600</span>);<br>            <span class="hljs-comment">// 4.解析token中的数据（昵称和头像）</span><br>            <span class="hljs-keyword">const</span> code = <span class="hljs-title function_">jwtDecode</span>(result.<span class="hljs-property">data</span>.<span class="hljs-property">token</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = code;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> );<br>        &#125;<br>      &#125; )<br>      .<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;发送验证码失败！&quot;</span>);<br>      &#125;); <br>    &#125;<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><hr><h1 id="04-用户微服务：8002"><a href="#04-用户微服务：8002" class="headerlink" title="04 用户微服务：8002"></a>04 用户微服务：<font style='color:red;'>8002</font></h1><p>edu-user-boot：用户微服务：<font style='color:red;'>8002</font></p><ul><li>用户头像的修改</li><li>昵称的修改</li><li>密码修改</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-lagou<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-user-boot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>edu-user-boot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- web --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- eureka客户端 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mybatis plus --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- mysql --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--pojo持久化使用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.persistence<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.persistence-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.oschina.zcx7878<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastdfs-client-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.27.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--上传文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>业务分析流程：</p><ul><li><p>更新个人信息</p><ul><li>1、点击上传头像，异步将图片上传到fasfdfs上，并返回一个fileId</li><li>2、将最新的fileId和新的昵称，一起修改，更新用户信息</li></ul></li><li><p>修改密码</p><ul><li>1、前端验证原密码和新密码是否一致</li><li>2、后端通过userid修改密码即可</li></ul></li></ul><ol><li>新建Setting.vue（已提供）</li><li>修改router&#x2F;index.js</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Setting</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Setting.vue&#x27;</span><br><br>--------------------------------------<br>&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/Setting&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Setting&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Setting</span>,<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;个人设置&#x27;</span><br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>vue</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Header/Header&quot;</span>; <span class="hljs-comment">//顶部登录条</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Footer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Footer/index&quot;</span>; <span class="hljs-comment">//顶部登录条</span><br><span class="hljs-keyword">import</span> jwtDecode <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jwt-decode&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Setting&#x27;</span>,<br>    <span class="hljs-attr">components</span>: &#123;<br>        <span class="hljs-title class_">Header</span>,<br>        <span class="hljs-title class_">Footer</span><br>    &#125;,<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">dialogImageUrl</span>: <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">//预览url</span><br>            <span class="hljs-attr">dialogVisibleImg</span>:<span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">httpRequestImg</span>:<span class="hljs-literal">false</span>,<span class="hljs-comment">//展示单个图片</span><br>            <span class="hljs-attr">dialogFormVisible</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 修改密码的模态框不显示</span><br>           <br>            <span class="hljs-attr">dialogVisible</span>:<span class="hljs-literal">false</span>,<span class="hljs-comment">// 隐藏的图片文件框</span><br>            <span class="hljs-attr">user</span>: <span class="hljs-literal">null</span>,<span class="hljs-comment">// 当前登录的用户对象信息</span><br>            <span class="hljs-attr">fileId</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-comment">// 上传图片后，返回的fastdfs的图片地址</span><br>            <span class="hljs-attr">oldPwd</span>:<span class="hljs-literal">null</span>,<span class="hljs-comment">// 旧密码</span><br>            <span class="hljs-attr">newPwd1</span>:<span class="hljs-literal">null</span>,<span class="hljs-comment">// 第一次新密码</span><br>            <span class="hljs-attr">newPwd2</span>:<span class="hljs-literal">null</span>,<span class="hljs-comment">// 第二次新密码</span><br>            <span class="hljs-attr">token</span>:<span class="hljs-literal">null</span>,<br>            <span class="hljs-attr">isLogin</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 登录状态，true：已登录，false：未登录</span><br>            <br>        &#125;;<br>    &#125;,<br>    <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">// 从url中获取token参数</span><br>        <span class="hljs-keyword">let</span> token  = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getValueByUrlParams</span>(<span class="hljs-string">&#x27;token&#x27;</span>);<br><br>        <span class="hljs-keyword">if</span>(token == <span class="hljs-literal">null</span> || token == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>            <span class="hljs-comment">// 从cookie中获取user的token</span><br>            token = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&quot;user&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span> = token;<br>    <br>        <span class="hljs-comment">//console.log(&quot;刷新setting页面token=&gt;&quot;+token);</span><br>        <span class="hljs-keyword">if</span>(token != <span class="hljs-literal">null</span> || token != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>            <span class="hljs-comment">// 将token发送到sso进行校验</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>            .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:80/user/checkToken&quot;</span>,&#123;<br>                <span class="hljs-attr">params</span>:&#123;<br>                    <span class="hljs-attr">token</span>:token<br>                &#125;<br>            &#125;)<br>            .<span class="hljs-title function_">then</span>( <span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123;<br>                <span class="hljs-keyword">if</span>(result.<span class="hljs-property">data</span>.<span class="hljs-property">state</span> == <span class="hljs-number">4</span>)&#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isLogin</span> = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setCookie</span>(<span class="hljs-string">&quot;user&quot;</span>,token,<span class="hljs-number">600</span>);<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = <span class="hljs-title function_">jwtDecode</span>(token);<br>                    <span class="hljs-comment">//console.log(&quot;------&gt;&quot;+token);</span><br>                    <span class="hljs-comment">//console.log(this.user.userid);</span><br>                &#125;<br>            &#125;)<br>            .<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>            &#125;);<br>        &#125;<br>        <br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-title function_">redirectLogin</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;/frontLogin.do&#x27;</span>, <span class="hljs-string">&#x27;_self&#x27;</span>);<br>        &#125;,<br>        <span class="hljs-comment">//切换tab页</span><br>        <span class="hljs-title function_">bang</span>(<span class="hljs-params">i</span>)&#123;<br>            <span class="hljs-comment">// alert( i );</span><br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn_j&quot;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;label-active&quot;</span>);<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn_b&quot;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;label-active&quot;</span>);<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn_p&quot;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;label-active&quot;</span>);<br>            <br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;label-one&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;none&quot;</span>;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;label-two&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;none&quot;</span>;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;label-three&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;none&quot;</span>;<br><br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn_j&quot;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;label-active&quot;</span>);<br>                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;label-one&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;block&quot;</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn_b&quot;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;label-active&quot;</span>);<br>                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;label-two&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;block&quot;</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn_p&quot;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;label-active&quot;</span>);<br>                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;label-three&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;block&quot;</span>;<br>            &#125;<br>        &#125;,<br>        <span class="hljs-comment">// 上传头像</span><br>        <span class="hljs-title function_">myUpload</span>(<span class="hljs-params">content</span>) &#123;<br>            <span class="hljs-comment">// 必须将表单中的数据进行封装才能发送，否则传不过去</span><br>            <span class="hljs-keyword">let</span> form = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br>            form.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;file&quot;</span>,content.<span class="hljs-property">file</span>);<br><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span>.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;http://localhost:8002/userSetting/upload&quot;</span> , form)<br>                .<span class="hljs-title function_">then</span>( <span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileId</span> = result.<span class="hljs-property">data</span>.<span class="hljs-property">fileId</span>;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;头像URL：&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileId</span>);<br>                <span class="hljs-comment">// 正常情况下会出现第二个图片框，true为只显示一个</span><br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">httpRequestImg</span> = <span class="hljs-literal">true</span>;<br>            &#125; )<br>            .<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;上传头像失败！&quot;</span>);<br>            &#125;);<br>        &#125;,<br>        <span class="hljs-comment">//更新个人信息</span><br>        <span class="hljs-title function_">updateInfo</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:8002/userSetting/updateUser&quot;</span> , &#123;<br>                <span class="hljs-attr">params</span>:&#123;<br>                    <span class="hljs-attr">userid</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">userid</span>,<br>                    <span class="hljs-attr">newName</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;newNickName&quot;</span>).<span class="hljs-property">value</span>,<br>                    <span class="hljs-attr">fileId</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">fileId</span><br>                &#125;<br>            &#125;).<span class="hljs-title function_">then</span>( <span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123;<br>               <span class="hljs-comment">// 友好提示</span><br>               <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&quot;上传头像失败！&quot;</span>);<br>               <span class="hljs-comment">// 退出</span><br>               <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">logout</span>();<br>               <span class="hljs-comment">// 回到首页</span><br>               <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>            &#125; )<br>            .<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;上传头像失败！&quot;</span>);<br>            &#125;);<br>        &#125;,<br>        <span class="hljs-comment">//修改密码</span><br>        <span class="hljs-title function_">updatePwd</span>(<span class="hljs-params"></span>)&#123;<br>           <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">oldPwd</span> == <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">password</span>)&#123;<br>               <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">newPwd1</span> == <span class="hljs-variable language_">this</span>.<span class="hljs-property">newPwd2</span>)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:8002/userSetting/updatePassword&quot;</span> , &#123;<br>                        <span class="hljs-attr">params</span>:&#123;<br>                            <span class="hljs-attr">userid</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">userid</span>,<br>                            <span class="hljs-attr">newPwd</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">newPwd2</span><br>                        &#125;<br>                    &#125;).<span class="hljs-title function_">then</span>( <span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123;<br>                        <span class="hljs-comment">// 友好提示</span><br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&quot;密码修改成功，请重新登录&quot;</span>);<br>                        <span class="hljs-comment">// 隐藏修改密码的对话框</span><br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogFormVisible</span> = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-comment">// 退出</span><br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">logout</span>();<br>                        <span class="hljs-comment">// 回到首页</span><br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>                    &#125; )<br>                    .<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;修改密码失败！&quot;</span>);<br>                    &#125;);<br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;两次密码不一致&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>               &#125;<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>               <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;原密码输入错误&quot;</span>);<br>               <span class="hljs-keyword">return</span>;<br>           &#125;<br>        &#125;,        <br>        <span class="hljs-comment">//预览</span><br>        <span class="hljs-title function_">handlePictureCardPreview</span>(<span class="hljs-params">file</span>) &#123; <br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogImageUrl</span> = file.<span class="hljs-property">url</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogVisibleImg</span> = <span class="hljs-literal">true</span>;<br>        &#125;,<br>        <span class="hljs-comment">//删除</span><br>        <span class="hljs-title function_">handleRemove</span>(<span class="hljs-params">file, fileList</span>) &#123; <br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">httpRequestImg</span> = <span class="hljs-literal">false</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(file, fileList);<br>        &#125;,<br>        <span class="hljs-comment">//登出</span><br>        <span class="hljs-title function_">logout</span>(<span class="hljs-params"></span>)&#123; <br>            <span class="hljs-comment">//删除cookie</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">delCookie</span>(<span class="hljs-string">&quot;user&quot;</span>); <br>            <span class="hljs-comment">// 更新登录状态</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">isLogin</span> = <span class="hljs-literal">false</span>; <br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;谢谢使用，再见！&#x27;</span>);<br>            <span class="hljs-comment">// 重定向到未登录的首页</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/&quot;</span>); <span class="hljs-comment">//回到首页</span><br>            <span class="hljs-comment">// 去redis删除token</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>            .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:80/user/logout&quot;</span>,&#123;<br>                <span class="hljs-attr">params</span>:&#123;<br>                <span class="hljs-attr">token</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span><br>                &#125;<br>            &#125;)<br>            .<span class="hljs-title function_">then</span>( <span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123;<br>            &#125;)<br>            .<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>                <span class="hljs-comment">//this.$message.error(&quot;登录失败！&quot;);</span><br>            &#125;);<br>        &#125;,<br>        <span class="hljs-comment">//设置cookie</span><br>        <span class="hljs-title function_">setCookie</span>(<span class="hljs-params">key,value,expires</span>)&#123;<br>            <span class="hljs-keyword">var</span> exp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>            exp.<span class="hljs-title function_">setTime</span>(exp.<span class="hljs-title function_">getTime</span>() + expires*<span class="hljs-number">1000</span>);<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = key + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">escape</span> (value) + <span class="hljs-string">&quot;;expires=&quot;</span> + exp.<span class="hljs-title function_">toGMTString</span>();<br>        &#125;,<br>        <span class="hljs-comment">//从cookie中获取token</span><br>        <span class="hljs-title function_">getCookie</span>(<span class="hljs-params">key</span>)&#123;<br>            <span class="hljs-keyword">var</span> name = key + <span class="hljs-string">&quot;=&quot;</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;;&#x27;</span>) &gt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">var</span> ca = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;;&#x27;</span>);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;ca.<span class="hljs-property">length</span>; i++) &#123;<br>                    <span class="hljs-keyword">var</span> c = ca[i].<span class="hljs-title function_">trim</span>();<br>                    <span class="hljs-keyword">if</span> (c.<span class="hljs-title function_">indexOf</span>(name)==<span class="hljs-number">0</span>) &#123; <br>                    <span class="hljs-keyword">return</span> c.<span class="hljs-title function_">substring</span>(name.<span class="hljs-property">length</span>,c.<span class="hljs-property">length</span>); <br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;,<br>        <span class="hljs-comment">//删除cookie</span><br>        <span class="hljs-title function_">delCookie</span>(<span class="hljs-params">name</span>)&#123;<br>            <span class="hljs-comment">// 删除cookie只需要将值清空即可</span><br>            <span class="hljs-comment">// -1 让指定名为name的cookie过期实现自动清除，如果不赋值-1的话，只是将对应的cookie值删除，而这条cookie记录并没有删除</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setCookie</span>(name,<span class="hljs-string">&#x27;&#x27;</span>,-<span class="hljs-number">1</span>);<br>        &#125;,<br>        <span class="hljs-comment">// 获取url中参数</span><br>        <span class="hljs-title function_">getValueByUrlParams</span>(<span class="hljs-params">paramKey</span>) &#123;<br>            <span class="hljs-comment">// http://localhost:8080/#/?token=1&amp;id=2</span><br>            <span class="hljs-keyword">var</span> url = location.<span class="hljs-property">href</span>;<br>            <span class="hljs-keyword">var</span> paraString = url.<span class="hljs-title function_">substring</span>(url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;?&quot;</span>) + <span class="hljs-number">1</span>, url.<span class="hljs-property">length</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>            <span class="hljs-keyword">var</span> paraObj = &#123;&#125;<br>            <span class="hljs-keyword">var</span> i, j<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; j = paraString[i]; i++) &#123;<br>                paraObj[j.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, j.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;=&quot;</span>)).<span class="hljs-title function_">toLowerCase</span>()] = j.<span class="hljs-title function_">substring</span>(j.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;=&quot;</span>) + <span class="hljs-number">1</span>, j.<span class="hljs-property">length</span>);<br>            &#125;<br>            <span class="hljs-keyword">var</span> returnValue = paraObj[paramKey.<span class="hljs-title function_">toLowerCase</span>()];<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_">typeof</span>(returnValue) == <span class="hljs-string">&quot;undefined&quot;</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> returnValue;<br>            &#125;<br>        &#125;,<br><br>    &#125;,<br>    <br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>控制层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lagou.eduuserboot.controller;<br><br><span class="hljs-keyword">import</span> com.lagou.eduuserboot.entity.FileSystem;<br><span class="hljs-keyword">import</span> com.lagou.eduuserboot.entity.User;<br><span class="hljs-keyword">import</span> com.lagou.eduuserboot.entity.UserDTO;<br><span class="hljs-keyword">import</span> com.lagou.eduuserboot.service.UserService;<br><span class="hljs-keyword">import</span> jdk.nashorn.internal.ir.annotations.Reference;<br><span class="hljs-keyword">import</span> org.csource.common.IniFileReader;<br><span class="hljs-keyword">import</span> org.csource.common.NameValuePair;<br><span class="hljs-keyword">import</span> org.csource.fastdfs.*;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;userSetting&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span> <span class="hljs-comment">//跨域</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">fastdfsip</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> IniFileReader.loadFromOsFileSystemOrClasspathAsStream(<span class="hljs-string">&quot;config/fastdfs-client.properties&quot;</span>);<br>        <span class="hljs-keyword">if</span> (in != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                props.load(in);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        fastdfsip = props.getProperty(<span class="hljs-string">&quot;fastdfs.tracker_servers&quot;</span>).split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">0</span>];<br>    &#125;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;upload&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> FileSystem <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到：&quot;</span> +file);<br>        <span class="hljs-type">FileSystem</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystem</span>();<br><br>        <span class="hljs-comment">//获得文件的原始名称</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">oldFileName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-comment">//获得后缀名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hou</span> <span class="hljs-operator">=</span> oldFileName.substring(oldFileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//加载配置文件</span><br>            ClientGlobal.initByProperties(<span class="hljs-string">&quot;config/fastdfs-client.properties&quot;</span>);<br><br>            System.out.println(<span class="hljs-string">&quot;ip:&quot;</span> + fastdfsip );<br>            <span class="hljs-comment">//创建tracker客户端</span><br>            <span class="hljs-type">TrackerClient</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrackerClient</span>();<br>            <span class="hljs-comment">//根据tracker客户端创建连接</span><br>            <span class="hljs-type">TrackerServer</span> <span class="hljs-variable">ts</span> <span class="hljs-operator">=</span> tc.getConnection();<br>            <span class="hljs-type">StorageServer</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">//定义storage客户端</span><br>            <span class="hljs-type">StorageClient1</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StorageClient1</span>(ts, ss);<br>            <span class="hljs-comment">//文件元信息</span><br>            NameValuePair[] list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NameValuePair</span>[<span class="hljs-number">1</span>];<br>            list[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NameValuePair</span>(<span class="hljs-string">&quot;fileName&quot;</span>, oldFileName);<br>            <span class="hljs-comment">//上传，返回fileId</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileId</span> <span class="hljs-operator">=</span> client.upload_file1(file.getBytes(), hou, list);<br>            System.out.println(fileId);<br>            ts.close();<br>            <span class="hljs-comment">//封装数据对象，将路径保存到数据库（本次不写）</span><br>            fs.setFileId(fileId);<br>            fs.setFilePath(fileId);<br>            fs.setFileName(oldFileName);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> fs;<br>    &#125;<br><br>    <span class="hljs-comment">//修改昵称</span><br>    <span class="hljs-meta">@GetMapping(&quot;updateUser&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(Integer userid,String newName,String fileId)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br>        System.out.println(<span class="hljs-string">&quot;newName = &quot;</span> + newName);<br>        fileId = <span class="hljs-string">&quot;http://&quot;</span>+fastdfsip+<span class="hljs-string">&quot;/&quot;</span>+fileId;<br>        System.out.println(<span class="hljs-string">&quot;imgfileId = &quot;</span> + fileId);<br>        userService.updateUser(userid,newName, fileId);<br>    &#125;<br><br>    <span class="hljs-comment">//修改密码</span><br>    <span class="hljs-meta">@GetMapping(&quot;updatePassword&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(Integer userid,String newPwd)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;userid = &quot;</span> + userid);<br>        System.out.println(<span class="hljs-string">&quot;newPwd = &quot;</span> + newPwd);<br>        userService.updatePassword(userid,newPwd);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改昵称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userid    用户编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> newName 新昵称</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(Object userid,String newName,String imgfileId)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userid    用户编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> newPwd 新密码</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(Object userid,String newPwd)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(Integer userid, String newName, String imgfileId)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(userid);<br>        user.setName(newName);<br>        user.setPortrait(imgfileId);<br>        userMapper.updateById(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(Integer userid, String newPwd)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(userid);<br>        user.setPassword(newPwd);<br>        userMapper.updateById(user);<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>上传文件的实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileSystem</span> &#123;<br>    <span class="hljs-keyword">private</span> String fileId;<br>    <span class="hljs-keyword">private</span> String filePath;<br>    <span class="hljs-keyword">private</span> String fileName;<br></code></pre></td></tr></table></figure><ul><li>配置文件 src&#x2F;main&#x2F;resources&#x2F;config&#x2F;fastdfs-client.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">##fastdfs-client.properties</span><br><span class="hljs-attr">fastdfs.connect_timeout_in_seconds</span> = <span class="hljs-string">5</span><br><span class="hljs-attr">fastdfs.network_timeout_in_seconds</span> = <span class="hljs-string">30</span><br><span class="hljs-attr">fastdfs.charset</span> = <span class="hljs-string">UTF-8</span><br><span class="hljs-attr">fastdfs.http_anti_steal_token</span> = <span class="hljs-string">false</span><br><span class="hljs-attr">fastdfs.http_secret_key</span> = <span class="hljs-string">FastDFS1234567890</span><br><span class="hljs-attr">fastdfs.http_tracker_http_port</span> = <span class="hljs-string">80</span><br><span class="hljs-attr">fastdfs.tracker_servers</span> = <span class="hljs-string">192.168.204.141:22122</span><br></code></pre></td></tr></table></figure><ul><li>启动fastDFS服务，测试开始</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apl">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart<br>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart<br>netstat -ntlp<br>systemctl stop firewalld.service<br>cd /home/fastdfs/fdfs_storage/data/<br>ls<br><br>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><ul><li>UserMapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">// 注册到中心的客户端</span><br><span class="hljs-meta">@MapperScan(&quot;com.lagou.eduuserboot.mapper&quot;)</span>  <span class="hljs-comment">// 扫描mapper包</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduUserBootApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EduUserBootApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="05-课程微服务：8004"><a href="#05-课程微服务：8004" class="headerlink" title="05 课程微服务：8004"></a>05 课程微服务：<font style='color:red;'>8004</font></h1><p>edu-course-boot：课程微服务：<font style='color:red;'>8004</font></p><ul><li>mybatis-plus暂不支持比较复杂的多表关联查询，如果遇到复杂的多表查询，依旧使用mybatis+xml配置文件即可，用法和之前一样</li><li>修改yml配置文件，告诉程序去哪里找mapper.xml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8004</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-course-boot</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.204.141:3306/edu_course?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123123</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.204</span><span class="hljs-number">.141</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span>  <span class="hljs-comment">#resources下创建mybatis/mapper</span><br></code></pre></td></tr></table></figure><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-lagou<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-course-boot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>edu-course-boot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- web --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- eureka客户端 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mybatis plus --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- mysql --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--pojo持久化使用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.persistence<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.persistence-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--自动getset--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--redis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>将之前写好的CourseDao.xml拷贝过来，修改：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--修改包路径：mapper接口的完整路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lagou.educourseboot.mapper.CourseMapper&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.lagou.educourseboot.entity.Course&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CourseMap&quot;</span>&gt;</span><br>    ...省略<br></code></pre></td></tr></table></figure><ul><li>实体类<ul><li>Course.java</li><li>Teacher.java</li><li>ActivityCourse.java</li><li>CourseSection.java</li><li>CourseLesson.java</li><li>CourseMedia.java</li></ul></li><li>在mapper接口中加入我们自定义的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CourseMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部课程信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    List&lt;Course&gt; <span class="hljs-title function_">getAllCourse</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询已登录用户购买的全部课程信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    List&lt;Course&gt; <span class="hljs-title function_">getCourseByUserId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> String userId)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询某门课程的详细信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> courseid 课程编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    Course <span class="hljs-title function_">getCourseById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;courseid&quot;)</span> Integer courseid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;course&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span> <span class="hljs-comment">//跨域</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CourseController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CourseService courseService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;getAllCourse&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title function_">getAllCourse</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Course&gt; list = courseService.getAllCourse();<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;getCourseByUserId/&#123;userid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title function_">getCourseByUserId</span><span class="hljs-params">( <span class="hljs-meta">@PathVariable(&quot;userid&quot;)</span> String userid )</span> &#123;<br>        List&lt;Course&gt; list = courseService.getCourseByUserId(userid);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;getCourseById/&#123;courseid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Course <span class="hljs-title function_">getCourseById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;courseid&quot;)</span>Integer courseid)</span> &#123;<br>        <span class="hljs-type">Course</span> <span class="hljs-variable">course</span> <span class="hljs-operator">=</span> courseService.getCourseById(courseid);<br>        <span class="hljs-keyword">return</span> course;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CourseService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部课程信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    List&lt;Course&gt; <span class="hljs-title function_">getAllCourse</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询已登录用户购买的全部课程信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    List&lt;Course&gt; <span class="hljs-title function_">getCourseByUserId</span><span class="hljs-params">(String userId)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询某门课程的详细信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> courseid 课程编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    Course <span class="hljs-title function_">getCourseById</span><span class="hljs-params">(Integer courseid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CourseServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CourseService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CourseMapper courseMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title function_">getAllCourse</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;===查询mysql===&quot;</span>);<br>        <span class="hljs-keyword">return</span> courseMapper.getAllCourse();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title function_">getCourseByUserId</span><span class="hljs-params">(String userId)</span> &#123;<br>        <span class="hljs-keyword">return</span> courseDao.getCourseByUserId(userId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Course <span class="hljs-title function_">getCourseById</span><span class="hljs-params">(Integer courseid)</span> &#123;<br>        <span class="hljs-keyword">return</span> courseMapper.getCourseById(courseid);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高并发redis帮你扛"><a href="#高并发redis帮你扛" class="headerlink" title="高并发redis帮你扛"></a>高并发redis帮你扛</h2><ul><li><p>引入依赖 加入redis</p></li><li><p>修改yml 配置redis服务器ip</p></li><li><p>redis操作应该放在controller？还是service？</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CourseServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CourseService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CourseMapper courseMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title function_">getAllCourse</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//将redis内存中的序列化的集合名称用String重新命名（增加可读性）</span><br>        <span class="hljs-type">RedisSerializer</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        redisTemplate.setKeySerializer(rs);<br><br>        System.out.println(<span class="hljs-string">&quot;查询redis&quot;</span>);<br>        List&lt;Course&gt; list = (List&lt;Course&gt;)redisTemplate.opsForValue().get(<span class="hljs-string">&quot;allCourses&quot;</span>);<br>        <span class="hljs-keyword">if</span>(list == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//去数据库</span><br>            System.out.println(<span class="hljs-string">&quot;====MySql数据库====&quot;</span>);<br>            list = courseMapper.getAllCourse();<br>            <span class="hljs-comment">// 把从数据库查询的集合放在redis内存中(key,value,过期时间,分钟为单位)</span><br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;allCourses&quot;</span>, list,<span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="高并发下缓存穿透问题"><a href="#高并发下缓存穿透问题" class="headerlink" title="高并发下缓存穿透问题"></a>高并发下缓存穿透问题</h2><ul><li><p>因为，我们假设<b style='color:red'>高并发</b>下，1000个人同时进入方法执行，1000个人从缓存中找集合，没有找到，那么进入下一步的if，就会发生1000个人同时从数据库查询，这样的话，执行了1000次查询数据库，效率低下，redis没用到。这样的原因，就是redis缓存查第一次之后，后续的查询没有拦住，这就是   “<b style='color:red'>缓存穿透</b>”</p></li><li><p>模拟20个线程高并发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getAllCourse&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title function_">getAllCourse</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 模拟多线程：创建一个容量20个的线程池</span><br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">es</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">20</span>);<br>    <span class="hljs-comment">// 模拟20个线程同时查询</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>        es.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                courseService.getAllCourse();<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> courseService.getAllCourse();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>解决方案：</p></li><li><p>1、最简单粗暴的解决方案—-同步方法锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> List&lt;Course&gt; <span class="hljs-title function_">getAllCourse</span><span class="hljs-params">()</span> &#123;<br>    xxxx<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2、效率稍微高一些的方案—-同步代码块(双层检测锁 DCL：double check lock)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title function_">getAllCourse</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">RedisSerializer</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>    redisTemplate.setKeySerializer(rs);<br><br>    System.out.println(<span class="hljs-string">&quot;查询redis&quot;</span>);<br>    List&lt;Course&gt; list = (List&lt;Course&gt;)redisTemplate.opsForValue().get(<span class="hljs-string">&quot;allCourses&quot;</span>);<br>    <span class="hljs-keyword">if</span>(list == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//排队，让第一个人进，走一遍流程（后面的人就会走缓存了）</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br>            list = (List&lt;Course&gt;)redisTemplate.opsForValue().get(<span class="hljs-string">&quot;allCourses&quot;</span>);<br>            <span class="hljs-keyword">if</span>(list == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">//去数据库</span><br>                System.out.println(<span class="hljs-string">&quot;====MySql数据库====&quot;</span>);<br>                list = courseMapper.getAllCourse();<br>                <span class="hljs-comment">// 把从数据库查询的集合放在redis内存中</span><br>                redisTemplate.opsForValue().set(<span class="hljs-string">&quot;allCourses&quot;</span>, list,<span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="如何保证redis中数据是最新的"><a href="#如何保证redis中数据是最新的" class="headerlink" title="如何保证redis中数据是最新的"></a>如何保证redis中数据是最新的</h2><ul><li>如果课程中内容发生变化，通过我们在修改课程内容的时候，会先将redis中的相关集合删除。</li><li>然后将最新的数据保存到数据库</li><li>而查询数据时，因为redis中的数据已经删除了，所以会第一时间去数据库查询，保证数据是最新的。</li></ul><h2 id="使用mybatisplus换血大改造"><a href="#使用mybatisplus换血大改造" class="headerlink" title="使用mybatisplus换血大改造"></a>使用mybatisplus换血大改造</h2><ul><li>mp并不支持多表查询，所以我们通过oop的思想进行数据组装</li><li>90%的查询优化都是采用：“空间换时间”，用基本的查询多执行几次</li><li>基础查询我们使用entity的mapper，再将数据拷贝到entityDTO中进行组装（entity删除依赖，entityDTO添加依赖）</li></ul><hr><ul><li>entityDTO</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CourseDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Teacher teacher; <span class="hljs-comment">// 一门课程对应一个讲师</span><br>    <span class="hljs-keyword">private</span> List&lt;CourseLesson&gt; lessonsDTO2; <span class="hljs-comment">// 一门课程关联前两节课时</span><br>    <span class="hljs-keyword">private</span> List&lt;SectionDTO&gt; courseSections; <span class="hljs-comment">//一门课程对应多个章节</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SectionDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;LessonDTO&gt; courseLessons; <span class="hljs-comment">// 一章对应多个小节</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LessonDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> CourseMedia courseMedia; <span class="hljs-comment">// 一小节课对应一个视频</span><br></code></pre></td></tr></table></figure><ul><li><p>生成基础Mapper</p><ul><li><p>CourseMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CourseMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Course&gt;  <span class="hljs-comment">// Course基础实体类，查数据库</span><br></code></pre></td></tr></table></figure></li><li><p>LessonMapper</p></li><li><p>SectionMapper</p></li><li><p>TeacherMapper</p></li><li><p>MediaMapper</p></li></ul></li><li><p>CourseServiceImpl</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lagou.educourseboot.service.impl;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class="hljs-keyword">import</span> com.lagou.educourseboot.entity.*;<br><span class="hljs-keyword">import</span> com.lagou.educourseboot.mapper.*;<br><span class="hljs-keyword">import</span> com.lagou.educourseboot.service.CourseService;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@BelongsProject</span>: edu-lagou</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: GuoAn.Sun</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2021-03-03 15:43</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CourseServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CourseService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CourseMapper courseMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TeacherMapper teacherMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LessonMapper lessonMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SectionMapper sectionMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MediaMapper mediaMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;CourseDTO&gt; <span class="hljs-title function_">getAllCourse</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//将redis内存中的序列化的集合名称用String重新命名（增加可读性）</span><br>        <span class="hljs-type">RedisSerializer</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        redisTemplate.setKeySerializer(rs);<br><br>        <span class="hljs-comment">// 1、先去redis中查询</span><br>        System.out.println(<span class="hljs-string">&quot;***查询redis***&quot;</span>);<br>        <span class="hljs-comment">// 课程dto集合</span><br>        List&lt;CourseDTO&gt; courseDTOS = ( List&lt;CourseDTO&gt;)redisTemplate.opsForValue().get(<span class="hljs-string">&quot;allCourses&quot;</span>);<br>        <span class="hljs-comment">// 2、redis中没有，才回去mysql查询</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == courseDTOS)&#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                courseDTOS = ( List&lt;CourseDTO&gt;)redisTemplate.opsForValue().get(<span class="hljs-string">&quot;allCourses&quot;</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == courseDTOS)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;===查询mysql===&quot;</span>);<br>                    <span class="hljs-comment">// 查询全部课程</span><br>                    List&lt;Course&gt; courses = getInitCourse();<br>                    courseDTOS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                    <span class="hljs-keyword">for</span>(Course course : courses)&#123;<br>                        <span class="hljs-type">CourseDTO</span> <span class="hljs-variable">dto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CourseDTO</span>();<br>                        <span class="hljs-comment">// course将属性全部赋给给courseDTO对象</span><br>                        BeanUtils.copyProperties(course, dto);<br>                        courseDTOS.add(dto);<br>                        <span class="hljs-comment">// 设置老师</span><br>                        setTeacher(dto);<br>                        <span class="hljs-comment">// 设置前两节课</span><br>                        setTop2Lesson(dto);<br>                    &#125;<br>                    redisTemplate.opsForValue().set(<span class="hljs-string">&quot;allCourses&quot;</span>, courseDTOS, <span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> courseDTOS;<br>    &#125;<br><br>    <span class="hljs-comment">// 初始化基本的全部课程</span><br>    <span class="hljs-keyword">private</span> List&lt;Course&gt; <span class="hljs-title function_">getInitCourse</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        q.eq(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">// 已上架</span><br>        q.eq(<span class="hljs-string">&quot;is_del&quot;</span>, Boolean.FALSE);<span class="hljs-comment">// 未删除</span><br>        q.orderByDesc(<span class="hljs-string">&quot; sort_num &quot;</span>);<span class="hljs-comment">// 排序</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.courseMapper.selectList(q);<br>    &#125;<br><br>    <span class="hljs-comment">// 基本的老师查询</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTeacher</span><span class="hljs-params">( CourseDTO courseDTO)</span>&#123;<br>        <span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        q.eq(<span class="hljs-string">&quot;course_id&quot;</span>, courseDTO.getId());<span class="hljs-comment">// 一个课程，一个老师</span><br>        q.eq(<span class="hljs-string">&quot;is_del&quot;</span>, Boolean.FALSE);<span class="hljs-comment">// 未删除</span><br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.teacherMapper.selectOne(q);<br>        courseDTO.setTeacher(teacher);<br>    &#125;<br>    <span class="hljs-comment">// 前两节课</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTop2Lesson</span><span class="hljs-params">( CourseDTO courseDTO )</span>&#123;<br>        <span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        q.eq(<span class="hljs-string">&quot;course_id&quot;</span>, courseDTO.getId());<span class="hljs-comment">// 一个课程，一个老师</span><br>        q.eq(<span class="hljs-string">&quot;is_del&quot;</span>, Boolean.FALSE);<span class="hljs-comment">// 未删除</span><br>        q.orderByAsc(<span class="hljs-string">&quot;section_id&quot;</span>,<span class="hljs-string">&quot;order_num&quot;</span>); <span class="hljs-comment">//排序</span><br>        q.last(<span class="hljs-string">&quot;limit 0, &quot;</span> + <span class="hljs-number">2</span>); <span class="hljs-comment">// 只要前2条数据</span><br>        List&lt;CourseLesson&gt; list = <span class="hljs-built_in">this</span>.lessonMapper.selectList(q);<br>        courseDTO.setLessonsDTO2(list);<br>    &#125;<br><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> CourseDTO <span class="hljs-title function_">getCourseById</span><span class="hljs-params">(Integer courseid)</span> &#123;<br>        <span class="hljs-comment">// 根据课程id获取课程的基本信息</span><br>        <span class="hljs-type">Course</span> <span class="hljs-variable">course</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.courseMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;Course&gt;().eq(<span class="hljs-string">&quot;id&quot;</span>, courseid));<br>        <span class="hljs-type">CourseDTO</span> <span class="hljs-variable">courseDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CourseDTO</span>();<br>        BeanUtils.copyProperties(course, courseDTO);<br>        <span class="hljs-comment">// 关联老师</span><br>        setTeacher(courseDTO);<br>        <span class="hljs-comment">// 关联章节</span><br>        List&lt;SectionDTO&gt; sectionDTOS = getCourseSection(courseDTO);<br>        courseDTO.setCourseSections(sectionDTOS);<br>        <span class="hljs-keyword">return</span> courseDTO;<br>    &#125;<br><br>    <span class="hljs-comment">// 关联章节</span><br>    <span class="hljs-keyword">private</span> List&lt;SectionDTO&gt; <span class="hljs-title function_">getCourseSection</span><span class="hljs-params">(CourseDTO courseDTO)</span>&#123;<br>        <span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        q.eq(<span class="hljs-string">&quot;course_id&quot;</span>, courseDTO.getId());<span class="hljs-comment">// 一个课程，N章</span><br>        q.eq(<span class="hljs-string">&quot;is_del&quot;</span>, Boolean.FALSE);<span class="hljs-comment">// 未删除</span><br>        q.eq(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">2</span>);<span class="hljs-comment">// 已发布</span><br>        q.orderByAsc(<span class="hljs-string">&quot;order_num&quot;</span>); <span class="hljs-comment">//排序</span><br><br>        <span class="hljs-comment">// 基本的章节集合</span><br>        List&lt;CourseSection&gt; list = <span class="hljs-built_in">this</span>.sectionMapper.selectList(q);<br>        <span class="hljs-comment">// 关联的章节集合</span><br>        List&lt;SectionDTO&gt; sectionDTOS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(CourseSection section : list)&#123;<br>            <span class="hljs-type">SectionDTO</span> <span class="hljs-variable">sectionDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SectionDTO</span>();<br>            BeanUtils.copyProperties(section, sectionDTO);<br><br>            q.clear(); <span class="hljs-comment">// 清除条件</span><br>            q.eq(<span class="hljs-string">&quot;section_id&quot;</span>, sectionDTO.getId());<span class="hljs-comment">// 已发布</span><br>            q.eq(<span class="hljs-string">&quot;is_del&quot;</span>, Boolean.FALSE);<span class="hljs-comment">// 未删除</span><br>            q.orderByDesc(<span class="hljs-string">&quot;order_num&quot;</span>); <span class="hljs-comment">//排序</span><br>            <span class="hljs-comment">// 某章节的全部小节（基本信息）</span><br>            List&lt;CourseLesson&gt; lessons = <span class="hljs-built_in">this</span>.lessonMapper.selectList(q);<br>            <span class="hljs-comment">// 某章节的全部小节（关联信息）</span><br>            List&lt;LessonDTO&gt; lessonDTOS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span>(CourseLesson lesson : lessons)&#123;<br>                <span class="hljs-type">LessonDTO</span> <span class="hljs-variable">lessonDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LessonDTO</span>();<br>                BeanUtils.copyProperties(lesson, lessonDTO);<br>                <span class="hljs-comment">// 设置每节课对应的视频</span><br>                setMedia(lessonDTO);<br>                lessonDTOS.add(lessonDTO);<br>            &#125;<br>            <span class="hljs-comment">// 章节关联所有小节</span><br>            sectionDTO.setCourseLessons(lessonDTOS);<br>            <span class="hljs-comment">// 某个章节放入到章节集合</span><br>            sectionDTOS.add(sectionDTO);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sectionDTOS;<br>    &#125;<br><br>    <span class="hljs-comment">// 设置每节课的视频</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMedia</span><span class="hljs-params">(  LessonDTO lessonDTO )</span>&#123;<br>        <span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        q.eq(<span class="hljs-string">&quot;lesson_id&quot;</span>, lessonDTO.getId());<span class="hljs-comment">// 一节课，一个视频</span><br>        q.eq(<span class="hljs-string">&quot;is_del&quot;</span>, Boolean.FALSE);<span class="hljs-comment">// 未删除</span><br>        <span class="hljs-type">CourseMedia</span> <span class="hljs-variable">media</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mediaMapper.selectOne(q);<br>        lessonDTO.setCourseMedia(media);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="06-留言微服务：8005"><a href="#06-留言微服务：8005" class="headerlink" title="06 留言微服务：8005"></a>06 留言微服务：<font style='color:red;'>8005</font></h1><p>edu-comment-boot：留言微服务：<font style='color:red;'>8005</font></p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-lagou<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-comment-boot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>edu-comment-boot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- web --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- eureka客户端 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mybatis plus --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- mysql --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--pojo持久化使用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.persistence<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.persistence-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8005</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-comment-boot</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.204.141:3306/edu_comment?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123123</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka/</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p>entity</p><ul><li>CourseComment.java</li></ul></li><li><p>CourseCommentFavoriteRecord.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 主键</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br><span class="hljs-keyword">private</span> Integer id;<br></code></pre></td></tr></table></figure><h2 id="1、保存留言和查询全部留言"><a href="#1、保存留言和查询全部留言" class="headerlink" title="1、保存留言和查询全部留言"></a>1、保存留言和查询全部留言</h2><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;comment&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommentController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CommentService commentService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;saveCourseComment&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">saveCourseComment</span><span class="hljs-params">(Integer courseid,Integer userid,String username,String comment)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br>        System.out.println(<span class="hljs-string">&quot;昵称：&quot;</span> + username);<br>        System.out.println(<span class="hljs-string">&quot;内容：&quot;</span> + comment);<br>        <span class="hljs-type">CourseComment</span> <span class="hljs-variable">courseComment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CourseComment</span>();<br>        courseComment.setCourseId(courseid); <span class="hljs-comment">// 课程编号</span><br>        courseComment.setSectionId(<span class="hljs-number">0</span>); <span class="hljs-comment">// 章节编号 （预留字段，为项目的2.0版本保留）</span><br>        courseComment.setLessonId(<span class="hljs-number">0</span>);<span class="hljs-comment">// 小节编号（预留字段，为项目的2.0版本保留）</span><br>        courseComment.setUserId(userid); <span class="hljs-comment">// 用户编号</span><br>        courseComment.setUserName(username); <span class="hljs-comment">// 用户昵称</span><br>        courseComment.setParentId(<span class="hljs-number">0</span>); <span class="hljs-comment">//没有父id（预留字段，为项目的2.0版本保留）</span><br>        courseComment.setComment(comment);<span class="hljs-comment">// 留言内容</span><br>        courseComment.setType(<span class="hljs-number">0</span>); <span class="hljs-comment">// 0用户留言（预留字段，为项目的2.0版本保留）</span><br>        courseComment.setLastOperator(userid); <span class="hljs-comment">//最后操作的用户编号</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> commentService.saveComment(courseComment);<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;getCourseCommentList/&#123;courseid&#125;/&#123;pageIndex&#125;/&#123;pageSize&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;CourseComment&gt; <span class="hljs-title function_">getCommentsByCourseId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;courseid&quot;)</span> Integer courseid,<span class="hljs-meta">@PathVariable(&quot;pageIndex&quot;)</span> Integer pageIndex,<span class="hljs-meta">@PathVariable(&quot;pageSize&quot;)</span> Integer pageSize)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> (pageIndex-<span class="hljs-number">1</span>)*pageSize;<br>        List&lt;CourseComment&gt; list = commentService.getCommentsByCourseId(courseid, offset, pageSize);<br>        System.out.println(<span class="hljs-string">&quot;获取第&quot;</span>+courseid+<span class="hljs-string">&quot;门课程的留言：共计&quot;</span>+list.size()+<span class="hljs-string">&quot;条&quot;</span>);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;saveFavorite/&#123;commentid&#125;/&#123;userid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">saveFavorite</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;commentid&quot;)</span> Integer commentid,<span class="hljs-meta">@PathVariable(&quot;userid&quot;)</span> Integer userid)</span>&#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> commentService.saveFavorite(commentid, userid);<br>        <span class="hljs-keyword">return</span> integer;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;cancelFavorite/&#123;commentid&#125;/&#123;userid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">cancelFavorite</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;commentid&quot;)</span> Integer commentid,<span class="hljs-meta">@PathVariable(&quot;userid&quot;)</span> Integer userid)</span>&#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> commentService.cancelFavorite(commentid, userid);<br>        <span class="hljs-keyword">return</span> integer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CommentService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存留言</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> comment 留言内容对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">saveComment</span><span class="hljs-params">(CourseComment comment)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 某个课程的全部留言（分页）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> courseid 课程编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> offset 数据偏移</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageSize 每页条目数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 留言集合</span><br><span class="hljs-comment">     */</span><br>    List&lt;CourseComment&gt; <span class="hljs-title function_">getCommentsByCourseId</span><span class="hljs-params">(Integer courseid, Integer offset, Integer pageSize)</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 点赞</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> comment_id 留言编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userid 用户编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 0：保存失败，1：保存成功</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">saveFavorite</span><span class="hljs-params">(Integer comment_id,Integer userid)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取消赞</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> comment_id 留言编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userid 用户编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 0：保存失败，1：保存成功</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">cancelFavorite</span><span class="hljs-params">(Integer comment_id,Integer userid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommentService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CourseCommentDao courseCommentDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CourseCommentFavoriteRecordDao courseCommentFavoriteRecordDao;<br><br>    <span class="hljs-comment">//保存留言</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">saveComment</span><span class="hljs-params">(CourseComment comment)</span> &#123;<br>        <span class="hljs-keyword">return</span> courseCommentDao.insert(comment);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;CourseComment&gt; <span class="hljs-title function_">getCommentsByCourseId</span><span class="hljs-params">(Integer courseid, Integer offset, Integer pageSize)</span> &#123;<br>        <span class="hljs-keyword">return</span> courseCommentDao.getCommentsByCourseId(courseid, offset, pageSize);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *点赞：</span><br><span class="hljs-comment">     * 先查看当前用户对这条留言是否点过赞，</span><br><span class="hljs-comment">     * 如果点过：修改is_del状态即可，取消赞</span><br><span class="hljs-comment">     * 如果没点过：保存一条点赞的信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 最终，更新赞的数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">saveFavorite</span><span class="hljs-params">(Integer comment_id, Integer userid)</span> &#123;<br>        QueryWrapper&lt;CourseCommentFavoriteRecord&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        qw.eq(<span class="hljs-string">&quot;comment_id&quot;</span>, comment_id); <span class="hljs-comment">// where comment_id = #&#123;cid&#125;</span><br>        qw.eq(<span class="hljs-string">&quot;user_id&quot;</span>, userid); <span class="hljs-comment">// and user_id = #&#123;uid&#125;</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> courseCommentFavoriteRecordDao.selectCount(qw);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//没点过赞</span><br>            <span class="hljs-comment">// 保存赞信息</span><br>            <span class="hljs-type">CourseCommentFavoriteRecord</span> <span class="hljs-variable">favoriteRecord</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CourseCommentFavoriteRecord</span>();<br>            favoriteRecord.setCommentId(comment_id);<br>            favoriteRecord.setUserId(userid);<br>            favoriteRecord.setIsDel(<span class="hljs-number">0</span>);<br>            favoriteRecord.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            favoriteRecord.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            i1 = courseCommentFavoriteRecordDao.insert(favoriteRecord);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 更新赞的状态</span><br>            <span class="hljs-type">CourseCommentFavoriteRecord</span> <span class="hljs-variable">favoriteRecord</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CourseCommentFavoriteRecord</span>();<br>            favoriteRecord.setIsDel(<span class="hljs-number">0</span>);<br><br>            QueryWrapper&lt;CourseCommentFavoriteRecord&gt; qw2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>            qw2.eq(<span class="hljs-string">&quot;comment_id&quot;</span>, comment_id); <span class="hljs-comment">// where comment_id = #&#123;cid&#125;</span><br>            qw2.eq(<span class="hljs-string">&quot;user_id&quot;</span>, userid); <span class="hljs-comment">// and user_id = #&#123;uid&#125;</span><br>            i1 = courseCommentFavoriteRecordDao.update(favoriteRecord,qw2);<br>        &#125;<br>        <span class="hljs-comment">// 更新本条留言赞的数量</span><br>        i2 = courseCommentDao.updateLikeCount(<span class="hljs-number">1</span>,comment_id);<br><br>        <span class="hljs-keyword">if</span>(i1 == <span class="hljs-number">0</span> || i2 == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 在项目中，使用抛异常的方式来回滚事务！</span><br>            <span class="hljs-keyword">throw</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;点赞失败！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> comment_id;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除点赞的信息（is_del = 1）</span><br><span class="hljs-comment">     * 更新留言赞的数量-1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> comment_id 留言编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userid 用户编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 0:失败，1：成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">cancelFavorite</span><span class="hljs-params">(Integer comment_id, Integer userid)</span> &#123;<br>        <span class="hljs-comment">//Integer i1 = courseCommentDao.updateFavoriteStatus(1, comment_id, userid);</span><br>        <span class="hljs-type">CourseCommentFavoriteRecord</span> <span class="hljs-variable">favoriteRecord</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CourseCommentFavoriteRecord</span>();<br>        favoriteRecord.setIsDel(<span class="hljs-number">1</span>);<br><br>        QueryWrapper&lt;CourseCommentFavoriteRecord&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        qw.eq(<span class="hljs-string">&quot;comment_id&quot;</span>, comment_id); <span class="hljs-comment">// where comment_id = #&#123;cid&#125;</span><br>        qw.eq(<span class="hljs-string">&quot;user_id&quot;</span>, userid); <span class="hljs-comment">// and user_id = #&#123;uid&#125;</span><br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> courseCommentFavoriteRecordDao.update(favoriteRecord,qw);<br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> courseCommentDao.updateLikeCount(-<span class="hljs-number">1</span>,comment_id);<br><br>        <span class="hljs-keyword">if</span>(i1 == <span class="hljs-number">0</span> || i2 == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;取消赞失败！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> i2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>mapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CourseCommentDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;CourseComment&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 某个课程的全部留言（分页）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> courseid 课程编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> offset 数据偏移</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageSize 每页条目数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 留言集合</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Select(&#123;&quot;SELECT * FROM course_comment \n&quot; +</span><br><span class="hljs-meta">            &quot;        WHERE is_del = 0\n&quot; +</span><br><span class="hljs-meta">            &quot;        AND course_id = #&#123;courseid&#125;\n&quot; +</span><br><span class="hljs-meta">            &quot;        ORDER BY is_top DESC , like_count DESC , create_time DESC\n&quot; +</span><br><span class="hljs-meta">            &quot;        LIMIT #&#123;offset&#125;, #&#123;pageSize&#125;&quot;&#125;)</span><br>    <span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">            @Result(column = &quot;id&quot;,property = &quot;id&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;id&quot; , property = &quot;favoriteRecords&quot;, many = @Many(select = &quot;com.lagou.educommentboot.mapper.CourseCommentFavoriteRecordDao.getFavorites&quot;))</span><br><span class="hljs-meta">    &#125;)</span><br>    List&lt;CourseComment&gt; <span class="hljs-title function_">getCommentsByCourseId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;courseid&quot;)</span> Integer courseid, <span class="hljs-meta">@Param(&quot;offset&quot;)</span> Integer offset, <span class="hljs-meta">@Param(&quot;pageSize&quot;)</span> Integer pageSize)</span>;<br><br><br>    <span class="hljs-meta">@Update(&#123;&quot;update course_comment set like_count = like_count + #&#123;x&#125; where id = #&#123;comment_id&#125;&quot;&#125;)</span><br>    Integer <span class="hljs-title function_">updateLikeCount</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;x&quot;)</span> Integer x, <span class="hljs-meta">@Param(&quot;comment_id&quot;)</span> Integer comment_id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CourseCommentFavoriteRecordDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;CourseCommentFavoriteRecord&gt; &#123;<br><br>    <span class="hljs-meta">@Select(&#123;&quot;SELECT * FROM course_comment_favorite_record WHERE comment_id = #&#123;commnet_id&#125; and is_del = 0&quot;&#125;)</span><br>    List&lt;CourseCommentFavoriteRecord&gt; <span class="hljs-title function_">getFavorites</span><span class="hljs-params">(Integer comment_id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">// 注册到中心的客户端</span><br><span class="hljs-meta">@MapperScan(&quot;com.lagou.educommentboot.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduCommentBootApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EduCommentBootApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="http://localhost:8005/comment/getCourseCommentList/7/1/20">http://localhost:8005/comment/getCourseCommentList/7/1/20</a></p><h2 id="2、点赞和取消赞"><a href="#2、点赞和取消赞" class="headerlink" title="2、点赞和取消赞"></a>2、点赞和取消赞</h2><ul><li>CourseCommentDao.java中留下updateLikeCount()方法即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommentService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CourseCommentDao courseCommentDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CourseCommentFavoriteRecordDao courseCommentFavoriteRecordDao;<br><br>    <span class="hljs-comment">//保存留言</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">saveComment</span><span class="hljs-params">(CourseComment comment)</span> &#123;<br>        <span class="hljs-keyword">return</span> courseCommentDao.insert(comment);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;CourseComment&gt; <span class="hljs-title function_">getCommentsByCourseId</span><span class="hljs-params">(Integer courseid, Integer offset, Integer pageSize)</span> &#123;<br>        <span class="hljs-keyword">return</span> courseCommentDao.getCommentsByCourseId(courseid, offset, pageSize);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *点赞：</span><br><span class="hljs-comment">     * 先查看当前用户对这条留言是否点过赞，</span><br><span class="hljs-comment">     * 如果点过：修改is_del状态即可，取消赞</span><br><span class="hljs-comment">     * 如果没点过：保存一条点赞的信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 最终，更新赞的数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">saveFavorite</span><span class="hljs-params">(Integer comment_id, Integer userid)</span> &#123;<br>        QueryWrapper&lt;CourseCommentFavoriteRecord&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        qw.eq(<span class="hljs-string">&quot;comment_id&quot;</span>, comment_id); <span class="hljs-comment">// where comment_id = #&#123;cid&#125;</span><br>        qw.eq(<span class="hljs-string">&quot;user_id&quot;</span>, userid); <span class="hljs-comment">// and user_id = #&#123;uid&#125;</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> courseCommentFavoriteRecordDao.selectCount(qw);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;                                                 <br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//没点过赞</span><br>            <span class="hljs-comment">// 保存赞信息</span><br>            <span class="hljs-type">CourseCommentFavoriteRecord</span> <span class="hljs-variable">favoriteRecord</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CourseCommentFavoriteRecord</span>();<br>            favoriteRecord.setCommentId(comment_id);<br>            favoriteRecord.setUserId(userid);<br>            favoriteRecord.setIsDel(<span class="hljs-number">0</span>);<br>            favoriteRecord.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            favoriteRecord.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            i1 = courseCommentFavoriteRecordDao.insert(favoriteRecord);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 更新赞的状态</span><br>            <span class="hljs-type">CourseCommentFavoriteRecord</span> <span class="hljs-variable">favoriteRecord</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CourseCommentFavoriteRecord</span>();<br>            favoriteRecord.setIsDel(<span class="hljs-number">0</span>);<br><br>            QueryWrapper&lt;CourseCommentFavoriteRecord&gt; qw2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>            qw2.eq(<span class="hljs-string">&quot;comment_id&quot;</span>, comment_id); <span class="hljs-comment">// where comment_id = #&#123;cid&#125;</span><br>            qw2.eq(<span class="hljs-string">&quot;user_id&quot;</span>, userid); <span class="hljs-comment">// and user_id = #&#123;uid&#125;</span><br>            i1 = courseCommentFavoriteRecordDao.update(favoriteRecord,qw2);<br>        &#125;<br>        <span class="hljs-comment">// 更新本条留言赞的数量</span><br>        i2 = courseCommentDao.updateLikeCount(<span class="hljs-number">1</span>,comment_id);<br><br>        <span class="hljs-keyword">if</span>(i1 == <span class="hljs-number">0</span> || i2 == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 在项目中，使用抛异常的方式来回滚事务！</span><br>            <span class="hljs-keyword">throw</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;点赞失败！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> comment_id;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除点赞的信息（is_del = 1）</span><br><span class="hljs-comment">     * 更新留言赞的数量-1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> comment_id 留言编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userid 用户编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 0:失败，1：成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">cancelFavorite</span><span class="hljs-params">(Integer comment_id, Integer userid)</span> &#123;<br>        <span class="hljs-comment">//Integer i1 = courseCommentDao.updateFavoriteStatus(1, comment_id, userid);</span><br>        <span class="hljs-type">CourseCommentFavoriteRecord</span> <span class="hljs-variable">favoriteRecord</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CourseCommentFavoriteRecord</span>();<br>        favoriteRecord.setIsDel(<span class="hljs-number">1</span>);<br><br>        QueryWrapper&lt;CourseCommentFavoriteRecord&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        qw.eq(<span class="hljs-string">&quot;comment_id&quot;</span>, comment_id); <span class="hljs-comment">// where comment_id = #&#123;cid&#125;</span><br>        qw.eq(<span class="hljs-string">&quot;user_id&quot;</span>, userid); <span class="hljs-comment">// and user_id = #&#123;uid&#125;</span><br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> courseCommentFavoriteRecordDao.update(favoriteRecord,qw);<br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> courseCommentDao.updateLikeCount(-<span class="hljs-number">1</span>,comment_id);<br><br>        <span class="hljs-keyword">if</span>(i1 == <span class="hljs-number">0</span> || i2 == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;取消赞失败！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> i2;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3、前端"><a href="#3、前端" class="headerlink" title="3、前端"></a>3、前端</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 已赞 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;cancelzan(comment)&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;JSON.stringify(comment.favoriteRecords).indexOf( userid ) &gt;= 0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message-list-title-right&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message-list-title-right-icon&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;实心的心形图标&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message-list-title-right-praise&quot;</span>&gt;</span>&#123;&#123;comment.likeCount&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> jwtDecode <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jwt-decode&#x27;</span>;<br><br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">user</span>:<span class="hljs-literal">null</span>, <span class="hljs-comment">// 当前用户</span><br>      <span class="hljs-attr">userid</span>:<span class="hljs-number">666666</span>, <span class="hljs-comment">// 默认值，否则不登陆的话，留言显示失败</span><br>    &#125;;<br>    <br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>    <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">course</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">course</span>;  <span class="hljs-comment">// 从路由中获得参数对象赋值给本组件的参数</span><br><br>   <span class="hljs-comment">// 从url中获取token参数</span><br>    <span class="hljs-keyword">let</span> token  = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getValueByUrlParams</span>(<span class="hljs-string">&#x27;token&#x27;</span>);<br><br>    <span class="hljs-keyword">if</span>(token == <span class="hljs-literal">null</span> || token == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>      <span class="hljs-comment">// 从cookie中获取user的token</span><br>      token = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&quot;user&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span> = token;<br>   <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;刷新页面token=&gt;&quot;</span>+token);<br>    <span class="hljs-keyword">if</span>(token != <span class="hljs-literal">null</span> || token != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>      <span class="hljs-comment">// 将token发送到sso进行校验</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>      .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:80/user/checkToken&quot;</span>,&#123;<br>        <span class="hljs-attr">params</span>:&#123;<br>          <span class="hljs-attr">token</span>:token<br>        &#125;<br>      &#125;)<br>      .<span class="hljs-title function_">then</span>( <span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(result.<span class="hljs-property">data</span>.<span class="hljs-property">state</span> == <span class="hljs-number">4</span>)&#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">isLogin</span> = <span class="hljs-literal">true</span>;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setCookie</span>(<span class="hljs-string">&quot;user&quot;</span>,token,<span class="hljs-number">600</span>);<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = <span class="hljs-title function_">jwtDecode</span>(token);<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">userid</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">userid</span>; <span class="hljs-comment">// 获取当前登录对象的userid</span><br>        &#125;<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>       &#125;);<br>    &#125;<br>    <br><span class="hljs-comment">// 点赞</span><br><span class="hljs-title function_">zan</span>(<span class="hljs-params">comment</span>)&#123;        <br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:8005/comment/saveFavorite/&quot;</span>+comment.<span class="hljs-property">id</span>+<span class="hljs-string">&quot;/&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">userid</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// console.log(result);</span><br>    <span class="hljs-comment">// 重新获取本门课的全部留言信息</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getComment</span>();<br>  &#125;).<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;点赞失败！&quot;</span>);<br>  &#125; );<br>&#125;,<br><span class="hljs-comment">// 取消赞</span><br><span class="hljs-title function_">cancelzan</span>(<span class="hljs-params">comment</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:8005/comment/cancelFavorite/&quot;</span>+comment.<span class="hljs-property">id</span>+<span class="hljs-string">&quot;/&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">userid</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// console.log(result);</span><br>    <span class="hljs-comment">// 重新获取本门课的全部留言信息</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getComment</span>();<br>  &#125;).<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;取消赞失败！&quot;</span>);<br>  &#125; );<br>&#125;,<br></code></pre></td></tr></table></figure><hr><h1 id="07-支付与订单：8006"><a href="#07-支付与订单：8006" class="headerlink" title="07 支付与订单：8006"></a>07 支付与订单：<font style='color:red;'>8006</font></h1><p>edu-pay-boot：支付微服务：<font style='color:red;'>8006</font></p><ul><li>pom与之前的相比，主体并没有变化，多加两个支付相关依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.wxpay<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>wxpay-sdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jfinal<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jfinal<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8006</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-pay-boot</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></code></pre></td></tr></table></figure><ul><li>commons&#x2F;PayConfig.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PayConfig</span> &#123;<br>    <span class="hljs-comment">//企业公众号ID</span><br>    <span class="hljs-comment">//财付通平台的商户密钥</span><br>    <span class="hljs-comment">//回调URL</span><br>    <span class="hljs-comment">//public static String notifyurl=&quot;http://edufront.lagou.com/front/pay/wxCallback&quot;; //success</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String notifyurl=<span class="hljs-string">&quot;http://localhost:8006/pay/wxCallback&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>controller&#x2F;WxPayController.java 和之前一样，修改注解后，多加一个方法（微信支付回调到本地）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;pay&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WxPayController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;createCode&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">createCode</span><span class="hljs-params">(String courseid,String coursename,String price)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// 略略略</span><br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;checkOrderStatus&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">checkOrderStatus</span><span class="hljs-params">(String orderId)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// 略略略</span><br>    &#125;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;wxCallback&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">wxCallBack</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">outSteam</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">resultxml</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inStream = request.getInputStream();<br>            outSteam = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((len = inStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                outSteam.write(buffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            resultxml = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(outSteam.toByteArray(), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;回调处理失败&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != outSteam) &#123;<br>                outSteam.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != inStream) &#123;<br>                inStream.close();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;wxCallback - 回调请求参数:&quot;</span>+ resultxml);<br>        <span class="hljs-keyword">return</span> resultxml;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">// 注册到中心的客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduPayBootApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EduPayBootApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="订单微服务：8007"><a href="#订单微服务：8007" class="headerlink" title="订单微服务：8007"></a>订单微服务：<font style='color:red;'>8007</font></h1><p>edu-order-boot：订单微服务：<font style='color:red;'>8007</font></p><h2 id="1、搭建微服务"><a href="#1、搭建微服务" class="headerlink" title="1、搭建微服务"></a>1、搭建微服务</h2><ul><li>将controller中的<code>@Reference</code>修改为<code>@Autowired</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8007</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-order-boot</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.204.141:3306/edu_order?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123123</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></code></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span>  <br><span class="hljs-meta">@Table(name = &quot;user_course_order&quot;)</span> <span class="hljs-comment">// 用户课程订单表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserCourseOrder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">777308790778683330L</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 主键</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 订单号</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String orderNo;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 用户id</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Object userId;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 课程id，根据订单中的课程类型来选择</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Object courseId;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 活动课程id</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Integer activityCourseId;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 订单来源类型: 1 用户下单购买 2 后台添加专栏</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Object sourceType;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 当前状态: 0已创建 10已支付 20已完成 30已取消 40已过期 </span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Object status;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 创建时间</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 更新时间</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 是否删除</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Object isDel;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>dao接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;UserCourseOrder&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service实现类（mybatis plus 改造）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderDao orderDao;<br><span class="hljs-comment">// 保存订单</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveOrder</span><span class="hljs-params">(String orderNo, String user_id, String course_id, String activity_course_id, String source_type)</span> &#123;<br>        <span class="hljs-type">UserCourseOrder</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserCourseOrder</span>();<br><br>        order.setOrderNo(orderNo);<br>        order.setUserId(user_id);<br>        order.setCourseId(course_id);<br>        order.setActivityCourseId( Integer.parseInt(activity_course_id));<br>        order.setSourceType(source_type);<br>        order.setIsDel(<span class="hljs-number">0</span>);<br>        order.setStatus(<span class="hljs-number">0</span>);<br>        order.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        order.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>        orderDao.insert(order);<br>    &#125;<br>    <span class="hljs-comment">// 更新订单状态</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">updateOrder</span><span class="hljs-params">(String orderNo, <span class="hljs-type">int</span> status)</span> &#123;<br>        <span class="hljs-type">UserCourseOrder</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserCourseOrder</span>();<br>        order.setStatus(status);<br><br>        QueryWrapper&lt;UserCourseOrder&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        qw.eq(<span class="hljs-string">&quot;order_no&quot;</span>, orderNo);<br>        <span class="hljs-keyword">return</span> orderDao.update(order,qw);<br>    &#125;<br><span class="hljs-comment">// 删除订单</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">deleteOrder</span><span class="hljs-params">(String orderNo)</span> &#123;<br>        QueryWrapper&lt;UserCourseOrder&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        qw.eq(<span class="hljs-string">&quot;order_no&quot;</span>, orderNo);<br>        <span class="hljs-comment">// delete from user_course_order where order_no = orderNo</span><br>        <span class="hljs-keyword">return</span> orderDao.delete(qw);<br>    &#125;<br><span class="hljs-comment">// 查询某个用户的全部订单</span><br>    <span class="hljs-keyword">public</span> List&lt;UserCourseOrder&gt; <span class="hljs-title function_">getOrdersByUserId</span><span class="hljs-params">(String userId)</span> &#123;<br>        QueryWrapper&lt;UserCourseOrder&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        qw.eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId);<br>        <span class="hljs-comment">//select * from user_course_order where user_id = userId</span><br>        <span class="hljs-keyword">return</span> orderDao.selectList(qw);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">// 注册到中心的客户端</span><br><span class="hljs-meta">@MapperScan(&quot;com.lagou.eduorderboot.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduOrderBootApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EduOrderBootApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、添加记录操作"><a href="#2、添加记录操作" class="headerlink" title="2、添加记录操作"></a>2、添加记录操作</h2><ul><li>记录操作信息到 pay_order （支付订单信息表） 和 pay_order_record（支付订单状态日志表）</li><li>实体类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Table(name = &quot;pay_order_record&quot;)</span> <span class="hljs-comment">//支付订单状态日志表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PayOrderRecord</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">777308790778683330L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String order_no;<br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-keyword">private</span> String from_status;<br>    <span class="hljs-keyword">private</span> String to_status;<br>    <span class="hljs-keyword">private</span> Double paid_amount;<br>    <span class="hljs-keyword">private</span> String remark;<br>    <span class="hljs-keyword">private</span> String created_by;<br>    <span class="hljs-keyword">private</span> Date created_at;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span>  <br><span class="hljs-meta">@Table(name = &quot;pay_order&quot;)</span> <span class="hljs-comment">//支付订单信息表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PayOrder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">777308790778683330L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String order_no;<br>    <span class="hljs-keyword">private</span> String user_id;<br>    <span class="hljs-keyword">private</span> String product_id;<br>    <span class="hljs-keyword">private</span> String product_name;<br>    <span class="hljs-keyword">private</span> Double amount;<br>    <span class="hljs-keyword">private</span> Integer count;<br>    <span class="hljs-keyword">private</span> String currency;<br>    <span class="hljs-keyword">private</span> String channel;<br>    <span class="hljs-keyword">private</span> Integer status;<br>    <span class="hljs-keyword">private</span> Integer channel_status;<br>    <span class="hljs-keyword">private</span> Integer order_type;<br>    <span class="hljs-keyword">private</span> Integer source;<br>    <span class="hljs-keyword">private</span> String client_ip;<br>    <span class="hljs-keyword">private</span> String buy_id;<br>    <span class="hljs-keyword">private</span> String out_trade_no;<br>    <span class="hljs-keyword">private</span> Date created_time;<br>    <span class="hljs-keyword">private</span> Date updated_time;<br>    <span class="hljs-keyword">private</span> Date pay_time;<br>    <span class="hljs-keyword">private</span> String extra;<br>    <span class="hljs-keyword">private</span> String goods_order_no;<br>    <span class="hljs-keyword">private</span> Integer platform;<br>    <span class="hljs-keyword">private</span> Integer wx_type;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>contorller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;order&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;saveOrder&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">saveOrder</span><span class="hljs-params">(String orderNo,String user_id , String course_id,String activity_course_id,String source_type,Double price)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;保存的订单 = &quot;</span> + orderNo);<br>        orderService.saveOrder(orderNo, user_id, course_id, activity_course_id, source_type);<br>        <span class="hljs-comment">// 创建订单记录</span><br>        <span class="hljs-type">PayOrderRecord</span> <span class="hljs-variable">por</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PayOrderRecord</span>();<br>        por.setOrder_no(orderNo);<span class="hljs-comment">// 订单号</span><br>        por.setType(<span class="hljs-string">&quot;CREATE&quot;</span>); <span class="hljs-comment">//操作类型：CREATE\|PAY\|REFUND...</span><br>        por.setPaid_amount(price);<br>        por.setFrom_status(<span class="hljs-string">&quot;0&quot;</span>);<br>        por.setTo_status(<span class="hljs-string">&quot;1&quot;</span>);<br>        por.setCreated_by(<span class="hljs-string">&quot;auto&quot;</span>);<br>        por.setCreated_at(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        System.out.println(<span class="hljs-string">&quot;创建订单记录 = &quot;</span> + orderNo);<br>        orderService.saveOrderRecord(por);<br><br>        <span class="hljs-keyword">return</span> orderNo;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;updateOrder&quot;)</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">updateOrder</span><span class="hljs-params">(String orderNo , Integer status, String user_id , String course_id, String course_name, Double price, HttpServletRequest request)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;订单编号 = &quot;</span> + orderNo);<br>        System.out.println(<span class="hljs-string">&quot;状态编码 = &quot;</span> + status);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> orderService.updateOrder(orderNo, status);<br>        System.out.println(<span class="hljs-string">&quot;订单更新 = &quot;</span> + integer);<br><br>        <span class="hljs-keyword">if</span>(integer == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 创建支付订单信息</span><br>            <span class="hljs-type">PayOrder</span> <span class="hljs-variable">po</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PayOrder</span>();<br>            po.setOrder_no(orderNo);<span class="hljs-comment">// 订单号</span><br>            po.setUser_id(user_id);<span class="hljs-comment">// 购买者</span><br>            po.setProduct_id(course_id); <span class="hljs-comment">//课程（产品）编号</span><br>            po.setProduct_name(course_name); <span class="hljs-comment">//课程（产品）名称</span><br>            po.setAmount(price);<span class="hljs-comment">// 金额</span><br>            po.setCount(<span class="hljs-number">1</span>); <span class="hljs-comment">// 购买数量</span><br>            po.setCurrency(<span class="hljs-string">&quot;cny&quot;</span>); <span class="hljs-comment">//货币类型：人民币</span><br>            po.setChannel(<span class="hljs-string">&quot;weChat&quot;</span>);  <span class="hljs-comment">//支付渠道：weChat-微信支付</span><br>            po.setStatus(<span class="hljs-number">2</span>); <span class="hljs-comment">// 支付成功</span><br>            po.setOrder_type(<span class="hljs-number">1</span>);<span class="hljs-comment">//类型 1-购买课程</span><br>            po.setSource(<span class="hljs-number">3</span>); <span class="hljs-comment">// 支付来源 1-app 2-h5 3-pc</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (request != <span class="hljs-literal">null</span>) &#123;<br>                ip = request.getHeader(<span class="hljs-string">&quot;X-FORWARDED-FOR&quot;</span>);<br>                <span class="hljs-keyword">if</span> (ip == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(ip)) &#123;<br>                    ip = request.getRemoteAddr();<br>                &#125;<br>            &#125;<br>            po.setClient_ip(ip); <span class="hljs-comment">// 客户端ip</span><br>            po.setCreated_time(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            po.setUpdated_time(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            <span class="hljs-comment">//支付订单信息</span><br>            orderService.saveOrderInfo(po);<br><br>            <span class="hljs-comment">// 创建支付订单记录</span><br>            <span class="hljs-type">PayOrderRecord</span> <span class="hljs-variable">por</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PayOrderRecord</span>();<br>            por.setOrder_no(orderNo);<span class="hljs-comment">// 订单号</span><br>            por.setType(<span class="hljs-string">&quot;PAY&quot;</span>); <span class="hljs-comment">//操作类型：CREATE\|PAY\|REFUND...</span><br>            por.setPaid_amount(price);<br>            por.setFrom_status(<span class="hljs-string">&quot;1&quot;</span>);<br>            por.setTo_status(<span class="hljs-string">&quot;2&quot;</span>);<br>            por.setCreated_by(<span class="hljs-string">&quot;auto&quot;</span>);<br>            por.setCreated_at(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>            <span class="hljs-comment">//支付订单状态日志</span><br>            orderService.saveOrderRecord(por);<br>        &#125;<br>        <span class="hljs-keyword">return</span> integer;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;deleteOrder&quot;)</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">deleteOrder</span><span class="hljs-params">(String orderno)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;取消的订单 = &quot;</span> + orderno);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> orderService.deleteOrder(orderno);<br>        <span class="hljs-keyword">return</span> integer;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveOrderInfo</span><span class="hljs-params">(PayOrder po )</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveOrderRecord</span><span class="hljs-params">( PayOrderRecord por)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderDao orderDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PayOrderDao payOrderDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PayOrderRecordDao payOrderRecordDao;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveOrderInfo</span><span class="hljs-params">(PayOrder po)</span>&#123;<br>        payOrderDao.insert(po);<br>        System.out.println(<span class="hljs-string">&quot;----------------------- 保存parorder&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveOrderRecord</span><span class="hljs-params">(PayOrderRecord por)</span>&#123;<br>        payOrderRecordDao.insert(por);<br>        System.out.println(<span class="hljs-string">&quot;----------------------- 保存parorderRecord&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、订单分表的应用"><a href="#3、订单分表的应用" class="headerlink" title="3、订单分表的应用"></a>3、订单分表的应用</h2><ul><li>sharding-jdbc以jar包形式提供服务，所以要先引入maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8007</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-order-boot</span><br>  <span class="hljs-attr">shardingsphere:</span><br>    <span class="hljs-attr">datasource:</span><br>      <span class="hljs-attr">names:</span> <span class="hljs-string">ds0</span>   <span class="hljs-comment">#配置库的名字，随意</span><br>      <span class="hljs-attr">ds0:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>        <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.204.141:3306/edu_order?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-number">123123</span><br>    <span class="hljs-attr">sharding:</span><br>      <span class="hljs-attr">tables:</span><br>        <span class="hljs-attr">user_course_order:</span>   <span class="hljs-comment"># 指定user_course_order表的数据分布情况，配置数据节点</span><br>          <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">ds0.user_course_order_$-&gt;&#123;0..2&#125;</span><br>          <span class="hljs-attr">tableStrategy:</span><br>            <span class="hljs-attr">inline:</span>   <span class="hljs-comment"># 指定user_course_order表的分片策略，分片策略包括分片键和分片算法</span><br>              <span class="hljs-attr">shardingColumn:</span> <span class="hljs-string">id</span><br>              <span class="hljs-attr">algorithmExpression:</span> <span class="hljs-string">user_course_order_$-&gt;&#123;id</span> <span class="hljs-string">%</span> <span class="hljs-number">3</span><span class="hljs-string">&#125;</span> <br>          <span class="hljs-attr">keyGenerator:</span>   <span class="hljs-comment"># 指定user_course_order表的主键生成策略为SNOWFLAKE</span><br>            <span class="hljs-attr">type:</span> <span class="hljs-string">SNOWFLAKE</span>  <span class="hljs-comment">#主键生成策略为SNOWFLAKE</span><br>            <span class="hljs-attr">column:</span> <span class="hljs-string">id</span>  <span class="hljs-comment">#指定主键</span><br>  <span class="hljs-attr">props:</span><br>    <span class="hljs-attr">sql:</span><br>      <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></code></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@MapperScan(&quot;com.lagou.eduorderboot.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduOrderBootApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EduOrderBootApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、前端联调"><a href="#4、前端联调" class="headerlink" title="4、前端联调"></a>4、前端联调</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 微信支付二维码--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;dialogFormVisible&quot;</span> <span class="hljs-attr">:before-close</span>=<span class="hljs-string">&quot;cancelOrder&quot;</span> <span class="hljs-attr">:modal</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">:close-on-click-modal</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:800px;margin:0px auto;&quot;</span> &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:30px;color:#00B38A&quot;</span> &gt;</span>微信扫一扫支付<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;qrcode&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:210px;margin:20px auto;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;statusText&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;closeText&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 购买课程</span><br><span class="hljs-title function_">buy</span>(<span class="hljs-params">courseid</span>) &#123;<br>  <span class="hljs-comment">// 登录后才能购买</span><br>  <span class="hljs-keyword">if</span>( <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> != <span class="hljs-literal">null</span> )&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogFormVisible</span> = <span class="hljs-literal">true</span>; <br><br>    <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createCode</span>(); <br>    &#125;);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;购买失败，请先登录！&quot;</span>);<br>  &#125;<br>&#125;,<br><span class="hljs-comment">// 生成二维码</span><br><span class="hljs-title function_">createCode</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">// 将上一次的二维码清除，防止出现多个二维码</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;qrcode&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>    .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:8004/order/createCode&quot;</span>,&#123;<br>      <span class="hljs-attr">params</span>:&#123;<br>        <span class="hljs-attr">courseid</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">course</span>.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">coursename</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">course</span>.<span class="hljs-property">courseName</span>,<br>        <span class="hljs-attr">price</span>:<span class="hljs-number">1</span>,<br>      &#125;<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>      <span class="hljs-keyword">let</span> qrcode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QRCode</span>(<span class="hljs-string">&#x27;qrcode&#x27;</span>,&#123;<br>        <span class="hljs-attr">width</span>:<span class="hljs-number">200</span>,<br>        <span class="hljs-attr">height</span>:<span class="hljs-number">200</span>,<br>        <span class="hljs-attr">text</span>:result.<span class="hljs-property">data</span>.<span class="hljs-property">code_url</span>  <br>      &#125;);<br><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">orderNo</span> = result.<span class="hljs-property">data</span>.<span class="hljs-property">orderId</span>;<br>      <br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">saveOrder</span>();<br><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>        .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:8004/order/checkOrderStatus&quot;</span>,&#123;<br>          <span class="hljs-attr">params</span>:&#123;<br>            <span class="hljs-attr">orderId</span>: result.<span class="hljs-property">data</span>.<span class="hljs-property">orderId</span> <br>          &#125;<br>        &#125;)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">data</span>.<span class="hljs-property">trade_state</span>);<br>          <span class="hljs-keyword">if</span>(result.<span class="hljs-property">data</span>.<span class="hljs-property">trade_state</span>==<span class="hljs-string">&quot;SUCCESS&quot;</span>)&#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;statusText&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;i style=&#x27;color:#00B38A&#x27; class=&#x27;el-icon-success&#x27;&gt;&lt;/i&gt; 支付成功！&quot;</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateOrder</span>(<span class="hljs-number">20</span>);<br><br>            <span class="hljs-comment">// 3秒后关闭二维码窗口</span><br>            <span class="hljs-keyword">let</span> s = <span class="hljs-number">3</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">closeQRForm</span>(s);<br>          &#125;<br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;查询订单失败！&quot;</span>);<br>        &#125;);<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;生成二维码失败！&quot;</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>    &#125;);<br>&#125;,<br><span class="hljs-comment">// 倒计时关闭二维码窗口</span><br><span class="hljs-title function_">closeQRForm</span>(<span class="hljs-params"> s </span>)&#123;<br>  <span class="hljs-comment">// 略</span><br>&#125;,<br><span class="hljs-comment">// 保存订单 （参数多了）</span><br><span class="hljs-title function_">saveOrder</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>    .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:8003/order/saveOrder&quot;</span>,&#123;<br>      <span class="hljs-attr">params</span>:&#123;<br>        <span class="hljs-attr">orderNo</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">orderNo</span>,<br>        <span class="hljs-attr">user_id</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">content</span>.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">course_id</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">course</span>.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">activity_course_id</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">course</span>.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">source_type</span>:<span class="hljs-number">1</span>,<br>        <span class="hljs-attr">price</span>:<span class="hljs-number">1</span><br>      &#125;<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;保存订单&quot;</span>);<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;保存订单失败！&quot;</span>);<br>  &#125;);<br>&#125;,<br><span class="hljs-comment">// 更新订单的状态（参数多了）</span><br><span class="hljs-title function_">updateOrder</span>(<span class="hljs-params">statusCode</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>    .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:8003/order/updateOrder&quot;</span>,&#123;<br>      <span class="hljs-attr">params</span>:&#123;<br>        <span class="hljs-attr">orderNo</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">orderNo</span>,<br>        <span class="hljs-attr">status</span>:statusCode,<br>        <span class="hljs-attr">user_id</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">content</span>.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">course_id</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">course</span>.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">course_name</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">course</span>.<span class="hljs-property">name</span>,<br>        <span class="hljs-attr">price</span>:<span class="hljs-number">1</span><br>      &#125;<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;更新订单【&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">orderNo</span>+<span class="hljs-string">&quot;】状态：&quot;</span> + statusCode);<br>    &#125;).<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;更新订单失败！&quot;</span>);<br>    &#125;);<br>&#125;,<br><span class="hljs-comment">// 取消订单（支付前，关闭二维码窗口视为不购买，可取消订单）</span><br><span class="hljs-title function_">cancelOrder</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogFormVisible</span>= <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>    .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:8003/order/deleteOrder&quot;</span>,&#123;<br>      <span class="hljs-attr">params</span>:&#123;<br>        <span class="hljs-attr">orderno</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">orderNo</span>,<br>      &#125;<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;取消订单&quot;</span>);<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;取消订单失败！&quot;</span>);<br>  &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="5、已购买课程查询-分库改造"><a href="#5、已购买课程查询-分库改造" class="headerlink" title="5、已购买课程查询-分库改造"></a>5、已购买课程查询-分库改造</h2><ul><li><p>之前我们说过，微服务可以拥有自己独立的数据库，现在用分库来实现它</p></li><li><p>重新规划数据库和表的归属</p><ul><li>用户微服务：edu_user库 -&gt; user</li><li>课程微服务：edu_course库 -&gt; course、course_section、activity_course、course_lesson、course_media、teacher</li><li>留言微服务：edu_comment库 -&gt; course_comment、course_comment_favorite_record</li><li>订单微服务：edu_order库 -&gt; 订单来10张表：user_course_order_<b style='color:Red'>0</b>，user_course_order_<b style='color:Red'>1</b>，user_course_order_<b style='color:Red'>2</b> …</li></ul></li><li><p>课程和订单分库后的改造，思路如下：</p><ol><li>通过登录的用户id，去<b style='color:blue'>订单微服务</b>查询该用户已经成功购买的课程id</li><li>将所有已购买的课程id发送给<b style='color:blue'>课程微服务</b>查询课程详情</li></ol></li><li><p>如何进行微服务之间的远程调用呢，Feign它来了！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-attr">myCourseList</span>:[], <span class="hljs-comment">// 我购买过的课程列表</span><br>    &#125;;<br>&#125;,<br><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getCourseList</span>(); <span class="hljs-comment">//当组件创建完毕，就调用获取所有课程的方法</span><br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>( <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;user&quot;</span>) );<br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> != <span class="hljs-literal">null</span> )&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isLogin</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">//已登录</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMyCourseList</span>(); <span class="hljs-comment">//1.获取当前用户的已经购买（status=20）的课程</span><br>    &#125;<br>&#125;,<br><br><span class="hljs-comment">//1.根据课程编号查询课程信息</span><br><span class="hljs-title function_">getMyCourseList</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span><br>  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:8004/course/getCourseByCourseId&quot;</span>,&#123;<br>      <span class="hljs-attr">params</span>:&#123;<br>         <span class="hljs-attr">userid</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">userid</span><br>      &#125;<br>   &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">myCourseList</span> = result.<span class="hljs-property">data</span>;<br>  &#125;).<span class="hljs-title function_">catch</span>( <span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;获取已购买的课程信息失败！&quot;</span>);<br>  &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure></li></ul><h3 id="课程微服务"><a href="#课程微服务" class="headerlink" title="课程微服务"></a>课程微服务</h3><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getMyCoursesByUserId&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;CourseDTO&gt; <span class="hljs-title function_">getMyCoursesByUserId</span><span class="hljs-params">( Integer userid )</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;userid = &quot;</span> + userid);<br>    <span class="hljs-keyword">return</span> courseService.getMyCoursesByUserId(userid);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>CourseServiceImpl</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> OrderRemoteService orderRemoteService; <span class="hljs-comment">// 调用远程接口</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;CourseDTO&gt; <span class="hljs-title function_">getMyCoursesByUserId</span><span class="hljs-params">(Integer userid)</span> &#123;<br>    List&lt;Object&gt; ids = orderRemoteService.getOKOrderCourseIds(userid);<br>    <span class="hljs-keyword">return</span> getAllCourse(ids);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;CourseDTO&gt; <span class="hljs-title function_">getAllCourse</span><span class="hljs-params">(List&lt;Object&gt; ids)</span> &#123;<br>    <span class="hljs-comment">// 基本信息</span><br>    List&lt;Course&gt; courses = getInvalidCourses(ids);<br>    <span class="hljs-comment">// 省略</span><br>&#125;<br><span class="hljs-comment">// 查询所有课程基本信息</span><br><span class="hljs-keyword">private</span> List&lt;Course&gt; <span class="hljs-title function_">getInvalidCourses</span><span class="hljs-params">(List&lt;Object&gt; ids)</span>&#123;<br>    <span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">courseQueryWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>    courseQueryWrapper.eq(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">1</span>);<br>    courseQueryWrapper.eq(<span class="hljs-string">&quot;is_del&quot;</span>, Boolean.FALSE); <br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != ids)&#123;<br>        courseQueryWrapper.in(<span class="hljs-string">&quot;id&quot;</span>, ids); <span class="hljs-comment">// 查询匹配的课程</span><br>    &#125;<br>    courseQueryWrapper.orderByDesc(<span class="hljs-string">&quot; sort_num &quot;</span>); <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.courseMapper.selectList(courseQueryWrapper);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>OrderRemoteService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;edu-order-boot&quot;,path = &quot;order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderRemoteService</span> &#123;<br>  <span class="hljs-meta">@GetMapping(&quot;getOKOrderCourseIds&quot;)</span><br>  List&lt;Object&gt; <span class="hljs-title function_">getOKOrderCourseIds</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;userid&quot;)</span> Integer userid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>pom</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <br><span class="hljs-meta">@MapperScan(&quot;com.lagou.educourseboot.mapper&quot;)</span><br><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">// feign的客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduCourseBootApplication</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      SpringApplication.run(EduCourseBootApplication.class, args);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="订单微服务"><a href="#订单微服务" class="headerlink" title="订单微服务"></a>订单微服务</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询用户已购买完成的的课程ID</span><br><span class="hljs-meta">@GetMapping(&quot;getOKOrderCourseIds&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">getOKOrderCourseIds</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String userid )</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;获取&quot;</span>+userid +<span class="hljs-string">&quot;的购买的课程编号！&quot;</span>);<br>    List&lt;UserCourseOrder&gt; list = orderService.getOKOrderCourseIds(userid);<br>    List&lt;Object&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span>(UserCourseOrder order : list)&#123;<br>        list2.add(order.getCourseId());<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;已购成功的课程id：&quot;</span> + list2);<br>    <span class="hljs-keyword">return</span> list2;<br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;UserCourseOrder&gt; <span class="hljs-title function_">getOKOrderCourseIds</span><span class="hljs-params">(String userId)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;UserCourseOrder&gt; <span class="hljs-title function_">getOKOrderCourseIds</span><span class="hljs-params">(String userId)</span> &#123;<br>    QueryWrapper&lt;UserCourseOrder&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>    qw.select(<span class="hljs-string">&quot;course_id&quot;</span>); <span class="hljs-comment">// SELECT course_id FROM edu_order.user_course_order</span><br>    qw.eq(<span class="hljs-string">&quot;STATUS&quot;</span>, <span class="hljs-number">20</span>); <span class="hljs-comment">//WHERE STATUS = 20</span><br>    qw.eq(<span class="hljs-string">&quot;is_del&quot;</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//AND is_del = 0</span><br>    qw.eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId); <span class="hljs-comment">//AND  user_id = #&#123;userId</span><br>    <span class="hljs-keyword">return</span> orderDao.selectList(qw);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6、订单成功后-短信通知"><a href="#6、订单成功后-短信通知" class="headerlink" title="6、订单成功后-短信通知"></a>6、订单成功后-短信通知</h2><ul><li>采用消息队列异步处理</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210316101136730.png" alt="image-20210316101136730"></p><ul><li><p>使用rabbitmq的管理端 ip:15672 进行初始化操作</p><ul><li><p>创建虚拟主机 lagou</p></li><li><p>创建消息队列 order_queue</p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210315164923888.png" alt="image-20210315164923888"></p></li></ul></li><li><p>pom</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8007</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-order-boot</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.204</span><span class="hljs-number">.145</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">laosun</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123123</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">lagou</span><br>    <span class="hljs-attr">queue:</span> <span class="hljs-string">order_queue</span><br></code></pre></td></tr></table></figure><ul><li>支付成功后</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br><span class="hljs-meta">@Value(&quot;$&#123;spring.rabbitmq.queue&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SmsVo</span> <span class="hljs-variable">sv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsVo</span>();<br>    sv.setPhone(<span class="hljs-string">&quot;110&quot;</span>);<br>    sv.setCourseName(<span class="hljs-string">&quot;java高薪课程&quot;</span>);<br>    rabbitTemplate.convertAndSend(queue, sv);<br>    System.out.println(<span class="hljs-string">&quot;购买成功的消息已发送到RabbitMQ！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>监听消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderRever</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;$&#123;spring.rabbitmq.queue&#125;&quot;)</span><br>    <span class="hljs-comment">//@RabbitHandler</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(SmsVo smsVo)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;监听到MQ中有新的消息：&quot;</span>+smsVo);<br>        sms.send(); <span class="hljs-comment">//调用短信接口发送短信</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>【拉勾教育通知】 学员110，你已成功购买《java高薪课程》，抓紧学习哦！</p><ul><li>封装短信实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsVo</span> &#123;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-keyword">private</span> String courseName;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;order&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.rabbitmq.queue&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String queue;<br><br>    <span class="hljs-meta">@GetMapping(&quot;updateOrder&quot;)</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">updateOrder</span><span class="hljs-params">(String orderNo , Integer status,String user_id,String course_id,String course_name,Double price, String phone)</span> &#123;  <span class="hljs-comment">// 修改前端传入手机号码</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> orderService.updateOrder(orderNo, status);<br>        <span class="hljs-keyword">if</span>(integer == <span class="hljs-number">1</span>)&#123;<br>            orderService.saveOrderInfo(po);<br>            orderService.saveOrderRecord(record);<br><br>            <span class="hljs-comment">// 发送短信成功的通知(消息的生产者)</span><br>            <span class="hljs-type">SmsVo</span> <span class="hljs-variable">smsVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsVo</span>();<br>            smsVo.setPhone(phone);<span class="hljs-comment">// 手机号码</span><br>            smsVo.setCourseName(course_name);<br>            rabbitTemplate.convertAndSend(queue,smsVo);<br>        &#125;<br>        <span class="hljs-keyword">return</span> integer;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lagou.eduorderboot.rabbit;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">消息消费者</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderRever</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SmsService smsService;<br><br>    <span class="hljs-meta">@RabbitListener( queues = &quot;$&#123;spring.rabbitmq.queue&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(SmsVo smsVo)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;得到通知，开始发送 = &quot;</span> + smsVo.getCourseName());<br><br>        <span class="hljs-comment">// 调用发送短信</span><br>        smsService.sendSms(smsVo.getPhone(), smsVo.getCourseName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>SmsService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsService</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;ali.sms.signName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String signName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;ali.sms.templateCode&#125;&quot;)</span> <span class="hljs-comment">// 新模版，之前验证码的模版不能用了</span><br>    <span class="hljs-keyword">private</span> String templateCode; <br>    <span class="hljs-meta">@Value(&quot;$&#123;ali.sms.assessKeyId&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String accessKeyId;<br>    <span class="hljs-meta">@Value(&quot;$&#123;ali.sms.assessKeySecret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String assessKeySecret;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">sendSms</span><span class="hljs-params">(String phoneNumber,String courseName)</span> &#123;<br>        <span class="hljs-type">DefaultProfile</span> <span class="hljs-variable">profile</span> <span class="hljs-operator">=</span> DefaultProfile.getProfile(<span class="hljs-string">&quot;cn-hangzhou&quot;</span>, accessKeyId, assessKeySecret);<br>        <span class="hljs-type">IAcsClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAcsClient</span>(profile);<br><br>        <span class="hljs-type">CommonRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonRequest</span>();<br>        request.setSysMethod(MethodType.POST);<br>        request.setSysDomain(<span class="hljs-string">&quot;dysmsapi.aliyuncs.com&quot;</span>);<br>        request.setSysVersion(<span class="hljs-string">&quot;2017-05-25&quot;</span>);<br>        request.setSysAction(<span class="hljs-string">&quot;SendSms&quot;</span>);<br>        request.putQueryParameter(<span class="hljs-string">&quot;RegionId&quot;</span>, <span class="hljs-string">&quot;cn-hangzhou&quot;</span>);<br>        request.putQueryParameter(<span class="hljs-string">&quot;PhoneNumbers&quot;</span>, phoneNumber);<br>        request.putQueryParameter(<span class="hljs-string">&quot;SignName&quot;</span>, signName);<br>        request.putQueryParameter(<span class="hljs-string">&quot;TemplateCode&quot;</span>, templateCode);<br><br>        request.putQueryParameter(<span class="hljs-string">&quot;TemplateParam&quot;</span>, <span class="hljs-string">&quot;&#123;\&quot;phone\&quot;:\&quot;&quot;</span> + phoneNumber + <span class="hljs-string">&quot;\&quot;,\&quot;courseName\&quot;:\&quot;&quot;</span>+courseName+<span class="hljs-string">&quot;\&quot;&#125;&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">CommonResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.getCommonResponse(request);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> response.getData();<br>            System.out.println(<span class="hljs-string">&quot;jsonStr = &quot;</span> + jsonStr);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果有精力的同学，还可以研究一个非常给力的支付一站式解决方案：<a href="https://beecloud.cn/">https://beecloud.cn/</a> </li><li>重新请求下单、商户单号重复等经常出现的问题，都完美解决，当然，现有的产品，高端版本是收费的。</li></ul><hr><h1 id="08-视频播放"><a href="#08-视频播放" class="headerlink" title="08 视频播放"></a>08 视频播放</h1><h2 id="1、改造播放组件"><a href="#1、改造播放组件" class="headerlink" title="1、改造播放组件"></a>1、改造播放组件</h2><ul><li><p>之前我们在前端项目中使用的html的 &lt;video&gt; 组件标签进行播放，虽然能播放，但是功能比较单一，只能播放而已，无法保证视频资源的安全性</p></li><li><p>我们采用阿里云视频点播方案</p></li><li><p>阿里官网：<a href="https://www.alibabacloud.com/help/zh/doc-detail/51236.htm?spm=a2c63.p38356.b99.2.28213799QTbeE3">https://www.alibabacloud.com/help/zh/doc-detail/51236.htm?spm=a2c63.p38356.b99.2.28213799QTbeE3</a></p></li><li><p>高端的额外服务是按照流量收取费用的</p></li><li><p>改造前端项目，加入阿里播放组件</p></li></ul><ol><li>在vue项目的public目录中的index.html文件中引入css和js</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://g.alicdn.com/de/prismplayer/2.8.2/skins/default/aliplayer-min.css&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://g.alicdn.com/de/prismplayer/2.8.2/aliplayer-min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在自己的vue组件中引入</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;prism-player&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;J_prismPlayer&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>vue绑定</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> player = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Aliplayer</span>(&#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;J_prismPlayer&#x27;</span>,<br>  <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;100%&#x27;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;900px&#x27;</span>,<br>  <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">//支持播放地址播放,此播放优先级最高</span><br>  source : <span class="hljs-string">&#x27;https://video.pearvideo.com/mp4/short/20200914/cont-1697119-15382138-hd.mp4&#x27;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="使用播放器切换视频"><a href="#使用播放器切换视频" class="headerlink" title="使用播放器切换视频"></a>使用播放器切换视频</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;video-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;prism-player&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;J_prismPlayer&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;playLesson(&#x27;https://xxxx.mp4&#x27;)&quot;</span>&gt;</span>视频1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;playLesson(&#x27;https://yyyy.mp4&#x27;)&quot;</span>&gt;</span>视频2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">player</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Aliplayer</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;J_prismPlayer&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;100%&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;900px&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-comment">//支持播放地址播放,此播放优先级最高</span></span><br><span class="language-javascript">            source : <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">playLesson</span>(<span class="hljs-params">mp4_url</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 每次重新创建 播放器 （否则视频会叠加）</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;J_prismPlayer&quot;</span>).<span class="hljs-title function_">remove</span>();</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> pdiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);</span><br><span class="language-javascript">            pdiv.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;class&quot;</span>,<span class="hljs-string">&quot;prism-player&quot;</span>);</span><br><span class="language-javascript">            pdiv.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;J_prismPlayer&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;video-box&quot;</span>).<span class="hljs-title function_">appendChild</span>(pdiv);</span><br><span class="language-javascript">            </span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">player</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Aliplayer</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;J_prismPlayer&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;100%&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;900px&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">//支持播放地址播放,此播放优先级最高</span></span><br><span class="language-javascript">                source : mp4_url,</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、阿里云OSS"><a href="#2、阿里云OSS" class="headerlink" title="2、阿里云OSS"></a>2、阿里云OSS</h2><ul><li><p>我们要做文件服务，阿里云oss是一个很好的分布式文件服务系统，所以我们只需要集成阿里云oss即可</p></li><li><p><a href="https://www.aliyun.com/">https://www.aliyun.com/</a></p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210317153154543.png" alt="image-20210317153154543"></p></li></ul><h3 id="2-1-开通“对象存储OSS”服务"><a href="#2-1-开通“对象存储OSS”服务" class="headerlink" title="2.1 开通“对象存储OSS”服务"></a>2.1 开通“对象存储OSS”服务</h3><ol><li><p>申请阿里云账号并实名认证</p></li><li><p>开通“对象存储OSS”服务</p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210317153335688.png" alt="image-20210317153335688"></p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210317155050654.png" alt="image-20210317155050654"></p></li><li><p>进入管理控制台</p></li></ol><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210317155110318.png" alt="image-20210317155110318"></p><h3 id="2-2-创建Bucket"><a href="#2-2-创建Bucket" class="headerlink" title="2.2 创建Bucket"></a>2.2 创建Bucket</h3><ul><li>类似”包”的概念，易于管理和存储</li><li>选择：标准存储、公共读、不开通</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210317155701371.png" alt="image-20210317155701371"></p><ul><li>oss授权</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210317161600202.png" alt="image-20210317161600202"></p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 阿里云oss依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 日期工具栏依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">aliyun:</span><br>  <span class="hljs-attr">oss:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">oss-cn-beijing.aliyuncs.com</span><br><span class="hljs-attr">accessKeyId:</span> <span class="hljs-string">LTAI4G4SV6WtST7UYH776xxx</span><br> <span class="hljs-attr">secret:</span> <span class="hljs-string">X9KHNYgztNr9MI5Zp8JffQPZO4uxxx</span><br><span class="hljs-attr">bucket:</span> <span class="hljs-string">lagou-laosun</span><br></code></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;file&quot;)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> FileService fileService;<br>    <br>    <span class="hljs-comment">//上传文件到阿里云oss</span><br>    <span class="hljs-meta">@PostMapping(&quot;fileUpload&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;<br>        <span class="hljs-comment">//获取上传文件</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> fileService.upload(file);<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FileService</span> &#123;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.endpoint&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String endpoint;<br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.accessKeyId&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String accessKeyId;<br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.secret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String secret;<br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.bucket&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String bucket;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建OSSClient实例。</span><br>            <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);<br>            <span class="hljs-comment">// 上传文件流。</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> file.getInputStream();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>            <span class="hljs-comment">// 生成随机唯一值，使用uuid，添加到文件名称里面</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>            fileName = uuid+fileName;<br>            <span class="hljs-comment">//按照当前日期，创建文件夹，上传到创建文件夹里面</span><br>            <span class="hljs-comment">// 2021/02/02/01.mp4</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">timeUrl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>().toString(<span class="hljs-string">&quot;yyyy/MM/dd&quot;</span>);<br>            fileName = timeUrl+<span class="hljs-string">&quot;/&quot;</span>+fileName; <span class="hljs-comment">// 2021/02/02/23fads85rj4hka01.mp4</span><br>            <span class="hljs-comment">// 调用方法实现上传</span><br>            ossClient.putObject(bucketName, fileName, inputStream);<br>            <span class="hljs-comment">// 关闭OSSClient。</span><br>            ossClient.shutdown();<br>            <span class="hljs-comment">// 上传之后文件路径</span><br>            <span class="hljs-comment">// https://lagou-laosun.oss-cn-beijing.aliyuncs.com/01.jpg</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://&quot;</span>+bucketName+<span class="hljs-string">&quot;.&quot;</span>+endpoint+<span class="hljs-string">&quot;/&quot;</span>+fileName;<br>            <span class="hljs-comment">// 返回</span><br>            <span class="hljs-keyword">return</span> url;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="09-配置中心"><a href="#09-配置中心" class="headerlink" title="09 配置中心"></a>09 配置中心</h1><h2 id="1、Config-分布式配置中心"><a href="#1、Config-分布式配置中心" class="headerlink" title="1、Config 分布式配置中心"></a>1、Config 分布式配置中心</h2><h3 id="1-1分布式配置中心应用场景"><a href="#1-1分布式配置中心应用场景" class="headerlink" title="1.1分布式配置中心应用场景"></a>1.1分布式配置中心应用场景</h3><p>​往往，我们使用配置文件管理一些配置信息，比如application.yml</p><p>​<strong>单体应用架构，</strong>配置信息的管理、维护并不会显得特别麻烦，手动操作就可以，因为就一个工程；</p><p>​<strong>微服务架构，</strong>因为我们的分布式集群环境中可能有很多个微服务，我们不可能一个一个去修改配置然后重启生效，在一定场景下我们还需要在运行期间动态调整配置信息，比如：根据各个微服务的负载情况，动态调整数据源连接池大小，我们希望配置内容发生变化的时候，微服务可以自动更新。</p><p>​场景总结如下：</p><p>​1）集中配置管理，一个微服务架构中可能有成百上千个微服务，所以集中配置管理是很重要的（一次修改、到处生效）</p><p>​2）不同环境不同配置，比如数据源配置在不同环境（开发dev,测试test,生产prod）中是不同的</p><p>​3）运行期间可动态调整。例如，可根据各个微服务的负载情况，动态调整数据源连接池大小等配置修改后可自动更新</p><p>​4）如配置内容发生变化，微服务可以自动更新配置</p><p>​那么，我们就需要对配置文件进行<strong>集中式管理</strong>，这也是分布式配置中心的作用。</p><p>Spring Cloud Conﬁg 是一个分布式配置管理方案，包含了 Server端和 Client端两个部分。</p><ul><li>一句话理解：将所有的配置文件统一保存到云端（github），通过服务端应用去获取，再分发给对应的每一个微服务</li><li>云端包括：<ul><li>github （访问不了，可以使用代理网址：<a href="https://hub.fastgit.org/">https://hub.fastgit.org</a> 等价于 <a href="https://github.com)/">https://github.com）</a></li><li>gitee 码云（国产github，很好用，用法和github一样）</li></ul></li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20200922180904548.png"></p><h3 id="1-2-服务端配置"><a href="#1-2-服务端配置" class="headerlink" title="1.2 服务端配置"></a>1.2 服务端配置</h3><h4 id="1-2-1-在GitHub新建一个库"><a href="#1-2-1-在GitHub新建一个库" class="headerlink" title="1.2.1 在GitHub新建一个库"></a>1.2.1 在GitHub新建一个库</h4><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210203233941598.png" alt="image-20210203233941598"></p><h4 id="1-2-2-获得项目的https的git地址"><a href="#1-2-2-获得项目的https的git地址" class="headerlink" title="1.2.2 获得项目的https的git地址"></a>1.2.2 获得项目的https的git地址</h4><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210203233611569.png" alt="image-20210203233611569"></p><h4 id="1-2-3-在本地文件推送到仓库"><a href="#1-2-3-在本地文件推送到仓库" class="headerlink" title="1.2.3 在本地文件推送到仓库"></a>1.2.3 在本地文件推送到仓库</h4><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210318165550615.png" alt="image-20210318165550615"></p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/111.png"></p><ul><li>全部都上传到git上了，如下图</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/222.png" alt="image-20210204000401807"></p><h4 id="1-2-4-创建服务端工程"><a href="#1-2-4-创建服务端工程" class="headerlink" title="1.2.4 创建服务端工程"></a>1.2.4 创建服务端工程</h4><ul><li>edu-config-boot：配置如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-lagou<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>edu-config-boot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>edu-config-boot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置中心 服务端 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9966</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">edu-config-boot</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">server:</span><br>        <span class="hljs-attr">git:</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://github.com/46434276/repo.git</span>  <span class="hljs-comment">#配置git服务地址</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-number">46434276</span><span class="hljs-string">@qq.com</span> <span class="hljs-comment">#配置git用户名</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-string">Sunguoan123</span> <span class="hljs-comment">#配置git密码</span><br>          <span class="hljs-attr">search-paths:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">repo</span>  <span class="hljs-comment">#仓库名</span><br>          <span class="hljs-attr">default-label:</span> <span class="hljs-string">master</span> <span class="hljs-comment"># 使用的默认分支，默认为 master</span><br>          <span class="hljs-attr">clone-on-start:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></code></pre></td></tr></table></figure><ul><li>启动edu-config-boot服务工程，就可以和github获得联系，加载仓库中的配置文件了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <br><span class="hljs-meta">@EnableConfigServer</span> <span class="hljs-comment">// 配置中心</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduConfigBootApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EduConfigBootApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-5-客户端工程配置（广告服务为例）"><a href="#1-2-5-客户端工程配置（广告服务为例）" class="headerlink" title="1.2.5 客户端工程配置（广告服务为例）"></a>1.2.5 客户端工程配置（广告服务为例）</h4><ul><li>因为application.yml配置都推送到git上，所以以往的application.yml文件里面的内容都可以不写了</li><li>但是要将application.yml文件更名为bootstrap.yml</li><li>因为bootstrap.yml文件启动优先级更高</li><li>在启动时就加载，加载就去edu-config-boot中找属于自己的配置信息，edu-config-boot得到请求后，会去git中找</li><li>bootstrap.yml 内容如下：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">edu-ad-boot</span> <span class="hljs-comment">#github上去掉yml的资源名称</span><br>      <span class="hljs-attr">profile:</span> <span class="hljs-string">dev</span>   <span class="hljs-comment">#本次访问的配置项</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9966</span> <span class="hljs-comment"># 去9966配置服务中心找属于自己的配置信息，靠上面的name和profile值查找</span><br></code></pre></td></tr></table></figure><ul><li>springboot本身是不支持bootstrap文件的   需要结合springcloud的组件一起使用</li><li>从Spring Boot 2.4版本开始，配置文件加载方式进行了重构</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置中心 客户端 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 微服务起始加载bootstrap --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h1 id="10-IDEA集成Docker部署微服务"><a href="#10-IDEA集成Docker部署微服务" class="headerlink" title="10 IDEA集成Docker部署微服务"></a>10 IDEA集成Docker部署微服务</h1><h2 id="1-回顾docker"><a href="#1-回顾docker" class="headerlink" title="1 回顾docker"></a>1 回顾docker</h2><ul><li>我想要盖房子，于是我搬砖、砍木头、画图纸、和水泥。一顿操作猛如虎，终于把这个房子盖好了。</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/11.PNG"></p><ul><li>住了一段时间后，心血来潮想搬回东北老家。这时候按之前的办法，我只能回到东北后，再次搬砖、砍木头、画图纸、和水泥、盖房子。</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/22.PNG"></p><ul><li>突然，降临一位神仙姐姐教了我一种法术。这个法术可以把我的房子复制一份，做成「镜像」，并可以放在百宝箱里</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/33.PNG"></p><ul><li><p>抱着百宝箱就回了东北，就用这个「镜像」，复制一套房子，完美复刻，拎包入住</p></li><li><p>是不是很神奇？对应到我们的项目中来，房子就是项目本身，镜像就是项目的复制，百宝箱就是镜像仓库</p></li><li><p>如果要动态扩容，从仓库中取出项目镜像，随便复制就可以了</p></li><li><p>不用再关注版本、兼容、部署等问题，彻底解决了「开发完美，上线就崩，无终止排查环境」的尴尬</p></li></ul><h2 id="2-安装docker"><a href="#2-安装docker" class="headerlink" title="2 安装docker"></a>2 安装docker</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apl"># 在192.168.204.141安装docker<br>[root@A ~]# yum -y install docker<br><br># 启动docker<br>[root@A ~]# systemctl start docker<br><br># 查看docker的运行状态<br>[root@A ~]# systemctl status docker<br></code></pre></td></tr></table></figure><h2 id="3-开启远程访问"><a href="#3-开启远程访问" class="headerlink" title="3 开启远程访问"></a>3 开启远程访问</h2><ul><li>Docker默认是不允许远程访问的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apl"># 修改配置文件<br>[root@A ~]# vim /lib/systemd/system/docker.service<br></code></pre></td></tr></table></figure><blockquote><p>ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H tcp:&#x2F;&#x2F;0.0.0.0:2375 -H unix:&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock</p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/d1.png"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apl"># 重新加载配置文件<br>[root@A ~]# systemctl daemon-reload<br><br># 重启docker<br>[root@A ~]# service docker restart<br><br># 查看端口是否开启<br>[root@A ~]# netstat -nlpt<br><br># 验证端口是否生效<br>[root@A ~]# curl http://192.168.204.141:2375/info<br></code></pre></td></tr></table></figure><h2 id="4-IDEA集成插件"><a href="#4-IDEA集成插件" class="headerlink" title="4 IDEA集成插件"></a>4 IDEA集成插件</h2><ul><li>在Plugins中搜索Docker，并安装</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/d2.png" alt="image-20201105112002067"></p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/d3.png" alt="img"></p><p><a href="https://owi3yzzk.mirror.aliyuncs.com/">https://owi3yzzk.mirror.aliyuncs.com</a></p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/d4.png" alt="image-20201105112310982"></p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/d5.png" alt="image-20201105112454252"></p><h2 id="5-Docker的Maven插件"><a href="#5-Docker的Maven插件" class="headerlink" title="5 Docker的Maven插件"></a>5 Docker的Maven插件</h2><ul><li>传统的过程中，要经历打包，部署，上传到linux，编写Dockerfile，构建镜像，创建容器等步骤</li><li>docker-maven-plugin就是帮助我们在开发构成中，<b style='color:red'>自动生成镜像并推送到仓库中</b></li><li>docker打包项目的插件有两种。<ul><li>docker-maven-plugin</li><li>dockerfile</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docker-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--镜像名称 laosun/test-docker-demo--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">imageName</span>&gt;</span>laosun/$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">imageName</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--标签版本--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">imageTags</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">imageTag</span>&gt;</span>latest<span class="hljs-tag">&lt;/<span class="hljs-name">imageTag</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">imageTags</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--基础镜像，相当于Dockerfile里的from--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">baseImage</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">baseImage</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--标签版本--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maintainer</span>&gt;</span>laosun angiersun@lagou.com<span class="hljs-tag">&lt;/<span class="hljs-name">maintainer</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--入口点，project.build.finalName就是project标签下的build标签下的filename标签内容，test-docker-demo--&gt;</span><br>        <span class="hljs-comment">&lt;!--相当于启动容器后，会自动执行java -jar/test-docker-demo.jar--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;, &quot;/$&#123;project.build.finalName&#125;.jar&quot;]<span class="hljs-tag">&lt;/<span class="hljs-name">entryPoint</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--docker地址--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dockerHost</span>&gt;</span>http://192.168.204.141:2375<span class="hljs-tag">&lt;/<span class="hljs-name">dockerHost</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--复制的根目录，target--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--把哪个文件上传到docker，相当于Dockerfile里的add test-docker-demo.jar /--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-执行命令"><a href="#6-执行命令" class="headerlink" title="6 执行命令"></a>6 执行命令</h2><ul><li><p>对项目进行打包，并构建镜像到docker上</p></li><li><p>第一次执行多等一会，要拉取java的环境等等操作</p></li><li><p><b style='color:red'>注意：构建镜像，要将项目中用到的localhost改为docker服务器的ip</b>，然后再进行构建镜像</p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210319143055076.png" alt="image-20210319143055076"></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">mvn clean package docker:build<br></code></pre></td></tr></table></figure><ul><li>命令执行完成，会自动将jar包镜像推送到docker</li><li>在idea的docker界面，根据镜像创建容器即可</li><li><b style='color:red'>一个镜像可以创建N个容器</b></li><li>查看正在运行的容器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">docker ps<br></code></pre></td></tr></table></figure><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20201105134622304.png" alt="image-20201105134622304"></p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210319131137670.png" alt="image-20210319131137670"></p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210319142838823.png" alt="image-20210319142838823"></p><ul><li>如果出现以下的错误，请执行对应的命令即可，都是找不到可执行文件的原因</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20201105133347494.png" alt="image-20201105133347494"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apl">[root@A ~]# cd /usr/libexec/docker/<br>[root@A docker]# ln -s docker-proxy-current docker-proxy<br></code></pre></td></tr></table></figure><ul><li>找不到docker运行的命令</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20201105134345284.png" alt="image-20201105134345284"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apl">[root@A docker]# cd /usr/libexec/docker/<br>[root@A docker]# ln -s docker-runc-current docker-runc<br></code></pre></td></tr></table></figure><ul><li>最后修改前端项目调用服务的ip，即可访问</li></ul><hr><h1 id="12-分布式事务解决方案（Seata）"><a href="#12-分布式事务解决方案（Seata）" class="headerlink" title="12 分布式事务解决方案（Seata）"></a>12 分布式事务解决方案（Seata）</h1><h2 id="1、为什么选择seata"><a href="#1、为什么选择seata" class="headerlink" title="1、为什么选择seata"></a>1、为什么选择seata</h2><ul><li>我们的项目是微服务项目，多数据源，因此很多业务操作避免不了跨数据源操作，传统的事务是不能解决跨数据源的，因此我们需要寻求分布式事务的解决方案</li><li>Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</li><li>Seata 是 Simple Extensible Autonomous Transaction Architecture 的简写，Fescar 品牌升级，更名为 Seata</li><li>在 Seata 开源之前，Seata 对应的内部版本在阿里经济体内部一直扮演着分布式一致性中间件的角色，帮助经济体平稳的度过历年的双11，可以说十分强大</li><li>2019.1 为了打造更加完善的技术生态和普惠技术成果，Seata 正式宣布对外开源. </li><li>使用seata需要服务端（官网提供下载）和客户端（微服务）配合来完成</li></ul><h3 id="1-1-通用案例"><a href="#1-1-通用案例" class="headerlink" title="1.1 通用案例"></a>1.1 通用案例</h3><ul><li>订单保存成功 &amp; 累计账户积分+10</li><li>账户微服务和订单微服务，都各自有独立的数据库</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20221121232450752.png" alt="image-20221121232450752"></p><h4 id="1-1-1-账户微服务"><a href="#1-1-1-账户微服务" class="headerlink" title="1.1.1 账户微服务"></a>1.1.1 账户微服务</h4><ul><li>数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE <span class="hljs-comment">/*!32312 IF NOT EXISTS*/</span>`test<span class="hljs-operator">-</span>account` <span class="hljs-comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;<br><br>USE `test<span class="hljs-operator">-</span>account`;<br><br><span class="hljs-comment">/*Table structure for table `taccount` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `taccount`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `taccount` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) unsigned zerofill <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;账户编号&#x27;</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;昵称&#x27;</span>,<br>  `score` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;积分&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `taccount` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `taccount`(`id`,`name`,`score`) <span class="hljs-keyword">values</span> <br>(<span class="hljs-number">00000000001</span>,<span class="hljs-string">&#x27;吕布&#x27;</span>,<span class="hljs-number">0</span>),<br>(<span class="hljs-number">00000000002</span>,<span class="hljs-string">&#x27;赵云&#x27;</span>,<span class="hljs-number">0</span>),<br>(<span class="hljs-number">00000000003</span>,<span class="hljs-string">&#x27;典韦&#x27;</span>,<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;account&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;update&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateAccountScore</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> accountService.updateAccountScore(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>dao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Taccount&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccountService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateAccountScore</span><span class="hljs-params">(<span class="hljs-type">int</span> userid, <span class="hljs-type">int</span> score)</span> &#123;<br>        <span class="hljs-type">Taccount</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> accountDao.selectById(userid);<br>        <span class="hljs-comment">// 在原来的积分之上，再增加10分</span><br>        account.setScore(account.getScore()+score);<br>        <span class="hljs-keyword">return</span> accountDao.updateById(account);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>yml  三个微服务都是一样的，这里只放一份</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8002</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">test-account</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.204.141:3306/test-account?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123123</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></code></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">// 注册到中心的客户端</span><br><span class="hljs-meta">@MapperScan(&quot;com.lagou.testaccount.dao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAccountApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(TestAccountApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-1-2-订单微服务"><a href="#1-1-2-订单微服务" class="headerlink" title="1.1.2 订单微服务"></a>1.1.2 订单微服务</h4><ul><li>数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE <span class="hljs-comment">/*!32312 IF NOT EXISTS*/</span>`test<span class="hljs-operator">-</span><span class="hljs-keyword">order</span>` <span class="hljs-comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;<br><br>USE `test<span class="hljs-operator">-</span><span class="hljs-keyword">order</span>`;<br><br><span class="hljs-comment">/*Table structure for table `torder` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `torder`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `torder` (<br>  `id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;订单编号&#x27;</span>,<br>  `uid` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;账户编号&#x27;</span>,<br>  `pid` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;商品编号&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;save&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Torder</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Torder</span>();<br>        order.setId(UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>));<br>        order.setUid(<span class="hljs-number">1</span>);<br>        order.setPid(<span class="hljs-number">11</span>);<br>        <span class="hljs-keyword">return</span> orderService.saveOrder(order);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>dao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Torder&gt;&#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderDao orderDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">saveOrder</span><span class="hljs-params">(Torder order)</span> &#123;<br>        <span class="hljs-keyword">return</span> orderDao.insert(order);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>启动类同上</li></ul><h4 id="1-1-3-业务入口"><a href="#1-1-3-业务入口" class="headerlink" title="1.1.3 业务入口"></a>1.1.3 业务入口</h4><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;front&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">frontController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BusinessService businessService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;business&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">business</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span>  businessService.business();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BusinessService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountRemoteService accountRemoteService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderRemoteService orderRemoteService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">business</span><span class="hljs-params">()</span> &#123;<br>        accountRemoteService.update();<br><span class="hljs-comment">// int i = 10/0;</span><br>        orderRemoteService.save();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>remote远程接口</p><p>@FeignClient(name &#x3D; <b style='color:red'>“微服务名”</b> , path &#x3D; <b style='color:red'>“一级路径”</b> )</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;test-account&quot;,path = &quot;account&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountRemoteService</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;update&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;test-order&quot;,path = &quot;order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderRemoteService</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;save&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span><span class="hljs-comment">// 排除 数据库自动注入（依赖中有mybatis，所以会自检）</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">// feign的客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFrontApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(TestFrontApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、下载与安装"><a href="#2、下载与安装" class="headerlink" title="2、下载与安装"></a>2、下载与安装</h2><ul><li>官网：<a href="http://seata.io/zh-cn/index.html">http://seata.io/zh-cn/index.html</a></li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210324164927921.png" alt="image-20210324164927921"></p><ul><li>尽量不要选择最新的版本“不太稳定”，我们选择下载 <a href="https://github.com/seata/seata/releases/download/v1.2.0/seata-server-1.2.0.zip">1.2.0 (2020-04-20) binary</a></li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210324165001869.png" alt="image-20210324165001869"></p><ul><li>seata-server-1.2.0.zip 上传到linux，并解压</li></ul><h2 id="3、配置服务端"><a href="#3、配置服务端" class="headerlink" title="3、配置服务端"></a>3、配置服务端</h2><ul><li><p>解压完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apl">[root@A opt]# unzip seata-server-1.2.0.zip<br>[root@A opt]# cd seata/conf<br></code></pre></td></tr></table></figure></li><li><p>主要配置两个文件：</p><ul><li>file.conf 配置数据库</li><li>registry.conf 配置注册中心</li></ul></li></ul><h3 id="3-1-file-conf"><a href="#3-1-file-conf" class="headerlink" title="3.1 file.conf"></a>3.1 file.conf</h3><ul><li>在mysql建一个seata库，下面的脚本代码，要在1.0之前的版本中<strong>db_store.sql</strong>获取，1.0之后取消了这个脚本文件，复制下面代码</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE <span class="hljs-comment">/*!32312 IF NOT EXISTS*/</span>`seata` <span class="hljs-comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;<br><br>USE `seata`;<br><br><span class="hljs-comment">/*Table structure for table `branch_table` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `branch_table`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `branch_table` (<br>  `branch_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `xid` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `transaction_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `resource_group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `resource_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `lock_key` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `branch_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `status` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `client_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `application_data` <span class="hljs-type">varchar</span>(<span class="hljs-number">2000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`branch_id`),<br>  KEY `idx_xid` (`xid`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `branch_table` */</span><br><br><span class="hljs-comment">/*Table structure for table `global_table` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `global_table`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `global_table` (<br>  `xid` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `transaction_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `status` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `application_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `transaction_service_group` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `transaction_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `timeout` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `begin_time` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `application_data` <span class="hljs-type">varchar</span>(<span class="hljs-number">2000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`xid`),<br>  KEY `idx_gmt_modified_status` (`gmt_modified`,`status`),<br>  KEY `idx_transaction_id` (`transaction_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `global_table` */</span><br><br><span class="hljs-comment">/*Table structure for table `lock_table` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `lock_table`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `lock_table` (<br>  `row_key` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `xid` <span class="hljs-type">varchar</span>(<span class="hljs-number">96</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `transaction_id` mediumtext,<br>  `branch_id` mediumtext,<br>  `resource_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `table_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `pk` <span class="hljs-type">varchar</span>(<span class="hljs-number">36</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`row_key`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `lock_table` */</span><br><br><span class="hljs-comment">/*Table structure for table `undo_log` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `undo_log`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `undo_log` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `branch_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `xid` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `context` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `rollback_info` longblob <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `log_status` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `log_created` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `log_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `ext` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`,`branch_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><ul><li>打开file.conf文件，修改两处</li></ul><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210319173913727.png" alt="image-20210319173913727"></p><h3 id="3-2-registry-conf"><a href="#3-2-registry-conf" class="headerlink" title="3.2 registry.conf"></a>3.2 registry.conf</h3><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210319174210095.png" alt="image-20210319174940878"></p><h3 id="3-3-启动"><a href="#3-3-启动" class="headerlink" title="3.3 启动"></a>3.3 启动</h3><ul><li>先启动eureka</li><li>再启动seata的服务端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apl">[root@A ~]# cd /opt/seata/bin/<br>[root@A bin]# ./seata-server.sh -p 9099 -m db<br></code></pre></td></tr></table></figure><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210319175108032.png" alt="image-20210319175108032"></p><p>服务端启动成功</p><p>【我出现的问题】：linux启动是时候报错(使用的是jdk11)-window启动没有问题</p><p>Error: Could not create the Java Virtual Machine.<br>Error: A fatal exception has occurred. Program will exit.</p><h2 id="4、配置客户端"><a href="#4、配置客户端" class="headerlink" title="4、配置客户端"></a>4、配置客户端</h2><p><b style='color:blue'>以下过程，每个参与事务的微服务都要配置一遍，3个conf，yml，启动类，数据库</b></p><h3 id="4-1-pom"><a href="#4-1-pom" class="headerlink" title="4.1 pom"></a>4.1 pom</h3><ul><li>父工程引入，子工程继承即可</li></ul><p>【使用下面版本启动不会报错：<version>2.3.2.RELEASE</version>】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.lagou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>test-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--pojo持久化使用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.persistence<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.persistence-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--feign--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- commons-lang3 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--添加seata依赖：cloud集成的seata依赖，全局事务中使用的过滤器已经集成了，直接使用即可 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--排除低版本--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 这样引用seata本身的依赖也是可以的，但是要配置许多额外的程序，过滤器和注解 --&gt;</span><br>         <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span><br> <span class="hljs-comment">&lt;!--&lt;groupId&gt;io.seata&lt;/groupId&gt;--&gt;</span><br> <span class="hljs-comment">&lt;!--&lt;artifactId&gt;seata-all&lt;/artifactId&gt;--&gt;</span><br>             <span class="hljs-comment">&lt;!--&lt;version&gt;1.3.0&lt;/version&gt;--&gt;</span><br>         <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span><br>        <br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Greenwich.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>【druid连接池的依赖】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-2-配置文件3个"><a href="#4-2-配置文件3个" class="headerlink" title="4.2 配置文件3个"></a>4.2 配置文件3个</h2><p>【每个工程的配置文件（application.yml）-直接去官方示例中获取即可；】</p><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20221122001821474.png" alt="image-20221122001821474"></p><p>【每个项目中都要有这三个配置文件】</p><ul><li><p>全部存放在项目的resources资源目录中</p></li><li><p>其中file.conf和registry.conf去github示例项目中获取：【使用这个】</p><p><a href="https://github.com/seata/seata-samples/blob/master/springboot-dubbo-seata/samples-business">https://github.com/seata/seata-samples/blob/master/springboot-dubbo-seata/samples-business</a></p><p>如果github打不开，可以换地址【已经打不开了】</p><p><a href="https://hub.fastgit.org/seata/seata-samples/tree/master/springboot-dubbo-seata/samples-business">https://hub.fastgit.org/seata/seata-samples/tree/master/springboot-dubbo-seata/samples-business</a></p></li></ul><p>进入：<a href="https://hub.fastgit.org/seata/seata-samples/tree/master/springboot-dubbo-seata/samples-business/src/main/resources">https://hub.fastgit.org/seata/seata-samples/tree/master/springboot-dubbo-seata/samples-business/src/main/resources</a></p><p>【只需要关心改成中文的配置即可】</p><ul><li><p><strong>file.conf</strong></p><p>vgroupMapping.<b style='color:blue'>自定义名称</b> &#x3D; “<b style='color:red'>分布式seata applicationName</b>“<br><b style='color:red'>分布式seata applicationName</b>.grouplist &#x3D; “192.168.204.141:9099”</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs json">transport <span class="hljs-punctuation">&#123;</span><br>  # tcp udt unix-domain-socket<br>  type = <span class="hljs-string">&quot;TCP&quot;</span><br>  #NIO NATIVE<br>  server = <span class="hljs-string">&quot;NIO&quot;</span><br>  #enable heartbeat<br>  heartbeat = <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  # the client batch send request enable<br>  enableClientBatchSendRequest = <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  #thread factory for netty<br>  threadFactory <span class="hljs-punctuation">&#123;</span><br>    bossThreadPrefix = <span class="hljs-string">&quot;NettyBoss&quot;</span><br>    workerThreadPrefix = <span class="hljs-string">&quot;NettyServerNIOWorker&quot;</span><br>    serverExecutorThread-prefix = <span class="hljs-string">&quot;NettyServerBizHandler&quot;</span><br>    shareBossWorker = <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    clientSelectorThreadPrefix = <span class="hljs-string">&quot;NettyClientSelector&quot;</span><br>    clientSelectorThreadSize = <span class="hljs-number">1</span><br>    clientWorkerThreadPrefix = <span class="hljs-string">&quot;NettyClientWorkerThread&quot;</span><br>    # netty boss thread size<span class="hljs-punctuation">,</span>will not be used for UDT<br>    bossThreadSize = <span class="hljs-number">1</span><br>    #auto default pin or <span class="hljs-number">8</span><br>    workerThreadSize = <span class="hljs-string">&quot;default&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  shutdown <span class="hljs-punctuation">&#123;</span><br>    # when destroy server<span class="hljs-punctuation">,</span> wait seconds<br>    wait = <span class="hljs-number">3</span><br>  <span class="hljs-punctuation">&#125;</span><br>  serialization = <span class="hljs-string">&quot;seata&quot;</span><br>  compressor = <span class="hljs-string">&quot;none&quot;</span><br><span class="hljs-punctuation">&#125;</span><br>service <span class="hljs-punctuation">&#123;</span><br>  # 自定义的事务组由 seata服务端 管理<br>  vgroupMapping.my_tx_group = <span class="hljs-string">&quot;seata-server&quot;</span><br>  # 服务端的ip和端口<br>  seata-server.grouplist = <span class="hljs-string">&quot;192.168.204.141:9099&quot;</span><br>  #degrade<span class="hljs-punctuation">,</span> current not support<br>  enableDegrade = <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  #disable seata<br>  disableGlobalTransaction = <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><span class="hljs-punctuation">&#125;</span><br><br>client <span class="hljs-punctuation">&#123;</span><br>  rm <span class="hljs-punctuation">&#123;</span><br>    asyncCommitBufferLimit = <span class="hljs-number">10000</span><br>    lock <span class="hljs-punctuation">&#123;</span><br>      retryInterval = <span class="hljs-number">10</span><br>      retryTimes = <span class="hljs-number">30</span><br>      retryPolicyBranchRollbackOnConflict = <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br>    reportRetryCount = <span class="hljs-number">5</span><br>    tableMetaCheckEnable = <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    reportSuccessEnable = <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  <span class="hljs-punctuation">&#125;</span><br>  tm <span class="hljs-punctuation">&#123;</span><br>    commitRetryCount = <span class="hljs-number">5</span><br>    rollbackRetryCount = <span class="hljs-number">5</span><br>  <span class="hljs-punctuation">&#125;</span><br>  undo <span class="hljs-punctuation">&#123;</span><br>    dataValidation = <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    logSerialization = <span class="hljs-string">&quot;jackson&quot;</span><br>    logTable = <span class="hljs-string">&quot;undo_log&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  log <span class="hljs-punctuation">&#123;</span><br>    exceptionRate = <span class="hljs-number">100</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><strong>registry.conf</strong><ul><li>把type修改成eureka，然后填写自己eureka的地址</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs json">registry <span class="hljs-punctuation">&#123;</span><br>  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa<br>  type = <span class="hljs-string">&quot;eureka&quot;</span>  # 注册中心<br><br>  nacos <span class="hljs-punctuation">&#123;</span><br>    application = <span class="hljs-string">&quot;seata-server&quot;</span><br>    serverAddr = <span class="hljs-string">&quot;localhost&quot;</span><br>    namespace = <span class="hljs-string">&quot;&quot;</span><br>    username = <span class="hljs-string">&quot;&quot;</span><br>    password = <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  eureka <span class="hljs-punctuation">&#123;</span><br>    serviceUrl = <span class="hljs-string">&quot;http://localhost:7001/eureka&quot;</span>   # 注册中心的地址<br>    application = <span class="hljs-string">&quot;seata-server&quot;</span>  # 服务端名称<br>    weight = <span class="hljs-string">&quot;1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  redis <span class="hljs-punctuation">&#123;</span><br>    serverAddr = <span class="hljs-string">&quot;localhost:6379&quot;</span><br>    db = <span class="hljs-string">&quot;0&quot;</span><br>    password = <span class="hljs-string">&quot;&quot;</span><br>    timeout = <span class="hljs-string">&quot;0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  zk <span class="hljs-punctuation">&#123;</span><br>    serverAddr = <span class="hljs-string">&quot;127.0.0.1:2181&quot;</span><br>    sessionTimeout = <span class="hljs-number">6000</span><br>    connectTimeout = <span class="hljs-number">2000</span><br>    username = <span class="hljs-string">&quot;&quot;</span><br>    password = <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  consul <span class="hljs-punctuation">&#123;</span><br>    serverAddr = <span class="hljs-string">&quot;127.0.0.1:8500&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  etcd3 <span class="hljs-punctuation">&#123;</span><br>    serverAddr = <span class="hljs-string">&quot;http://localhost:2379&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  sofa <span class="hljs-punctuation">&#123;</span><br>    serverAddr = <span class="hljs-string">&quot;127.0.0.1:9603&quot;</span><br>    region = <span class="hljs-string">&quot;DEFAULT_ZONE&quot;</span><br>    datacenter = <span class="hljs-string">&quot;DefaultDataCenter&quot;</span><br>    group = <span class="hljs-string">&quot;SEATA_GROUP&quot;</span><br>    addressWaitTime = <span class="hljs-string">&quot;3000&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  file <span class="hljs-punctuation">&#123;</span><br>    name = <span class="hljs-string">&quot;file.conf&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br>config <span class="hljs-punctuation">&#123;</span><br>  # file、nacos 、apollo、zk、consul、etcd3、springCloudConfig<br>  type = <span class="hljs-string">&quot;file&quot;</span><br><br>  nacos <span class="hljs-punctuation">&#123;</span><br>    serverAddr = <span class="hljs-string">&quot;localhost&quot;</span><br>    namespace = <span class="hljs-string">&quot;&quot;</span><br>    group = <span class="hljs-string">&quot;SEATA_GROUP&quot;</span><br>    username = <span class="hljs-string">&quot;&quot;</span><br>    password = <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  consul <span class="hljs-punctuation">&#123;</span><br>    serverAddr = <span class="hljs-string">&quot;127.0.0.1:8500&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  apollo <span class="hljs-punctuation">&#123;</span><br>    appId = <span class="hljs-string">&quot;seata-server&quot;</span><br>    apolloMeta = <span class="hljs-string">&quot;http://192.168.1.204:8801&quot;</span><br>    namespace = <span class="hljs-string">&quot;application&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  zk <span class="hljs-punctuation">&#123;</span><br>    serverAddr = <span class="hljs-string">&quot;127.0.0.1:2181&quot;</span><br>    sessionTimeout = <span class="hljs-number">6000</span><br>    connectTimeout = <span class="hljs-number">2000</span><br>    username = <span class="hljs-string">&quot;&quot;</span><br>    password = <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  etcd3 <span class="hljs-punctuation">&#123;</span><br>    serverAddr = <span class="hljs-string">&quot;http://localhost:2379&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  file <span class="hljs-punctuation">&#123;</span><br>    name = <span class="hljs-string">&quot;file.conf&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><strong>seata.conf</strong></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">client <span class="hljs-punctuation">&#123;</span><br>    application.id = test-front   # 客户端项目的名字<br>    transaction.service.group = my_tx_group   # 自定义的事务组<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-3-启动类"><a href="#4-3-启动类" class="headerlink" title="4.3 启动类"></a>4.3 启动类</h2><ul><li>业务工程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><span class="hljs-comment">// 排除 数据库自动注入 检测是否连接了数据库，如果加上就不会自动检测了；</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">// 注册到中心的客户端</span><br><span class="hljs-meta">@MapperScan(&quot;com.lagou.testaccount.dao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestOrderApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(TestOrderApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>入口工程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span> <span class="hljs-comment">// 排除 数据库自动注入</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">// feign的客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFrontApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(TestFrontApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-配置类"><a href="#4-4-配置类" class="headerlink" title="4.4 配置类"></a>4.4 配置类</h2><ul><li>业务工程：需要配置数据源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lagou.testaccount.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> io.seata.rm.datasource.DataSourceProxy;<br><span class="hljs-keyword">import</span> io.seata.spring.annotation.GlobalTransactionScanner;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Primary;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@BelongsProject</span>: test-seata</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: GuoAn.Sun</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2021-03-22 16:21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 使用这个的原因，不再使用spring的主体数据源，使用seata的要给代理的数据源</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeataConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">druidDataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        <span class="hljs-keyword">return</span> ds;<br>    &#125;<br><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(&quot;dataSource&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSourceProxy <span class="hljs-title function_">dataSource</span><span class="hljs-params">(DataSource druidDataSource)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceProxy</span>(druidDataSource);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-5-yml"><a href="#4-5-yml" class="headerlink" title="4.5 yml"></a>4.5 yml</h2><ul><li>入口工程删除datasource相关即可</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">test-order</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.204.141:3306/test-order?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123123</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">alibaba:</span><br>      <span class="hljs-attr">seata:</span><br>        <span class="hljs-attr">tx-service-group:</span> <span class="hljs-string">my_tx_group</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-6-数据库"><a href="#4-6-数据库" class="headerlink" title="4.6 数据库"></a>4.6 数据库</h2><ul><li><b style='color:blue'>账户工程</b> 和 <b style='color:blue'>订单工程</b> 都要创建 <b style='color:red'>undo_log</b> 表，脚本和seata数据库的一模一样</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `undo_log` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `branch_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `xid` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `context` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `rollback_info` longblob <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `log_status` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `log_created` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `log_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `ext` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`,`branch_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><h2 id="4-7-注解1个"><a href="#4-7-注解1个" class="headerlink" title="4.7 注解1个"></a>4.7 注解1个</h2><ul><li>入口工程的业务方法加入注解：<b style='color:blue'>@GlobalTransactional</b></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BusinessService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountRemoteService accountRemoteService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderRemoteService orderRemoteService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@GlobalTransactional</span> <span class="hljs-comment">// 全局事务</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">business</span><span class="hljs-params">()</span> &#123;<br>        accountRemoteService.update();<br><span class="hljs-comment">// int i = 10/0;</span><br>        orderRemoteService.save();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/11/02/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%8D%81%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89/%E3%80%90%E6%8B%89%E9%92%A9%E5%B0%B1%E4%B8%9A%E3%80%91%E6%8B%89%E5%8B%BE%E6%95%99%E8%82%B2PC%E7%AB%99-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88/image-20210324164751276.png" alt="image-20210324164751276"></p><p>【目前还是没有成功事务控制】</p><p>1、鉴权  springsecurity</p><p>2、订单重复，微信中心已经解决</p><p>3、限时促销，全程redis存储（秒杀活动）</p><p>4、sentinel</p><p>5、细化工作</p><hr><h1 id="数据库设计文档V1-0"><a href="#数据库设计文档V1-0" class="headerlink" title="数据库设计文档V1.0"></a>数据库设计文档V1.0</h1><h2 id="1、用户模块"><a href="#1、用户模块" class="headerlink" title="1、用户模块"></a>1、用户模块</h2><h3 id="1-1-用户表-（user）"><a href="#1-1-用户表-（user）" class="headerlink" title="1.1 用户表 （user）"></a>1.1 用户表 （user）</h3><table><thead><tr><th>字段名称</th><th>类型</th><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>int(11) unsigned NOT NUL AUTO_INCREMENT</td><td>PK</td><td>用户id</td></tr><tr><td>name</td><td>varchar(255)</td><td></td><td>用户昵称</td></tr><tr><td>portrait</td><td>varchar(255)</td><td></td><td>用户头像地址</td></tr><tr><td>phone</td><td>varchar(255)</td><td></td><td>注册手机</td></tr><tr><td>password</td><td>varchar(255)</td><td></td><td>用户密码（可以为空，支持只用验证码注册、登录）</td></tr><tr><td>reg_ip</td><td>varchar(255)</td><td></td><td>注册ip</td></tr><tr><td>account_non_expired</td><td>bit(1)</td><td></td><td>是否有效用户</td></tr><tr><td>credentials_non_expired</td><td>bit(1)</td><td></td><td>账号是否未过期</td></tr><tr><td>account_non_locked</td><td>bit(1)</td><td></td><td>是否未锁定</td></tr><tr><td>status</td><td>varchar(255)</td><td></td><td>用户状态</td></tr><tr><td>is_del</td><td>bit(1)</td><td></td><td>是否删除</td></tr><tr><td>create_time</td><td>datetime</td><td></td><td>创建时间</td></tr><tr><td>update_time</td><td>datetime</td><td></td><td>更新时间</td></tr></tbody></table><h2 id="2、课程模块"><a href="#2、课程模块" class="headerlink" title="2、课程模块"></a>2、课程模块</h2><h3 id="2-1-课程表（course）"><a href="#2-1-课程表（course）" class="headerlink" title="2.1 课程表（course）"></a>2.1 课程表（course）</h3><table><thead><tr><th>字段名称</th><th>类型</th><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>int(11) unsigned NOT NUL AUTO_INCREMENT</td><td>PK</td><td>主键PK</td></tr><tr><td>course_name</td><td>varchar(255)</td><td></td><td>课程名</td></tr><tr><td>brief</td><td>varchar(255)</td><td></td><td>课程一句话简介</td></tr><tr><td>price</td><td>double(10,2)</td><td></td><td>原价</td></tr><tr><td>price_tag</td><td>varchar(255)</td><td></td><td>原价标签</td></tr><tr><td>discounts</td><td>double(10,2)</td><td></td><td>优惠价</td></tr><tr><td>discounts_tag</td><td>varchar(255)</td><td></td><td>优惠标签</td></tr><tr><td>course_description_mark_down</td><td>longtext</td><td></td><td>描述markdown</td></tr><tr><td>course_description</td><td>longtext</td><td></td><td>课程描述</td></tr><tr><td>course_img_url</td><td>varchar(255)</td><td></td><td>课程列表图</td></tr><tr><td>is_new</td><td>tinyint(1)</td><td></td><td>是否新品</td></tr><tr><td>is_new_des</td><td>varchar(255)</td><td></td><td>广告语</td></tr><tr><td>last_operator_id</td><td>int(11)</td><td></td><td>最后操作者</td></tr><tr><td>create_time</td><td>datetime</td><td></td><td>创建时间</td></tr><tr><td>update_time</td><td>datetime</td><td></td><td>更新时间’</td></tr><tr><td>is_del</td><td>tinyint(1)</td><td></td><td>是否删除</td></tr><tr><td>total_duration</td><td>int(11)</td><td></td><td>总时长(分钟)</td></tr><tr><td>course_list_img</td><td>varchar(255)</td><td></td><td>课程列表展示图片</td></tr><tr><td>status</td><td>int(2)</td><td></td><td>课程状态，0-草稿，1-上架</td></tr><tr><td>sort_num</td><td>int(11)</td><td></td><td>课程排序，用于后台保存草稿时用到</td></tr><tr><td>preview_first_field</td><td>varchar(255)</td><td></td><td>课程预览第一个字段</td></tr><tr><td>preview_second_field</td><td>varchar(255)</td><td></td><td>课程预览第二个字段</td></tr><tr><td>sales</td><td>int(11)</td><td></td><td>销量</td></tr></tbody></table><h3 id="2-2-章节表（course-section）"><a href="#2-2-章节表（course-section）" class="headerlink" title="2.2 章节表（course_section）"></a>2.2 章节表（course_section）</h3><table><thead><tr><th>字段名称</th><th>类型</th><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>PK</td><td>‘主键ID</td></tr><tr><td>course_id</td><td>int(11)</td><td></td><td>课程id</td></tr><tr><td>section_name</td><td>varchar(255)</td><td></td><td>章节名</td></tr><tr><td>description</td><td>varchar(255)</td><td></td><td>‘章节描述’</td></tr><tr><td>status</td><td>int(1)</td><td></td><td>状态，0:隐藏；1：待更新；2：已发布</td></tr><tr><td>order_num</td><td>int(11)</td><td></td><td>排序字段</td></tr><tr><td>is_del</td><td>tinyint(1)</td><td></td><td>是否删除</td></tr><tr><td>update_time</td><td>datetime</td><td></td><td>‘更新时间</td></tr><tr><td>create_time</td><td>datetime</td><td></td><td>记录创建时间</td></tr></tbody></table><h3 id="2-3-课时表（每节课）"><a href="#2-3-课时表（每节课）" class="headerlink" title="2.3 课时表（每节课）"></a>2.3 课时表（每节课）</h3><p>course_lesson</p><table><thead><tr><th>字段名称</th><th>类型</th><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>PK</td><td>主键</td></tr><tr><td>course_id</td><td>int(11)</td><td></td><td>课程id</td></tr><tr><td>section_id</td><td>int(11)</td><td></td><td>章节id</td></tr><tr><td>theme</td><td>varchar(255)</td><td></td><td>课时主题</td></tr><tr><td>duration</td><td>int(11)</td><td></td><td>‘课时时长(分钟)</td></tr><tr><td>is_free</td><td>tinyint(1)</td><td></td><td>是否免费</td></tr><tr><td>is_del</td><td>tinyint(1)</td><td></td><td>是否删除</td></tr><tr><td>order_num</td><td>int(11)</td><td></td><td>排序字段</td></tr><tr><td>status</td><td>int(2)</td><td></td><td>课时状态,0-隐藏，1-未发布，2-已发布</td></tr><tr><td>update_time</td><td>datetime</td><td></td><td>更新时间</td></tr><tr><td>create_time</td><td>datetime</td><td></td><td>记录创建时间</td></tr></tbody></table><h3 id="2-4-课程媒体"><a href="#2-4-课程媒体" class="headerlink" title="2.4 课程媒体"></a>2.4 课程媒体</h3><p>course_media</p><table><thead><tr><th>字段名称</th><th>类型</th><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>PK</td><td>‘课程媒体主键ID</td></tr><tr><td>course_id</td><td>int(11)</td><td></td><td>课程id</td></tr><tr><td>section_id</td><td>int(11)</td><td></td><td>章节id</td></tr><tr><td>cover_image_url</td><td>varchar(255)</td><td></td><td>封面图URL</td></tr><tr><td>duration</td><td>varchar(50)</td><td></td><td>时长（06:02）</td></tr><tr><td>file_edk</td><td>varchar(500)</td><td></td><td>媒体资源文件对应的EDK</td></tr><tr><td>file_size</td><td>double(10,2)</td><td></td><td>文件大小MB</td></tr><tr><td>file_name</td><td>varchar(100)</td><td></td><td>文件名称</td></tr><tr><td>file_dk</td><td>varchar(100)</td><td></td><td>‘媒体资源文件对应的DK</td></tr><tr><td>duration_num</td><td>varchar(50)</td><td></td><td>时长，秒数</td></tr><tr><td>file_id</td><td>varchar(50)</td><td></td><td>媒体资源文件ID</td></tr><tr><td>is_del</td><td>tinyint(1)</td><td></td><td>是否删除，0未删除，1删除</td></tr><tr><td>update_time</td><td>datetime</td><td></td><td>更新时间</td></tr><tr><td>create_time</td><td>datetime</td><td></td><td>创建时间</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="2-5-历史播放节点表"><a href="#2-5-历史播放节点表" class="headerlink" title="2.5 历史播放节点表"></a>2.5 历史播放节点表</h3><p>course_play_history</p><table><thead><tr><th>字段名称</th><th>类型</th><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>PK</td><td>‘主键ID</td></tr><tr><td>course_id</td><td>int(11)</td><td></td><td>课程id</td></tr><tr><td>section_id</td><td>int(11)</td><td></td><td>章节id</td></tr><tr><td>lesson_id</td><td>int(11)</td><td></td><td>课时id</td></tr><tr><td>history_node</td><td>int(11)</td><td></td><td>历史播放节点(s)’</td></tr><tr><td>history_highest_node</td><td>int(11)</td><td></td><td>最高历史播放节点</td></tr><tr><td>is_del</td><td>tinyint(1)</td><td></td><td>是否删除</td></tr><tr><td>update_time</td><td>datetime</td><td></td><td>更新时间</td></tr><tr><td>create_time</td><td>datetime</td><td></td><td>记录创建时间</td></tr><tr><td>user_id</td><td>int(11)</td><td></td><td>用户id</td></tr></tbody></table><h3 id="2-6-活动课程表"><a href="#2-6-活动课程表" class="headerlink" title="2.6 活动课程表"></a>2.6 活动课程表</h3><p>activity_course</p><table><thead><tr><th>字段名称</th><th>类型</th><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>PK</td><td>‘主键ID</td></tr><tr><td>course_id</td><td>int(11)</td><td></td><td>课程ID</td></tr><tr><td>begin_time</td><td>timestamp</td><td></td><td>活动开始时间</td></tr><tr><td>end_time</td><td>timestamp</td><td></td><td>活动结束时间</td></tr><tr><td>amount</td><td>double(10,2)</td><td></td><td>活动价格</td></tr><tr><td>stock</td><td>int(10)</td><td></td><td>库存值</td></tr><tr><td>status</td><td>tinyint(2)</td><td></td><td>状态 0未上架 10已上架</td></tr><tr><td>is_del</td><td>tinyint(1)</td><td></td><td>逻辑删除 0未删除 1删除</td></tr><tr><td>remark</td><td>varchar(255)</td><td></td><td>备注</td></tr><tr><td>create_time</td><td>timestamp</td><td></td><td>创建时间</td></tr><tr><td>create_user</td><td>varchar(64)</td><td></td><td>创建人</td></tr><tr><td>update_time</td><td>timestamp</td><td></td><td>更新时间</td></tr><tr><td>update_user</td><td>varchar(64)</td><td></td><td>更新人</td></tr></tbody></table><h3 id="2-7-老师表"><a href="#2-7-老师表" class="headerlink" title="2.7 老师表"></a>2.7 老师表</h3><p>tearcher</p><table><thead><tr><th>字段名称</th><th>类型</th><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>PK</td><td>‘主键ID</td></tr><tr><td>course_id</td><td>int(11)</td><td></td><td>课程ID</td></tr><tr><td>teacher_name</td><td>varchar(255)</td><td></td><td>讲师姓名</td></tr><tr><td>description</td><td>text</td><td></td><td>讲师介绍</td></tr><tr><td>create_time</td><td>datetime</td><td></td><td>创建时间</td></tr><tr><td>update_time</td><td>datetime</td><td></td><td>更新时间</td></tr><tr><td>is_del</td><td>tinyint(1)</td><td></td><td>是否删除</td></tr><tr><td>position</td><td>varchar(20)</td><td></td><td>职务</td></tr></tbody></table><h2 id="3、留言模块"><a href="#3、留言模块" class="headerlink" title="3、留言模块"></a>3、留言模块</h2><h3 id="3-1-留言表"><a href="#3-1-留言表" class="headerlink" title="3.1 留言表"></a>3.1 留言表</h3><p>course_comment</p><table><thead><tr><th>字段类型</th><th>类型</th><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>bigint(20)</td><td>PK</td><td>主键</td></tr><tr><td>courseId</td><td>int(11)</td><td></td><td>课程id</td></tr><tr><td>userId</td><td>int(11)</td><td></td><td>用户id</td></tr><tr><td>comment</td><td>text</td><td></td><td>评论</td></tr><tr><td>likeCount</td><td>int(11)</td><td></td><td>点赞数</td></tr><tr><td>createTime</td><td>datetime</td><td></td><td>创建时间</td></tr><tr><td>updateTime</td><td>datetime</td><td></td><td>更新时间</td></tr><tr><td>isDel</td><td>tinyint(1)</td><td></td><td>是否删除</td></tr></tbody></table><h3 id="3-2-点赞表"><a href="#3-2-点赞表" class="headerlink" title="3.2 点赞表"></a>3.2 点赞表</h3><p>course_comment_favorite</p><table><thead><tr><th>字段类型</th><th>类型</th><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>bigint(20)</td><td>PK</td><td>主键</td></tr><tr><td>userId</td><td>int(11)</td><td></td><td>用户ID</td></tr><tr><td>commentId</td><td>int(11)</td><td></td><td>用户评论ID</td></tr><tr><td>isDel</td><td>tinyint(1)</td><td></td><td>是否删除</td></tr><tr><td>createTime</td><td>datetime</td><td></td><td>创建时间</td></tr><tr><td>updateTime</td><td>datetime</td><td></td><td>更新时间</td></tr></tbody></table><h2 id="4、订单模块"><a href="#4、订单模块" class="headerlink" title="4、订单模块"></a>4、订单模块</h2><h3 id="4-1-用户课程订单表"><a href="#4-1-用户课程订单表" class="headerlink" title="4.1 用户课程订单表"></a>4.1 用户课程订单表</h3><p>user_course_order</p><table><thead><tr><th>字段类型</th><th>类型</th><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>bigint(20)</td><td>PK</td><td>主键</td></tr><tr><td>order_no</td><td>varchar(64)</td><td></td><td>订单号</td></tr><tr><td>user_id</td><td>int(11)</td><td></td><td>用户ID</td></tr><tr><td>course_id</td><td>int(11)</td><td></td><td>课程id</td></tr><tr><td>source_type</td><td>tinyint(2)</td><td></td><td>订单来源类型: 1 用户下单购买 2 后台添加专栏</td></tr><tr><td>status</td><td>tinyint(2)</td><td></td><td>当前状态: 0已创建 10未支付 20已支付 30已取消 40已过期</td></tr><tr><td>create_time</td><td>datetime</td><td></td><td>创建时间</td></tr><tr><td>update_time</td><td>datetime</td><td></td><td>更新时间</td></tr><tr><td>is_del</td><td>tinyint(2)</td><td></td><td>是否删除 1删除 默认值0</td></tr></tbody></table><h3 id="4-2-支付订单信息表"><a href="#4-2-支付订单信息表" class="headerlink" title="4.2 支付订单信息表"></a>4.2 支付订单信息表</h3><p>pay_order</p><table><thead><tr><th>字段类型</th><th>类型</th><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>bigint(20)</td><td>PK</td><td>主键</td></tr><tr><td>order_no</td><td>varchar(64)</td><td></td><td>订单号</td></tr><tr><td>user_id</td><td>int(11)</td><td></td><td>用户ID</td></tr><tr><td>product_id</td><td>int(11)</td><td></td><td>商品唯一标识(ID)</td></tr><tr><td>product_name</td><td>varchar(128)</td><td></td><td>产品名称</td></tr><tr><td>amount</td><td>decimal(12,2)</td><td></td><td>金额,单位元</td></tr><tr><td>count</td><td>int(11)</td><td></td><td>商品数量</td></tr><tr><td>currency</td><td>varchar(6)</td><td></td><td>‘cny’ COMMENT ‘货币类型，cny-人民币 gbeans-勾豆’</td></tr><tr><td>channel</td><td>varchar(16)</td><td></td><td>支付渠道：weChat-微信支付，aliPay-支付宝支付,applePay-苹果支付</td></tr><tr><td>status</td><td>tinyint(4)</td><td></td><td>订单状态：1-未支付 2-支付成功 3-支付失败 -1-订单失效</td></tr><tr><td>channel_status</td><td>tinyint(8)</td><td></td><td>渠道中的状态码值</td></tr><tr><td>order_type</td><td>tinyint(4)</td><td></td><td>类型 1-购买课程 2-充值</td></tr><tr><td>source</td><td>tinyint(4)</td><td></td><td>支付来源 1-app 2-h5 3-pc</td></tr><tr><td>client_ip</td><td>varchar(16)</td><td></td><td>127.0.0.1’ COMMENT ‘用户支付IP</td></tr><tr><td>buy_id</td><td>varchar(128)</td><td></td><td>购买账号id</td></tr><tr><td>out_trade_no</td><td>varchar(128)</td><td></td><td>外部支付渠道交易号</td></tr><tr><td>created_time</td><td>datetime</td><td></td><td>创建时间</td></tr><tr><td>updated_time</td><td>timestamp</td><td></td><td>更新时间</td></tr><tr><td>extra</td><td>text</td><td></td><td>附加字段，KV json，例如:{“mobile”:13020202,”success_url”:123}</td></tr><tr><td>goods_order_no</td><td>varchar(64)</td><td></td><td>商品订单编号</td></tr><tr><td>platform</td><td>int(11)</td><td></td><td>支付所使用的平台：1 拉勾 2 拉勾教育</td></tr><tr><td>wx_type</td><td>int(11)</td><td></td><td>微信类型, 参考自lg-wechat-boot项目中的wxinfo</td></tr></tbody></table><h3 id="4-3-支付订单状态日志表"><a href="#4-3-支付订单状态日志表" class="headerlink" title="4.3 支付订单状态日志表"></a>4.3 支付订单状态日志表</h3><p>pay_order_record</p><table><thead><tr><th>字段类型</th><th>类型</th><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>bigint(20)</td><td>PK</td><td>主键</td></tr><tr><td>order_no</td><td>varchar(32)</td><td></td><td>订单号</td></tr><tr><td>type</td><td>varchar(16)</td><td></td><td>操作类型：CREATE|PAY|REFUND…</td></tr><tr><td>from_status</td><td>varchar(16)</td><td></td><td>原订单状态</td></tr><tr><td>to_status</td><td>varchar(16)</td><td></td><td>新订单状态</td></tr><tr><td>paid_amount</td><td>int(11)</td><td></td><td>实付金额，单位为分</td></tr><tr><td>remark</td><td>varchar(128)</td><td></td><td>备注</td></tr><tr><td>created_by</td><td>varchar(64)</td><td></td><td>操作人</td></tr><tr><td>created_at</td><td>datetime</td><td></td><td>操作时间</td></tr></tbody></table><h2 id="5、广告模块"><a href="#5、广告模块" class="headerlink" title="5、广告模块"></a>5、广告模块</h2><h3 id="5-1-广告位表"><a href="#5-1-广告位表" class="headerlink" title="5.1 广告位表"></a>5.1 广告位表</h3><p>promotion_space</p><table><thead><tr><th>字段名称</th><th>字段类型</th><th>约束</th><th>字段描述</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>主键</td><td>广告位id</td></tr><tr><td>name</td><td>varchar(255)</td><td></td><td>广告位名称</td></tr><tr><td>spaceKey</td><td>varchar(255)</td><td></td><td>广告位标识</td></tr><tr><td>createTime</td><td>datetime</td><td></td><td>创建时间</td></tr><tr><td>updateTime</td><td>datetime</td><td></td><td>最后更新时间</td></tr><tr><td>isDel</td><td>int(2)</td><td></td><td>状态</td></tr></tbody></table><h3 id="5-2-广告表"><a href="#5-2-广告表" class="headerlink" title="5.2 广告表"></a>5.2 广告表</h3><p>promotion_ad</p><table><thead><tr><th>id</th><th>int(11)</th><th>主键</th><th>广告ID</th></tr></thead><tbody><tr><td>name</td><td>varchar(255)</td><td></td><td>广告名称</td></tr><tr><td>spaceId</td><td>int(11)</td><td></td><td>广告位ID</td></tr><tr><td>keyword</td><td>varchar(255)</td><td></td><td>关键字</td></tr><tr><td>htmlContent</td><td>varchar(255)</td><td></td><td>文本内容</td></tr><tr><td>text</td><td>varchar(255)</td><td></td><td>备注</td></tr><tr><td>img</td><td>varchar(255)</td><td></td><td>图片链接</td></tr><tr><td>link</td><td>varchar(255)</td><td></td><td>跳转地址</td></tr><tr><td>startTime</td><td>datetime</td><td></td><td>开始时间</td></tr><tr><td>endTine</td><td>datetimedatetime</td><td></td><td>结束时间</td></tr><tr><td>createTime</td><td>datetime</td><td></td><td>创建时间</td></tr><tr><td>updateTime</td><td>datetime</td><td></td><td>最后更新时间</td></tr><tr><td>status</td><td>int(2)</td><td></td><td>状态(上架&#x2F;下架)</td></tr><tr><td>priority</td><td>int(4)</td><td></td><td>优先级</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java就业训练营模板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试需要掌握的技术栈(20221026)</title>
    <link href="/2022/10/26/%E5%85%B6%E4%BB%96/%E9%9D%A2%E8%AF%95%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E6%8A%80%E6%9C%AF%E6%A0%88(20221026)/"/>
    <url>/2022/10/26/%E5%85%B6%E4%BB%96/%E9%9D%A2%E8%AF%95%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E6%8A%80%E6%9C%AF%E6%A0%88(20221026)/</url>
    
    <content type="html"><![CDATA[<h1 id="面试需要掌握的技术栈-20221026"><a href="#面试需要掌握的技术栈-20221026" class="headerlink" title="面试需要掌握的技术栈(20221026)"></a>面试需要掌握的技术栈(20221026)</h1><p>springBoot</p><p>​— 根据高薪训练营文档获取</p><p>springCloud</p><p>​– 根据高薪训练营文档获取</p><p>springBoot、springCloud源码；</p><p>​– 根据高薪训练营文档获取</p><p>redis会使用并且知道原理</p><p>rabbitMQ会使用并且知道原理</p><p>SSM的原理</p><p>fastDFS会搭建图片上传服务器</p><p>mysql、oracle的使用</p><p>触发器、函数、存储过程的编写能力，熟悉sql优化</p><p>springJPA的使用及原理</p><p>ES使用并知道其中的原理</p><p>分库分表的使用</p><p>高并发、分布式事务会处理经验优先</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【linux】外网连接本地虚拟机数据库</title>
    <link href="/2022/10/15/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E3%80%90linux%E3%80%91%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/10/15/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E3%80%90linux%E3%80%91%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="【linux】外网连接本地虚拟机数据库"><a href="#【linux】外网连接本地虚拟机数据库" class="headerlink" title="【linux】外网连接本地虚拟机数据库."></a>【linux】外网连接本地虚拟机数据库.</h2><p>可参考链接：</p><p><a href="https://blog.csdn.net/liangpingguo/article/details/79174090?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-79174090-blog-124187420.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-79174090-blog-124187420.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=1">如何从外网访问VMware虚拟机的Web服务</a></p><hr><h3 id="【1】虚拟机设置为NAT模式"><a href="#【1】虚拟机设置为NAT模式" class="headerlink" title="【1】虚拟机设置为NAT模式"></a>【1】虚拟机设置为NAT模式</h3><p><img src="/2022/10/15/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E3%80%90linux%E3%80%91%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221015224633762.png" alt="image-20221015224633762"></p><p><img src="/2022/10/15/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E3%80%90linux%E3%80%91%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221015224703049.png" alt="image-20221015224703049"></p><hr><h3 id="【2】修改网卡配置信息"><a href="#【2】修改网卡配置信息" class="headerlink" title="【2】修改网卡配置信息"></a>【2】修改网卡配置信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ip addr   # ip addr show #查询网卡信息<br>vim /etc/sysconfig/network-scripts/ifcfg-eno16777736 #修改网卡配置信息<br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">关键参数意思：</span><br><span class="hljs-attr">HWADDR</span>=<span class="hljs-string">00:0c:29:15:e1:3e  #MAC地址，按# ip addr show查询到的MAC修改</span><br><span class="hljs-attr">BOOTPROTO</span>=<span class="hljs-string">static  #设置静态Ip</span><br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-string">yes  #这里如果为no的话就改为yes，表示网卡设备自动启动</span><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-string">192.168.137.1  #这里的网关地址就是VMnet8的IP地址</span><br><span class="hljs-attr">IPADDR</span>=<span class="hljs-string">192.168.137.1   #配置ip，根据VMnet8的IP地址，此处设置ip处于192.168.137.xxx这个范围,只要不和网关相同均可</span><br><span class="hljs-comment">#NETMASK=255.255.255.0 #子网掩码</span><br><span class="hljs-attr">PREFIXO0</span>=<span class="hljs-string">24      #设置子网掩码</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-string">211.140.13.188   #dns服务器1，填写你所在的网络可用的dns服务器地址即可</span><br><span class="hljs-attr">DNS2</span>=<span class="hljs-string">211.140.188.188  #dns服器2关键参数意思：</span><br><span class="hljs-attr">HWADDR</span>=<span class="hljs-string">00:0c:29:15:e1:3e  #MAC地址，按# ip addr show查询到的MAC修改</span><br><span class="hljs-attr">BOOTPROTO</span>=<span class="hljs-string">static  #设置静态Ip</span><br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-string">yes  #这里如果为no的话就改为yes，表示网卡设备自动启动</span><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-string">192.168.137.1  #这里的网关地址就是VMnet8的IP地址</span><br><span class="hljs-attr">IPADDR</span>=<span class="hljs-string">192.168.137.128   #配置ip，根据VMnet8的IP地址，此处设置ip处于192.168.137.xxx这个范围,只要不和网关相同均可</span><br><span class="hljs-comment">#NETMASK=255.255.255.0 #子网掩码</span><br><span class="hljs-attr">PREFIXO0</span>=<span class="hljs-string">24      #设置子网掩码</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-string">211.140.13.188   #dns服务器1，填写你所在的网络可用的dns服务器地址即可</span><br><span class="hljs-attr">DNS2</span>=<span class="hljs-string">211.140.188.188  #dns服器2 </span><br><br><span class="hljs-attr">子网掩码小解：</span><br><span class="hljs-attr">24位的意思就是24个二进制的1，是这样的：11111111.11111111.11111111.00000000，换算成十进制的表示就是：255.255.255.0</span><br><span class="hljs-attr">28位：11111111.11111111.11111111.11110000，换算成十进制为255.255.255.240</span><br><span class="hljs-attr">30位：11111111.11111111.11111111.11111100，换算成十进制为255.255.255.252</span><br></code></pre></td></tr></table></figure><p>需要修改以下五个参数值即可</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 真实网卡配置信息</span><br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-string">yes #这里如果为no的话就改为yes，表示网卡设备自动启动</span><br><span class="hljs-attr">IPADDR</span>=<span class="hljs-string">192.168.37.128# IP配置</span><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-string">192.168.37.2 # 网关配置</span><br><span class="hljs-attr">NETMASK</span>=<span class="hljs-string">255.255.255.0  #子网掩码</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-string">114.114.114.114  #dns服务器1，填写你所在的网络可用的dns服务器地址即可</span><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置完静态IP后重启网络服务</span><br><span class="hljs-attr">systemctl</span> <span class="hljs-string">restart network.service 或  service network restart</span><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 测试</span><br><span class="hljs-attr">ping</span> <span class="hljs-string">www.baidu.com</span><br></code></pre></td></tr></table></figure><p>如果能ping通，就OK，如果不通，说明DNS没有配置，需要配置DNS-&gt;增加 dns&#x3D;none</p><hr><h3 id="【3】虚拟机中的web允许外网访问（端口转发）"><a href="#【3】虚拟机中的web允许外网访问（端口转发）" class="headerlink" title="【3】虚拟机中的web允许外网访问（端口转发）"></a>【3】虚拟机中的web允许外网访问（端口转发）</h3><p><img src="/2022/10/15/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E3%80%90linux%E3%80%91%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221015232027924.png" alt="image-20221015232027924"></p><hr><h3 id="【4】关闭防火墙"><a href="#【4】关闭防火墙" class="headerlink" title="【4】关闭防火墙"></a>【4】关闭防火墙</h3><p>关闭linux防火墙</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">systemctl stop firewalld.service    -- 关闭防火墙<br>systemctl disable firewalld.service  -- 永久关闭防火墙 <br></code></pre></td></tr></table></figure><p>关闭windows防火墙</p><p><img src="/2022/10/15/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E3%80%90linux%E3%80%91%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221015225801090.png" alt="关闭windows防火墙"></p><p><img src="/2022/10/15/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E3%80%90linux%E3%80%91%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221015225841755.png" alt="关闭windows防火墙"></p><hr><h3 id="【5】连接数据库"><a href="#【5】连接数据库" class="headerlink" title="【5】连接数据库"></a>【5】连接数据库</h3><p>根据本地电脑的ip及映射的端口号连接数据库</p><p><img src="/2022/10/15/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E3%80%90linux%E3%80%91%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221015232355968.png" alt="查询本地电脑IP"></p><p><img src="/2022/10/15/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E3%80%90linux%E3%80%91%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221015232538776.png" alt="使用外网连接虚拟机数据库"></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【jquery】图片预览(img)</title>
    <link href="/2022/09/29/%E5%89%8D%E7%AB%AF/%E3%80%90jquery%E3%80%91%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88(img)/"/>
    <url>/2022/09/29/%E5%89%8D%E7%AB%AF/%E3%80%90jquery%E3%80%91%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88(img)/</url>
    
    <content type="html"><![CDATA[<h2 id="【jquery】图片预览-img"><a href="#【jquery】图片预览-img" class="headerlink" title="【jquery】图片预览(img)"></a>【jquery】图片预览(img)</h2><h3 id="【1】查看加载后的图片宽与高"><a href="#【1】查看加载后的图片宽与高" class="headerlink" title="【1】查看加载后的图片宽与高"></a>【1】查看加载后的图片宽与高</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">const</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>()<br>image.src  = url<br>image.onerror  = () =&gt; &#123;<br>      console.log(<span class="hljs-string">&#x27;图片加载失败&#x27;</span>)<br>&#125;<br>image.onload = ()=&gt; &#123;　　　　　　　　　　<span class="hljs-comment">//图片加载完成</span><br>      <span class="hljs-type">var</span> <span class="hljs-variable">imgWidth</span> <span class="hljs-operator">=</span> newImg.width;<br>      <span class="hljs-type">var</span> <span class="hljs-variable">imgHeight</span> <span class="hljs-operator">=</span> newImg.height;<br>      <span class="hljs-comment">//do_function(url,imgWidth , imgHeight);</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="【2】预览图片"><a href="#【2】预览图片" class="headerlink" title="【2】预览图片"></a>【2】预览图片</h3><p>还具有优化的空间；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//预览图片</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">alertImage</span>(<span class="hljs-params">filePath</span>)&#123;<br><span class="hljs-keyword">if</span>(filePath==<span class="hljs-literal">null</span> ll filePath==<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;该记录尚未上传图片，无法预览! &quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">var</span> url =<span class="hljs-string">&quot; &lt;request.etContextPath()%&gt;/downloadFile?filePath=&quot;</span> + filePath;<br>  <span class="hljs-keyword">var</span> newImg=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>newImg.<span class="hljs-property">src</span>=url;<br>  <span class="hljs-comment">// img加载完成后执行</span><br>newImg.<span class="hljs-property">onload</span>=<span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-keyword">var</span> imgWidth = newImg.<span class="hljs-property">width</span>;<br>    <span class="hljs-keyword">var</span> imgHeight = newImg.<span class="hljs-property">height</span>;<br>    <span class="hljs-title function_">imgCreate</span>(url,imgWidth,imgHeight);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">imgCreate</span>(<span class="hljs-params">url, imgwd, imghg</span>) &#123;<br>    <span class="hljs-comment">//要创建的div的classname</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">ClassName</span> = <span class="hljs-string">&quot;thumbviewbox&quot;</span>;<br>    <span class="hljs-keyword">if</span> (src == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  <br>    <span class="hljs-comment">//清除已经弹出的窗口，防止冒泡</span><br>    <span class="hljs-title function_">closefunction</span>();<br>  <br>    <span class="hljs-comment">//优先创建图片</span><br>    <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br>    img.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;src &#x27;</span>, url);<br>    img.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;onclick&#x27;</span>, closefunction);<br>    img.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;cursor: pointer; &#x27;</span>);<br>  <br>  <span class="hljs-comment">//各项参数 document.body.clientWidth(网页可见区域宽度)  window.innerWidth(窗口的宽度)</span><br>  <span class="hljs-comment">// 如果没有窗口，获取网页可见区域；如果有窗口，获取窗口可见区域</span><br>    <span class="hljs-keyword">var</span> htmlWidth = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> = <span class="hljs-literal">undefined</span> ? <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientWidth</span> : <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>; <br>    <span class="hljs-keyword">var</span> htmlHeight = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> == <span class="hljs-literal">undefined</span> ? <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span> : <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;<br>    <span class="hljs-comment">//可见区域高度</span><br>    <span class="hljs-comment">//htmlHeight = window.parent.document.getElementsByTagName(&quot;body&quot;)[0].clientHeight;</span><br>    <span class="hljs-keyword">if</span> (htmLWidth &lt; imgwd) &#123;<br>        imgwd = htmlWidth;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (htmlHeight &lt; imghg) &#123;<br>        imghg = htmlHeight;<br>    &#125;<br>    <span class="hljs-keyword">var</span> divleft = (htmlwidth - imgwd) / <span class="hljs-number">2</span>; <span class="hljs-comment">// 图片div的位置</span><br>    <span class="hljs-keyword">var</span> divtop = (htmlHeight - imghg) / <span class="hljs-number">2</span>; <span class="hljs-comment">// 图片div的位置</span><br>    <span class="hljs-keyword">var</span> scrollTop = $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">scrollTop</span>() + <span class="hljs-number">20</span>; <span class="hljs-comment">// 获取垂直滚动的距离+20</span><br>    divtop += scrollTop;<br>  <br>    <span class="hljs-comment">//创建关闭按钮</span><br>    <span class="hljs-comment">// var clasefunction = &#x27;var em=$(&quot;.&#x27; + Classlame + &#x27; &quot;);for(var i = em.length - 1;i &gt;= 0; i--)&#123;var  p = em[i];p.parentMocde.removeChild(p);&#125;&quot;</span><br>    <span class="hljs-keyword">var</span> closebtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    closebtn.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>);<br>    closebtn.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27; href&#x27;</span>, <span class="hljs-string">&#x27;javascript:; &#x27;</span>);<br>    closebtn.<span class="hljs-title function_">setAttribute</span>( <span class="hljs-string">&#x27;style&#x27;</span>,<span class="hljs-string">&#x27;position:absolute;top:-20px;right:-5px;cunsor:pointer;background:#444;color:#FFF;&#x27;</span>);<br>    closebtn.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;x&#x27;</span>;<br>    closebtn.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;onclick &#x27;</span>, closefunction);<br>    <span class="hljs-comment">//创建弹窗</span><br>    <span class="hljs-keyword">var</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div &#x27;</span>);<br>    element.<span class="hljs-title function_">appendchild</span>(img);<br>    element.<span class="hljs-title function_">appendChild</span>(glosebtn);<br>    element.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;class&#x27;</span>, className);<br>    element.<span class="hljs-title function_">setlttnibute</span>(<span class="hljs-string">&#x27;‘style&#x27;</span>, <span class="hljs-string">&#x27; border:5px solid #444;position:absolute;top:&#x27;</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(divtop) + <span class="hljs-string">&#x27;px;left: &#x27;</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(divleft) + <span class="hljs-string">&#x27; px; border-radius: 5px; background :#FFF;z-index:9999;&#x27;</span>);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(element);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//清除已经弹出的窗口，防止冒泡</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">closefunction</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> em = $(<span class="hljs-string">&quot;.&quot;</span> + <span class="hljs-title class_">ClassName</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = em.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">var</span> p = em[i];<br>        p.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removechild</span>(p);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【springboot】-引入本地jar</title>
    <link href="/2022/09/29/%E5%90%8E%E7%AB%AF/springBoot/%E3%80%90springboot%E3%80%91-%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0jar/"/>
    <url>/2022/09/29/%E5%90%8E%E7%AB%AF/springBoot/%E3%80%90springboot%E3%80%91-%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0jar/</url>
    
    <content type="html"><![CDATA[<h2 id="springboot–引入本地jar"><a href="#springboot–引入本地jar" class="headerlink" title="springboot–引入本地jar"></a>springboot–引入本地jar</h2><h3 id="【1】将jar放到项目中"><a href="#【1】将jar放到项目中" class="headerlink" title="【1】将jar放到项目中"></a>【1】将jar放到项目中</h3><p>将jar包放到resources的lib目录下；</p><hr><h3 id="【2】引入本地jar包"><a href="#【2】引入本地jar包" class="headerlink" title="【2】引入本地jar包"></a>【2】引入本地jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.tongweb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tongweb-embed<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.0.E.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>$(project.basedir&#125;/src/main/resources/lib/tongweb-embed-7.0.E.5_alpha.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><br>&lt;/ dependency&gt;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includeSystemScope</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includesystemscope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springCloudJPA--操作</title>
    <link href="/2022/09/27/%E5%90%8E%E7%AB%AF/%E6%93%8D%E4%BD%9C/springCloudJPA--%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/09/27/%E5%90%8E%E7%AB%AF/%E6%93%8D%E4%BD%9C/springCloudJPA--%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="springCloudJPA–操作"><a href="#springCloudJPA–操作" class="headerlink" title="springCloudJPA–操作"></a>springCloudJPA–操作</h2><h3 id="【1】创建表"><a href="#【1】创建表" class="headerlink" title="【1】创建表"></a>【1】创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for tb_resume</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `tb_resume`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tb_resume` (  <br>`id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,  <br>`address` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,  <br>`name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,  <br>`phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,  <br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of tb_resume</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_resume` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;131000000&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_resume` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;151000000&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_resume` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;广州&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;153000000&#x27;</span>);<br><span class="hljs-keyword">COMMIT</span>;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="【2】引入依赖"><a href="#【2】引入依赖" class="headerlink" title="【2】引入依赖"></a>【2】引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--单元测试jar--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--spring-data-jpa 需要引入的jar,start--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.data<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.8.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.el<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.el-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1-b04<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.web<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.el<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spring-data-jpa 需要引入的jar,end--&gt;</span><br><br>        <span class="hljs-comment">&lt;!--spring 相关jar,start--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spring对orm框架的支持包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spring 相关jar,end--&gt;</span><br><br>        <span class="hljs-comment">&lt;!--hibernate相关jar包,start--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.4.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--hibernate对jpa的实现jar--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.4.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.4.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--hibernate相关jar包 end--&gt;</span><br>        <span class="hljs-comment">&lt;!--mysql 数据库驱动jar--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--druid连接池--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spring-test--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springCloudJPA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>navicat--安装与破解</title>
    <link href="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/"/>
    <url>/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="navicat–安装与破解"><a href="#navicat–安装与破解" class="headerlink" title="navicat–安装与破解"></a>navicat–安装与破解</h2><h3 id="1、安装原版navicat"><a href="#1、安装原版navicat" class="headerlink" title="1、安装原版navicat"></a>1、<strong>安装原版navicat</strong></h3><ul><li>正常安装，一直下一步，直到安装成功，这个我就不截图了。</li><li>默认安装路径是：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">D:\workSoft\Navicat Premium <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h3 id="2、开始激活"><a href="#2、开始激活" class="headerlink" title="2、开始激活"></a>2、开始激活</h3><h4 id="（1）进入到navicat-keygen-for-x64-zip文件的解压目录"><a href="#（1）进入到navicat-keygen-for-x64-zip文件的解压目录" class="headerlink" title="（1）进入到navicat-keygen-for-x64.zip文件的解压目录"></a>（1）进入到navicat-keygen-for-x64.zip文件的解压目录</h4><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301224146665.png" alt="image-20210301224146665"> </p><h4 id="（2）命令进入该文件下"><a href="#（2）命令进入该文件下" class="headerlink" title="（2）命令进入该文件下"></a>（2）命令进入该文件下</h4><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301224547592.png" alt="image-20210301224547592"> </p><p>（如果安装在了C盘，文件写入需要管理员权限，如果安装在别的盘，普通的命令提示符就行，或者在解压文件夹按住shift点右键，也能选择命令提示符打开）Win+x</p><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301223839016.png" alt="image-20210301223839016"> </p><h4 id="（3）执行如下命令"><a href="#（3）执行如下命令" class="headerlink" title="（3）执行如下命令"></a>（3）执行如下命令</h4><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301225125271.png" alt="image-20210301225125271"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">C:\Users\Administrator\Desktop\note\Navicate12的安装\navicat-keygen-<span class="hljs-keyword">for</span>-x64&gt;<br>.\navicat-patcher.exe <span class="hljs-string">&quot;D:\workSoft\Navicat Premium 12&quot;</span><br></code></pre></td></tr></table></figure><h4 id="（4）回车继续"><a href="#（4）回车继续" class="headerlink" title="（4）回车继续"></a>（4）回车继续</h4><p>一顿飘屏猛如虎，好的，出现这样的提示表示替换成功。成功之后会在当前文件夹下生成RegPrivateKey.pem文件</p><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301225430018.png" alt="image-20210301225430018"> </p><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301225348586.png" alt="image-20210301225348586"> </p><h4 id="（5）开始生成序列号和激活码"><a href="#（5）开始生成序列号和激活码" class="headerlink" title="（5）开始生成序列号和激活码"></a>（5）开始生成序列号和激活码</h4><h5 id="a、和替换公钥类似，执行如下命令"><a href="#a、和替换公钥类似，执行如下命令" class="headerlink" title="a、和替换公钥类似，执行如下命令"></a>a、和替换公钥类似，执行如下命令</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">C:\Users\Administrator\Desktop\note\Navicate12的安装\navicat-keygen-<span class="hljs-keyword">for</span>-x64&gt;<br>    .\navicat-keygen.exe -text .\RegPrivateKey.pem<br></code></pre></td></tr></table></figure><h5 id="b、接下来你会被要求选择Navicat产品类别、语言以及输入主版本号。之后会随机生成一个序列号。"><a href="#b、接下来你会被要求选择Navicat产品类别、语言以及输入主版本号。之后会随机生成一个序列号。" class="headerlink" title="b、接下来你会被要求选择Navicat产品类别、语言以及输入主版本号。之后会随机生成一个序列号。"></a>b、接下来你会被要求选择Navicat产品类别、语言以及输入主版本号。之后会随机生成一个序列号。</h5><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301225840085.png" alt="image-20210301225840085"> </p><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301225940359.png" alt="image-20210301225940359"> </p><h5 id="c、得到序列号，复制下来，注意：-窗口不要关闭"><a href="#c、得到序列号，复制下来，注意：-窗口不要关闭" class="headerlink" title="c、得到序列号，复制下来，注意：*窗口不要关闭*"></a>c、得到序列号，复制下来，注意：<em><strong>*窗口不要关闭*</strong></em></h5><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301230259128.png" alt="image-20210301230259128"> </p><h5 id="d、此时打开安装的原版Navicat，第一次打开会出现如下提示，点击注册按钮，进入注册页面"><a href="#d、此时打开安装的原版Navicat，第一次打开会出现如下提示，点击注册按钮，进入注册页面" class="headerlink" title="d、此时打开安装的原版Navicat，第一次打开会出现如下提示，点击注册按钮，进入注册页面"></a>d、此时打开安装的原版Navicat，第一次打开会出现如下提示，点击注册按钮，进入注册页面</h5><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301230336708.png" alt="image-20210301230336708"> </p><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301230435692.png" alt="image-20210301230435692"></p><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301230906020.png" alt="image-20210301230906020"></p><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301230939330.png" alt="image-20210301230939330"> </p><h5 id="e、接下来输入用户名，组织名和请求码，然后回车两次，获得激活码"><a href="#e、接下来输入用户名，组织名和请求码，然后回车两次，获得激活码" class="headerlink" title="e、接下来输入用户名，组织名和请求码，然后回车两次，获得激活码"></a>e、接下来输入用户名，组织名和请求码，然后回车两次，获得激活码</h5><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301231014026.png" alt="image-20210301231014026"> </p><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301231136310.png" alt="image-20210301231136310"> </p><h5 id="f、把获得到的激活码粘贴到navcat中，点击激活，激活成功。"><a href="#f、把获得到的激活码粘贴到navcat中，点击激活，激活成功。" class="headerlink" title="f、把获得到的激活码粘贴到navcat中，点击激活，激活成功。"></a>f、把获得到的激活码粘贴到navcat中，点击激活，激活成功。</h5><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301231212199.png" alt="image-20210301231212199"> </p><p><img src="/2022/09/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/navicate--%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/image-20210301231231556.png" alt="image-20210301231231556"> </p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>navicat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码--12306</title>
    <link href="/2022/09/27/%E5%85%B6%E4%BB%96/%E5%AF%86%E7%A0%81/%E5%AF%86%E7%A0%81--12306/"/>
    <url>/2022/09/27/%E5%85%B6%E4%BB%96/%E5%AF%86%E7%A0%81/%E5%AF%86%E7%A0%81--12306/</url>
    
    <content type="html"><![CDATA[<p>密码–12306</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">密码：<span class="hljs-number">133.</span>...Hao@<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tomcat--修改端口号</title>
    <link href="/2022/09/26/%E6%9C%8D%E5%8A%A1%E5%99%A8/tomcat--%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E5%8F%B7/"/>
    <url>/2022/09/26/%E6%9C%8D%E5%8A%A1%E5%99%A8/tomcat--%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h3 id="tomcat–修改端口号"><a href="#tomcat–修改端口号" class="headerlink" title="tomcat–修改端口号"></a>tomcat–修改端口号</h3><p>需要修改以下三个端口号</p><p><img src="/2022/09/26/%E6%9C%8D%E5%8A%A1%E5%99%A8/tomcat--%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E5%8F%B7/image-20220926002616214.png" alt="image-20220926002616214"></p><p><img src="/2022/09/26/%E6%9C%8D%E5%8A%A1%E5%99%A8/tomcat--%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E5%8F%B7/image-20220926002710315.png" alt="image-20220926002710315"></p><p><img src="/2022/09/26/%E6%9C%8D%E5%8A%A1%E5%99%A8/tomcat--%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E5%8F%B7/image-20220926002507797.png" alt="image-20220926002507797"></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作--linux命令相关</title>
    <link href="/2022/09/26/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--linux%E5%91%BD%E4%BB%A4%E7%9B%B8%E5%85%B3/"/>
    <url>/2022/09/26/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--linux%E5%91%BD%E4%BB%A4%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="工作–linux命令相关"><a href="#工作–linux命令相关" class="headerlink" title="工作–linux命令相关"></a>工作–linux命令相关</h2><h3 id="【1】增加可执行权限"><a href="#【1】增加可执行权限" class="headerlink" title="【1】增加可执行权限"></a>【1】增加可执行权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">chmod u<span class="hljs-operator">+</span>x stop<span class="hljs-operator">-</span>nmgt<span class="hljs-operator">-</span>agencybank<span class="hljs-operator">-</span>web.sh<br></code></pre></td></tr></table></figure><p><strong>x</strong>:代表执行权限。</p><p><strong>+</strong> :表示增加权限。</p><p>chmod u+x <em>.sh 就表示对当前目录下的</em>.sh文件的所有者增加可执行权限。。。</p><hr><h3 id="【2】关闭linux防火墙"><a href="#【2】关闭linux防火墙" class="headerlink" title="【2】关闭linux防火墙"></a>【2】关闭linux防火墙</h3><p>【关闭防火墙】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">systemctl stop firewalld.service    <span class="hljs-comment">-- 关闭防火墙</span><br>systemctl disable firewalld.service  <span class="hljs-comment">-- 永久关闭防火墙  </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作--存储过程相关</title>
    <link href="/2022/09/26/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    <url>/2022/09/26/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="工作–存储过程相关"><a href="#工作–存储过程相关" class="headerlink" title="工作–存储过程相关"></a>工作–存储过程相关</h2><h3 id="【1】维护表初始排序"><a href="#【1】维护表初始排序" class="headerlink" title="【1】维护表初始排序"></a>【1】维护表初始排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--维护百宝箱排序</span><br><span class="hljs-comment">-- Created on 2022/9/26 by BWF.LIUJQ01</span><br><span class="hljs-keyword">declare</span><br><span class="hljs-comment">--声明循环变量并赋初值</span><br>V_NUM NUMBER :<span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> TPPES_SN_TRIAL_MANAGE <span class="hljs-keyword">where</span> status <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">and</span> accInsCompany_Code <span class="hljs-operator">=</span> <span class="hljs-number">2</span>) loop<br>sys.dbms_output.put_line(V_NUM);<br><span class="hljs-keyword">update</span> TPPES_SN_TRIAL_IMANAGE <span class="hljs-keyword">set</span> treasure_box_order<span class="hljs-operator">=</span>V_NUM <span class="hljs-keyword">where</span> token <span class="hljs-operator">=</span>c.token;<span class="hljs-comment">--循环变量自增</span><br>V_NUM :<span class="hljs-operator">=</span> V_NUM <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span> loop;<br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx--操作</title>
    <link href="/2022/09/24/%E5%90%8E%E7%AB%AF/%E6%93%8D%E4%BD%9C/nginx--%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/09/24/%E5%90%8E%E7%AB%AF/%E6%93%8D%E4%BD%9C/nginx--%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="nginx–操作"><a href="#nginx–操作" class="headerlink" title="nginx–操作"></a>nginx–操作</h1><h2 id="nginx应用场景"><a href="#nginx应用场景" class="headerlink" title="nginx应用场景"></a>nginx应用场景</h2><h3 id="【1】反向代理"><a href="#【1】反向代理" class="headerlink" title="【1】反向代理"></a>【1】反向代理</h3><h4 id="（1）转发到默认目标服务器"><a href="#（1）转发到默认目标服务器" class="headerlink" title="（1）转发到默认目标服务器"></a>（1）转发到默认目标服务器</h4><p><img src="/2022/09/24/%E5%90%8E%E7%AB%AF/%E6%93%8D%E4%BD%9C/nginx--%E6%93%8D%E4%BD%9C/image-20220926004129412.png" alt="image-20220926004129412"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">location / &#123;<br>     proxy_pass http:<span class="hljs-comment">//127.0.0.1:8080/;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>测试：<a href="http://192.168.37.128/">http://192.168.37.128/</a></p><h4 id="（2）根据url跳转目标服务器"><a href="#（2）根据url跳转目标服务器" class="headerlink" title="（2）根据url跳转目标服务器"></a>（2）根据url跳转目标服务器</h4><p><img src="/2022/09/24/%E5%90%8E%E7%AB%AF/%E6%93%8D%E4%BD%9C/nginx--%E6%93%8D%E4%BD%9C/image-20220926003342843.png" alt="image-20220926003342843"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">location /test &#123;<br>        proxy_pass http:<span class="hljs-comment">//127.0.0.1:8080/;</span><br>&#125;<br><br>location /pre &#123;<br>    proxy_pass http:<span class="hljs-comment">//127.0.0.1:8081/;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>测试：<a href="http://192.168.37.128/test/">http://192.168.37.128/test/</a>  <a href="http://192.168.37.128/pre/">http://192.168.37.128/pre/</a></p><h4 id="（3）路径不同，运行环境不同"><a href="#（3）路径不同，运行环境不同" class="headerlink" title="（3）路径不同，运行环境不同"></a>（3）路径不同，运行环境不同</h4><p>项目前端nginx配置；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">location /test/ &#123;<br>    root /tpsys/ applications/nginx-<span class="hljs-number">1.22</span><span class="hljs-number">.0</span>/ ;<br>    indexindex.html index.htm;<br>&#125;<br>location /pre/ &#123;<br>root /tpsys/applications/nginx-<span class="hljs-number">1.22</span><span class="hljs-number">.0</span>/;<br>    indexindex.html index.html;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="【2】负载均衡"><a href="#【2】负载均衡" class="headerlink" title="【2】负载均衡"></a>【2】负载均衡</h3><h4 id="（1）轮询【默认】"><a href="#（1）轮询【默认】" class="headerlink" title="（1）轮询【默认】"></a>（1）轮询【默认】</h4><p><strong>实现的效果：</strong>一次访问8080，一次访问8081</p><p><img src="/2022/09/24/%E5%90%8E%E7%AB%AF/%E6%93%8D%E4%BD%9C/nginx--%E6%93%8D%E4%BD%9C/image-20220926005616605.png" alt="image-20220926005616605"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">upstream liujqServer &#123;<br>           server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span>;<br>           server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8081</span>;<br>     &#125;<br><br>    server &#123;<br>        listen       <span class="hljs-number">80</span>;<br>        server_name  localhost;<br><br>        #charset koi8-r;<br><br>        #access_log  logs/host.access.log  main;<br><br>        location / &#123;<br>                proxy_pass http:<span class="hljs-comment">//liujqServer/;</span><br>        &#125;<br></code></pre></td></tr></table></figure><p>测试：<a href="http://192.168.37.128/">http://192.168.37.128/</a></p><h4 id="（2）weight-权重"><a href="#（2）weight-权重" class="headerlink" title="（2）weight-权重"></a>（2）weight-权重</h4><p><strong>实现效果：</strong>两次访问8080，一次访问8081</p><p><img src="/2022/09/24/%E5%90%8E%E7%AB%AF/%E6%93%8D%E4%BD%9C/nginx--%E6%93%8D%E4%BD%9C/image-20220926010029488.png" alt="image-20220926010029488"></p><p>测试：<a href="http://192.168.37.128/">http://192.168.37.128/</a></p><h4 id="（3）ip-hash"><a href="#（3）ip-hash" class="headerlink" title="（3）ip_hash"></a>（3）ip_hash</h4><p><strong>实现效果：</strong>同一个计算机，访问的目标服务器是相同的（可以解决session问题）</p><p><img src="/2022/09/24/%E5%90%8E%E7%AB%AF/%E6%93%8D%E4%BD%9C/nginx--%E6%93%8D%E4%BD%9C/image-20220926010526755.png" alt="image-20220926010526755"></p><p>测试：<a href="http://192.168.37.128/">http://192.168.37.128/</a></p><hr><h3 id="【3】动静分离"><a href="#【3】动静分离" class="headerlink" title="【3】动静分离"></a>【3】动静分离</h3><p>目前没有找到对应的场景去测试；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">location /<span class="hljs-keyword">static</span>/&#123;<br>    root staticData;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis--操作</title>
    <link href="/2022/09/24/%E5%90%8E%E7%AB%AF/%E6%93%8D%E4%BD%9C/redis--%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/09/24/%E5%90%8E%E7%AB%AF/%E6%93%8D%E4%BD%9C/redis--%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="redis–操作"><a href="#redis–操作" class="headerlink" title="redis–操作"></a>redis–操作</h2><h3 id="【1】启动redis"><a href="#【1】启动redis" class="headerlink" title="【1】启动redis"></a>【1】启动redis</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">cd /usr/local/bin<br>redis-server /opt/redis-<span class="hljs-number">5.0</span><span class="hljs-number">.4</span>/redis.conf  -- 已配置文件的方式启动<br>redis-cli  -- 进入客户端    <br></code></pre></td></tr></table></figure><hr><h3 id="【2】redis基础操作"><a href="#【2】redis基础操作" class="headerlink" title="【2】redis基础操作"></a>【2】redis基础操作</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&lt;dependencies&gt;</span><br>        <span class="hljs-string">&lt;!--java和redis打交道的API客户端--&gt;</span><br>        <span class="hljs-string">&lt;dependency&gt;</span><br>            <span class="hljs-string">&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br>            <span class="hljs-string">&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br>            <span class="hljs-string">&lt;version&gt;3.1.0&lt;/version&gt;</span><br>        <span class="hljs-string">&lt;/dependency&gt;</span><br>        <span class="hljs-string">&lt;!--redis的连接池技术--&gt;</span><br>        <span class="hljs-string">&lt;dependency&gt;</span><br>            <span class="hljs-string">&lt;groupId&gt;commons-pool&lt;/groupId&gt;</span><br>            <span class="hljs-string">&lt;artifactId&gt;commons-pool&lt;/artifactId&gt;</span><br>            <span class="hljs-string">&lt;version&gt;1.6&lt;/version&gt;</span><br>        <span class="hljs-string">&lt;/dependency&gt;</span><br>        <span class="hljs-string">&lt;!--添加该依赖一个新增xml</span> <span class="hljs-string">spring</span> <span class="hljs-string">config</span> <span class="hljs-string">文件--&gt;</span><br>        <span class="hljs-string">&lt;dependency&gt;</span><br>            <span class="hljs-string">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br>            <span class="hljs-string">&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br>            <span class="hljs-string">&lt;version&gt;5.2.7.RELEASE&lt;/version&gt;</span><br>        <span class="hljs-string">&lt;/dependency&gt;</span><br><br>        <span class="hljs-string">&lt;!--实现分布式锁的工具类--&gt;</span><br>        <span class="hljs-string">&lt;dependency&gt;</span><br>            <span class="hljs-string">&lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br>            <span class="hljs-string">&lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br>            <span class="hljs-string">&lt;version&gt;3.6.1&lt;/version&gt;</span><br>        <span class="hljs-string">&lt;/dependency&gt;</span><br>        <span class="hljs-string">&lt;!--spring操作redis的工具类--&gt;</span><br>        <span class="hljs-string">&lt;dependency&gt;</span><br>            <span class="hljs-string">&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br>            <span class="hljs-string">&lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br>            <span class="hljs-string">&lt;version&gt;2.3.2.RELEASE&lt;/version&gt;</span><br>        <span class="hljs-string">&lt;/dependency&gt;</span><br>        <span class="hljs-string">&lt;!--json解析工具--&gt;</span><br>        <span class="hljs-string">&lt;dependency&gt;</span><br>            <span class="hljs-string">&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br>            <span class="hljs-string">&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br>            <span class="hljs-string">&lt;version&gt;2.9.8&lt;/version&gt;</span><br>        <span class="hljs-string">&lt;/dependency&gt;</span><br><br>        <span class="hljs-string">&lt;!--单元测试的依赖--&gt;</span><br>        <span class="hljs-string">&lt;dependency&gt;</span><br>            <span class="hljs-string">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br>            <span class="hljs-string">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br>            <span class="hljs-string">&lt;version&gt;4.12&lt;/version&gt;</span><br>        <span class="hljs-string">&lt;/dependency&gt;</span><br>    <span class="hljs-string">&lt;/dependencies&gt;</span><br>    <span class="hljs-string">&lt;!--添加内嵌的Tomcat--&gt;</span><br>    <span class="hljs-string">&lt;build&gt;</span><br>        <span class="hljs-string">&lt;plugins&gt;</span><br>            <span class="hljs-string">&lt;plugin&gt;</span><br>                <span class="hljs-string">&lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br>                <span class="hljs-string">&lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br>                <span class="hljs-string">&lt;configuration&gt;</span><br>                    <span class="hljs-string">&lt;port&gt;8080&lt;/port&gt;</span><br>                    <span class="hljs-string">&lt;path&gt;/&lt;/path&gt;</span><br>                <span class="hljs-string">&lt;/configuration&gt;</span><br>                <span class="hljs-string">&lt;executions&gt;</span><br>                    <span class="hljs-string">&lt;execution&gt;</span><br>                        <span class="hljs-string">&lt;!--</span> <span class="hljs-string">打包完成后,运行服务</span> <span class="hljs-string">--&gt;</span><br>                        <span class="hljs-string">&lt;phase&gt;package&lt;/phase&gt;</span><br>                        <span class="hljs-string">&lt;goals&gt;</span><br>                            <span class="hljs-string">&lt;goal&gt;run&lt;/goal&gt;</span><br>                        <span class="hljs-string">&lt;/goals&gt;</span><br>                    <span class="hljs-string">&lt;/execution&gt;</span><br>                <span class="hljs-string">&lt;/executions&gt;</span><br>            <span class="hljs-string">&lt;/plugin&gt;</span><br>        <span class="hljs-string">&lt;/plugins&gt;</span><br>    <span class="hljs-string">&lt;/build&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liu;<br><br><span class="hljs-keyword">import</span> com.liu.utils.JedisPoolUtil;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Transaction;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRedis</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*-----------------功能:连接redis 2022-09-24 -----------------*/</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.37.128&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pong</span> <span class="hljs-operator">=</span> jedis.ping();<br>        System.out.println(<span class="hljs-string">&quot;pong=&quot;</span> + pong);  <span class="hljs-comment">// pong=PONG</span><br>        <span class="hljs-comment">/*-----------------功能:设置值 2022-09-24 -----------------*/</span><br>        jedis.set(<span class="hljs-string">&quot;k1&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>);<br>        jedis.set(<span class="hljs-string">&quot;k2&quot;</span>,<span class="hljs-string">&quot;v2&quot;</span>);<br>        jedis.set(<span class="hljs-string">&quot;k3&quot;</span>,<span class="hljs-string">&quot;v3&quot;</span>);<br>        <span class="hljs-comment">/*-----------------功能:模糊查询+迭代器遍历集合 2022-09-24 -----------------*/</span><br>        Set&lt;String&gt; set = jedis.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>        Iterator&lt;String&gt; iterator = set.iterator();<br>        <span class="hljs-keyword">for</span>(set.iterator();iterator.hasNext();)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.println(k + <span class="hljs-string">&quot;-&gt;&quot;</span> + jedis.get(k));<br>        &#125;<br>        <span class="hljs-comment">/*-----------------功能:查看键值是否存在 2022-09-24 -----------------*/</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">k1Exists</span> <span class="hljs-operator">=</span> jedis.exists(<span class="hljs-string">&quot;k1&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;k1Exists=&quot;</span> + k1Exists);<br>        <span class="hljs-comment">/*-----------------功能:查看键值的过期时间 2022-09-24 -----------------*/</span><br>        System.out.println(jedis.ttl(<span class="hljs-string">&quot;k1&quot;</span>));  <span class="hljs-comment">//k1Exists=true</span><br>        <span class="hljs-comment">/*-----------------功能:一次设置多个值 2022-09-24 -----------------*/</span><br>        jedis.mset(<span class="hljs-string">&quot;k4&quot;</span>,<span class="hljs-string">&quot;v4&quot;</span>,<span class="hljs-string">&quot;k5&quot;</span>,<span class="hljs-string">&quot;v5&quot;</span>);  <span class="hljs-comment">// -1</span><br>        <span class="hljs-comment">/*-----------------功能:一次获取多个值 2022-09-24 -----------------*/</span><br>        System.out.println(jedis.mget(<span class="hljs-string">&quot;k1&quot;</span>,<span class="hljs-string">&quot;k2&quot;</span>,<span class="hljs-string">&quot;k3&quot;</span>,<span class="hljs-string">&quot;k4&quot;</span>,<span class="hljs-string">&quot;k5&quot;</span>)); <span class="hljs-comment">// 得到是一个集合  [v1, v2, v3, v4, v5]</span><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.37.128&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">/*-----------------功能:向列表中放入元素 2022-09-24 -----------------*/</span><br>        jedis.lpush(<span class="hljs-string">&quot;list01&quot;</span>,<span class="hljs-string">&quot;l1&quot;</span>,<span class="hljs-string">&quot;l2&quot;</span>,<span class="hljs-string">&quot;l3&quot;</span>);<br>        <span class="hljs-comment">/*-----------------功能:查询列表中的元素(查询list01中的全部数据0表示开始，-1表示结尾) 2022-09-24 -----------------*/</span><br>        List&lt;String&gt; list01 = jedis.lrange(<span class="hljs-string">&quot;list01&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (String s : list01) &#123;  <span class="hljs-comment">// l3 l2 l1</span><br>            System.out.println(s);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.37.128&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">/*-----------------功能:向set中放值 2022-09-24 -----------------*/</span><br>        jedis.sadd(<span class="hljs-string">&quot;order&quot;</span>,<span class="hljs-string">&quot;jd001&quot;</span>);<br>        jedis.sadd(<span class="hljs-string">&quot;order&quot;</span>,<span class="hljs-string">&quot;jd002&quot;</span>);<br>        jedis.sadd(<span class="hljs-string">&quot;order&quot;</span>,<span class="hljs-string">&quot;jd003&quot;</span>);<br>        <span class="hljs-comment">/*-----------------功能:查询set的值 2022-09-24 -----------------*/</span><br>        Set&lt;String&gt; order = jedis.smembers(<span class="hljs-string">&quot;order&quot;</span>);<br>        Iterator&lt;String&gt; iterator = order.iterator();<br>        <span class="hljs-keyword">for</span>(order.iterator();iterator.hasNext();)&#123; <span class="hljs-comment">// jd002 jd001 jd003</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.println(s);<br>        &#125;<br>        <span class="hljs-comment">/*-----------------功能:移除set的某元素 2022-09-24 -----------------*/</span><br>        jedis.srem(<span class="hljs-string">&quot;order&quot;</span>,<span class="hljs-string">&quot;jd003&quot;</span>);<br>        System.out.println(jedis.smembers(<span class="hljs-string">&quot;order&quot;</span>).size()); <span class="hljs-comment">// 2</span><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 类似于一张表了</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.37.128&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">/*-----------------功能:向hashSet中新增元素（key field value） 2022-09-24 -----------------*/</span><br>        jedis.hset(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>        jedis.hset(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>);<br>        <span class="hljs-comment">// 获取值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hget</span> <span class="hljs-operator">=</span> jedis.hget(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(hget);  <span class="hljs-comment">// 李四</span><br><br>        <span class="hljs-comment">/*-----------------功能:向hashMap中放值 2022-09-24 -----------------*/</span><br>        HashMap&lt;String,String&gt; user2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,String&gt;();<br>        user2.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>        user2.put(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;18&quot;</span>);<br>        user2.put(<span class="hljs-string">&quot;phone&quot;</span>,<span class="hljs-string">&quot;13333333333&quot;</span>);<br>        jedis.hmset(<span class="hljs-string">&quot;user2&quot;</span>,user2);<br>        <span class="hljs-comment">/*-----------------功能:获取HashMap的值 2022-09-24 -----------------*/</span><br>        List&lt;String&gt; list = jedis.hmget(<span class="hljs-string">&quot;user2&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String s : list) &#123;  <span class="hljs-comment">// 张三 18 13333333333</span><br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testZSet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.37.128&quot;</span>, <span class="hljs-number">6379</span>);<br>        jedis.zadd(<span class="hljs-string">&quot;zSet01&quot;</span>,<span class="hljs-number">10d</span>,<span class="hljs-string">&quot;zs1&quot;</span>);<br>        jedis.zadd(<span class="hljs-string">&quot;zSet01&quot;</span>,<span class="hljs-number">20d</span>,<span class="hljs-string">&quot;zs2&quot;</span>);<br>        jedis.zadd(<span class="hljs-string">&quot;zSet01&quot;</span>,<span class="hljs-number">30d</span>,<span class="hljs-string">&quot;zs3&quot;</span>);<br>        Set&lt;String&gt; zSet01 = jedis.zrange(<span class="hljs-string">&quot;zSet01&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        Iterator&lt;String&gt; iterator = zSet01.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123; <span class="hljs-comment">// zs1  zs2</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试redis事务</span><br><span class="hljs-comment">     * 介绍：redis中存有余额及累计支出字段，支出-》余额减少-》累计支出增加</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWork</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.37.128&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">/*-----------------功能:初始化余额、累计消费 2022-09-24 -----------------*/</span><br>        jedis.set(<span class="hljs-string">&quot;money&quot;</span>, <span class="hljs-string">&quot;1000&quot;</span>); <span class="hljs-comment">// 有1000块钱</span><br>        jedis.set(<span class="hljs-string">&quot;xiaoFeiNum&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>); <span class="hljs-comment">// 累计消费初始0元</span><br><br>        <span class="hljs-comment">/*-----------------功能:开启事务并进行消费 2022-09-24 -----------------*/</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> Integer.parseInt(jedis.get(<span class="hljs-string">&quot;money&quot;</span>));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">zhiChu</span> <span class="hljs-operator">=</span><span class="hljs-number">100</span>; <span class="hljs-comment">// 支出100元</span><br>        <span class="hljs-comment">// @问题：为什么使用监控</span><br>        <span class="hljs-comment">// -在exec之前，我开启了另一个窗口（线程），对监控的in做了修改，所以本次的事务将被打断（失效），类似于“乐观锁</span><br>        jedis.watch(<span class="hljs-string">&quot;money&quot;</span>); <span class="hljs-comment">// 监控余额</span><br>        Thread.sleep(<span class="hljs-number">5000</span>); <span class="hljs-comment">// 模拟网络延迟</span><br>        <span class="hljs-keyword">if</span>(zhiChu&gt;money)&#123;<br>            jedis.unwatch(); <span class="hljs-comment">// 取消监控</span><br>            System.out.println(<span class="hljs-string">&quot;余额不足！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// 进行扣费</span><br>            <span class="hljs-type">Transaction</span> <span class="hljs-variable">transaction</span> <span class="hljs-operator">=</span> jedis.multi(); <span class="hljs-comment">// 开启事务</span><br>            transaction.decrBy(<span class="hljs-string">&quot;money&quot;</span>,zhiChu);<br>            transaction.incrBy(<span class="hljs-string">&quot;xiaoFeiNum&quot;</span>,zhiChu);<br>            transaction.exec(); <span class="hljs-comment">// 提交事务 // 一旦执行了exec命令，那么之前加的所有监控自动失效！</span><br>            System.out.println(<span class="hljs-string">&quot;money=&quot;</span> + jedis.get(<span class="hljs-string">&quot;money&quot;</span>));  <span class="hljs-comment">//money=900</span><br>            System.out.println(<span class="hljs-string">&quot;xiaoFeiNum=&quot;</span> + jedis.get(<span class="hljs-string">&quot;xiaoFeiNum&quot;</span>)); <span class="hljs-comment">//xiaoFeiNum=100</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 测试jedis连接池</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJedisPool</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> JedisPoolUtil.getJedis();<br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis1</span> <span class="hljs-operator">=</span> JedisPoolUtil.getJedis();<br>        System.out.println(jedis==jedis1); <span class="hljs-comment">// 获取的jedis连接是同一个连接</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="【3】redis事务"><a href="#【3】redis事务" class="headerlink" title="【3】redis事务"></a>【3】redis事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试redis事务</span><br><span class="hljs-comment">     * 介绍：redis中存有余额及累计支出字段，支出-》余额减少-》累计支出增加</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWork</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.37.128&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">/*-----------------功能:初始化余额、累计消费 2022-09-24 -----------------*/</span><br>        jedis.set(<span class="hljs-string">&quot;money&quot;</span>, <span class="hljs-string">&quot;1000&quot;</span>); <span class="hljs-comment">// 有1000块钱</span><br>        jedis.set(<span class="hljs-string">&quot;xiaoFeiNum&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>); <span class="hljs-comment">// 累计消费初始0元</span><br><br>        <span class="hljs-comment">/*-----------------功能:开启事务并进行消费 2022-09-24 -----------------*/</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> Integer.parseInt(jedis.get(<span class="hljs-string">&quot;money&quot;</span>));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">zhiChu</span> <span class="hljs-operator">=</span><span class="hljs-number">100</span>; <span class="hljs-comment">// 支出100元</span><br>        <span class="hljs-comment">// @问题：为什么使用监控</span><br>        <span class="hljs-comment">// -在exec之前，我开启了另一个窗口（线程），对监控的in做了修改，所以本次的事务将被打断（失效），类似于“乐观锁</span><br>        jedis.watch(<span class="hljs-string">&quot;money&quot;</span>); <span class="hljs-comment">// 监控余额</span><br>        Thread.sleep(<span class="hljs-number">5000</span>); <span class="hljs-comment">// 模拟网络延迟</span><br>        <span class="hljs-keyword">if</span>(zhiChu&gt;money)&#123;<br>            jedis.unwatch(); <span class="hljs-comment">// 取消监控</span><br>            System.out.println(<span class="hljs-string">&quot;余额不足！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// 进行扣费</span><br>            <span class="hljs-type">Transaction</span> <span class="hljs-variable">transaction</span> <span class="hljs-operator">=</span> jedis.multi(); <span class="hljs-comment">// 开启事务</span><br>            transaction.decrBy(<span class="hljs-string">&quot;money&quot;</span>,zhiChu);<br>            transaction.incrBy(<span class="hljs-string">&quot;xiaoFeiNum&quot;</span>,zhiChu);<br>            transaction.exec(); <span class="hljs-comment">// 提交事务 // 一旦执行了exec命令，那么之前加的所有监控自动失效！</span><br>            System.out.println(<span class="hljs-string">&quot;money=&quot;</span> + jedis.get(<span class="hljs-string">&quot;money&quot;</span>));  <span class="hljs-comment">//money=900</span><br>            System.out.println(<span class="hljs-string">&quot;xiaoFeiNum=&quot;</span> + jedis.get(<span class="hljs-string">&quot;xiaoFeiNum&quot;</span>)); <span class="hljs-comment">//xiaoFeiNum=100</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><hr><h3 id="【4】redis连接池"><a href="#【4】redis连接池" class="headerlink" title="【4】redis连接池"></a>【4】redis连接池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liu.utils;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPool;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPoolConfig;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Jedis连接池</span><br><span class="hljs-comment"> * 单例设计模式优化jedis连接池</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisPoolUtil</span> &#123;<br>    <span class="hljs-comment">/*-----------------功能:私有化成员方法 2022-09-24 -----------------*/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">JedisPoolUtil</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">/*-----------------功能:成员变量使用private static修饰 2022-09-24 -----------------*/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> JedisPool jedisPool=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Jedis jedis=<span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/*-----------------功能:返回一个连接池 2022-09-24 -----------------*/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JedisPool <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">/*-----------------功能:使用双层检测锁（企业中使用的非常的频繁） 2022-09-24 -----*/</span><br>        <span class="hljs-keyword">if</span>(jedisPool==<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">// 第一层：检测体温</span><br>            <span class="hljs-keyword">synchronized</span> (JedisPoolUtil.class)&#123; <span class="hljs-comment">// 排队进站</span><br>                <span class="hljs-keyword">if</span>(jedisPool==<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">// 第二层：查看健康码</span><br>                    <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">jedisPoolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>                    jedisPoolConfig.setMaxTotal(<span class="hljs-number">1000</span>); <span class="hljs-comment">// 资源连接池中最大的链接数</span><br>                    jedisPoolConfig.setMaxIdle(<span class="hljs-number">30</span>); <span class="hljs-comment">// 资源池允许的最大空闲连接数</span><br>                    jedisPoolConfig.setMaxWaitMillis(<span class="hljs-number">60</span>*<span class="hljs-number">1000</span>); <span class="hljs-comment">// 当资源池链接用尽后，调用者的最大等待时间</span><br>                    jedisPoolConfig.setTestOnBorrow(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 向资源池列用连接是，是否做连接有效检验(如果业务量很大的时候建议设置为false,减少一次ping的开销)</span><br>                    jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(jedisPoolConfig, <span class="hljs-string">&quot;192.168.37.128&quot;</span>, <span class="hljs-number">6379</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> jedisPool;<br>    &#125;<br>    <span class="hljs-comment">/*-----------------功能:对外提供一个调用的接口 2022-09-24 -----------------*/</span><br>    <span class="hljs-comment">// @-问题：资源为null代表什么？是没有闲着的jedis连接吗？</span><br>    <span class="hljs-comment">//连接池中只有一个jedis吗？</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (jedis == <span class="hljs-literal">null</span>) &#123;<br>            jedis=getInstance().getResource();<br>        &#125;<br>        <span class="hljs-keyword">return</span> jedis;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试jedis连接池</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJedisPool</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> JedisPoolUtil.getJedis();<br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis1</span> <span class="hljs-operator">=</span> JedisPoolUtil.getJedis();<br>        System.out.println(jedis==jedis1); <span class="hljs-comment">// 获取的jedis连接是同一个连接</span><br>    &#125;<br></code></pre></td></tr></table></figure><hr><h3 id="【5】redis锁-redis秒杀功能"><a href="#【5】redis锁-redis秒杀功能" class="headerlink" title="【5】redis锁-redis秒杀功能"></a>【5】redis锁-redis秒杀功能</h3><p>【redis-redisson】</p><h4 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springConfig.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="springConfig-xml"><a href="#springConfig-xml" class="headerlink" title="springConfig.xml"></a>springConfig.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.liu.controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stringRedisTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.core.StringRedisTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connectionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;connectionFactory&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;connectionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hostName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;192.168.204.141&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;port&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;6379&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="TestKill"><a href="#TestKill" class="headerlink" title="TestKill"></a>TestKill</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liu.controller;<br><br><span class="hljs-keyword">import</span> org.redisson.Redisson;<br><span class="hljs-keyword">import</span> org.redisson.api.RLock;<br><span class="hljs-keyword">import</span> org.redisson.config.Config;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试redis秒杀功能</span><br><span class="hljs-comment"> * 问题：如果两个人先后获取了库存数，然后先后将库存数更新，那两个人操作了，库存数只减少了1？</span><br><span class="hljs-comment"> * 代码存在问题</span><br><span class="hljs-comment"> * 单机的不会出现这种问题，集群情况下就会出现一个商品被两个人抢了的情况</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestKill</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-keyword">private</span> Redisson redisson;<br><br>    <span class="hljs-comment">// 只能解决一个tomcat的并发问题：synchronized锁的一个进程下的线程并发，如果分布式环境，多个进程并发，这种方案就失效了！</span><br>    <span class="hljs-meta">@RequestMapping(&quot;kill&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> String <span class="hljs-title function_">kill</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">/*-----------------功能:从redis中获取手机库存数量 2022-09-25 -----------------*/</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">phoneCount</span> <span class="hljs-operator">=</span> Integer.parseInt(stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;phone&quot;</span>));<br>        <span class="hljs-comment">/*-----------------功能:判断手机数量是否可以参与秒杀 2022-09-25 -----------------*/</span><br>        <span class="hljs-keyword">if</span>(phoneCount&lt;=<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            phoneCount--;<br>            <span class="hljs-comment">/*-----------------功能:库存减少后将数据存到数据库中 2022-09-25 -----------------*/</span><br>            stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;phone&quot;</span>,phoneCount+<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;over!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Redisson <span class="hljs-title function_">redisson</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        <span class="hljs-comment">// 使用单个redis服务器</span><br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://192.168.37.128:6379&quot;</span>).setDatabase(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 使用集群redis</span><br>        <span class="hljs-comment">//config.useClusterServers().setScanInterval(2000).addNodeAddress(&quot;redis://192.168.37.128:6379&quot;,&quot;redis://192.168.37.128:6379&quot;,&quot;redis://192.168.37.128:6379&quot;);</span><br>        <span class="hljs-keyword">return</span> (Redisson)Redisson.create(config);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * redis秒杀优化-针对集群的情况</span><br><span class="hljs-comment">     * 适用于分布式的情况</span><br><span class="hljs-comment">     * 原理：使用setnx命令实现锁</span><br><span class="hljs-comment">     * 目前分布式锁，应用最多的仍然是“Redis”</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;kill2&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> String <span class="hljs-title function_">kill2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">/*-----------------功能:定义商品ID 2022-09-25 -----------------*/</span><br>        String productKey=<span class="hljs-string">&quot;HUAWEI-P40&quot;</span>;<br>        <span class="hljs-comment">/*-----------------功能:通过redisson获取锁 2022-09-25 -----------------*/</span><br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">rLock</span> <span class="hljs-operator">=</span> redisson.getLock(<span class="hljs-string">&quot;productKey&quot;</span>);<br>        <span class="hljs-comment">/*-----------------功能:上锁并设置过期时间 2022-09-25 -----------------*/</span><br>        rLock.lock(<span class="hljs-number">30</span>, TimeUnit.SECONDS);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">/*-----------------功能:从redis中获取手机库存数量 2022-09-25 -----------------*/</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">phoneCount</span> <span class="hljs-operator">=</span> Integer.parseInt(stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;phone&quot;</span>));<br>            <span class="hljs-comment">/*-----------------功能:判断手机数量是否可以参与秒杀 2022-09-25 -----------------*/</span><br>            <span class="hljs-keyword">if</span>(phoneCount&lt;=<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                phoneCount--;<br>                <span class="hljs-comment">/*-----------------功能:库存减少后将数据存到数据库中 2022-09-25 ------*/</span><br>                stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;phone&quot;</span>,phoneCount+<span class="hljs-string">&quot;&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;库存-1，剩余：&quot;</span>+phoneCount);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 释放锁</span><br>            rLock.unlock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;over!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea--开发工具的使用</title>
    <link href="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="idea–开发工具的使用"><a href="#idea–开发工具的使用" class="headerlink" title="idea–开发工具的使用"></a><strong>idea–开发工具的使用</strong></h1><h1 id="一、编码神器-IDEA"><a href="#一、编码神器-IDEA" class="headerlink" title="一、编码神器-IDEA"></a>一、<strong>编码神器-IDEA</strong></h1><h2 id="（一）IDEA介绍-了解"><a href="#（一）IDEA介绍-了解" class="headerlink" title="（一）IDEA介绍[了解]"></a>（一）<strong>IDEA介绍[了解]</strong></h2><p>l 官网：<a href="#section=windows">http://www.jetbrains.com/idea/download/#section=windows</a> </p><p>l 官网教程: </p><p><a href="https://www.jetbrains.com/help/idea/install-and-set-up-product.html">https://www.jetbrains.com/help/idea/install-and-set-up-product.html</a></p><p>l 百科介少</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps115.jpg" alt="img"> </p><p>l IDEA是 JetBrains 公司的产品，公司旗下还有其它产品，比如：</p><p>Ø WebStorm：用于开发 JavaScript、HTML5、CSS3 等前端技术；</p><p>Ø PyCharm：用于开发 python</p><p>Ø PhpStorm：用于开发 PHP</p><p>Ø RubyMine：用于开发 Ruby&#x2F;Rails</p><p>Ø AppCode：用于开发 Objective - C&#x2F;Swift</p><p>Ø CLion：用于开发 C&#x2F;C++</p><p>Ø DataGrip：用于开发数据库和 SQL</p><p>Ø Rider：用于开发.NET</p><p>Ø GoLand：用于开发 Go</p><p>Ø Android Studio：用于开发 android</p><p>l IDEA，全称 IntelliJ IDEA，是 Java 语言的集成开发环境，IDEA 在业界被公认为是最好的 java 开发工具之一，尤其在智能代码助手、代码自动提示、Debug调试、重构、J2EE支持、Ant、JUnit、CVS 整合、代码审查、创新的 GUI 设计等方面的功能可以说是超常的。</p><p>IntelliJ IDEA 在 2015 年的官网上这样介绍自己：</p><p>Excel at enterprise, mobile and web development with Java, Scala and Groovy,with all the latest modern technologies and frameworks available out of thebox.</p><p>翻译：</p><p>IntelliJ IDEA 主要用于支持 Java、Scala、Groovy 等语言的开发工具，同时具备支持目前主流的技术和框架，擅长于企业应用、移动应用和 Web 应用的开发。</p><p>l 注意: IntelliJ IDEA 对硬件的要求</p><p>2G 内存的计算机只适合写小程序、小项目或是开发静态页面。</p><p>Java Web 项目最好的方案是 8G 内存或是以上，硬盘能再用上固态是最好的，因为IntelliJ IDEA 有大量的缓存、索引文件，把 IntelliJ IDEA 的缓存、索引文件放在固态上，IntelliJ IDEA 流畅度也会加快很多。</p><h2 id="（二）下载-安装-掌握"><a href="#（二）下载-安装-掌握" class="headerlink" title="（二）下载-安装[掌握]"></a>（二）<strong>下载-安装[掌握]</strong></h2><h3 id="1．下载"><a href="#1．下载" class="headerlink" title="1．下载"></a>1．<strong>下载</strong></h3><p><a href="#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a></p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps116.jpg" alt="img"> </p><h3 id="2．安装"><a href="#2．安装" class="headerlink" title="2．安装"></a>2．<strong>安装</strong></h3><h4 id="（1）点击安装"><a href="#（1）点击安装" class="headerlink" title="（1）点击安装"></a>（1）<strong>点击安装</strong></h4><p>l 本教程所对应的版本2017.3.2版本</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps117.jpg" alt="img"> </p><p><strong>注意:所有软件安装路径中不能出现空格和中文！！！</strong>   </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps118.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps119.jpg" alt="img"> </p><p>l 在桌面上创建一个快捷图标，建议勾选上，方便我们在安装后定位 IntelliJ IDEA 安装目录。</p><p>l 关联 Java 和 Groovy 文件，建议都不要勾选，正常我们会在 Windows 的文件系统上打开这类文件都是为了快速查阅文件里面的内容，如果用 IntelliJ IDEA 关联上之后，由于 IntelliJ IDEA 打开速度缓慢，这并不能方便我们查看</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps120.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps121.jpg" alt="img"> </p><h4 id="（2）运行并破解"><a href="#（2）运行并破解" class="headerlink" title="（2）运行并破解"></a>（2）<strong>运行并破解</strong></h4><p>百度idea服务器破解或者idea破解码</p><h4 id="（3）选择UI主题"><a href="#（3）选择UI主题" class="headerlink" title="（3）选择UI主题"></a>（3）<strong>选择UI主题</strong></h4><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps122.jpg" alt="img"> </p><h4 id="（4）选择插件-跳过"><a href="#（4）选择插件-跳过" class="headerlink" title="（4）选择插件(跳过)"></a>（4）<strong>选择插件(跳过)</strong></h4><p>这里可以按默认设置，点击下一步，后续可以在settings中修改</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps123.jpg" alt="img"> </p><h3 id="3．目录介绍"><a href="#3．目录介绍" class="headerlink" title="3．目录介绍"></a>3．<strong>目录介绍</strong></h3><h4 id="（1）安装目录"><a href="#（1）安装目录" class="headerlink" title="（1）安装目录"></a>（1）<strong>安装目录</strong></h4><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps124.jpg" alt="img"> </p><p>bin：容器，执行文件和启动参数等</p><p>help：快捷键文档和其他帮助文档</p><p>jre64：64 位java 运行环境</p><p>lib：idea 依赖的类库</p><p>license：各个插件许可</p><p>plugins：插件</p><p>其中：bin 目录下：</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps125.jpg" alt="img"> </p><p>• idea.exe 文件是 IntelliJ IDEA 32 位的可行执行文件，IntelliJ IDEA 安装完默认发送到桌面的也就是这个执行文件的快捷方式。</p><p>• idea.exe.vmoptions 文件是 IntelliJ IDEA 32 位的可执行文件的 VM 配置文件</p><p>• idea64.exe 文件是 IntelliJ IDEA 64 位的可行执行文件，要求必须电脑上装有 JDK 64 位版本。64 位的系统也是建议使用该文件。</p><p>• idea64.exe.vmoptions 文件是 IntelliJ IDEA 64 位的可执行文件的 VM 配置文件</p><p>• idea.properties 文件是 IntelliJ IDEA 的一些属性配置文件</p><p>配置文件修改的原则主要是根据自己机器的内存情况来判断的，个人是建议 8G 以下的机子或是静态页面开发者都是无需修改的。如果你是开发大型项目、Java 项目或是 Android 项目，并且内存大于 8G，建议进行修改</p><p>-Xms128m，16 G 内存的机器可尝试设置为 -Xms512m(设置初始的内存数，增加该值可以提高 Java 程序的启动速度。)</p><p>-Xmx750m，16 G 内存的机器可尝试设置为 -Xmx1500m(设置最大内存数，提高该值，可以减少内存 Garage 收集的频率，提高程序性能)</p><p>-XX:ReservedCodeCacheSize&#x3D;240m，16G 内存的机器可尝试设置为-XX:ReservedCodeCacheSize&#x3D;500m(缓存大小)</p><h4 id="（2）配置目录"><a href="#（2）配置目录" class="headerlink" title="（2）配置目录"></a>（2）<strong>配置目录</strong></h4><p>l 目录介绍</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps126.jpg" alt="img"> </p><p>• 对于这个设置目录有一个特性，就是你删除掉整个目录之后，重新启动 IntelliJ IDEA 会再自动帮你再生成一个全新的默认配置，所以很多时候如果你把 IntelliJ IDEA 配置改坏了，没关系，删掉该目录，一切都会还原到默认，我是很建议新人可以多自己摸索 IntelliJ IDEA 的配置，多几次还原，有助于加深对 IntelliJ IDEA 的了解。</p><p>• config 目录是 IntelliJ IDEA 个性化化配置目录，或者说是整个 IDE 设置目录。也是我个人认为最重要的目录，没有之一，安装新版本的 IntelliJ IDEA 会自动扫描硬盘上的旧配置目录，指的就是该目录。这个目录主要记录了：IDE 主要配置功能、自定义的代码模板、自定义的文件模板、自定义的快捷键、Project 的 tasks 记录等等个性化的设置。</p><p>• system 目录是 IntelliJ IDEA 系统文件目录，是 IntelliJ IDEA 与开发项目一个桥梁目录，里面主要有：缓存、索引、容器文件输出等等，虽然不是最重要目录，但是也是最不可或缺目录之一。</p><p>l 配置文件的位置可以通过修改properties文件进行指定</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps127.jpg" alt="img"> </p><p>• 上图是 IntelliJ IDEA 一些属性配置，没有 32 位和 64 位之分，修改原则主要根据个人对 IntelliJ IDEA 的个性化配置情况来分析。常修改的就是下面 4 个参数：</p><p>• idea.config.path&#x3D;${user.home}&#x2F;.IntelliJIdea&#x2F;config ，该属性主要用于指向 IntelliJ IDEA 的个性化</p><p>配置目录，默认是被注释，打开注释之后才算启用该属性，这里需要特别注意的是斜杠方向，这里用的是正斜杠。</p><p>• idea.system.path&#x3D;${user.home}&#x2F;.IntelliJIdea&#x2F;system ，该属性主要用于指向 IntelliJ IDEA 的系统文件目录，默认是被注释，打开注释之后才算启用该属性，这里需要特别注意的是斜杠方向，这里用的是正斜杠。如果你的项目很多，则该目录会很大，如果你的 C 盘空间不够的时候，还是建议把该目录转移到其他盘符下。</p><h2 id="（三）入门案例-掌握"><a href="#（三）入门案例-掌握" class="headerlink" title="（三）入门案例[掌握]"></a>（三）<strong>入门案例[掌握]</strong></h2><h3 id="1．创建普通Java工程"><a href="#1．创建普通Java工程" class="headerlink" title="1．创建普通Java工程"></a>1．<strong>创建普通Java工程</strong></h3><h4 id="（1）创建工程并编写代码"><a href="#（1）创建工程并编写代码" class="headerlink" title="（1）创建工程并编写代码"></a>（1）<strong>创建工程并编写代码</strong></h4><p>l 新建工程</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps128.jpg" alt="img"> </p><p>•Create New Project 创建一个新项目。</p><p>•Import Project 导入一个已有项目。</p><p>•Open 打开一个已有项目。</p><p>•Check out from Version Control 可以通过服务器上的项目地址 Checkout Github 上面项目或是其他 Git 托管服务器上的项目。</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps129.jpg" alt="img"> </p><p>l next</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps130.jpg" alt="img"> </p><p>l 指定名称和位置</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps131.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps132.jpg" alt="img"> </p><p>l 显示工具</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps133.jpg" alt="img"> </p><p>l 界面说明</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps134.jpg" alt="img"> </p><p>Ø 工程下的 src 类似于 Eclipse 下的 src 目录，用于存放代码。</p><p>Ø 工程下的.idea 和 .iml 文件都是 IDEA 工程特有的。类似于 Eclipse 工程下的.settings、.classpath、.project 等。</p><p>ü  .idea 即为 Project 的配置文件目录。</p><p>ü  .iml 即为 Module 的配置文件。</p><p>l 设置项目jdk环境</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps135.jpg" alt="img"> </p><p>l 创建类</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps136.jpg" alt="img"><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps137.jpg" alt="img"> </p><p>l 注意：不管是创建 class，还是 interface，还是 annotation，都是选择 new – java class</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps138.jpg" alt="img"> </p><p>l 编写代码</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps139.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps140.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps141.jpg" alt="img"> </p><p>l 说明：在 IDEA 里写完代码，不用点击保存。</p><p>l 运行代码</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps142.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps143.jpg" alt="img"> </p><p>注意：IntelliJ IDEA 是一个没有 Ctrl + S 的 IDE，所以每次修改完代码你只要管着运行或者调试即可，无需担心保存或者丢失代码。</p><h4 id="（2）添加jar包"><a href="#（2）添加jar包" class="headerlink" title="（2）添加jar包"></a>（2）<strong>添加jar包</strong></h4><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps144.jpg" alt="img"> </p><h3 id="2．创建web工程"><a href="#2．创建web工程" class="headerlink" title="2．创建web工程"></a>2．<strong>创建web工程</strong></h3><p>中间件服务器：tomcat、weblogic、websphere、jettyjboss</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps145.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps146.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps147.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps148.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps149.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps150.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps151.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps152.jpg" alt="img"> </p><p>现在基本的web项目是创建了，但是目录结构还有很多需要修改的。</p><p>l 创建WEB-INF目录</p><p>在web文件夹上右键–&gt;New-&gt;Directory：WEB-INF</p><p>l 没有lib目录和classes目录</p><p>在WEB-INF文件夹上右键–&gt;New-&gt;Directory:创建两个文件夹：classes和lib，结果如下：</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps153.jpg" alt="img"> </p><p>l 没有web.xml问题解决</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps154.jpg" alt="img"> </p><p>编译地址的修改：File–&gt;Project Structure–&gt;Modules–&gt;Paths:选择Use module compile output path：选择classes目录</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps155.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps156.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps157.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps158.jpg" alt="img"> </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.text.DateFormat;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by caowei on 2018/8/10.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MavenDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(request, response);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>      response.getWriter().print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toLocaleString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps159.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps160.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps161.jpg" alt="img"> </p><p>修改配置支持热部署</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps162.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps163.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps164.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps165.jpg" alt="img"> </p><p>访问测试</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps166.jpg" alt="img"> </p><p>或者在创建完web项目后再添加tomcat支持</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps167.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps168.jpg" alt="img"> </p><h2 id="（四）概念说明-了解"><a href="#（四）概念说明-了解" class="headerlink" title="（四）概念说明[了解]"></a>（四）<strong>概念说明[了解]</strong></h2><h3 id="1．图标"><a href="#1．图标" class="headerlink" title="1．图标"></a>1．<strong>图标</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps169.jpg" alt="img"> </p><p>Source root说明：你可以理解为源目录，源码的作用就是用来专门放 Java 类文件，相对于编译出来的 class 文件而言，它就是源。我们一般默认名字叫 src 的目录就是源目录，但是其实并不是这样的，在 IntelliJ IDEA 中，即使叫 srcs 也是可以设置为 Source root ，所以源目录跟目录命名是没有关系的，而是在于 IntelliJ IDEA 支持对任意目录进行设置为 Source root ，作用是标记该目录下的文件是可编译的。</p><h3 id="2．Project和Module"><a href="#2．Project和Module" class="headerlink" title="2．Project和Module"></a>2．<strong>Project和Module</strong></h3><p>l 官网说明</p><p><a href="https://www.jetbrains.com/idea/help/eclipse.html">https://www.jetbrains.com/idea/help/eclipse.html</a></p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps170.jpg" alt="img"> </p><p>IDEA  官网：</p><p>An Eclipse workspace is similar to a project in IntelliJ IDEA</p><p>An Eclipse project maps to a module in IntelliJ IDEA</p><p>翻译 ：</p><p>Eclipse  中 workspace 相当于 IDEA  中的 的 Project</p><p>Eclipse  中 Project 相当于 IDEA  中的 Module</p><p>l 说明</p><p>IntelliJ IDEA 是没有类似 Eclipse 的工作空间的概念（ Workspaces ），最大单元就是 Project 。如果你同时观察多个项目的情况，IntelliJ IDEA 提供的解决方案是打开多个项目实例，你可以理解为开多个项目窗口。</p><p>在 IntelliJ IDEA 中 Project 是最顶级的级别，次级别是 Module。一个 Project可以有多个 Module。</p><p>目前主流的大型项目结构都是类似这种多 Module 结构，这类项目一般是这样划分的，比如：core Module、web Module、plugin Module、solr Module 等等，模块之间彼此可以相互依赖。通过这些 Module 的命名也可以看出，他们之间应该都是处于同一个项目业务情况下的模块，彼此之间是有不可分割的业务关系的。</p><p>所以我们现在总结：一个 Project 是由一个或多个 Module 组成，模块之间尽量是处在同一个项目业务的的情况下，彼此之间互相依赖关联。这里用的是尽量 ，因为 IntelliJ IDEA 的 Project 是一个没有具备任何编码设置、构建等开发功能的，主要起到一个项目定义、范围约束、规范等类型的效果，也许我们可以简单地理解为就是一个单纯的目录，只是这个目录命名上必须有其代表性的意义</p><p>l 但是</p><p>我们可以通过使用Project管理Module的方式，实现类似Eclipse中Workspace的概念，即把 Project当作Eclipse中的Workspace使用，如:</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps171.jpg" alt="img"> </p><p>l 新建空项目作为工作空间</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps172.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps173.jpg" alt="img"> </p><p>新建module作为项目</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps174.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps175.jpg" alt="img"> </p><p>最后可以实现像Eclipse一样的效果</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps176.jpg" alt="img"> </p><p>l 注意：删除模块前需要先移除模块，然后去磁盘目录手动删除即可</p><h2 id="（五）常见设置-应用"><a href="#（五）常见设置-应用" class="headerlink" title="（五）常见设置[应用]"></a>（五）<strong>常见设置[应用]</strong></h2><h3 id="1．显示工具栏图标"><a href="#1．显示工具栏图标" class="headerlink" title="1．显示工具栏图标"></a>1．<strong>显示工具栏图标</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps177.jpg" alt="img"> </p><h3 id="2．查看项目配置-项目源目录、输出以及所依赖的jar"><a href="#2．查看项目配置-项目源目录、输出以及所依赖的jar" class="headerlink" title="2．查看项目配置(项目源目录、输出以及所依赖的jar)"></a>2．<strong>查看项目配置(项目源目录、输出以及所依赖的jar</strong><strong>)</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps178.jpg" alt="img"> </p><p>或者</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps179.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps180.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps181.jpg" alt="img"> </p><h3 id="3．全局默认设置（配置针对整个Idea生效）"><a href="#3．全局默认设置（配置针对整个Idea生效）" class="headerlink" title="3．全局默认设置（配置针对整个Idea生效）"></a>3．<strong>全局默认设置（配置针对整个Idea生效）</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps182.jpg" alt="img"> </p><p>或者</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps183.jpg" alt="img"> </p><h3 id="4．普通设置（针对Project级别，工作空间级别）"><a href="#4．普通设置（针对Project级别，工作空间级别）" class="headerlink" title="4．普通设置（针对Project级别，工作空间级别）"></a>4．<strong>普通设置（针对Project级别，工作空间级别）</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps184.jpg" alt="img"> </p><p>说明</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps185.jpg" alt="img"> </p><p>注意：通过settings进行的普通设置有一些可以全局生效</p><h3 id="5．更改字体大小通过ctrl-鼠标滚轮"><a href="#5．更改字体大小通过ctrl-鼠标滚轮" class="headerlink" title="5．更改字体大小通过ctrl+鼠标滚轮"></a>5．<strong>更改字体大小通过ctrl+鼠标滚轮</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps186.jpg" alt="img"> </p><h3 id="6．代码提示不区分大小写"><a href="#6．代码提示不区分大小写" class="headerlink" title="6．代码提示不区分大小写"></a>6．<strong>代码提示不区分大小写</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps187.jpg" alt="img"> </p><h3 id="7．修改主题"><a href="#7．修改主题" class="headerlink" title="7．修改主题"></a>7．<strong>修改主题</strong></h3><p>l 修改主题</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps188.jpg" alt="img"> </p><h3 id="8．修改字体-了解"><a href="#8．修改字体-了解" class="headerlink" title="8．修改字体(了解)"></a>8．<strong>修改字体(了解)</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps189.jpg" alt="img"> </p><p>修改控制台输出字体</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps190.jpg" alt="img"> </p><h3 id="9．修改控制台字体颜色-了解"><a href="#9．修改控制台字体颜色-了解" class="headerlink" title="9．修改控制台字体颜色(了解)"></a>9．<strong>修改控制台字体颜色(了解)</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps191.jpg" alt="img"> </p><h3 id="10．修改注释的字体颜色-了解"><a href="#10．修改注释的字体颜色-了解" class="headerlink" title="10．修改注释的字体颜色(了解)"></a>10．<strong>修改注释的字体颜色(了解)</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps192.jpg" alt="img"> </p><p>Ø Doc Comment – Text：修改文档注释的字体颜色</p><p>Ø Block comment(块注释)：修改多行注释的字体颜色</p><p>Ø Line comment：修改当行注释的字体颜色</p><h3 id="11．设置文件编码（重要）"><a href="#11．设置文件编码（重要）" class="headerlink" title="11．设置文件编码（重要）"></a>11．<strong>设置文件编码（重要）</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps193.jpg" alt="img"> </p><p>说明：Transparent native-to-ascii conversion 主要用于转换 ascii，一般都要勾选，不然 Properties 文件中的注释显示的都不会是中文</p><h3 id="12．设置鼠标悬浮提示"><a href="#12．设置鼠标悬浮提示" class="headerlink" title="12．设置鼠标悬浮提示"></a>12．<strong>设置鼠标悬浮提示</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps194.jpg" alt="img"> </p><h3 id="13．自动导包-amp-优化导包"><a href="#13．自动导包-amp-优化导包" class="headerlink" title="13．自动导包&amp;优化导包"></a>13．<strong>自动导包&amp;优化导包</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps195.jpg" alt="img"> </p><h3 id="14．设置自动编译"><a href="#14．设置自动编译" class="headerlink" title="14．设置自动编译"></a>14．<strong>设置自动编译</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps196.jpg" alt="img"> </p><p>类似于Eclipse中的自动编译</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps197.jpg" alt="img"> </p><h3 id="15．空格与tab缩进设置"><a href="#15．空格与tab缩进设置" class="headerlink" title="15．空格与tab缩进设置"></a>15．<strong>空格与tab缩进设置</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps198.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps199.jpg" alt="img"> </p><h3 id="16．显示行号和方法分割线"><a href="#16．显示行号和方法分割线" class="headerlink" title="16．显示行号和方法分割线"></a>16．<strong>显示行号和方法分割线</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps200.jpg" alt="img"> </p><h3 id="17．去除单词拼写检查"><a href="#17．去除单词拼写检查" class="headerlink" title="17．去除单词拼写检查"></a>17．<strong>去除单词拼写检查</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps201.jpg" alt="img"> </p><h3 id="18．清理缓存和索引"><a href="#18．清理缓存和索引" class="headerlink" title="18．清理缓存和索引"></a>18．<strong>清理缓存和索引</strong></h3><p>随着项目越来越大，新编写的代码没有立即生效（引用等），此时可以清理缓存和索引</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps202.jpg" alt="img"> </p><p>通过上面方式清除缓存、索引本质也就是去删除 C 盘下的 system 目录下的对应的文件而已，所以如果你不用上述方法也可以删除整个 system 。当 IntelliJ IDEA 再次启动项目的时候会重新创建新的 system 目录以及对应项目缓存和索引。</p><p>如果你遇到了因为索引、缓存坏了以至于项目打不开，那也建议你可以直接删除 system 目录，一般这样都可以很好地解决你的问题。</p><h3 id="19．设置目录折叠"><a href="#19．设置目录折叠" class="headerlink" title="19．设置目录折叠"></a>19．<strong>设置目录折叠</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps203.jpg" alt="img"> </p><h3 id="20．定位到当前文件所在目录"><a href="#20．定位到当前文件所在目录" class="headerlink" title="20．定位到当前文件所在目录"></a>20．<strong>定位到当前文件所在目录</strong><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps204.jpg" alt="img"></h3><h3 id="21．配置文件的生成模板"><a href="#21．配置文件的生成模板" class="headerlink" title="21．配置文件的生成模板"></a>21．<strong>配置文件的生成模板</strong></h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> $&#123;USER&#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> </span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps205.jpg" alt="img"> </p><h3 id="22．Debug"><a href="#22．Debug" class="headerlink" title="22．Debug"></a>22．<strong>Debug</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps206.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps207.jpg" alt="img"> </p><h3 id="23．省电模式"><a href="#23．省电模式" class="headerlink" title="23．省电模式"></a>23．<strong>省电模式</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps208.png" alt="img">如上图标注 1 所示，IntelliJ IDEA 有一种叫做 省电模式 的状态，开启这种模式之后 IntelliJ IDEA 会关掉代码检查和代码提示等功能。所以一般我也会认为这是一种 阅读模式</p><p>如果你在开发过程中遇到突然代码文件不能进行检查和提示可以来看看这里是否有开启该功能。 </p><h3 id="24．显示内存占用"><a href="#24．显示内存占用" class="headerlink" title="24．显示内存占用"></a>24．<strong>显示内存占用</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps209.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps210.jpg" alt="img"> </p><h3 id="25．设置水平或者垂直分屏编辑"><a href="#25．设置水平或者垂直分屏编辑" class="headerlink" title="25．设置水平或者垂直分屏编辑"></a>25．<strong>设置水平或者垂直分屏编辑</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps211.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps212.jpg" alt="img"> </p><h3 id="26．设置启动idea或打开项目时提示"><a href="#26．设置启动idea或打开项目时提示" class="headerlink" title="26．设置启动idea或打开项目时提示"></a>26．<strong>设置启动idea或打开项目时提示</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps213.jpg" alt="img"> </p><h3 id="27．设置代码环绕"><a href="#27．设置代码环绕" class="headerlink" title="27．设置代码环绕"></a>27．<strong>设置代码环绕</strong></h3><p>Ctrl + Alt + T </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps214.jpg" alt="img"> </p><h3 id="28．取消更新"><a href="#28．取消更新" class="headerlink" title="28．取消更新"></a>28．<strong>取消更新</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps215.jpg" alt="img"> </p><h3 id="29．查看本地文件编辑历史"><a href="#29．查看本地文件编辑历史" class="headerlink" title="29．查看本地文件编辑历史"></a>29．<strong>查看本地文件编辑历史</strong></h3><p>类似ctrl+z功能的升级</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps216.jpg" alt="img"> </p><h3 id="30．生成-javadoc"><a href="#30．生成-javadoc" class="headerlink" title="30．生成 javadoc"></a>30．<strong>生成 javadoc</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps217.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps218.jpg" alt="img"> </p><p>zh_CN</p><p>-encoding UTF-8 -charset UTF-8</p><h3 id="31．自定义代码模版"><a href="#31．自定义代码模版" class="headerlink" title="31．自定义代码模版"></a>31．<strong>自定义代码模版</strong></h3><p>l 关于模板(Templates)</p><p>代码模板的原理就是配置一些常用代码字母缩写，在输入简写时可以出现你预定义的固定模式的代码，使得开发效率大大提高，同时也可以增加个性化。</p><p>最简单的例子就是在 Java 中输入 sout 会出现 System.out.println();</p><p>l Idea中代码模板有两类Live Templates和Postfix Completion</p><p>二者的区别：Live Templates 可以自定义，而 Postfix Completion 不可以。同时，有些操作二者都提供了模板，Postfix Templates 较 Live Templates 能快 0.01 秒</p><p>l 官方介绍 Live Templates：</p><p><a href="https://www.jetbrains.com/help/idea/using-live-templates.html">https://www.jetbrains.com/help/idea/using-live-templates.html</a></p><p>l Postfix Completion</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps219.jpg" alt="img"> </p><p>Live Templates</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps220.jpg" alt="img"> </p><p>Itli遍历集合&#x2F;itar遍历数组（使用较多）</p><p>二者的区别：有些操作二者都提供了模板，Postfix Templates 较 Live Templates 能快 0.01 秒</p><p>举例 ：</p><p>l psvm :  可生成 main  方法 </p><p>l sout : System.out.println()  快捷输出</p><p>类似的：</p><p>soutp&#x3D;System.out.println(“方法形参名 &#x3D; “ + 形参名);</p><p>soutv&#x3D;System.out.println(“变量名 &#x3D; “ + 变量);</p><p>soutm&#x3D;System.out.println(“当前类名.当前方法”);</p><p>“abc”.sout &#x3D;&gt; System.out.println(“abc”);</p><p>l fori :  可生成 for  循环</p><p>类似的：</p><p>iter：可生成增强 for 循环</p><p>itar：可生成普通 for 循环</p><p>l list.for :  可生成集合 list 的 的 for  循环</p><p>List<String> list &#x3D; new ArrayList<String>();</p><p>输入: list.for 即可输出</p><p>for(String s:list){</p><p>}</p><p>又如：list.fori 或 list.forr</p><p>l ifn ：可生成 if(xxx &#x3D; null)</p><p>类似的：</p><p>inn：可生成 if(xxx !&#x3D; null) 或 xxx.nn 或 xxx.null</p><p>l prsf ：可生成 private static final</p><p>类似的：</p><p>psf：可生成 public static final</p><p>psfi：可生成 public static final int</p><p>psfs：可生成 public static final String</p><p>经常使用的如下：</p><p> <img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/1576482299207.png" alt="1576482299207"></p><p>l 修改现有模板 修改现有模板:Live Templates</p><p>如果对于现有的模板，感觉不习惯、不适应的，可以修改：</p><p>修改 1 ：</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps222.jpg" alt="img"> </p><p>通过调用 psvm 调用 main 方法不习惯，可以改为跟 Eclipse 一样，使用 main 调取。</p><p>修改 2 ：</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps223.jpg" alt="img"> </p><p>类似的还可以修改 psfs。</p><p>l 自定义模板 自定义模板</p><p>IDEA 提供了很多现成的 Templates。但你也可以根据自己的需要创建新的Template。</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps224.jpg" alt="img"> </p><p>先定义一个模板的组：</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps225.jpg" alt="img"> </p><p>选中自定义的模板组，点击”+”来定义模板。</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps226.jpg" alt="img"> </p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps227.jpg" alt="img"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> test$VAR1$()&#123;<br>       $END$ <br>&#125;<br></code></pre></td></tr></table></figure><p>\1. Abbreviatio：模板的缩略名称</p><p>\2. Description：模板的描述</p><p>\3. Template text：模板的代码片段</p><p>\4. 应用范围：比如点击 Define，然后在 java 类文件中应用即可</p><p>类似的可以再配置自己喜欢的Template:</p><h3 id="32-单行注释前加空格"><a href="#32-单行注释前加空格" class="headerlink" title="32. 单行注释前加空格"></a>32. <strong>单行注释前加空格</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220925163305577.png" alt="单行注释默认缩进配置"></p><p>操作如下：</p><p>Settings-&gt;Editor-&gt;Code Style-&gt;Java-&gt;Code Generate</p><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220925163433968.png" alt="单行注释前加空格配置"></p><h2 id="（六）IDEA快捷键-应用"><a href="#（六）IDEA快捷键-应用" class="headerlink" title="（六）IDEA快捷键[应用]"></a>（六）<strong>IDEA快捷键[应用]</strong></h2><h3 id="1．Idea原生快捷键"><a href="#1．Idea原生快捷键" class="headerlink" title="1．Idea原生快捷键"></a>1．<strong>Idea原生快捷键</strong></h3><table><thead><tr><th><strong>快捷键</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td>Alt + Enter</td><td>根据光标处所在的问题，提供快速修复选择，光标放在的位置不同提示的结果也不同（万能修复快捷键，同时可以帮助我们生成本地变量&#x3D;&#x3D;eclipse中的ctrl+1）注意：非个人编码问题导致的错误，都可以尝试使用该快捷键修复</td></tr><tr><td>Alt + Insert</td><td>代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等</td></tr><tr><td>Shift + Shift</td><td>查找所有文件</td></tr><tr><td>Ctrl + D</td><td>复制当前行到下一行</td></tr><tr><td>Ctrl + Y</td><td>删除当前行</td></tr><tr><td>Alt + 左方向键</td><td>向左切换tab</td></tr><tr><td>Alt + 右方向键</td><td>向右切换tab</td></tr><tr><td>Ctrl + Alt + 左方向键</td><td>快速返回上次查看代码的位置（Back）</td></tr><tr><td>Ctrl + Alt + 右方向键</td><td>快速返回上次查看代码的位置（Forward）</td></tr><tr><td>Ctrl + F</td><td>在当前文件进行文本查找</td></tr><tr><td>Ctrl + Shift + F</td><td>在当前项目进行文本查找</td></tr><tr><td>Ctrl + R</td><td>在当前文件进行文本替换</td></tr><tr><td>Ctrl + Shift + R</td><td>在当前项目进行文本替换</td></tr><tr><td>Ctrl + &#x2F;</td><td>注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</td></tr><tr><td>Ctrl + Shift + &#x2F;</td><td>代码块注释</td></tr><tr><td>Ctrl + Alt + L</td><td>格式化代码，可以对当前文件和整个包目录使用</td></tr><tr><td>Alt + 7</td><td>显示当前类中的所有方法、全局常量，方法还包括形参和返回值</td></tr><tr><td>Alt + F7</td><td>可以查看一个Java类、方法或变量的直接使用情况。</td></tr><tr><td>ctrl + alt +b</td><td>查看接口的实现类</td></tr><tr><td>ctrl + h</td><td>查看类或接口的继承关系</td></tr><tr><td>F7</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，Step Into</td></tr><tr><td>F8</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内，Step Over</td></tr><tr><td>F9</td><td>在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上，Resume</td></tr></tbody></table><h3 id="2．设置eclipse风格快捷键"><a href="#2．设置eclipse风格快捷键" class="headerlink" title="2．设置eclipse风格快捷键"></a>2．<strong>设置eclipse风格快捷键</strong></h3><p><img src="/2022/09/24/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/wps228.jpg" alt="img"> </p><p>常用快捷键：</p><table><thead><tr><th>提示补全</th><th>Alt + &#x2F;</th></tr></thead><tbody><tr><td>单行注释</td><td>ctrl + &#x2F;</td></tr><tr><td>多行注释</td><td>ctrl + shift + &#x2F;</td></tr><tr><td>向下复制一行</td><td>Ctrl + alt + down</td></tr><tr><td>删除一行或选中行</td><td>Ctrl + d</td></tr><tr><td>向下移动行</td><td>Alt + down</td></tr><tr><td>向上移动行</td><td>Alt + up</td></tr><tr><td>万能纠错&#x2F;生成返回值变量</td><td>Alt + enter（依然可用）</td></tr><tr><td>退回到前一个编辑的页面 (back)</td><td>Alt + left</td></tr><tr><td>进入到下一个编辑的页面(针对于上条) (forward)</td><td>Alt + right</td></tr><tr><td>查看继承关系(type hierarchy)</td><td>F4</td></tr><tr><td>格式化代码</td><td>ctrl+shift+F</td></tr><tr><td>选中数行，整体往后移动</td><td>tab</td></tr><tr><td>选中数行，整体往前移动</td><td>shift + tab</td></tr><tr><td>查看类的结构：类似于eclipse 的outline</td><td>ctrl+o</td></tr><tr><td>修改变量名与方法名</td><td>Alt + shift + r</td></tr><tr><td>大写转小写&#x2F; 小写转大写</td><td>Ctrl + shift + y&#x2F;x</td></tr><tr><td>生成构造器&#x2F;get&#x2F;set&#x2F;toString</td><td>Alt + insert（依然可用）</td></tr><tr><td>Shift+shift</td><td>万能搜索（依然可用）</td></tr><tr><td>查找&#x2F;替换(当前)</td><td>Ctrl + f</td></tr><tr><td>查找(全局)</td><td>Ctrl + h</td></tr><tr><td>查看类的继承结构图</td><td>Ctrl + ALT+ u</td></tr><tr><td>打开最近改的文件</td><td>Ctrl + E</td></tr><tr><td>查找方法在哪里被调用</td><td>Ctrl + G</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作--上传视频或图片时添加阴影(jsp)</title>
    <link href="/2022/09/20/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E6%88%96%E5%9B%BE%E7%89%87%E6%97%B6%E6%B7%BB%E5%8A%A0%E9%98%B4%E5%BD%B1(jsp)/"/>
    <url>/2022/09/20/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E6%88%96%E5%9B%BE%E7%89%87%E6%97%B6%E6%B7%BB%E5%8A%A0%E9%98%B4%E5%BD%B1(jsp)/</url>
    
    <content type="html"><![CDATA[<h2 id="工作–上传视频或图片时添加阴影-jsp"><a href="#工作–上传视频或图片时添加阴影-jsp" class="headerlink" title="工作–上传视频或图片时添加阴影(jsp)"></a>工作–上传视频或图片时添加阴影(jsp)</h2><h3 id="【1】添加样式style"><a href="#【1】添加样式style" class="headerlink" title="【1】添加样式style"></a>【1】添加样式style</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;style type=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br>    #all_light &#123;<br>    <span class="hljs-attr">opacity</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attr">filter</span>:<span class="hljs-title class_">Alpha</span>(opacity=<span class="hljs-number">0</span>);<span class="hljs-attr">width</span>:<span class="hljs-number">100</span>%;<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>%;<br>    <span class="hljs-attr">background</span>: #<span class="hljs-number">000</span>;<span class="hljs-attr">position</span>: absolute;<span class="hljs-attr">top</span>: O;<br>    <span class="hljs-attr">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attr">display</span>: none;z-<span class="hljs-attr">index</span>: <span class="hljs-number">1</span>;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="【2】添加图层div"><a href="#【2】添加图层div" class="headerlink" title="【2】添加图层div"></a>【2】添加图层div</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;&quot;</span>all_light<span class="hljs-string">&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br></code></pre></td></tr></table></figure><h3 id="【3】上传前开启，上传完成后关闭"><a href="#【3】上传前开启，上传完成后关闭" class="headerlink" title="【3】上传前开启，上传完成后关闭"></a>【3】上传前开启，上传完成后关闭</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>( <span class="hljs-string">&#x27;all_light&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;block&quot;</span>;<span class="hljs-comment">//上传时-其他按钮不可点击$.ajaxFileupload(&#123;</span><br><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;&lt;%=request.getContextPath()%&gt;/XXX,</span><br><span class="hljs-string">    secureuri: false,</span><br><span class="hljs-string">fileElementId:$(&quot;</span>input#<span class="hljs-string">&quot;+objName).attr(&quot;</span>id<span class="hljs-string">&quot;)，</span><br><span class="hljs-string">    dataType: &quot;</span>text<span class="hljs-string">&quot;,//返回值类型―般设置为json</span><br><span class="hljs-string">success: function (data,status)&#123;//服务器成功响应处理函数</span><br><span class="hljs-string">document.getElementById(&#x27;all_light&quot;</span> ).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;none&quot;</span>;<span class="hljs-comment">//上传完成后-去掉限制var</span><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;上传成功!&quot;</span>);<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>代码还不完善；</p>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jsp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作--数据库基础操作(oracle)</title>
    <link href="/2022/09/20/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C(oracle)/"/>
    <url>/2022/09/20/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C(oracle)/</url>
    
    <content type="html"><![CDATA[<h2 id="工作–数据库基础操作-oracle"><a href="#工作–数据库基础操作-oracle" class="headerlink" title="工作–数据库基础操作(oracle)"></a>工作–数据库基础操作(oracle)</h2><h3 id="【1】案例"><a href="#【1】案例" class="headerlink" title="【1】案例"></a>【1】案例</h3><p>项目中按照下面格式创建枚举类</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--添加字段</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tableA <span class="hljs-keyword">add</span>(code_a varchar2(<span class="hljs-number">100</span>),code_b varchar2(<span class="hljs-number">100</span>);<br>comment <span class="hljs-keyword">on</span> <span class="hljs-keyword">column</span> tableA.code_a <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;代码A&#x27;</span>;<br>comment <span class="hljs-keyword">on</span> <span class="hljs-keyword">column</span> tableA.code_b <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;代码B&#x27;</span>;<br>                                             <br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tableA <span class="hljs-keyword">add</span> code_a varchar2(<span class="hljs-number">100</span>);<br>comment <span class="hljs-keyword">on</span> <span class="hljs-keyword">column</span> tableA.code_a <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;代码A&#x27;</span>;<br><span class="hljs-comment">--删除字段</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tableA <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> code_a;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> tableA MODIFY code_c <span class="hljs-keyword">not</span> <span class="hljs-keyword">NULL</span> <span class="hljs-comment">--不为空 </span><br>                   <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-comment">--默认值</span><br><span class="hljs-comment">-- 删除表</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> tableA<br><span class="hljs-comment">--删除序列</span><br><span class="hljs-keyword">drop</span> sequence<br><span class="hljs-comment">--删除表中的所有数据</span><br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> tableA<br><span class="hljs-comment">--修改字段类型</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tableA modify (code_a varchar2(<span class="hljs-number">200</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作--给配置文件加密(springboot)</title>
    <link href="/2022/09/20/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E7%BB%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86(springboot)/"/>
    <url>/2022/09/20/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E7%BB%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86(springboot)/</url>
    
    <content type="html"><![CDATA[<h2 id="工作–给配置文件加密-springboot"><a href="#工作–给配置文件加密-springboot" class="headerlink" title="工作–给配置文件加密(springboot)"></a>工作–给配置文件加密(springboot)</h2><h3 id="【1】引入依赖"><a href="#【1】引入依赖" class="headerlink" title="【1】引入依赖"></a>【1】引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jasypt--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jasypt-spring-boot-starter&lt;/ artifactId&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="【2】在配置文件中添加配置"><a href="#【2】在配置文件中添加配置" class="headerlink" title="【2】在配置文件中添加配置"></a>【2】在配置文件中添加配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#jasupt加密的密匙(写到启动参数里面)</span><br><span class="hljs-attr">jasypt:</span><br><span class="hljs-attr">encryptor:</span><br><span class="hljs-attr">password :</span> <span class="hljs-string">$&#123;salt&#125;</span><br><span class="hljs-attr">algorithm:</span> <span class="hljs-string">PBEWithMD5AndDES</span><br></code></pre></td></tr></table></figure><h3 id="【3】配置启动参数salt"><a href="#【3】配置启动参数salt" class="headerlink" title="【3】配置启动参数salt"></a>【3】配置启动参数salt</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">salt=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p><img src="/2022/09/20/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E7%BB%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86(springboot)/image-20220920003325853.png" alt="image-20220920003325853"></p><h3 id="【4】对配置文件进行加密"><a href="#【4】对配置文件进行加密" class="headerlink" title="【4】对配置文件进行加密"></a>【4】对配置文件进行加密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@value(&quot;$&#123;jasypt.encryptor.algorithm&#125;&quot;)</span><br><span class="hljs-type">private</span> <span class="hljs-variable">stringALGORITHM_INFO</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">string</span>();<br><span class="hljs-meta">@Value(&quot;$&#123;jasypt.encryptor.password&#125;&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">string</span> <span class="hljs-variable">PASSWORD_INFO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*<span class="hljs-doctag">@Description</span>:对配置文件加密</span><br><span class="hljs-comment">*<span class="hljs-doctag">@param</span>:encryptionstr加密字符串</span><br><span class="hljs-comment">*<span class="hljs-doctag">@myPassword</span>自定义salt值</span><br><span class="hljs-comment">*<span class="hljs-doctag">@return</span>:&#123;<span class="hljs-doctag">@Link</span> String&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">profileEncryption</span><span class="hljs-params">(String encryptionStr ,String myPassword)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-keyword">if</span>(stringUtils.isEmpty(encryptionstr))&#123;<br>      <span class="hljs-keyword">return</span><span class="hljs-string">&quot;加密字符串不能为空&quot;</span>;<br>&#125;<br>encryptionstr = Stringutils.trim(encryptionstr);<br><span class="hljs-type">StandardPBEStringEncryptor</span> <span class="hljs-variable">standardPBEStringEncryptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandandPBEStringEncryptor</span>();<span class="hljs-comment">//配置文件中配置如下的算法</span><br>standardPBEStringEncryptor.setAlgorithm(ALGORITHM_INFO);<span class="hljs-comment">//配置文件中配置的password(如果参数中有传入password ,走传入的)</span><br>    <span class="hljs-keyword">if</span>(StringUtils.isNotEmpty(myPassword))&#123;<br>standardPBEStringEncryptor.setPassword(myPassword);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>standardPBEStringEncryptor.setPassword(PASSWORD_INFO);<br>&#125;<br><span class="hljs-comment">//要加密的文本</span><br>StringencryptionAfterStr = standardPBEStringEncryptor.encrypt(encryptionStr);<br><span class="hljs-keyword">return</span> encryptionAfterStr;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*<span class="hljs-doctag">@Description</span>:对配置文件解密</span><br><span class="hljs-comment">*<span class="hljs-doctag">@param</span> :decruptionstr 解密字符串</span><br><span class="hljs-comment">*<span class="hljs-doctag">@param</span>:myPassword自定义salt值</span><br><span class="hljs-comment">*<span class="hljs-doctag">@return</span>:&#123;aLink String&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@override</span><br><span class="hljs-keyword">public</span> string <span class="hljs-title function_">profileDecnyption</span><span class="hljs-params">(String decryptionStr , String myPasswond)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span>(stringUtils.isEmpty (decryptionstr))&#123;<br><span class="hljs-keyword">return</span><span class="hljs-string">&quot;解密字符串不能为空&quot;</span>;<br>    &#125;<br>decryptionstr = stringUtils.trim(decryptionstr);<br><span class="hljs-type">StandardPBEStringEncryptor</span> <span class="hljs-variable">standardPBEStringEncryptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardPBEStringEncryptor</span>();<span class="hljs-comment">//配置文件中配置如下的算法</span><br>standardPBEStringEncryptor.setAlgorithm(ALGORITHM_INFO);<span class="hljs-comment">//配置文件中配置的password(如果参数中有传入password ,走传入的)</span><br>    <span class="hljs-keyword">if</span>(Stringutils.isNotEmpty(myPassword))&#123;<br>standardPBEStringEncryptor.setPassword(myPassword);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>standardPBEStringEncryptor.setPassword(PASSWORD_INFO);<br>&#125;<br><span class="hljs-comment">//要解密的文本</span><br><span class="hljs-type">string</span> <span class="hljs-variable">decryptionAfterStr</span> <span class="hljs-operator">=</span> standandPBEStringEncryptor.decrypt(decryptionStr);<br>    <span class="hljs-keyword">return</span> decryptionAfterstr;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作--尽可能的使用枚举(enum)</title>
    <link href="/2022/09/14/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E5%B0%BD%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9E%9A%E4%B8%BE(enum)/"/>
    <url>/2022/09/14/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E5%B0%BD%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9E%9A%E4%B8%BE(enum)/</url>
    
    <content type="html"><![CDATA[<h2 id="工作–尽可能的使用枚举-enum"><a href="#工作–尽可能的使用枚举-enum" class="headerlink" title="工作–尽可能的使用枚举(enum)"></a>工作–尽可能的使用枚举(enum)</h2><h3 id="【1】案例"><a href="#【1】案例" class="headerlink" title="【1】案例"></a>【1】案例</h3><p>项目中按照下面格式创建枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liu;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UnityEnum</span> &#123;<br><br>    MONDAY(<span class="hljs-string">&quot;monday&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;星期一&quot;</span>),<br>    TUESDAY(<span class="hljs-string">&quot;tuesday&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;星期二&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String value;<br>    <span class="hljs-keyword">private</span> String dsc;<br><br>    <span class="hljs-comment">// 构造方法</span><br>    UnityEnum(String name, String value, String dsc) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.dsc = dsc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDsc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dsc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(UnityEnum.MONDAY.getValue());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>enum</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作--需求对应网址</title>
    <link href="/2022/09/13/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E9%9C%80%E6%B1%82%E5%AF%B9%E5%BA%94%E7%BD%91%E5%9D%80/"/>
    <url>/2022/09/13/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E9%9C%80%E6%B1%82%E5%AF%B9%E5%BA%94%E7%BD%91%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h3 id="工作–需求对应网址"><a href="#工作–需求对应网址" class="headerlink" title="工作–需求对应网址"></a>工作–需求对应网址</h3><p>【1】springBoot配置文件加密解密</p><p>【2】swagger升级为knife4j</p><p>整合Knife4j生成文档后端接口文档出现404无法找到doc.html【CSDN中搜索】</p><p>开发者知识库：<a href="https://www.itdaan.com/">https://www.itdaan.com/</a></p><p>总结：在CDSN官网或开发者知识库中搜索，找点赞比较多的</p><p>​感觉不错的话就点赞并收藏；</p>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网址</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea--main方法运行带参数</title>
    <link href="/2022/09/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--main%E6%96%B9%E6%B3%95%E8%BF%90%E8%A1%8C%E5%B8%A6%E5%8F%82%E6%95%B0/"/>
    <url>/2022/09/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--main%E6%96%B9%E6%B3%95%E8%BF%90%E8%A1%8C%E5%B8%A6%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="idea–main方法运行带参数"><a href="#idea–main方法运行带参数" class="headerlink" title="idea–main方法运行带参数"></a>idea–main方法运行带参数</h2><p><img src="/2022/09/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--main%E6%96%B9%E6%B3%95%E8%BF%90%E8%A1%8C%E5%B8%A6%E5%8F%82%E6%95%B0/image-20210726111227262.png" alt="image-20210726111227262"></p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea--破解</title>
    <link href="/2022/09/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E7%A0%B4%E8%A7%A3/"/>
    <url>/2022/09/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E7%A0%B4%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="idea–破解"><a href="#idea–破解" class="headerlink" title="idea–破解"></a>idea–破解</h2><h3 id="【1】破解文档"><a href="#【1】破解文档" class="headerlink" title="【1】破解文档"></a>【1】破解文档</h3><p><a href="idea--%E7%A0%B4%E8%A7%A3.pdf" title="idea--破解.pdf">idea–破解.pdf</a></p><p><a href="jetbrains-agent.jar" title="jetbrains-agent.jar">jetbrains-agent.jar</a></p><h3 id="【2】使用idea注册码"><a href="#【2】使用idea注册码" class="headerlink" title="【2】使用idea注册码"></a>【2】使用idea注册码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">3AGXEJXFK9-eyJsaWNlbnNlSWQiOiIzQUdYRUpYRks5IiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly96aGlsZS5pbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkFDIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJQUyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJETSIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSUzAiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUkMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUkQiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUEMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUk0iLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9XSwiaGFzaCI6IjEyNzk2ODc3LzAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-WGTHs6XpDhr+uumvbwQPOdlxWnQwgnGaL4eRnlpGKApEEkJyYvNEuPWBSrQkPmVpim/8Sab6HV04Dw3IzkJT0yTc29sPEXBf69+7y6Jv718FaJu4MWfsAk/ZGtNIUOczUQ0iGKKnSSsfQ/3UoMv0q/yJcfvj+me5Zd/gfaisCCMUaGjB/lWIPpEPzblDtVJbRexB1MALrLCEoDv3ujcPAZ7xWb54DiZwjYhQvQ+CvpNNF2jeTku7lbm5v+BoDsdeRq7YBt9ANLUKPr2DahcaZ4gctpHZXhG96IyKx232jYq9jQrFDbQMtVr3E+GsCekMEWSD<span class="hljs-comment">//dLT+HuZdc1sAIYrw==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/40BjpMUrDRCeKuiBahC0DCoU/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==</span><br></code></pre></td></tr></table></figure><hr><h3 id="【3】使用jar包【可不看】"><a href="#【3】使用jar包【可不看】" class="headerlink" title="【3】使用jar包【可不看】"></a>【3】使用jar包【可不看】</h3><p>破解jar包下载地址和配制文件路径:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">链接：https:<span class="hljs-comment">//pan.baidu.com/s/1p14pKiz-9dqaW6XcIxhCbA </span><br>提取码：jxd9 <br><br>路径:<br>mac: -javaagent:/Applications/IntelliJ IDEA.app/Contents/bin/jetbrains-agent.jar<br>windows: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA <span class="hljs-number">2019.3</span>\bin\jetbrains-agent.jar<br></code></pre></td></tr></table></figure><p>【百度网盘中存在jdk8下载、jdk11下载、typora下载、mysql下载、navicat下载、xmind8下载、idea2019下载等版本、apache-tomcat下载</p><p>、apache-maven下载】</p><p><a href="jetbrains-agent.jar" title="jetbrains-agent.jar">jetbrains-agent.jar</a></p><p><a href="idea--%E7%A0%B4%E8%A7%A3.pdf" title="idea--破解.pdf">idea–破解.pdf</a></p><hr><p>【4】idea使用文档</p><p><a href="https://gitee.com/lagoudeujava/java#https://gitee.com/lagouedu/Basic-document/blob/master/document/IDEA.md">https://gitee.com/lagoudeujava/java#https://gitee.com/lagouedu/Basic-document/blob/master/document/IDEA.md</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>检索--百度搜索</title>
    <link href="/2022/09/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%A3%80%E7%B4%A2--%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2/"/>
    <url>/2022/09/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%A3%80%E7%B4%A2--%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="检索–百度搜索"><a href="#检索–百度搜索" class="headerlink" title="检索–百度搜索"></a>检索–百度搜索</h2><p><a href="https://www.bilibili.com/video/BV1hg4y1z7T4?spm_id_from=333.337.search-card.all.click&vd_source=bfdf3d46d70f9d3dcac5284d92ebc1a0">https://www.bilibili.com/video/BV1hg4y1z7T4?spm_id_from=333.337.search-card.all.click&amp;vd_source=bfdf3d46d70f9d3dcac5284d92ebc1a0</a></p><h3 id="1某个指定网站内的结果"><a href="#1某个指定网站内的结果" class="headerlink" title="1某个指定网站内的结果"></a>1某个指定网站内的结果</h3><p> 关键词 site:指定网址（注意关键词为空   格，以下类推）<br> 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;java枚举&quot;</span> site:zhihu.com<br></code></pre></td></tr></table></figure><h3 id="2搜索指定文件类型"><a href="#2搜索指定文件类型" class="headerlink" title="2搜索指定文件类型"></a>2搜索指定文件类型</h3><p> 关键词 filetype:文件格式<br> 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;java面试&quot;</span> filetype:pdf<br></code></pre></td></tr></table></figure><h3 id="3指定标题的内容"><a href="#3指定标题的内容" class="headerlink" title="3指定标题的内容"></a>3指定标题的内容</h3><p>  intitle:关键词<br> 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">intitle:java面试<br></code></pre></td></tr></table></figure><h3 id="4排除某个关键词"><a href="#4排除某个关键词" class="headerlink" title="4排除某个关键词"></a>4排除某个关键词</h3><p> 关键词 -想要排除的关键词<br> 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">足球 -中国足球（横杠为减号）<br></code></pre></td></tr></table></figure><h3 id="5同时包含多个关键词"><a href="#5同时包含多个关键词" class="headerlink" title="5同时包含多个关键词"></a>5同时包含多个关键词</h3><p> 关键词1 +关键词2<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">苹果 +华为<br></code></pre></td></tr></table></figure><h3 id="6完整关键词搜索"><a href="#6完整关键词搜索" class="headerlink" title="6完整关键词搜索"></a>6完整关键词搜索</h3><p>《完整关键词》（书名号包裹）<br> 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">《USB接口》<br></code></pre></td></tr></table></figure><h3 id="7高级搜索（懒人福音）"><a href="#7高级搜索（懒人福音）" class="headerlink" title="7高级搜索（懒人福音）"></a>7高级搜索（懒人福音）</h3><p> 点击百度右上角的设置，在下拉菜单中选择高级搜索，在高级搜索的下拉面板里，可以实现以上的所有功能，还可以选择搜索结果的时间范围</p><h3 id="8去广告【常用】"><a href="#8去广告【常用】" class="headerlink" title="8去广告【常用】"></a>8去广告【常用】</h3><p>使用双引号；例如：”java”</p>]]></content>
    
    
    <categories>
      
      <category>www</category>
      
    </categories>
    
    
    <tags>
      
      <tag>检索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql--本地安装教程(5.7)</title>
    <link href="/2022/09/05/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql--%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B(5.7)/"/>
    <url>/2022/09/05/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql--%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B(5.7)/</url>
    
    <content type="html"><![CDATA[<h2 id="mysql–本地安装教程-5-7"><a href="#mysql–本地安装教程-5-7" class="headerlink" title="mysql–本地安装教程(5.7)"></a>mysql–本地安装教程(5.7)</h2><p><a href="MySql_%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3.pdf" title="MySql_安装文档.pdf">MySql_安装文档.pdf</a></p><p><a href="Mysql_%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.pdf" title="Mysql_环境变量配置.pdf">Mysql_环境变量配置.pdf</a></p><p><a href="MySql_%E5%8D%B8%E8%BD%BD%E6%96%87%E6%A1%A3.pdf" title="MySql_卸载文档.pdf">MySql_卸载文档.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oracle--存储过程的创建及调用</title>
    <link href="/2022/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/oracle--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8/"/>
    <url>/2022/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/oracle--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="基于oracle数据库存储过程的创建及调用"><a href="#基于oracle数据库存储过程的创建及调用" class="headerlink" title="基于oracle数据库存储过程的创建及调用"></a>基于oracle数据库存储过程的创建及调用</h1><p>视频地址：<a href="https://www.bilibili.com/video/BV1Bb411E74d?p=1&vd_source=bfdf3d46d70f9d3dcac5284d92ebc1a0">https://www.bilibili.com/video/BV1Bb411E74d?p=1&amp;vd_source=bfdf3d46d70f9d3dcac5284d92ebc1a0</a></p><p>教学大纲：</p><ol><li>PLSQL编程：Hello World、程序结构、变量、流程控制、游标.</li><li>存储过程：概念、无参存储、有参存储（输入、输出）.</li><li>JAVA调用存储存储过程.</li></ol><h1 id="1-PLSQL编程"><a href="#1-PLSQL编程" class="headerlink" title="1.  PLSQL编程"></a>1.  PLSQL编程</h1><h2 id="1-1-概念和目的"><a href="#1-1-概念和目的" class="headerlink" title="1.1.  概念和目的"></a>1.1.  概念和目的</h2><p>什么是PL&#x2F;SQL?</p><ol><li>PL&#x2F;SQL（Procedure Language&#x2F;SQL）</li><li>PLSQL是Oracle对sql语言的过程化扩展  (类似于Basic)</li><li>指在SQL命令语言中增加了过程处理语句（如分支、循环等），使SQL语言具有过程处理能力。</li></ol><h2 id="1-2-程序结构"><a href="#1-2-程序结构" class="headerlink" title="1.2.  程序结构"></a>1.2.  程序结构</h2><p>通过Plsql Developer工具的Test Window 创建 程序模版或者通过语句在SQL Window编写</p><p>提示：PLSQL语言的大小写是不区分的</p><p>PL&#x2F;SQL可以分为三个部分：声明部分、可执行部分、异常处理部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plsql">-- Created on 2018/3/21 by ADMINISTRATOR <br>DECLARE<br>  -- 声明变量、游标。<br>  I INTEGER;<br>BEGIN<br>  -- 执行语句<br><br>  --[异常处理]<br><br>END;<br></code></pre></td></tr></table></figure><p>其中 DECLARE部分用来声明变量或游标（结果集类型变量），如果程序中无变量声明可以省略掉</p><h2 id="1-3-Hello-World"><a href="#1-3-Hello-World" class="headerlink" title="1.3.  Hello World"></a>1.3.  Hello World</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plsql">BEGIN<br><br>  --打印hello world<br><br>  DBMS_OUTPUT.PUT_LINE(&#x27;hello world&#x27;);<br><br>END;<br></code></pre></td></tr></table></figure><p>其中DBMS_OUTPUT 为oracle内置程序包，相当于Java中的System.out,而PUT_LINE（）是调用的方法,相当于println（）方法</p><p> 在sqlplus中也可以编写运行PLSQL程序：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">SQL&gt; <span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-number">2</span><br>  <span class="hljs-number">3</span>    <span class="hljs-literal">--</span>打印hello world<br>  <span class="hljs-number">4</span><br>  <span class="hljs-number">5</span>    DBMS_OUTPUT.PUT_LINE(<span class="hljs-string">&#x27;hello world&#x27;</span>);<br>  <span class="hljs-number">6</span><br>  <span class="hljs-number">7</span>  <span class="hljs-keyword">END</span>;<br>  <span class="hljs-number">8</span>  /<br><br>PL/SQL 过程已成功完成。<br></code></pre></td></tr></table></figure><p>执行结束后并未显示输出的结果，默认情况下，输出选项是关闭状态的 我们需要开启一下 <strong>set serveroutput on</strong></p><p><img src="/2022/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/oracle--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8/Image4.png"></p><p>SQLPLUS中执行PLSQL程序 需要在程序最后添加一个  <strong>&#x2F;</strong>  标识程序的结束</p><h2 id="1-4-变量"><a href="#1-4-变量" class="headerlink" title="1.4.  变量"></a>1.4.  变量</h2><p>PLSQL编程中常见的变量分两大类：</p><ol><li><p>普通数据类型（char,varchar2, date, number, boolean, long）</p></li><li><p>特殊变量类型（引用型变量、记录型变量）</p></li></ol><p>声明变量的方式为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plsql">变量名  变量类型（变量长度）  例如： v_name  varchar2(20);<br></code></pre></td></tr></table></figure><h3 id="1-4-1-普通变量"><a href="#1-4-1-普通变量" class="headerlink" title="1.4.1.  普通变量"></a>1.4.1.  普通变量</h3><p>变量赋值的方式有两种：</p><ol><li>直接赋值语句      :&#x3D;   比如:    v_name  :&#x3D; ‘zhangsan’</li><li>语句赋值，使用select …into … 赋值：（语法 select 值 into 变量）</li></ol><p>【示例】打印人员个人信息，包括： 姓名、薪水、地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plsql">-- 打印人员个人信息，包括： 姓名、薪水、地址<br>DECLARE<br>  -- 姓名<br>  V_NAME VARCHAR2(20) := &#x27;张三&#x27;; -- 声明变量直接赋值<br>  --薪水<br>  V_SAL NUMBER;<br>  --地址<br>  V_ADDR VARCHAR2(200);<br><br>BEGIN<br><br>  --在程序中直接赋值<br>  V_SAL := 1580;<br><br>  --语句赋值<br>  SELECT &#x27;上海市传智播客&#x27; INTO V_ADDR FROM DUAL;<br><br>  --打印变量<br>  DBMS_OUTPUT.PUT_LINE(&#x27;姓名：&#x27; || V_NAME || &#x27;,薪水：&#x27; || V_SAL || &#x27;,地址：&#x27; ||V_ADDR);<br><br>END;<br></code></pre></td></tr></table></figure><h3 id="1-4-2-引用型变量"><a href="#1-4-2-引用型变量" class="headerlink" title="1.4.2.   引用型变量"></a>1.4.2.   引用型变量</h3><p>变量的类型和长度取决于表中字段的类型和长度</p><p>通过<strong>表名.列名%TYPE</strong>指定变量的类型和长度，例如： v_name  emp.ename%TYPE;</p><p>【示例】查询emp表中7839号员工的个人信息，打印姓名和薪水</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plsql">-- 查询emp表中7839号员工的个人信息，打印姓名和薪水<br>DECLARE<br>  -- 姓名<br>  V_NAME EMP.ENAME%TYPE; -- 声明变量直接赋值<br>  --薪水<br>  V_SAL EMP.SAL%TYPE;<br><br>BEGIN<br>  --查询表中的姓名和薪水并赋值给变量<br>  --注意查询的字段和赋值的变量的顺序、个数、类型要一致<br>  SELECT ENAME, SAL INTO V_NAME, V_SAL FROM EMP WHERE EMPNO = 7839;<br><br>  --打印变量<br>  DBMS_OUTPUT.PUT_LINE(&#x27;姓名：&#x27; || V_NAME || &#x27;,薪水：&#x27; || V_SAL);<br><br>END;<br></code></pre></td></tr></table></figure><p>引用型变量的好处：</p><p> 使用普通变量定义方式，需要知道表中列的类型，而使用引用类型，不需要考虑列的类型，使用%TYPE是非常好的编程风格，因为它使得PL&#x2F;SQL更加灵活，更加适应于对数据库定义的更新。</p><h3 id="1-4-3-记录型变量"><a href="#1-4-3-记录型变量" class="headerlink" title="1.4.3.  记录型变量"></a>1.4.3.  记录型变量</h3><p> 接受表中的一整行记录，相当于Java中的一个对象</p><p>语法： 变量名称   表名%ROWTYPE， 例如： <strong>v_emp emp%rowtype;</strong></p><p>【示例】</p><p>查询并打印7839号员工的姓名和薪水</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plsql">-- 查询emp表中7839号员工的个人信息，打印姓名和薪水<br>DECLARE<br>  -- 记录型变量接受一行<br>  V_EMP EMP%ROWTYPE;<br><br>BEGIN<br>  --记录型变量默认接受表中的一行数据，不能指定字段。<br>  SELECT * INTO V_EMP FROM EMP WHERE EMPNO = 7839;<br><br>  --打印变量，通过变量名.属性的方式获取变量中的值<br>  DBMS_OUTPUT.PUT_LINE(&#x27;姓名：&#x27; || V_EMP.ENAME || &#x27;,薪水：&#x27; || V_EMP.SAL);<br><br>END;<br></code></pre></td></tr></table></figure><p>如果有一个表，有100个字段，那么你程序如果要使用这100字段话，如果你使用引用型变量一个个声明，会特别麻烦，记录型变量可以方便的解决这个问题 </p><p>错误的使用：</p><p>1．  记录型变量只能存储一个完整的行数据</p><p> <img src="/2022/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/oracle--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8/Image5.png"></p><p>2．返回的行太多了，记录型变量也接收不了</p><p> <img src="/2022/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/oracle--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8/Image6.png"></p><h2 id="1-5-流程控制"><a href="#1-5-流程控制" class="headerlink" title="1.5.  流程控制"></a>1.5.  流程控制</h2><h3 id="1-5-1-条件分支"><a href="#1-5-1-条件分支" class="headerlink" title="1.5.1.  条件分支"></a>1.5.1.  条件分支</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plsql">BEGIN<br><br>  IF 条件1 THEN 执行1<br>    <br>   ELSIF 条件2 THEN 执行 2<br>  <br>   ELSE 执行3<br>    <br>  END IF; <br>  <br>END;<br></code></pre></td></tr></table></figure><p> 注意关键字：ELSIF </p><p>【示例】判断emp表中记录是否超过20条，10-20之间，或者10条以下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plsql">DECLARE<br>  --声明变量接受emp表中的记录数<br>  V_COUNT NUMBER;<br><br>BEGIN<br><br>  --查询emp表中的记录数赋值给变量<br><br>  SELECT COUNT(1) INTO V_COUNT FROM EMP;<br><br>  --判断打印<br><br>  IF V_COUNT &gt; 20 THEN<br>    DBMS_OUTPUT.PUT_LINE(&#x27;EMP表中的记录数超过了20条为：&#x27; || V_COUNT || &#x27;条。&#x27;);<br><br>  ELSIF V_COUNT &gt;= 10 THEN<br>    DBMS_OUTPUT.PUT_LINE(&#x27;EMP表中的记录数在10~20条之间为：&#x27; || V_COUNT || &#x27;条。&#x27;);<br><br>  ELSE<br>    DBMS_OUTPUT.PUT_LINE(&#x27;EMP表中的记录数在10条以下为：&#x27; || V_COUNT || &#x27;条。&#x27;);<br><br>  END IF;<br><br>END;<br></code></pre></td></tr></table></figure><h3 id="1-5-2-循环"><a href="#1-5-2-循环" class="headerlink" title="1.5.2.  循环"></a>1.5.2.  循环</h3><p>在ORACLE中有三种循环方式，这里我们不展开,只介绍其中一种：loop循环</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plsql">BEGIN<br>  LOOP<br>  EXIT WHEN 退出循环条件  <br>  END LOOP;<br>END;<br></code></pre></td></tr></table></figure><p>【示例】打印数字1-10</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plsql">DECLARE<br>  --声明循环变量并赋初值<br>  V_NUM NUMBER := 1;<br><br>BEGIN<br><br>  LOOP<br>  <br>    EXIT WHEN V_NUM &gt; 10;<br>    <br>    DBMS_OUTPUT.PUT_LINE(V_NUM);<br>  <br>    --循环变量自增<br>    V_NUM := V_NUM + 1;<br>  <br>  END LOOP;<br><br>END;<br></code></pre></td></tr></table></figure><h1 id="2-游标"><a href="#2-游标" class="headerlink" title="2.  游标"></a>2.  游标</h1><h2 id="2-1-什么是游标"><a href="#2-1-什么是游标" class="headerlink" title="2.1.  什么是游标"></a>2.1.  什么是游标</h2><p>用于临时存储一个查询返回的多行数据（结果集,类似于Java的Jdbc连接返回的ResultSet集合），通过遍历游标，可以逐行访问处理该结果集的数据。</p><p>游标的使用方式：声明—&gt;打开—&gt;读取—&gt;关闭</p><h2 id="2-2-语法"><a href="#2-2-语法" class="headerlink" title="2.2.  语法"></a>2.2.  语法</h2><p>游标声明：</p><p>CURSOR  游标名[(参数列表)]    IS 查询语句;</p><p>游标的打开：</p><p>OPEN 游标名;</p><p>游标的取值：</p><p>FETCH 游标名 INTO 变量列表;</p><p>游标的关闭：</p><p>CLOSE 游标名;</p><h2 id="2-3-游标的属性"><a href="#2-3-游标的属性" class="headerlink" title="2.3.  游标的属性"></a>2.3.  游标的属性</h2><table><thead><tr><th>游标的属性</th><th>返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>%ROWCOUNT</td><td>整型</td><td>获得FETCH语句返回的数据行数</td></tr><tr><td>%FOUND</td><td>布尔型</td><td>最近的FETCH语句返回一行数据则为真，否则为假</td></tr><tr><td><strong>%NOTFOUND</strong></td><td>布尔型</td><td>与%FOUND属性返回值相反</td></tr><tr><td>%ISOPEN</td><td>布尔型</td><td>游标已经打开时值为真，否则为假</td></tr></tbody></table><p> 其中 %NOTFOUND是在游标中找不到元素的时候返回TRUE,通常用来判断退出循环</p><h2 id="2-4-创建和使用"><a href="#2-4-创建和使用" class="headerlink" title="2.4.  创建和使用"></a>2.4.  创建和使用</h2><p>【示例】使用游标查询emp表中所有员工的姓名和工资，并将其依次打印出来。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs plsql">--使用游标查询emp表中所有员工的姓名和工资，并将其依次打印出来。<br>DECLARE<br>  --声明游标<br>  CURSOR C_EMP IS<br>    SELECT ENAME, SAL FROM EMP;<br><br>  --声明变量用来接受游标中的元素<br>  V_ENAME EMP.ENAME%TYPE;<br><br>  V_SAL EMP.SAL%TYPE;<br><br>BEGIN<br><br>  --打开游标<br>  OPEN C_EMP;<br><br>  --遍历游标中的值<br>  LOOP<br>  <br>    --通过FETCH语句获取游标中的值并赋值给变量<br>    FETCH C_EMP<br>      INTO V_ENAME, V_SAL;<br>  <br>    --通过%NOTFOUND判断是否有值,有值打印,没有则退出循环<br>    EXIT WHEN C_EMP%NOTFOUND;<br>  <br>    DBMS_OUTPUT.PUT_LINE(&#x27;姓名:&#x27; || V_ENAME || &#x27;,薪水:&#x27; || V_SAL);<br>  <br>  END LOOP;<br><br>  --关闭游标<br>  CLOSE C_EMP;<br><br>END;<br></code></pre></td></tr></table></figure><p>执行结果:</p><p><img src="/2022/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/oracle--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8/Image7.png"></p><h2 id="2-5-带参数的游标"><a href="#2-5-带参数的游标" class="headerlink" title="2.5.  带参数的游标"></a>2.5.  带参数的游标</h2><p>【示例】使用游标查询并打印某部门的员工的姓名和薪资，部门编号为运行时手动输入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs plsql"> --使用游标查询并打印某部门的员工的姓名和薪资，部门编号为运行时手动输入。<br>DECLARE<br>  --声明游标传递参数<br>  CURSOR C_EMP(V_EMPNO EMP.EMPNO%TYPE) IS<br>    SELECT ENAME, SAL FROM EMP WHERE EMPNO = V_EMPNO;<br><br>  --声明变量用来接受游标中的元素<br>  V_ENAME EMP.ENAME%TYPE;<br><br>  V_SAL EMP.SAL%TYPE;<br><br>BEGIN<br><br>  --打开游标并传递参数<br>  OPEN C_EMP(10);<br><br>  --遍历游标中的值<br>  LOOP<br><br> <br><br><br>       --通过%NOTFOUND判断是否有值,有值打印,没有则退出循环<br>       EXIT WHEN C_EMP%NOTFOUND;<br>       <br>       --通过FETCH语句获取游标中的值并赋值给变量<br>    FETCH C_EMP<br>      INTO V_ENAME, V_SAL;<br><br>    DBMS_OUTPUT.PUT_LINE(&#x27;姓名:&#x27; || V_ENAME || &#x27;,薪水:&#x27; || V_SAL);<br><br><br>  END LOOP;<br><br>  --关闭游标<br>  CLOSE C_EMP;<br><br>END;<br></code></pre></td></tr></table></figure><p> 注意:%NOTFOUND属性默认值为FLASE,所以在循环中要注意判断条件的位置.如果先判断在FETCH会导致最后一条记录的值被打印两次(多循环一次默认);</p><h1 id="3-存储过程"><a href="#3-存储过程" class="headerlink" title="3.   存储过程"></a>3.   存储过程</h1><h2 id="3-1-概念作用"><a href="#3-1-概念作用" class="headerlink" title="3.1.  概念作用"></a>3.1.  概念作用</h2><p>之前我们编写的PLSQL程序可以进行表的操作,判断,循环逻辑处理的工作,但无法重复调用.</p><p>可以理解之前的代码全都编写在了main方法中,是匿名程序. JAVA可以通过封装对象和方法来解决复用问题</p><p>PLSQL是将一个个PLSQL的业务处理过程存储起来进行复用,这些被存储起来的PLSQL程序称之为存储过程</p><p>存储过程作用：</p><p>1，  在开发程序中，为了一个特定的业务功能，会向数据库进行多次连接关闭(连接和关闭是很耗费资源), 需要对数据库进行多次I&#x2F;O读写，性能比较低。如果把这些业务放到PLSQL中，在应用程序中只需要调用PLSQL就可以做到连接关闭一次数据库就可以实现我们的业务,可以大大提高效率.</p><p>2，  ORACLE官方给的建议：能够让数据库操作的不要放在程序中。在数据库中实现基本上不会出现错误，在程序中操作可能会存在错误.(如果在数据库中操作数据,可以有一定的日志恢复等功能.)</p><h2 id="3-2-语法"><a href="#3-2-语法" class="headerlink" title="3.2.  语法"></a>3.2.  语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plsql">CREATE OR REPLACE PROCEDURE 过程名称[(参数列表)] IS<br>BEGIN<br><br>END [过程名称];<br></code></pre></td></tr></table></figure><p>根据参数的类型，我们将其分为3类讲解：</p><p>l 不带参数的</p><p>l 带输入参数的</p><p>l 带输入输出参数(返回值)的。</p><h2 id="3-3-无参存储"><a href="#3-3-无参存储" class="headerlink" title="3.3.  无参存储"></a>3.3.  无参存储</h2><h3 id="3-3-1-创建存储"><a href="#3-3-1-创建存储" class="headerlink" title="3.3.1.  创建存储"></a>3.3.1.  创建存储</h3><p> 通过Plsql Developer或者语句创建存储过程:</p><p><img src="/2022/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/oracle--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8/Image8.png"></p><p>【示例】 通过调用存储过程打印hello world</p><p>创建存储过程:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plsql">--通过调用存储过程打印hello world<br>CREATE OR REPLACE PROCEDURE P_HELLO IS<br>BEGIN<br><br>  DBMS_OUTPUT.PUT_LINE(&#x27;hello world&#x27;);<br><br>END P_HELLO;<br></code></pre></td></tr></table></figure><p>通过工具查看创建好的存储过程:</p><p><img src="/2022/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/oracle--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8/Image9.png"></p><h3 id="3-3-2-调用存储过程"><a href="#3-3-2-调用存储过程" class="headerlink" title="3.3.2.  调用存储过程"></a>3.3.2.  调用存储过程</h3><ol><li>通过PLSQL程序调用：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plsql">BEGIN<br> --直接输入调用存储过程的名称<br>  P_HELLO;<br><br>END P_HELLO;<br></code></pre></td></tr></table></figure><ol start="2"><li>在SQLPLUS中通过EXEC命令调用:</li></ol><p> <img src="/2022/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/oracle--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8/1521617110557.png" alt="52161711055"></p><p> 提示:SQLPLUS中显示结果的前提是需要 set serveroutput on</p><p>注意：</p><p>第一个问题：is和as是可以互用的，用哪个都没关系的<br>第二个问题：过程中没有declare关键字，declare用在语句块中</p><h2 id="3-4-带输入参数的存储过程"><a href="#3-4-带输入参数的存储过程" class="headerlink" title="3.4.  带输入参数的存储过程"></a>3.4.  带输入参数的存储过程</h2><p>【示例】查询并打印某个员工（如7839号员工）的姓名和薪水–存储过程：要求，调用的时候传入员工编号，自动控制台打印。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plsql">--查询并打印某个员工（如7839号员工）的姓名和薪水<br>--要求，调用的时候传入员工编号，自动控制台打印。<br>CREATE OR REPLACE PROCEDURE P_QUERYNAMEANDSAL(I_EMPNO IN EMP.EMPNO%TYPE) IS<br>  --声明变量接受查询结果<br>  V_ENAME EMP.ENAME%TYPE;<br>  V_SAL   EMP.SAL%TYPE;<br><br>BEGIN<br><br>  --根据用户传递的员工号查询姓名和薪水<br>  SELECT ENAME, SAL INTO V_ENAME, V_SAL FROM EMP WHERE EMPNO = I_EMPNO;<br><br>  --打印结果<br>  DBMS_OUTPUT.PUT_LINE(&#x27;姓名:&#x27; || V_ENAME || &#x27;,薪水:&#x27; || V_SAL);<br><br>END P_QUERYNAMEANDSAL;<br></code></pre></td></tr></table></figure><p>命令调用：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">SQL&gt; exec p_querynameandsal(<span class="hljs-number">7839</span>);<br>姓名:KING,薪水:<span class="hljs-number">5000</span><br><br>PL/SQL 过程已成功完成。<br></code></pre></td></tr></table></figure><p>PLSQL程序调用：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plsql">BEGIN<br><br>  P_QUERYNAMEANDSAL(7839);<br><br>END;<br></code></pre></td></tr></table></figure><p>执行结果:</p><p><img src="/2022/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/oracle--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8/1521617584136.png" alt="52161758413"></p><h2 id="3-5-带输出参数的存储过程"><a href="#3-5-带输出参数的存储过程" class="headerlink" title="3.5.  带输出参数的存储过程"></a>3.5.  带输出参数的存储过程</h2><p>【示例】输入员工号查询某个员工（7839号员工）信息，要求，将薪水作为返回值输出，给调用的程序使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plsql"> --输入员工号查询某个员工（7839号员工）信息，要求，将薪水作为返回值输出，给调用的程序使用。<br>CREATE OR REPLACE PROCEDURE P_QUERYSAL_OUT(I_EMPNO IN EMP.EMPNO%TYPE,O_SAL OUT EMP.SAL%TYPE) IS<br><br>BEGIN<br><br>  SELECT SAL INTO O_SAL FROM EMP WHERE EMPNO = I_EMPNO;<br><br>END P_QUERYSAL_OUT;<br></code></pre></td></tr></table></figure><p>PLSQL程序调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plsql">DECLARE<br>  --声明一个变量接受存储过程的输出参数<br>  V_SAL EMP.SAL%TYPE;<br><br>BEGIN<br><br>  P_QUERYSAL_OUT(7839, V_SAL); --注意参数的顺序<br><br>  DBMS_OUTPUT.PUT_LINE(V_SAL);<br><br>END; <br></code></pre></td></tr></table></figure><p>注意:调用的时候,参数要与定义的参数的顺序和类型一致.</p><p><strong>调用带有输入输出参数的存储过程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">declare<br>  code <span class="hljs-title function_">number</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span>;<br>desc <span class="hljs-title function_">varchar2</span><span class="hljs-params">(<span class="hljs-number">1000</span>)</span>;<br>begin<br>  code:=<span class="hljs-number">4</span>;<br>desc:=<span class="hljs-number">12</span>;<br>cun_chu_guo_cheng(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,...,code,desc);<br>DBMS_OUTPUT.PUT_LINE(<span class="hljs-string">&#x27;调用存储过程完成&#x27;</span>);<br>end;<br></code></pre></td></tr></table></figure><h2 id="3-7-JAVA程序调用存储过程"><a href="#3-7-JAVA程序调用存储过程" class="headerlink" title="3.7. JAVA程序调用存储过程"></a>3.7. JAVA程序调用存储过程</h2><p>需求:如果一条语句无法实现结果集, 比如需要多表查询,或者需要复杂逻辑查询,我们可以选择调用存储查询出你的结果.</p><h3 id="3-7-1-分析jdk-API"><a href="#3-7-1-分析jdk-API" class="headerlink" title="3.7.1.  分析jdk API"></a>3.7.1.  分析jdk API</h3><p><img src="/2022/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/oracle--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8/1521621189862.png" alt="52162118986"></p><p> 通过Connection对象的prepareCall方法可以调用存储过程</p><p><img src="/2022/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/oracle--%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8/1521621415263.png" alt="52162141526"></p><p>得出结论: 通过Connection对象调用prepareCall方法传递一个转义sql语句调用存储过程, 输入参数直接调用set方法传递.输出参数需要注册后,执行存储过程,通过get方法获取.参数列表的下标是从1开始的</p><h3 id="3-7-2-实现代码"><a href="#3-7-2-实现代码" class="headerlink" title="3.7.2. 实现代码"></a>3.7.2. 实现代码</h3><p>准备环境：</p><p>l  导入Oracle的jar包</p><p>【示例】通过员工号查询员工的姓名和薪资</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.oracle.jdbc;<br><br><span class="hljs-keyword">import</span> oracle.jdbc.OracleTypes;<br><span class="hljs-keyword">import</span> java.sql.CallableStatement;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProcedureTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>);<br><br>        <span class="hljs-comment">//2.获得连接对象</span><br><br>        <span class="hljs-comment">//2.1 设置连接字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;jdbc:oracle:thin:@localhost:1521:xe&quot;</span> ;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;scott&quot;</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tiger&quot;</span>;<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, name, password);<br><br><br>        <span class="hljs-comment">//3.获取语句对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;call p_querysal_out(?,?)&#125;&quot;</span>;<span class="hljs-comment">//转义语法,&#123;call  存储过程(参数列表)&#125;</span><br>        <span class="hljs-type">CallableStatement</span> <span class="hljs-variable">call</span> <span class="hljs-operator">=</span> conn.prepareCall(sql);<br><br>        <span class="hljs-comment">//4.设置输入参数</span><br>        call.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">7839</span>);<br><br>        <span class="hljs-comment">//5.注册输出参数</span><br>        call.registerOutParameter(<span class="hljs-number">2</span>, OracleTypes.DOUBLE);<br><br>        <span class="hljs-comment">//6.执行存储过程</span><br>        call.execute();<br><br>        <span class="hljs-comment">//7.获取输出参数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">sal</span> <span class="hljs-operator">=</span> call.getDouble(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;薪水:&quot;</span>+sal);<br><br>        <span class="hljs-comment">//8.释放资源</span><br>        call.close();<br>        conn.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle - 存储过程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作--整理属于自己的表关系文档</title>
    <link href="/2022/08/28/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E6%95%B4%E7%90%86%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%A1%A8%E5%85%B3%E7%B3%BB%E6%96%87%E6%A1%A3/"/>
    <url>/2022/08/28/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C--%E6%95%B4%E7%90%86%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%A1%A8%E5%85%B3%E7%B3%BB%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="工作–整理属于自己的表关系文档"><a href="#工作–整理属于自己的表关系文档" class="headerlink" title="工作–整理属于自己的表关系文档"></a>工作–整理属于自己的表关系文档</h2><p>开发需求，需要懂表与表之间的关系；</p><p>如果表与表之间的关系理解透彻了，可以快速的写出想要的sql语句，完成需求的开发工作；</p><hr><p>每个菜单下会使用很多的表；</p><p>总会有一个是主表的；</p><p>从主表开始，一层一层的写（主要是根据查询表来的）；写出表与表之间的关系；例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">-----------------------------------------------------<br>-- 菜单名(菜单与菜单之间使用很多的--隔开)<br>select id,a.* from table_a a;   -- 根据页面及数据库中表的名字写出易于理解的表名<br>表等级与等级之间使用一个空白行；如果是同级之间直接写就行 <br>select b_id,b.* from table_b where b.a_id=xxx -- (table_a.id) -- 表的名字<br>------------------------------------------------------<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>需求3--oracle-查询当前数据下的所有子级数据(start with)</title>
    <link href="/2022/08/28/%E5%B7%A5%E4%BD%9C/%E9%9C%80%E6%B1%82/%E9%9C%80%E6%B1%823--oracle-%E6%9F%A5%E8%AF%A2%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%90%E7%BA%A7%E6%95%B0%E6%8D%AE(start%20with)/"/>
    <url>/2022/08/28/%E5%B7%A5%E4%BD%9C/%E9%9C%80%E6%B1%82/%E9%9C%80%E6%B1%823--oracle-%E6%9F%A5%E8%AF%A2%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%90%E7%BA%A7%E6%95%B0%E6%8D%AE(start%20with)/</url>
    
    <content type="html"><![CDATA[<h2 id="需求3–oracle-查询当前数据下的所有子级数据-start-with"><a href="#需求3–oracle-查询当前数据下的所有子级数据-start-with" class="headerlink" title="需求3–oracle-查询当前数据下的所有子级数据(start with)"></a>需求3–oracle-查询当前数据下的所有子级数据(start with)</h2><p>实现的效果：查询当前数据下的所有子级数据；例如当前数据时二级数据，查询它下面的三级四级五级。。等等数据；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> table_a <span class="hljs-keyword">start</span> <span class="hljs-keyword">with</span> parent_id <span class="hljs-operator">=</span> 当前级数据id <span class="hljs-keyword">connect</span> <span class="hljs-keyword">by</span> prior id<span class="hljs-operator">=</span>parent_id<br></code></pre></td></tr></table></figure><ul><li>使用了递归函数；</li></ul>]]></content>
    
    
    <categories>
      
      <category>需求</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>需求2--oracle-用基表维护落地表的数据(merge-into)</title>
    <link href="/2022/08/28/%E5%B7%A5%E4%BD%9C/%E9%9C%80%E6%B1%82/%E9%9C%80%E6%B1%822--oracle-%E7%94%A8%E5%9F%BA%E8%A1%A8%E7%BB%B4%E6%8A%A4%E8%90%BD%E5%9C%B0%E8%A1%A8%E7%9A%84%E6%95%B0%E6%8D%AE(merge-into)/"/>
    <url>/2022/08/28/%E5%B7%A5%E4%BD%9C/%E9%9C%80%E6%B1%82/%E9%9C%80%E6%B1%822--oracle-%E7%94%A8%E5%9F%BA%E8%A1%A8%E7%BB%B4%E6%8A%A4%E8%90%BD%E5%9C%B0%E8%A1%A8%E7%9A%84%E6%95%B0%E6%8D%AE(merge-into)/</url>
    
    <content type="html"><![CDATA[<h2 id="需求2–oracle-用基表维护落地表的数据-merge-into"><a href="#需求2–oracle-用基表维护落地表的数据-merge-into" class="headerlink" title="需求2–oracle-用基表维护落地表的数据(merge into)"></a>需求2–oracle-用基表维护落地表的数据(merge into)</h2><p>实现的效果：用基表维护落地表的数据；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">merge</span> <span class="hljs-keyword">into</span> table_b b<br><span class="hljs-keyword">using</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br>       <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">row_number</span>() <span class="hljs-keyword">over</span>(<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> a.type) rown,<br>       a.pro_id,<br>       a.name,<br>       a.type<br>       <span class="hljs-keyword">from</span> table_a a<br>       <span class="hljs-keyword">where</span> a.status<span class="hljs-operator">=</span><span class="hljs-number">1</span>) an<br>      <span class="hljs-keyword">where</span> an.rown<span class="hljs-operator">=</span><span class="hljs-number">1</span>) af<br><span class="hljs-keyword">on</span> (b.pro_id<span class="hljs-operator">=</span>af.pro_id,...)<br><span class="hljs-keyword">when</span> matched <span class="hljs-keyword">then</span><br><span class="hljs-keyword">update</span> <span class="hljs-keyword">set</span> b.type<span class="hljs-operator">=</span>af.type,lcd<span class="hljs-operator">=</span>sysdate<br></code></pre></td></tr></table></figure><ul><li>table_a:基表  table_b:落地表；</li><li>注意：需要查询出基表中的一行去更新落地表中的数据，所以只取满足条件的第一行；</li><li>partition by是对数据进行分组；</li><li>update更新的是table_b表中的数据；</li></ul>]]></content>
    
    
    <categories>
      
      <category>需求</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>需求1--oracle-实现多列数据拼接成一行(listagg)</title>
    <link href="/2022/08/28/%E5%B7%A5%E4%BD%9C/%E9%9C%80%E6%B1%82/%E9%9C%80%E6%B1%821--oracle-%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%88%97%E6%95%B0%E6%8D%AE%E6%8B%BC%E6%8E%A5%E6%88%90%E4%B8%80%E8%A1%8C(listagg)/"/>
    <url>/2022/08/28/%E5%B7%A5%E4%BD%9C/%E9%9C%80%E6%B1%82/%E9%9C%80%E6%B1%821--oracle-%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%88%97%E6%95%B0%E6%8D%AE%E6%8B%BC%E6%8E%A5%E6%88%90%E4%B8%80%E8%A1%8C(listagg)/</url>
    
    <content type="html"><![CDATA[<h2 id="需求1–oracle-实现多列数据拼接成一行-listagg"><a href="#需求1–oracle-实现多列数据拼接成一行-listagg" class="headerlink" title="需求1–oracle-实现多列数据拼接成一行(listagg)"></a>需求1–oracle-实现多列数据拼接成一行(listagg)</h2><p>实现的效果：对查询出来的数据进行分组，然后将未分组字段的数据拼接成一行；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> a.id,<br>a.code,<br><span class="hljs-built_in">listagg</span>(b.b_id,<span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-keyword">within</span> <span class="hljs-keyword">group</span>(<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> a.id) b_id<br><span class="hljs-keyword">from</span> table_a a,table_b b<br><span class="hljs-keyword">where</span> a.id<span class="hljs-operator">=</span>b.id<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a.id,a.code<br></code></pre></td></tr></table></figure><ul><li>listagg函数需要和group by联合使用</li><li>注意：分组的字段不包含listagg函数中需要聚合的字段</li><li>order by 中尽量用其他字段来排序吧，不建议使用当前表中的创建时间进行排序</li></ul>]]></content>
    
    
    <categories>
      
      <category>需求</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录各种网址</title>
    <link href="/2022/08/17/%E5%85%B6%E4%BB%96/%E6%AF%94%E8%BE%83%E4%B8%8D%E9%94%99%E7%9A%84%E7%BD%91%E5%9D%80/"/>
    <url>/2022/08/17/%E5%85%B6%E4%BB%96/%E6%AF%94%E8%BE%83%E4%B8%8D%E9%94%99%E7%9A%84%E7%BD%91%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<p><a href="http://www.itmsbld.com/">IT面试助手-lagou</a>    用户名、密码（拉钩账号）</p><p><a href="http://111.231.112.44:8080/login/Login.jsp?logintype=1">BWF公司流程系统</a></p><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">数据结构和算法的可视化网站</a></p><p><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a></p><p><a href="https://hexo.fluid-dev.com/docs/">Hexo官网</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网址</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录各种网址</title>
    <link href="/2022/08/17/%E5%85%B6%E4%BB%96/%E8%AE%B0%E5%BD%95%E5%90%84%E7%A7%8D%E7%BD%91%E5%9D%80/"/>
    <url>/2022/08/17/%E5%85%B6%E4%BB%96/%E8%AE%B0%E5%BD%95%E5%90%84%E7%A7%8D%E7%BD%91%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h2 id="学习网址"><a href="#学习网址" class="headerlink" title="学习网址"></a>学习网址</h2><p>IT面试助手：<a href="http://www.itmsbld.com/">http://www.itmsbld.com/</a>   用户名、密码（拉钩账号）</p><hr><h2 id="BWF公司"><a href="#BWF公司" class="headerlink" title="BWF公司"></a>BWF公司</h2><p>bwf流程系统：<a href="http://111.231.112.44:8080/login/Login.jsp?logintype=1">http://111.231.112.44:8080/login/Login.jsp?logintype=1</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网址</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux--虚拟机安装出现的问题</title>
    <link href="/2022/08/08/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/linux/linux--%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/08/08/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/linux/linux--%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="选择安装Vmware版本"><a href="#选择安装Vmware版本" class="headerlink" title="选择安装Vmware版本"></a>选择安装Vmware版本</h2><p>目前我选择安装Vmware16【原因：我使用原来的15版本，启动虚拟机时出现蓝屏问题】</p><p>建议安装最新版本的Vmware；可以减少出现的很多问题；</p><h2 id="vmwareworkstation16密钥"><a href="#vmwareworkstation16密钥" class="headerlink" title="vmwareworkstation16密钥"></a>vmwareworkstation16密钥</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">ZF3R0-FHED2-M80TY-8QYGC-NPKYF<br><br>YF390-0HF8P-M81RQ-2DXQE-M2UT6<br><br>ZF71R-DMX85-08DQY-8YMNC-PPHV8<br></code></pre></td></tr></table></figure><p>安装linux虚拟机文档</p><p>可参考：</p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux--mysql查看临时密码</title>
    <link href="/2022/08/07/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/linux/linux--mysql%E6%9F%A5%E7%9C%8B%E4%B8%B4%E6%97%B6%E5%AF%86%E7%A0%81/"/>
    <url>/2022/08/07/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/linux/linux--mysql%E6%9F%A5%E7%9C%8B%E4%B8%B4%E6%97%B6%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@localhost</span> usr]# grep password /<span class="hljs-keyword">var</span>/log/mysqld.log<br><span class="hljs-number">2022</span>-08-06T17:<span class="hljs-number">12</span>:<span class="hljs-number">47.</span>732805Z <span class="hljs-number">1</span> [Note] A temporary password is generated <span class="hljs-keyword">for</span> root<span class="hljs-meta">@localhost</span>: Cqj:W/pg*3c7<br><span class="hljs-number">2022</span>-08-06T17:<span class="hljs-number">13</span>:<span class="hljs-number">11.</span>862823Z <span class="hljs-number">2</span> [Note] Access denied <span class="hljs-keyword">for</span> user <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> (using password: NO)<br><span class="hljs-number">2022</span>-08-06T17:<span class="hljs-number">13</span>:<span class="hljs-number">45.</span>167528Z <span class="hljs-number">3</span> [Note] Access denied <span class="hljs-keyword">for</span> user <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> (using password: NO)<br></code></pre></td></tr></table></figure><p>登录数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mysql -u root -p<br></code></pre></td></tr></table></figure><p>重置密码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">alter user <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified by <span class="hljs-string">&#x27;Ljq@136139&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java就业训练营模板-学习文档</title>
    <link href="/2022/08/06/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5%E6%A8%A1%E6%9D%BF-%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/"/>
    <url>/2022/08/06/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5%E6%A8%A1%E6%9D%BF-%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="第一阶段-JavaSE"><a href="#第一阶段-JavaSE" class="headerlink" title="第一阶段 JavaSE"></a>第一阶段 JavaSE</h1><h2 id="模块一-Java-语言基础"><a href="#模块一-Java-语言基础" class="headerlink" title="模块一:Java 语言基础"></a>模块一:Java 语言基础</h2><p>本模块将会介绍Java语言的环境搭建和编程基础，通过流程控制语句和数组锻炼逻辑思维能力。</p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_01%E5%88%9D%E8%AF%86%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%92%8CJava%E8%AF%AD%E8%A8%80.pdf" title="JavaSE_01初识计算机和Java语言.pdf">JavaSE_01初识计算机和Java语言.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_02%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.pdf" title="JavaSE_02变量和数据类型.pdf">JavaSE_02变量和数据类型.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_03%E8%BF%90%E7%AE%97%E7%AC%A6.pdf" title="JavaSE_03运算符.pdf">JavaSE_03运算符.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_04%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5.pdf" title="JavaSE_04流程控制语句.pdf">JavaSE_04流程控制语句.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_05%E6%95%B0%E7%BB%84%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8k.pdf" title="JavaSE_05数组以及应用k.pdf">JavaSE_05数组以及应用k.pdf</a></p><hr><h2 id="模块二-Java-面向对象编程"><a href="#模块二-Java-面向对象编程" class="headerlink" title="模块二:Java 面向对象编程"></a>模块二:Java 面向对象编程</h2><p>本模块通过现实中的案例来展现和剖析面向对象编程的思想，并掌握面向对象编程的语法规则。</p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_06%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1.pdf" title="JavaSE_06类和对象.pdf">JavaSE_06类和对象.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_07%E6%96%B9%E6%B3%95%E5%92%8C%E5%B0%81%E8%A3%85.pdf" title="JavaSE_07方法和封装.pdf">JavaSE_07方法和封装.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_08static%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E7%BB%A7%E6%89%BF.pdf" title="JavaSE_08static关键字和继承.pdf">JavaSE_08static关键字和继承.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_09%E5%A4%9A%E6%80%81%E5%92%8C%E7%89%B9%E6%AE%8A%E7%B1%BB.pdf" title="JavaSE_09多态和特殊类.pdf">JavaSE_09多态和特殊类.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_10%E7%89%B9%E6%AE%8A%E7%B1%BB.pdf" title="JavaSE_10特殊类.pdf">JavaSE_10特殊类.pdf</a></p><hr><h2 id="模块三-Java-核心类库（上）"><a href="#模块三-Java-核心类库（上）" class="headerlink" title="模块三:Java 核心类库（上）"></a>模块三:Java 核心类库（上）</h2><p>本模块学习Java语言中常用类和String类以及集合类等，并掌握内存中的增删改查操作。</p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_11%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8.pdf" title="JavaSE_11常用类的概述和使用.pdf">JavaSE_11常用类的概述和使用.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_12String%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8.pdf" title="JavaSE_12String类的概述和使用.pdf">JavaSE_12String类的概述和使用.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_13%E5%8F%AF%E5%8F%98%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%92%8C%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3%E7%B1%BB.pdf" title="JavaSE_13可变字符串类和日期相关类.pdf">JavaSE_13可变字符串类和日期相关类.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_14%E9%9B%86%E5%90%88%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8A%EF%BC%89.pdf" title="JavaSE_14集合类库（上）.pdf">JavaSE_14集合类库（上）.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_15%E9%9B%86%E5%90%88%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8B%EF%BC%89.pdf" title="JavaSE_15集合类库（下）.pdf">JavaSE_15集合类库（下）.pdf</a></p><hr><h2 id="模块四-Java-核心类库（下）"><a href="#模块四-Java-核心类库（下）" class="headerlink" title="模块四:Java 核心类库（下）"></a>模块四:Java 核心类库（下）</h2><p>本模块学习IO流和线程以及网络编程等，并掌握多设备之间一对一和一对多的通信方式。</p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_16%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6%E5%92%8CFile%E7%B1%BB.pdf" title="JavaSE_16异常机制和File类.pdf">JavaSE_16异常机制和File类.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_17IO%E6%B5%81.pdf" title="JavaSE_17IO流.pdf">JavaSE_17IO流.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_18%E5%A4%9A%E7%BA%BF%E7%A8%8B.pdf" title="JavaSE_18多线程.pdf">JavaSE_18多线程.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_19%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.pdf" title="JavaSE_19网络编程.pdf">JavaSE_19网络编程.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_20%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.pdf" title="JavaSE_20反射机制.pdf">JavaSE_20反射机制.pdf</a></p><hr><h2 id="模块五-Java-新特性和项目"><a href="#模块五-Java-新特性和项目" class="headerlink" title="模块五:Java 新特性和项目"></a>模块五:Java 新特性和项目</h2><p>通过该模块可以将Java语言中的所有内容学以致用，初步建立项目架构和设计的思想。</p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_21%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.pdf" title="JavaSE_21常用设计原则和设计模式.pdf">JavaSE_21常用设计原则和设计模式.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_22%E6%96%B0%E7%89%B9%E6%80%A7.pdf" title="JavaSE_22新特性.pdf">JavaSE_22新特性.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/JavaSE_23%E9%A1%B9%E7%9B%AE.pdf" title="JavaSE_23项目.pdf">JavaSE_23项目.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/NIO.pdf" title="NIO.pdf">NIO.pdf</a></p><hr><h1 id="第二阶段-数据库技术"><a href="#第二阶段-数据库技术" class="headerlink" title="第二阶段 数据库技术"></a>第二阶段 数据库技术</h1><h2 id="模块一-MySQL数据库"><a href="#模块一-MySQL数据库" class="headerlink" title="模块一:MySQL数据库"></a>模块一:MySQL数据库</h2><p>本模块主要讲解:MySQL的安装与使用，以及SQL语言的基本语法，高级语法，并且通过SQL语言对数据库中的数据进行各种常用操作</p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%80/%E4%BB%BB%E5%8A%A1%E4%B8%80_MySql%E5%9F%BA%E7%A1%80&SQL%E5%85%A5%E9%97%A8.pdf" title="任务一_MySql基础&amp;SQL入门.pdf">任务一_MySql基础&amp;SQL入门.pdf</a></p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%80/%E4%BB%BB%E5%8A%A1%E4%BA%8C_MySql%E5%8D%95%E8%A1%A8&%E7%BA%A6%E6%9D%9F&%E4%BA%8B%E5%8A%A1.pdf" title="任务二_MySql单表&amp;约束&amp;事务.pdf">任务二_MySql单表&amp;约束&amp;事务.pdf</a></p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%80/%E4%BB%BB%E5%8A%A1%E4%B8%89_Mysql%E5%A4%9A%E8%A1%A8&%E5%A4%96%E9%94%AE&%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1.pdf" title="任务三_Mysql多表&amp;外键&amp;数据库设计.pdf">任务三_Mysql多表&amp;外键&amp;数据库设计.pdf</a></p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%80/%E4%BB%BB%E5%8A%A1%E5%9B%9B_MySql%E7%B4%A2%E5%BC%95&%E8%A7%86%E5%9B%BE&%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.pdf" title="任务四_MySql索引&amp;视图&amp;存储过程.pdf">任务四_MySql索引&amp;视图&amp;存储过程.pdf</a></p><hr><h2 id="模块二-JDBC技术和XML"><a href="#模块二-JDBC技术和XML" class="headerlink" title="模块二:JDBC技术和XML"></a>模块二:JDBC技术和XML</h2><p>本模块主要讲解JDBC相关技术，能够使用Java程序对数据库进行访问，并操作数据表中的数据。通过对XML的学习，掌握配置文件的基本定义方式。</p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/%E4%BB%BB%E5%8A%A1%E4%B8%80_JDBC.pdf" title="任务一_JDBC.pdf">任务一_JDBC.pdf</a></p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/%E4%BB%BB%E5%8A%A1%E4%BA%8C_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0&DBUtils.pdf" title="任务二_数据库连接池&amp;DBUtils.pdf">任务二_数据库连接池&amp;DBUtils.pdf</a></p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/%E4%BB%BB%E5%8A%A1%E4%B8%89_XML.pdf" title="任务三_XML.pdf">任务三_XML.pdf</a></p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/%E4%BB%BB%E5%8A%A1%E5%9B%9B_%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.md" title="任务四 _综合案例.md">任务四_综合案例.md</a></p><hr><h1 id="第三阶段-前端技术"><a href="#第三阶段-前端技术" class="headerlink" title="第三阶段 前端技术"></a>第三阶段 前端技术</h1><h2 id="模块一-前端基础"><a href="#模块一-前端基础" class="headerlink" title="模块一:前端基础"></a>模块一:前端基础</h2><p>本模块主要讲解: HTML超文本标记语言、CSS样式、以及脚本语言JavaScript，通过三者相结合，完成常见的页面效果的展示，比如页面轮播图, 定时弹出广告等等。</p><p><a href="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/HTML%E8%AF%A6%E8%A7%A3.pdf" title="HTML详解.pdf">HTML详解.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/CSS%E8%AF%A6%E8%A7%A3.pdf" title="CSS详解.pdf">CSS详解.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/JavaScript%E8%AF%A6%E8%A7%A3.pdf" title="JavaScript详解.pdf">JavaScript详解.pdf</a></p><hr><h2 id="模块二-前端进阶"><a href="#模块二-前端进阶" class="headerlink" title="模块二:前端进阶"></a>模块二:前端进阶</h2><p>本模块主要讲解 JS框架jQuery、响应式框架BootStrap、以及ES6的新特性,通过Jquery与BootStrap相结合,开发出适应不同终端的响应式页面。</p><p><a href="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/jQuery%E8%AF%A6%E8%A7%A3.pdf" title="jQuery详解.pdf">jQuery详解.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/ECMAScript6%E8%AF%A6%E8%A7%A3.pdf" title="ECMAScript6详解.pdf">ECMAScript6详解.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/Bootstrap%E8%AF%A6%E8%A7%A3.pdf" title="Bootstrap详解.pdf">Bootstrap详解.pdf</a></p><hr><h1 id="第四阶段-JavaWEB核心"><a href="#第四阶段-JavaWEB核心" class="headerlink" title="第四阶段 JavaWEB核心"></a>第四阶段 JavaWEB核心</h1><p>该阶段为分布式学习提供理论基础，如分布式一致性协议Paxos、远程过程调用RPC等，并对分布式中间件Dubbo和SpringCloud进行深入剖析。</p><h2 id="模块二：JavaWeb核心（下）"><a href="#模块二：JavaWeb核心（下）" class="headerlink" title="模块二：JavaWeb核心（下）"></a>模块二：JavaWeb核心（下）</h2><h3 id="01任务一-EL和JSTL核心技术"><a href="#01任务一-EL和JSTL核心技术" class="headerlink" title="01任务一 EL和JSTL核心技术"></a>01任务一 EL和JSTL核心技术</h3><p><a href="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/%E7%AC%AC%E5%9B%9B%E7%AB%A0-EL%E5%92%8CJSTL%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF.pdf" title="第四章-EL和JSTL核心技术.pdf">第四章-EL和JSTL核心技术.pdf</a></p><hr><h3 id="02任务二-Filter-Listener核心技术"><a href="#02任务二-Filter-Listener核心技术" class="headerlink" title="02任务二 Filter+Listener核心技术"></a>02任务二 Filter+Listener核心技术</h3><p><a href="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/%E7%AC%AC%E4%BA%94%E7%AB%A0-Filter+Listener%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF.pdf" title="第五章-Filter+Listener核心技术.pdf">第五章-Filter+Listener核心技术.pdf</a></p><hr><h3 id="03任务三-Linux系统概述和编程基础"><a href="#03任务三-Linux系统概述和编程基础" class="headerlink" title="03任务三 Linux系统概述和编程基础"></a>03任务三 Linux系统概述和编程基础</h3><p><a href="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/VMware%E5%AE%89%E8%A3%85CentOS7%E6%95%99%E7%A8%8B_%E5%A5%87%E7%82%B9.pdf" title="VMware安装CentOS7教程_奇点.pdf">VMware安装CentOS7教程_奇点.pdf</a></p><p><a href="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/%E7%AC%AC%E5%85%AD%E7%AB%A0-Linux%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.pdf" title="第六章-Linux系统概述和编程基础.pdf">第六章-Linux系统概述和编程基础.pdf</a></p><p>【linux常用命令】</p><hr><h3 id="04任务四-开发环境搭建和Shell编程"><a href="#04任务四-开发环境搭建和Shell编程" class="headerlink" title="04任务四 开发环境搭建和Shell编程"></a>04任务四 开发环境搭建和Shell编程</h3><p><a href="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8CShell%E7%BC%96%E7%A8%8B.pdf" title="第七章-开发环境搭建和Shell编程.pdf">第七章-开发环境搭建和Shell编程.pdf</a></p><p>【linux配置】【jdk配置】【mysql配置】【shell编程】</p><hr><h1 id="第六阶段-企业级开发框架SSM"><a href="#第六阶段-企业级开发框架SSM" class="headerlink" title="第六阶段 企业级开发框架SSM"></a>第六阶段 企业级开发框架SSM</h1><h2 id="模块一：Mybatis"><a href="#模块一：Mybatis" class="headerlink" title="模块一：Mybatis"></a>模块一：Mybatis</h2><p>本模块将对持久层框架mybatis重点讲解，涉及配置深入、原理分析，复杂映射、注解开发等相关内容</p><p><a href="%E7%AC%AC%E4%BA%94%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%80/Mybatis_%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8.pdf" title="Mybatis_任务一：基本应用.pdf">Mybatis_任务一：基本应用.pdf</a></p><p><a href="%E7%AC%AC%E4%BA%94%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%80/Mybatis%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5.pdf" title="Mybatis任务二：配置文件深入.pdf">Mybatis任务二：配置文件深入.pdf</a></p><p><a href="%E7%AC%AC%E4%BA%94%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%80/Mybatis%E4%BB%BB%E5%8A%A1%E4%B8%89%EF%BC%9A%E5%8A%A0%E8%BD%BD%E7%AD%96%E7%95%A5%E5%8F%8A%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91.pdf" title="Mybatis任务三：加载策略及注解开发.pdf">Mybatis任务三：加载策略及注解开发.pdf</a></p><hr><h1 id="第七阶段-分布式技术核心"><a href="#第七阶段-分布式技术核心" class="headerlink" title="第七阶段 分布式技术核心"></a>第七阶段 分布式技术核心</h1><h2 id="模块一：Dubbo-amp-Zookeeper"><a href="#模块一：Dubbo-amp-Zookeeper" class="headerlink" title="模块一：Dubbo&amp;Zookeeper"></a>模块一：Dubbo&amp;Zookeeper</h2><p>本模块将对分布式服务治理和协调服务的Zookeeper，高性能RPC框架Apache Dubbo进行详细介绍</p><p><a href="%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%80/zookeeper%E8%AF%A6%E8%A7%A3.pdf" title="zookeeper详解.pdf">zookeeper详解.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%80/Dubbo%E8%AF%A6%E8%A7%A3.pdf" title="Dubbo详解.pdf">Dubbo详解.pdf</a></p><hr><h2 id="模块二：Redis-amp-RabbitMQ"><a href="#模块二：Redis-amp-RabbitMQ" class="headerlink" title="模块二：Redis&amp;RabbitMQ"></a>模块二：Redis&amp;RabbitMQ</h2><p>本模块将对高性能分布式缓存 Redis和分布式消息通讯RabbitMQ进行详细介绍。</p><p><a href="%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/Redis%E8%AF%A6%E8%A7%A3.pdf" title="Redis详解.pdf">Redis详解.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/RabbitMQ%E8%AF%A6%E8%A7%A3.pdf" title="RabbitMQ详解.pdf">RabbitMQ详解.pdf</a></p><hr><h2 id="模块三：FastDFS-amp-MongoDB【选修】"><a href="#模块三：FastDFS-amp-MongoDB【选修】" class="headerlink" title="模块三：FastDFS&amp;MongoDB【选修】"></a>模块三：FastDFS&amp;MongoDB【选修】</h2><p>本模块将对分布式文件存储系统FastDFS和分布式文档数据库MongoDB进行详细介绍。</p><p><a href="%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%89/FastDFS%E8%AF%A6%E8%A7%A3.pdf" title="FastDFS详解.pdf">FastDFS详解.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%89/Mongo%E8%AE%B2%E4%B9%89.pdf" title="Mongo讲义.pdf">Mongo讲义.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%89/Mongo%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86.pdf" title="Mongo高级部分.pdf">Mongo高级部分.pdf</a></p><hr><h1 id="第九阶段-微服务技术核心"><a href="#第九阶段-微服务技术核心" class="headerlink" title="第九阶段 微服务技术核心"></a>第九阶段 微服务技术核心</h1><h2 id="模块一：SpringBoot-amp-SpringCloud-Docker"><a href="#模块一：SpringBoot-amp-SpringCloud-Docker" class="headerlink" title="模块一：SpringBoot&amp;SpringCloud@Docker"></a>模块一：SpringBoot&amp;SpringCloud@Docker</h2><p>本模块将对约定优于配置的SpringBoot、微服务一站式解决方案的SpringCloud以及Docker容器技术进行详细介绍。</p><p><a href="%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%80/SpringBoot%E8%AE%B2%E4%B9%89.pdf" title="SpringBoot讲义.pdf">SpringBoot讲义.pdf</a></p><p><a href="%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%80/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%B2%E4%B9%89.pdf" title="SpringCloud微服务讲义.pdf">SpringCloud微服务讲义.pdf</a></p><p><a href="%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%80/Docker.pdf" title="Docker.pdf">Docker.pdf</a></p><p><strong>centos-docker.txt:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">链接：https://pan.baidu.com/s/1KinO8hRPF8KPffky7krfhA <br>提取码：4x53 <br></code></pre></td></tr></table></figure><hr><h2 id="模块二：ElasticSearch-amp-Kafka【选修】"><a href="#模块二：ElasticSearch-amp-Kafka【选修】" class="headerlink" title="模块二：ElasticSearch&amp;Kafka【选修】"></a>模块二：ElasticSearch&amp;Kafka【选修】</h2><p>本模块将对分布式搜索ElasticSearch、消息通讯Kafka进行详细介绍。</p><p><a href="%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/01-lucene&elasticsearch.pdf" title="01-lucene&amp;elasticsearch.pdf">01-lucene&amp;elasticsearch.pdf</a></p><p><a href="%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%BA%8C/Kafka-lagou.pdf" title="Kafka-lagou.pdf">Kafka-lagou.pdf</a></p><p>Kafka资料下载地址.txt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">链接：https:<span class="hljs-comment">//pan.baidu.com/s/1CyTvvyVjMyvgDnbnEaIXTw </span><br>提取码：wk4x <br></code></pre></td></tr></table></figure><hr><h2 id="模块三：MySQL分库分表和优化"><a href="#模块三：MySQL分库分表和优化" class="headerlink" title="模块三：MySQL分库分表和优化"></a>模块三：MySQL分库分表和优化</h2><p>本模块将对分库分表设计及实现技术ShardingSphere、MyCat等进行详细介绍。</p><p><a href="%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%89/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E6%8A%80%E6%9C%AF%E5%AE%9E%E6%88%98%E4%B9%8BMyCat.pdf" title="分库分表技术实战之MyCat.pdf">分库分表技术实战之MyCat.pdf</a></p><p><a href="%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%89/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E6%8A%80%E6%9C%AF%E5%AE%9E%E6%88%98%E4%B9%8BShardingJDBC.pdf" title="分库分表技术实战之ShardingJDBC.pdf">分库分表技术实战之ShardingJDBC.pdf</a></p><p><a href="%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%89/MySQL%E9%AB%98%E7%BA%A7.pdf" title="MySQL高级.pdf">MySQL高级.pdf</a></p><hr><h1 id="第十阶段-微服务项目：拉勾教育学习平台（微服务架构）"><a href="#第十阶段-微服务项目：拉勾教育学习平台（微服务架构）" class="headerlink" title="第十阶段 微服务项目：拉勾教育学习平台（微服务架构）"></a>第十阶段 微服务项目：拉勾教育学习平台（微服务架构）</h1><p>01_概述与搭建服务中心</p><hr><h1 id="第十一阶段-数据结构算法与调优"><a href="#第十一阶段-数据结构算法与调优" class="headerlink" title="第十一阶段 数据结构算法与调优"></a>第十一阶段 数据结构算法与调优</h1><h2 id="模块一：数据结构和算法【选修】"><a href="#模块一：数据结构和算法【选修】" class="headerlink" title="模块一：数据结构和算法【选修】"></a>模块一：数据结构和算法【选修】</h2><p>本模块会讲解面试中常见的数据结构、排序、递归与回溯、深度与广度优先搜索与二分搜索等。</p><p><a href="%E7%AC%AC%E5%8D%81%E4%B8%80%E9%98%B6%E6%AE%B5/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.pdf" title="数据结构与算法.pdf">数据结构与算法.pdf</a></p><hr><h2 id="模块二：并发编程和系统调优【选修】"><a href="#模块二：并发编程和系统调优【选修】" class="headerlink" title="模块二：并发编程和系统调优【选修】"></a>模块二：并发编程和系统调优【选修】</h2><p>本模块会深入讲解线程高级部分，例如线程状态机制分析与线程池实现原理、抽象队列化同步器AQS等，还会深入JVM分析与调优。</p><p><a href="%E7%AC%AC%E5%8D%81%E4%B8%80%E9%98%B6%E6%AE%B5/ConcurrentProgramming.pdf" title="ConcurrentProgramming.pdf">ConcurrentProgramming.pdf</a></p><p><a href="%E7%AC%AC%E5%8D%81%E4%B8%80%E9%98%B6%E6%AE%B5/JVM%E4%BC%98%E5%8C%96.pdf" title="JVM优化.pdf">JVM优化.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>Java就业训练营模板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件安装-linux镜像安装</title>
    <link href="/2022/07/14/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-linux%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85/"/>
    <url>/2022/07/14/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-linux%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="软件安装-linux镜像安装"><a href="#软件安装-linux镜像安装" class="headerlink" title="软件安装-linux镜像安装"></a>软件安装-linux镜像安装</h2><h3 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><p>不需要更新</p><p>不需要加入体验计划</p><p>永不过期的Vmware许可证：UZ792-DHF8J-M81XP-MGM5T-MCAF2</p><hr><p>安装linux镜像</p><p>可以选择自定义的安装；</p><p>安装路径不要存在中文；</p><p>内存大约给两个G；</p><p>最大磁盘大小给40G左右；</p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码-拉钩</title>
    <link href="/2022/07/09/%E5%85%B6%E4%BB%96/%E5%AF%86%E7%A0%81/%E5%AF%86%E7%A0%81-%E6%8B%89%E9%92%A9/"/>
    <url>/2022/07/09/%E5%85%B6%E4%BB%96/%E5%AF%86%E7%A0%81/%E5%AF%86%E7%A0%81-%E6%8B%89%E9%92%A9/</url>
    
    <content type="html"><![CDATA[<h2 id="密码-拉钩"><a href="#密码-拉钩" class="headerlink" title="密码-拉钩"></a>密码-拉钩</h2><p>username:136***</p><p>password:133***Hao@</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码-虚拟机</title>
    <link href="/2022/07/09/%E5%85%B6%E4%BB%96/%E5%AF%86%E7%A0%81/%E5%AF%86%E7%A0%81-%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <url>/2022/07/09/%E5%85%B6%E4%BB%96/%E5%AF%86%E7%A0%81/%E5%AF%86%E7%A0%81-%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="密码-虚拟机"><a href="#密码-虚拟机" class="headerlink" title="密码-虚拟机"></a>密码-虚拟机</h2><p>username:liujunqiang</p><p>password:admin</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件下载--网址或位置</title>
    <link href="/2022/07/07/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD--%E7%BD%91%E5%9D%80%E6%88%96%E4%BD%8D%E7%BD%AE/"/>
    <url>/2022/07/07/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD--%E7%BD%91%E5%9D%80%E6%88%96%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="typora下载（免费版本）"><a href="#typora下载（免费版本）" class="headerlink" title="typora下载（免费版本）"></a>typora下载（免费版本）</h2><p>拉钩就业-》第一阶段-》模块三–》任务一-》软件</p><hr><h2 id="Mysql下载地址"><a href="#Mysql下载地址" class="headerlink" title="Mysql下载地址"></a>Mysql下载地址</h2><p>链接：<a href="https://pan.baidu.com/s/1hFwFL5a3qM1nluS7gJ4tVw">https://pan.baidu.com/s/1hFwFL5a3qM1nluS7gJ4tVw</a><br>提取码：ktbp </p><blockquote><p>文件列表：</p><p><a href="javascript:void(0);">SQLyog安装教程.docx</a></p><p><a href="javascript:void(0);">sqlyog.zip</a></p><p><a href="javascript:void(0);">MySql_卸载文档.docx</a></p><p><a href="javascript:void(0);">Mysql_环境变量配置.docx</a></p><p><a href="javascript:void(0);">MySql_安装文档.docx</a></p><p><a href="javascript:void(0);">mysql-installer-community-5.7.28.0.msi</a></p></blockquote><hr><h2 id="linux软件百度网盘地址"><a href="#linux软件百度网盘地址" class="headerlink" title="linux软件百度网盘地址"></a>linux软件百度网盘地址</h2><p>链接：<a href="https://pan.baidu.com/s/12Oc3TdMhEbxFxKQsQuPelg">https://pan.baidu.com/s/12Oc3TdMhEbxFxKQsQuPelg</a><br>提取码：gam7 </p><blockquote><p>文件列表：</p><p><a href="javascript:void(0);">Xshell5.exe</a></p><p><a href="javascript:void(0);">Xftp5.exe</a></p><p><a href="javascript:void(0);">VMware-workstation-full-15.0.2-10952284.exe</a>  【建议使用Vmware16版本，因为我使用台式机使用这个版本启动linux虚拟机后蓝屏了】</p><p><a href="javascript:void(0);">jdk-11.0.7_linux-x64_bin.tar.gz</a></p><p><a href="javascript:void(0);">CentOS-7-x86_64-DVD-1503-01.iso</a></p><p><a href="javascript:void(0);">apache-tomcat-8.5.55.tar.gz</a></p></blockquote><p>永不过期的Vmware许可证【只针对Vmware15使用】：UZ792-DHF8J-M81XP-MGM5T-MCAF2</p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网址</tag>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件安装-node</title>
    <link href="/2022/07/07/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-node/"/>
    <url>/2022/07/07/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-node/</url>
    
    <content type="html"><![CDATA[<h2 id="软件安装-node"><a href="#软件安装-node" class="headerlink" title="软件安装-node"></a>软件安装-node</h2><h3 id="【1】进入官网下载node"><a href="#【1】进入官网下载node" class="headerlink" title="【1】进入官网下载node"></a>【1】进入官网下载node</h3><p>node官网：<a href="https://nodejs.org/">https://nodejs.org/</a></p><p>下载旧版本：<a href="https://nodejs.org/zh-cn/download/releases/">https://nodejs.org/zh-cn/download/releases/</a></p><h3 id="【2】安装node"><a href="#【2】安装node" class="headerlink" title="【2】安装node"></a>【2】安装node</h3><p>傻瓜式安装，下一步下一步；</p><h3 id="【3】查看是否安装成功"><a href="#【3】查看是否安装成功" class="headerlink" title="【3】查看是否安装成功"></a>【3】查看是否安装成功</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">node -v<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm -v<br></code></pre></td></tr></table></figure><p><strong>可能出现的问题：</strong></p><blockquote><p>npm WARN config global <code>--global</code>, <code>--local</code> are deprecated. Use &#96;–location解决方案</p></blockquote><p>在node的安装目录下，找到下面2个文件里面的prefix -g替换为prefix –location&#x3D;global</p><p><img src="https://img-blog.csdnimg.cn/0f6f36de8be54fca9ff5c822333efbaf.png" alt="img"></p><hr><h3 id="【4】npm切换源地址-设置为淘宝镜像"><a href="#【4】npm切换源地址-设置为淘宝镜像" class="headerlink" title="【4】npm切换源地址(设置为淘宝镜像)"></a>【4】npm切换源地址(设置为淘宝镜像)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm config set registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><hr><h3 id="【5】npm修改全局下载和缓存路径"><a href="#【5】npm修改全局下载和缓存路径" class="headerlink" title="【5】npm修改全局下载和缓存路径"></a>【5】npm修改全局下载和缓存路径</h3><p>注意：记得先创建下文件夹；npm-cache与npm_global</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">npm config set cache <span class="hljs-string">&quot;D:\workSoft\nodejs\npm-cache&quot;</span><br>npm config set prefix <span class="hljs-string">&quot;D:\workSoft\nodejs\npm_global&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="【6】npm设置用户环境变量"><a href="#【6】npm设置用户环境变量" class="headerlink" title="【6】npm设置用户环境变量"></a>【6】npm设置用户环境变量</h3><p>环境变量path中添加：D:\workSoft\nodejs\npm_global</p><hr><h3 id="【7】命令行安装cnpm"><a href="#【7】命令行安装cnpm" class="headerlink" title="【7】命令行安装cnpm"></a>【7】命令行安装cnpm</h3><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm install -g cnpm --registry==https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><p>安装后验证：cnpm -v </p><blockquote><p>npm是node官方的包管理器。cnpm是个中国版的npm</p><p>如果因为网络原因无法使用npm下载，那cnpm这个就派上用场了</p><p>一定切记切记，npm和cnpm只是下载器的不同</p></blockquote><hr><h2 id="安装过程中出现的问题"><a href="#安装过程中出现的问题" class="headerlink" title="安装过程中出现的问题"></a>安装过程中出现的问题</h2><h3 id="【1】版本太新"><a href="#【1】版本太新" class="headerlink" title="【1】版本太新"></a>【1】版本太新</h3><p><code>npm ERR! ERESOLVE unable to resolve dependency tree</code></p><p>下载老版本的nodes【下载.msi结尾的文件】</p><p><a href="https://nodejs.org/zh-cn/download/releases/">https://nodejs.org/zh-cn/download/releases/</a></p><p>可以使用版本：node-v14.15.0-x64</p><h3 id="【2】idea中不能使用哪怕npm命令"><a href="#【2】idea中不能使用哪怕npm命令" class="headerlink" title="【2】idea中不能使用哪怕npm命令"></a>【2】idea中不能使用哪怕npm命令</h3><p>Terminal   C:\Windows\System32\cmd.exe</p><p><img src="/2022/07/07/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-node/image-20221122232452333.png" alt="image-20221122232452333"></p><h3 id="【3】node连接不上github"><a href="#【3】node连接不上github" class="headerlink" title="【3】node连接不上github"></a>【3】node连接不上github</h3><p>npm ERR! fatal: unable to access ‘<a href="https://github.com/adobe-webplatform/eve.git/">https://github.com/adobe-webplatform/eve.git/</a>‘: OpenSSL SSL_read: Connection was reset, errno 10054</p><p>–当前无法解决</p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【密码-】github</title>
    <link href="/2022/07/07/%E5%85%B6%E4%BB%96/%E5%AF%86%E7%A0%81/%E3%80%90%E5%AF%86%E7%A0%81-%E3%80%91github/"/>
    <url>/2022/07/07/%E5%85%B6%E4%BB%96/%E5%AF%86%E7%A0%81/%E3%80%90%E5%AF%86%E7%A0%81-%E3%80%91github/</url>
    
    <content type="html"><![CDATA[<h2 id="【密码-】github"><a href="#【密码-】github" class="headerlink" title="【密码-】github"></a>【密码-】github</h2><p>username:136***</p><p>password:133***hao</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码-gitee</title>
    <link href="/2022/07/07/%E5%85%B6%E4%BB%96/%E5%AF%86%E7%A0%81/%E5%AF%86%E7%A0%81-gitee/"/>
    <url>/2022/07/07/%E5%85%B6%E4%BB%96/%E5%AF%86%E7%A0%81/%E5%AF%86%E7%A0%81-gitee/</url>
    
    <content type="html"><![CDATA[<h2 id="密码-gitee"><a href="#密码-gitee" class="headerlink" title="密码-gitee"></a>密码-gitee</h2><p>username:136***</p><p>password:133***hao</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pdf转MD、HTML、word以及各种格式之间的相互转换</title>
    <link href="/2022/06/02/%E5%85%B6%E4%BB%96/pdf%E8%BD%ACMD%E3%80%81HTML%E3%80%81word%E4%BB%A5%E5%8F%8A%E5%90%84%E7%A7%8D%E6%A0%BC%E5%BC%8F%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <url>/2022/06/02/%E5%85%B6%E4%BB%96/pdf%E8%BD%ACMD%E3%80%81HTML%E3%80%81word%E4%BB%A5%E5%8F%8A%E5%90%84%E7%A7%8D%E6%A0%BC%E5%BC%8F%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://blog.csdn.net/weixin_42537413/article/details/106851492">https://blog.csdn.net/weixin_42537413/article/details/106851492</a></p><ul><li>PDF 转 Word，Excel，PPT，JPG 的网址：<a href="https://smallpdf.com/cn/pdf-to-word">https://smallpdf.com/cn/pdf-to-word</a></li></ul><p>【pdf转word】【pdf转md】（一天一次免费）</p><ul><li>PDF 转 Markdown 的网址：<a href="https://pdf2md.morethan.io/">https://pdf2md.morethan.io/</a></li></ul><p>（如果有表格的话就难办了，推荐使用第一种方式）</p><ul><li>PDF 转 HTML 的网址：<a href="https://www.pdftohtml.net/">https://www.pdftohtml.net/</a></li><li>Word，Excel，PPT，JPG 转 PDF 的网址：<a href="https://smallpdf.com/cn/pdf-to-word">https://smallpdf.com/cn/pdf-to-word</a></li><li>Markdown 转 PDF 的网址：<a href="http://open.rongcard.com/md2pdf">http://open.rongcard.com/md2pdf</a></li><li>HTML 转 PDF 的网址： <a href="https://www.htm2pdf.co.uk/">https://www.htm2pdf.co.uk/</a></li><li>Markdown 与 HTML，PDF，Doc 互转 的网址： <a href="http://coolaf.com/tool/md">http://coolaf.com/tool/md</a></li><li>HTML 与 Markdown 互转 的网址： <a href="http://www.bejson.com/convert/html2markdown/">http://www.bejson.com/convert/html2markdown/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件格式转换</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matlab实现文件拷贝</title>
    <link href="/2022/05/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/Matlab/Matlab%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D/"/>
    <url>/2022/05/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/Matlab/Matlab%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h2 id="Matlab实现文件拷贝"><a href="#Matlab实现文件拷贝" class="headerlink" title="Matlab实现文件拷贝"></a>Matlab实现文件拷贝</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs matlab">path=(<span class="hljs-string">&#x27;E:\test\matlab_test&#x27;</span>); <span class="hljs-comment">% 要拷贝的文件所在的目录；</span><br>to_path=(<span class="hljs-string">&#x27;E:\test\matlab_test03&#x27;</span>); <span class="hljs-comment">% 将文件拷贝到的目录(注意：要提前建好文件夹)</span><br>filename = <span class="hljs-string">&#x27;A&#x27;</span>; <span class="hljs-comment">% 输入文件名称（不带后缀）</span><br>suffix = <span class="hljs-string">&#x27;.txt&#x27;</span>; <span class="hljs-comment">% 输入文件后缀</span><br>filename_suffix=[filename,suffix]; <span class="hljs-comment">% 获取文件名称+文件后缀</span><br>all_path = [path,<span class="hljs-string">&#x27;\&#x27;</span>,filename_suffix]; <span class="hljs-comment">% 获取文件所在的位置</span><br><span class="hljs-keyword">for</span> a = <span class="hljs-number">1</span>:<span class="hljs-number">100</span> <br>    to_filename=[filename char(num2str(a)) suffix];<br>    to_all_path = [to_path,<span class="hljs-string">&#x27;\&#x27;</span>,to_filename]; <span class="hljs-comment">% 获取要拷贝的文件所在位置</span><br>    copyfile(all_path,to_all_path);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matlab安装</title>
    <link href="/2022/05/28/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/Matlab/Matlab%E5%AE%89%E8%A3%85/"/>
    <url>/2022/05/28/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/Matlab/Matlab%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="Matlab安装"><a href="#Matlab安装" class="headerlink" title="Matlab安装"></a>Matlab安装</h2><p>可参考文档：<a href="https://www.zhangshilong.cn/work/72247.html">https://www.zhangshilong.cn/work/72247.html</a></p><p>可进入这个文档中下载matlab及破解脚本；</p><p>秘钥：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">09806-<span class="hljs-number">07443</span>-<span class="hljs-number">53955</span>-<span class="hljs-number">64350</span>-<span class="hljs-number">21751</span>-<span class="hljs-number">41297</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决maven下载速度慢</title>
    <link href="/2022/05/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E8%A7%A3%E5%86%B3maven%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2/"/>
    <url>/2022/05/27/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E8%A7%A3%E5%86%B3maven%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="解决maven下载速度慢"><a href="#解决maven下载速度慢" class="headerlink" title="解决maven下载速度慢"></a>解决maven下载速度慢</h2><p>参考地址：<a href="http://t.zoukankan.com/wanpi-p-14529737.html">http://t.zoukankan.com/wanpi-p-14529737.html</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- mirror</span><br><span class="hljs-comment">         | Specifies a repository mirror site to use instead of a given repository. The repository that</span><br><span class="hljs-comment">         | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span><br><span class="hljs-comment">         | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span><br><span class="hljs-comment">         |</span><br><span class="hljs-comment">        &lt;mirror&gt;</span><br><span class="hljs-comment">          &lt;id&gt;mirrorId&lt;/id&gt;</span><br><span class="hljs-comment">          &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span><br><span class="hljs-comment">          &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class="hljs-comment">          &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span><br><span class="hljs-comment">        &lt;/mirror&gt;</span><br><span class="hljs-comment">         --&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>uk<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://uk.maven.org/maven2/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>CN<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>OSChina Central<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>internal nexus repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- &lt;url&gt;http://192.168.1.100:8081/nexus/content/groups/public/&lt;/url&gt;--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo.maven.apache.org/maven2<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视频学习法.</title>
    <link href="/2022/05/21/%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E6%B3%95/"/>
    <url>/2022/05/21/%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="视频学习法"><a href="#视频学习法" class="headerlink" title="视频学习法"></a>视频学习法</h2><p>跟着视频，做着笔记；</p><p>记笔记结束后，重新整理一遍；极可能的最短时间内对一遍能够理解讲的是什么；</p><p>每周或者两周将文档重新修整一遍；</p><p>视频尽量不要停止；</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>追过的动漫电视剧电影</title>
    <link href="/2022/05/21/%E5%A8%B1%E4%B9%90/%E8%BF%BD%E8%BF%87%E7%9A%84%E5%8A%A8%E6%BC%AB%E7%94%B5%E8%A7%86%E5%89%A7%E7%94%B5%E5%BD%B1/"/>
    <url>/2022/05/21/%E5%A8%B1%E4%B9%90/%E8%BF%BD%E8%BF%87%E7%9A%84%E5%8A%A8%E6%BC%AB%E7%94%B5%E8%A7%86%E5%89%A7%E7%94%B5%E5%BD%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="追过的动漫电视剧电影"><a href="#追过的动漫电视剧电影" class="headerlink" title="追过的动漫电视剧电影"></a>追过的动漫电视剧电影</h2><h3 id="动漫："><a href="#动漫：" class="headerlink" title="动漫："></a>动漫：</h3><p><strong>灵笼：</strong>期待第二季</p><p><strong>间谍过家家</strong>：比较不错的动漫，第二季还没有出来</p><p><strong>我气哭了百万修仙者</strong>：不太好看</p><p><strong>七界第一仙</strong></p><p><strong>开局一座山</strong></p><p><strong>天行九歌2</strong></p><p><strong>完美世界</strong>：很不错的动漫</p><p> **雄兵连3雷霆万钧 **：还可以</p><p><strong>魁拔第四季</strong>：期待</p><hr><h3 id="电视剧"><a href="#电视剧" class="headerlink" title="电视剧"></a>电视剧</h3><p><strong>重生之门</strong>【已完结】【20220525】不怎么好看，讲解盗贼的事情；</p><p><strong>苍兰诀：</strong>【20220828】  还可以，一天看完了；魔君与小仙女的故事</p><p>你是我的眼：【202120831】沈腾演的，还不错</p>]]></content>
    
    
    <categories>
      
      <category>娱乐</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4. oracle的子查询和用户管理</title>
    <link href="/2022/05/21/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/4.%20oracle%E7%9A%84%E5%AD%90%E6%9F%A5%E8%AF%A2%E5%92%8C%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <url>/2022/05/21/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/4.%20oracle%E7%9A%84%E5%AD%90%E6%9F%A5%E8%AF%A2%E5%92%8C%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="oracle的子查询和用户管理"><a href="#oracle的子查询和用户管理" class="headerlink" title="oracle的子查询和用户管理"></a>oracle的子查询和用户管理</h2><h3 id="oralce-作业处理"><a href="#oralce-作业处理" class="headerlink" title="oralce-作业处理"></a>oralce-作业处理</h3><p>这个作业好像在上节中写过；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span>选择部门<span class="hljs-number">30</span>中的所有员工.<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno <span class="hljs-operator">=</span> <span class="hljs-number">30</span><br><span class="hljs-number">2.</span>列出所有办事员(CLERK)的姓名，编号和部门编号.<br><span class="hljs-keyword">select</span> ename,empno,deptno <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CLERK&#x27;</span>;<br><span class="hljs-number">3.</span>找出佣金高于薪金的员工.<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal<span class="hljs-operator">&lt;</span>comm;<br><span class="hljs-number">4.</span>找出佣金高于薪金的<span class="hljs-number">60</span><span class="hljs-operator">%</span>的员工.<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal<span class="hljs-operator">*</span><span class="hljs-number">0.6</span><span class="hljs-operator">&lt;</span>comm<br><span class="hljs-number">5.</span>找出部门<span class="hljs-number">10</span>中所有经理(MANAGER)和部门<span class="hljs-number">20</span>中所有办事员(CLERK)的详细资料.<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> (job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;MANAGER&#x27;</span> <span class="hljs-keyword">and</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">10</span>) <span class="hljs-keyword">or</span>(dept<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">and</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CLERK&#x27;</span>)<br><span class="hljs-number">6.</span>找出部门<span class="hljs-number">10</span>中所有经理(MANAGER),部门<span class="hljs-number">20</span>中所有办事员(CLERK),既不是经理又不是办事员但其薪金大于或等于<span class="hljs-number">2000</span>的所有员工的详细资料.<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span>  (job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;MANAGER&#x27;</span> <span class="hljs-keyword">and</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">10</span>) <span class="hljs-keyword">or</span>(dept<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">and</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CLERK&#x27;</span>) <span class="hljs-keyword">or</span> (job<span class="hljs-operator">&lt;&gt;</span><span class="hljs-string">&#x27;MANAGER&#x27;</span> <span class="hljs-keyword">and</span> job<span class="hljs-operator">&lt;&gt;</span><span class="hljs-string">&#x27;CLERK&#x27;</span> <span class="hljs-keyword">and</span> sal<span class="hljs-operator">&gt;=</span><span class="hljs-number">2000</span>)<br><span class="hljs-number">7.</span>找出收取佣金的员工的不同工作.<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><span class="hljs-number">8.</span>找出不收取佣金或收取的佣金低于<span class="hljs-number">100</span>的员工.<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> comm<span class="hljs-operator">&lt;</span><span class="hljs-number">100</span><br><span class="hljs-number">9.</span>找出各月倒数第<span class="hljs-number">3</span>天受雇的所有员工.<br>【这个需要查找日期函数】【last_day】【last_day<span class="hljs-number">-2</span>】<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp hiredate<span class="hljs-operator">=</span>last_day(hiredate)<span class="hljs-number">-2</span><br><span class="hljs-number">10.</span>找出早于<span class="hljs-number">12</span>年前受雇的员工.<br>【先不写】<br><span class="hljs-number">11.</span>以首字母大写的方式显示所有员工的姓名.<br><span class="hljs-keyword">select</span> initcap(ename) <span class="hljs-keyword">from</span> emp;<br><span class="hljs-number">12.</span>显示正好为<span class="hljs-number">5</span>个字符的员工的姓名.<br>【需要查找字符函数】【没有直接的函数使用】【百度】【length()】<br><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> length(ename)<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br><span class="hljs-number">13.</span>显示不带有&quot;R&quot;的员工的姓名.<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%R%&#x27;</span>;<br><span class="hljs-number">14.</span>显示所有员工姓名的前三个字符.<br>【需要查找字符函数】【字符切割】【substr()】<br><span class="hljs-keyword">select</span> substr(ename,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>) <span class="hljs-keyword">from</span> emp;【理解了】【函数的后一位是需要截取字符串的位数】<br><span class="hljs-number">15.</span>显示所有员工的姓名,用a替换所有&quot;A&quot;<br><span class="hljs-keyword">select</span> replace(ename,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">from</span> emp;<br><span class="hljs-number">16.</span>显示满<span class="hljs-number">10</span>年服务年限的员工的姓名和受雇日期.<br>【需要查找日期函数】【截取年】【获取系统日期】<br><span class="hljs-keyword">select</span> sysdate <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> ename,hiredate,<span class="hljs-built_in">floor</span>((sysdate<span class="hljs-operator">-</span>hiredate)<span class="hljs-operator">/</span><span class="hljs-number">365</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> (sysdate<span class="hljs-operator">-</span>hiredate)<span class="hljs-operator">/</span><span class="hljs-number">365</span><span class="hljs-operator">&gt;</span><span class="hljs-number">10</span>【总感觉不对】<br><span class="hljs-number">17.</span>显示员工的详细资料,按姓名排序.<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> ename;<br><span class="hljs-number">18.</span>显示员工的姓名和受雇日期,根据其服务年限,将最老的员工排在最前面.<br>【排序里面可以使用别名】<br><span class="hljs-keyword">select</span> ename,hiredate,<span class="hljs-built_in">floor</span>((sysdate<span class="hljs-operator">-</span>hiredate)<span class="hljs-operator">/</span><span class="hljs-number">365</span>) &quot;years&quot; <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> hiredate <span class="hljs-keyword">desc</span><br><span class="hljs-number">19.</span>显示所有员工的姓名、工作和薪金,按工作的降序排序,若工作相同则按薪金排序.<br><span class="hljs-keyword">select</span> ename,job,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> job <span class="hljs-keyword">desc</span>,sal;<br><span class="hljs-number">20.</span>显示所有员工的姓名、加入公司的年份和月份,按受雇日期所在月排序,若月份相同则将最早年份的员工排在最前面.<br>【别名不能使用<span class="hljs-keyword">year</span>，<span class="hljs-keyword">year</span>是关键字】<br><span class="hljs-keyword">select</span> ename,hiredate,to_char(hiredate,<span class="hljs-string">&#x27;yyyy&#x27;</span>) years,to_char(hiredate,<span class="hljs-string">&#x27;mm&#x27;</span>) ms <span class="hljs-keyword">from</span> emp ms,years<br><span class="hljs-number">21.</span>显示在一个月为<span class="hljs-number">30</span>天的情况所有员工的日薪金,忽略余数.<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">floor</span>((sal<span class="hljs-operator">+</span>nvl(comm,<span class="hljs-number">0</span>))<span class="hljs-operator">/</span><span class="hljs-number">30</span>) <span class="hljs-keyword">from</span> emp;<br><span class="hljs-number">22.</span>找出在(任何年份的)<span class="hljs-number">2</span>月受聘的所有员工。<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> to_char(hiredate,<span class="hljs-string">&#x27;mm&#x27;</span>)<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br><span class="hljs-number">23.</span>对于每个员工,显示其加入公司的天数.<br>【函数，返回两个日期间的天数】<br><span class="hljs-keyword">select</span> ename,sysdate<span class="hljs-operator">-</span>hiredate <span class="hljs-keyword">from</span> emp;<br><span class="hljs-number">24.</span>显示姓名字段的任何位置包含&quot;A&quot;的所有员工的姓名.<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%A%&#x27;</span>;<br><span class="hljs-number">25.</span>以年月日的方式显示所有员工的服务年限.<br>【month_between显示的是相差的月】<br><span class="hljs-keyword">select</span> ename,<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">floor</span>(month_between(sysdate,hiredate))<span class="hljs-operator">/</span><span class="hljs-number">12</span>)),<span class="hljs-built_in">mod</span>(<span class="hljs-built_in">floor</span>(month_between(sysdate,hiredate)),<span class="hljs-number">12</span>),<span class="hljs-built_in">mod</span>(sysdate<span class="hljs-operator">-</span>hiredate,<span class="hljs-number">30</span>) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><p>难点不再SQL语句上，还是写的少；</p><hr><h3 id="多表联合查询SQL92讲解"><a href="#多表联合查询SQL92讲解" class="headerlink" title="多表联合查询SQL92讲解"></a>多表联合查询SQL92讲解</h3><p>知识点1：查看字符长度的函数-length(字段名)，返回字符的长度</p><p>知识点2：获取系统当前时间，关键字 sysdate;</p><p>知识点3：排序中可以使用别名【建议使用】</p><p>sql语句的难点：在于汉语的描述的难度；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询员工姓名、工作、薪资、部门名称；</span><br><span class="hljs-comment">-- 部门名称没有在员工表中；</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dept;<br></code></pre></td></tr></table></figure><p>查询的数据分布在多张表中；</p><p>多表联合查询有多种方式：</p><p>SQL92方式； 92年份的标准</p><p>SQL99方式； 99年份的标准</p><p>都可以使用；看自己想用哪种了；</p><p>这节主要学习92方式；</p><p>当需要获取的数据分布在多张表中，考虑使用多表联合查询</p><table><thead><tr><th>92方式</th><th></th></tr></thead><tbody><tr><td>笛卡尔积【离散数学中】</td><td>A-》B共有多少中方式【A*B】<br>select * from emp,dept;<br>每一条都挨个对一遍；</td></tr><tr><td>等值连接</td><td>两个表的字段相等</td></tr><tr><td>不等值连接</td><td>两个表的字段不相等</td></tr><tr><td>自连接</td><td>自己连接自己</td></tr><tr><td>外连接</td><td>左外连接，右外连接</td></tr></tbody></table><h4 id="SQL92笛卡尔积"><a href="#SQL92笛卡尔积" class="headerlink" title="SQL92笛卡尔积"></a>SQL92笛卡尔积</h4><p>笛卡尔积所得到的结果：结果的数量是-<strong>多个表数量的乘积</strong>；</p><p><strong>存在正确的数据，还存在错误的数据</strong></p><p>例如：迪达尔积得到的结果的部门和部门名称不对应；</p><p>笛卡尔积的表数据一定存在正确的数据；</p><p>下一步我们需要对数据进行筛选【获取正确的结果】</p><p><strong>使用where进行筛选</strong>；</p><h4 id="SQL92等值连接"><a href="#SQL92等值连接" class="headerlink" title="SQL92等值连接"></a>SQL92等值连接</h4><p>先做笛卡尔积，然后进行筛选，筛选条件为等值筛选；</p><p>又叫做连接条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp,dept <span class="hljs-keyword">where</span> emp.daptno<span class="hljs-operator">=</span>dept.deptno<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询员工姓名、工作、薪资、部门名称</span><br><span class="hljs-keyword">select</span> ename,job,sal,dname <span class="hljs-keyword">from</span> emp,dept <span class="hljs-keyword">where</span> emp.deptno<span class="hljs-operator">=</span>dept.deptno<br></code></pre></td></tr></table></figure><p>可以直接在select字句中使用字段直接获取数据，但是效率比较低；</p><p><strong>建议查询字段前加上表名</strong>，这样效率会高一些；还可以避免报错</p><p>【<strong>公共字段前必须加表名</strong>】</p><p>如果是公共字段【多个表中都有这个字段】，必须将这个字段前面加上表名；</p><p>可以给表使用别名【单个字母或两个字母】【尽可能的简洁】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename <span class="hljs-keyword">from</span> emp e,dept d;<br></code></pre></td></tr></table></figure><h4 id="SQL92不等值连接"><a href="#SQL92不等值连接" class="headerlink" title="SQL92不等值连接"></a>SQL92不等值连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询员工姓名、工作、工资、工资等级</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> salgrade<br><span class="hljs-keyword">select</span> emp.ename,emp.job,emp.dal,dept.dname,emp.deptno <span class="hljs-keyword">from</span> emp e,salgrade s <span class="hljs-keyword">where</span> e.sal<span class="hljs-operator">&gt;=</span>s.losal<br></code></pre></td></tr></table></figure><p><strong>字段前尽可能的都加上表的别名</strong>，否则自己看字节或别人的sql就很难受了【不知道是哪个表中的字段】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> emp.ename,emp.job,emp.dal,dept.dname,emp.deptno <span class="hljs-keyword">from</span> emp e,salgrade s <span class="hljs-keyword">where</span> e.sal<span class="hljs-operator">&gt;=</span>s.losal <span class="hljs-keyword">and</span> e.sal<span class="hljs-operator">&lt;=</span>s.hisal<br></code></pre></td></tr></table></figure><p>要知道等值连接、不等值连接、普通筛选的区别；</p><h4 id="SQL92自连接"><a href="#SQL92自连接" class="headerlink" title="SQL92自连接"></a>SQL92自连接</h4><p>A表找B表中的某字段，B表中的某字段找A表中的某字段</p><p>自己对自己做笛卡尔积；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e1.ename,e1.job,e1.sal,e2.ename <span class="hljs-keyword">from</span> emp e1,emp e2 <span class="hljs-keyword">where</span> e1.mgr<span class="hljs-operator">=</span>e2.empno;<br></code></pre></td></tr></table></figure><h4 id="SQL92外连接"><a href="#SQL92外连接" class="headerlink" title="SQL92外连接"></a>SQL92外连接</h4><h5 id="SQL92左外连接"><a href="#SQL92左外连接" class="headerlink" title="SQL92左外连接"></a>SQL92左外连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询员工姓名、工作、薪资、不能名称及没有部门的员工信息；</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e,dept d <span class="hljs-keyword">where</span> e.deptno<span class="hljs-operator">=</span>d.deptno(<span class="hljs-operator">+</span>)<br></code></pre></td></tr></table></figure><p><strong>加到右边-右边可以显示空数据</strong></p><p>加到右边，显示左边的数据；【右边为空的也可以查出来】</p><h5 id="SQL92右外连接"><a href="#SQL92右外连接" class="headerlink" title="SQL92右外连接"></a>SQL92右外连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询员工姓名、工作、薪资、不能名称及没员工信息的部门；</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e,dept d <span class="hljs-keyword">where</span> e.deptno(<span class="hljs-operator">+</span>)<span class="hljs-operator">=</span>d.deptno<br></code></pre></td></tr></table></figure><p>哪边没有加在哪边；</p><p>92方式没有XXXX？两边都有加号的情况</p><p>92方式最重要的是等值；</p><hr><h3 id="oralce-多表联合查询SQL99-1"><a href="#oralce-多表联合查询SQL99-1" class="headerlink" title="oralce-多表联合查询SQL99(1)"></a>oralce-多表联合查询SQL99(1)</h3><p>sql92不是太好理解；</p><p>SQL92没有SQL99好理解；</p><p>+号加在哪边显示哪边为空的值；</p><p>SQL99多表查询</p><p>第一步都是一样的，查询笛卡尔积</p><p>第二部筛选</p><p>如果想用笛卡尔积，需要使用<code>cross join</code>关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">cross</span> <span class="hljs-keyword">join</span> dept;<br></code></pre></td></tr></table></figure><p>这个没什么用；</p><p>想看笛卡尔积只能使用cross join关键字看</p><h4 id="SQL99自然连接"><a href="#SQL99自然连接" class="headerlink" title="SQL99自然连接"></a>SQL99自然连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> dept<br></code></pre></td></tr></table></figure><p><strong>笛卡尔积+等值筛选</strong>；【自动进行等值筛选】</p><p>前提是字段名相同；【必须同名同值】</p><p><strong>问题1</strong>：如果想要过滤部分字段怎么办？</p><p><strong>问题2</strong>：如果想字段名不相同，但是值相同的话是做不到的；</p><p>所以这种方式是不常用的【不可控】；</p><h4 id="SQL99using关键字"><a href="#SQL99using关键字" class="headerlink" title="SQL99using关键字"></a>SQL99using关键字</h4><p>使用<code>using关键字</code>：可以解决问题1；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">using</span>(deptno,dname)<br></code></pre></td></tr></table></figure><p>前提，指定的字段必须是两个表的字段中都需要有deptno和dname字段</p><p>笛卡尔积+using</p><hr><h3 id="oracle-多表联合查询SQL-2-amp-三表联合查询"><a href="#oracle-多表联合查询SQL-2-amp-三表联合查询" class="headerlink" title="oracle-多表联合查询SQL(2)&amp;三表联合查询"></a>oracle-多表联合查询SQL(2)&amp;三表联合查询</h3><p>那我们需要做的是等值连接、不等值连接、外连接</p><p>sql99我们看笛卡尔积必须要使用<code>cross join关键字</code>来看</p><p>如果想按照字段名不同值相同该如何办？</p><p>自定义筛选使用<code>on关键字</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">inner</span> dept <span class="hljs-keyword">on</span> emp.ename<span class="hljs-operator">=</span>dept.deptno<br></code></pre></td></tr></table></figure><p>不建议on后跟普通过滤条件，阅读型极差；</p><p>各种类型的条件混合在一起，不好让人理解</p><p>建议普通筛选条件写在where的后面；</p><h4 id="SQL99外连接"><a href="#SQL99外连接" class="headerlink" title="SQL99外连接"></a>SQL99外连接</h4><p>左外连接</p><p>右外连接</p><p>全外连接</p><h5 id="SQL99左外连接"><a href="#SQL99左外连接" class="headerlink" title="SQL99左外连接"></a>SQL99左外连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询员工姓名、工作、薪资、部门名称及没有部门的员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno<span class="hljs-operator">=</span>d.deptno;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno<span class="hljs-operator">=</span>d.deptno;<br></code></pre></td></tr></table></figure><p>inner join查询的结果比left join的结果少了一条；</p><p>因为一个员工的部门信息为null；</p><p>left是做边显示全的数据，右边可以显示为空的数据；</p><h5 id="SQL99右外连接"><a href="#SQL99右外连接" class="headerlink" title="SQL99右外连接"></a>SQL99右外连接</h5><p>– 查询员工姓名、工作、薪资、部门名称及没有员工的部门信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno<span class="hljs-operator">=</span>d.deptno<br></code></pre></td></tr></table></figure><h5 id="SQL99全外连接"><a href="#SQL99全外连接" class="headerlink" title="SQL99全外连接"></a>SQL99全外连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询员工姓名、工作、薪资、部门名称及没有员工的部门信息及没有部门的员工信息；</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">full</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno<span class="hljs-operator">=</span>d.deptno<br></code></pre></td></tr></table></figure><p>inner 可以不写，建议加上，阅读像更强；</p><p>outer可以不写</p><p>如果使用on或者usering关键字对结果进行筛选的时候，必须使用inner join作用表与表的连接，其中join可以省略；</p><p>外连接outer关键字可以省略不写；</p><p>依然可以使用继续使用分组 having 分组；</p><h4 id="SQL99自连接"><a href="#SQL99自连接" class="headerlink" title="SQL99自连接"></a>SQL99自连接</h4><p>–查询员工及其上级领导姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e1.<span class="hljs-operator">*</span>,e2.ename <span class="hljs-keyword">from</span> emp e1 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> emp  e2 <span class="hljs-keyword">on</span> e1.mgr<span class="hljs-operator">=</span>e2.empno<br></code></pre></td></tr></table></figure><p>cross join</p><p>inner join</p><p>using</p><p>left join</p><p>right join</p><p>full join</p><p>sql92&amp;sql99实现三表联合查询；</p><p>使用plsql新建表-》tables-&gt;新建-》列</p><p>类型：只要是数组都是number(10)</p><p>varchar2(100)</p><p>如何设置为主键？</p><p>键-》名称-》类型：Primary-&gt;列：字段-》允许：勾选</p><p>创建city表，直接使用图形操作就好；</p><p>如果想要修改数据，在select的最后加上for update即可；</p><p>将部门表中的loc字段设置为城市表的城市编号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> dept <span class="hljs-keyword">set</span> loc<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">50</span><br><span class="hljs-keyword">update</span> dept <span class="hljs-keyword">set</span> loc<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">40</span><br>.....<br></code></pre></td></tr></table></figure><p>完成三表联合查询</p><p>sql92实现：查询员工信息及部门名称及城市名称；</p><p>思路：先笛卡尔积再筛选</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e,dept d,city c<br></code></pre></td></tr></table></figure><p>员工对部门，部门对城市；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询员工信息及部门名称及城市名称；</span><br><span class="hljs-keyword">select</span> e.<span class="hljs-operator">*</span>,d.dname,c.cname <span class="hljs-keyword">from</span> emp e,dept d,city c <span class="hljs-keyword">where</span> e.deptno<span class="hljs-operator">=</span>d.deptno <span class="hljs-keyword">and</span> d.loc <span class="hljs-operator">=</span> c.loc;<br><span class="hljs-comment">-- 查询员工信息及部门名称及城市名称并且员工的工资大于20000或者有奖金</span><br><span class="hljs-keyword">select</span> e.<span class="hljs-operator">*</span>,d.dname,c.cname <span class="hljs-keyword">from</span> emp e,dept d,city c <span class="hljs-keyword">where</span> e.deptno<span class="hljs-operator">=</span>d.deptno <span class="hljs-keyword">and</span> d.loc <span class="hljs-operator">=</span> c.loc <span class="hljs-keyword">and</span> (e.sal<span class="hljs-operator">&gt;</span><span class="hljs-number">2000</span> <span class="hljs-keyword">or</span> e.comm <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><p>sql92的特点：<strong>易于书写，难于阅读</strong></p><p>order by 后也建议后面使用表单别名</p><p>sql92的SQL语法结构不清晰【各种过滤条件都混在一起了】</p><p>sql99实现：查询员工信息及部门名称及城市名称；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> dept d one.deptno<span class="hljs-operator">=</span>d.deptno <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> city c <span class="hljs-keyword">on</span> d.loc<span class="hljs-operator">=</span>c.loc;<br></code></pre></td></tr></table></figure><p><strong>sql99效率会更高一些</strong>；</p><p>查询员工信息及部门名称及城市名称并且员工的工资大于20000或者有奖金</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> dept d one.deptno<span class="hljs-operator">=</span>d.deptno <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> city c <span class="hljs-keyword">on</span> d.loc<span class="hljs-operator">=</span>c.loc <span class="hljs-keyword">where</span> e.sal<span class="hljs-operator">&gt;</span><span class="hljs-number">2000</span> <span class="hljs-keyword">or</span> e.comm <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p><strong>sql99比sql92好阅读</strong>【sql99的结构特别的清晰】</p><p>sql99的特点：难于书写，易于阅读；</p><p>难书写没关系，重要的是好阅读；过些天后能快速的读懂；</p><hr><h3 id="oracle-子查询"><a href="#oracle-子查询" class="headerlink" title="oracle-子查询"></a>oracle-子查询</h3><p><strong>查询筛选条件不明确</strong>的时候使用子查询；</p><p>where字句中允许使用查询语句；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal<span class="hljs-operator">&gt;</span>(<span class="hljs-keyword">select</span> sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CLARK&#x27;</span>);<br></code></pre></td></tr></table></figure><p>并且<strong>查询结果只有一个</strong>（sal）;</p><h4 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询工资高于平均工资的员工姓名和工资</span><br><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal<span class="hljs-operator">&gt;</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(sal) <span class="hljs-keyword">from</span> emp);<br><span class="hljs-comment">-- 查询和scott属于同一部门且工资低于它的员工资料</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> deptno <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SCOTT&#x27;</span>) <span class="hljs-keyword">and</span> sal<span class="hljs-operator">&lt;</span>(<span class="hljs-keyword">select</span> sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SCOTT&#x27;</span>);<br><span class="hljs-comment">-- 查询工资最高的员工资料</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(sal) <span class="hljs-keyword">from</span> emp)<br><span class="hljs-comment">--查询职务和scott相同，雇佣时间早的员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SCOTT&#x27;</span>) <span class="hljs-keyword">and</span> hiredate<span class="hljs-operator">&lt;</span>(<span class="hljs-keyword">select</span> hiredate <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SCOTT&#x27;</span>);<br><span class="hljs-comment">-- 查询工资比scott高或者雇佣时间早的员工编号</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SCOTT&#x27;</span>) <span class="hljs-keyword">or</span> hiredate<span class="hljs-operator">&lt;</span>(<span class="hljs-keyword">select</span> hiredate <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SCOTT&#x27;</span>);<br></code></pre></td></tr></table></figure><hr><h4 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h4><p>子查询的记过只有一个字段但是<strong>字段有n个值</strong>，考虑使用多上子查询；</p><p><code>any关键字</code> :任意</p><p><code>all关键字</code>：所有</p><p><code>in关键字</code>： 任意【相当于any】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询工资高于任意一个CLERR的所有员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job<span class="hljs-operator">&gt;</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CLERR&#x27;</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal<span class="hljs-operator">&gt;</span><span class="hljs-keyword">any</span>(<span class="hljs-keyword">select</span> sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CLERR&#x27;</span>);<br><span class="hljs-comment">-- 查询工资过于任意一个SALESMAN的所有员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal<span class="hljs-operator">&gt;</span><span class="hljs-keyword">any</span>(<span class="hljs-keyword">select</span> sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SALESMAN&#x27;</span>);<br><span class="hljs-comment">-- 查询工资高于所有SALESMAN的员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal<span class="hljs-operator">&gt;</span><span class="hljs-keyword">all</span>(<span class="hljs-keyword">select</span> sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SALESMAN&#x27;</span>);<br><span class="hljs-comment">-- 查询部门20中同部门10的雇员工作一样的雇员信息</span><br><span class="hljs-keyword">select</span> job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;MANAGER&#x27;</span> <span class="hljs-keyword">or</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;PRESIDENT&#x27;</span> <span class="hljs-keyword">or</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CLERK&#x27;</span>) <span class="hljs-keyword">and</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">20</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">10</span>) <span class="hljs-keyword">and</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">20</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job <span class="hljs-keyword">any</span>(<span class="hljs-keyword">select</span> job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">10</span>) <span class="hljs-keyword">and</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><hr><h3 id="oracle-用户管理"><a href="#oracle-用户管理" class="headerlink" title="oracle-用户管理"></a>oracle-用户管理</h3><p>到现在为止，我们都可以查询了；</p><p>oracle学习：</p><p>oracle管理系统介绍</p><p>oracle数据库的数据管理（crud）</p><p>oracle账户管理</p><p>oracle二维表管理</p><p>oracle的账户管理学习：</p><p>oracle子代账户：</p><p>-system管理账户 【具备大部分oracle的操作权限，主要用于管理普通账户及oracle的数据】【使用人：oracle数据维护工作人员】</p><p>-sys超级管理员【具备system的所有权限，同事又具备其他的权限】【使用人：oracle工程师】</p><h4 id="创建账户："><a href="#创建账户：" class="headerlink" title="创建账户："></a>创建账户：</h4><p>需要使用system账户，并使用dba身份，登录oracle关系系统</p><p>部分同学system账户不能用，可以使用sys</p><p>身份不一样，权限也不一样；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> bjsxt indentified <span class="hljs-keyword">by</span> bjsxt;<br></code></pre></td></tr></table></figure><p>创建好用户后还没有登录权限；</p><p>类似于新员工日志，第一次进公司需要有人带进去，没有权限进去；</p><h4 id="赋予权限："><a href="#赋予权限：" class="headerlink" title="赋予权限："></a>赋予权限：</h4><p>Users-》system-&gt;右击-查看-》角色权限</p><p>角色是权限的一系列集合；</p><p>比如说是市长，具备市长的所有权限；</p><p>新建的用户，对象，角色和。。都没有；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 给用户赋予登录权限</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">connect</span> <span class="hljs-keyword">to</span> bjsxt;<br><span class="hljs-comment">-- 给用户资源操作权限</span><br><span class="hljs-keyword">grant</span> resource <span class="hljs-keyword">to</span> bjsxt;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 说明也可以给添加用户的权限了</span><br><span class="hljs-comment">-- 给用户赋予DBA权限</span><br><span class="hljs-keyword">grant</span> dba <span class="hljs-keyword">to</span> bjsxt;<br><span class="hljs-comment">-- 删除dba权限</span><br><span class="hljs-keyword">revoke</span> dba <span class="hljs-keyword">from</span> bjsxt;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询其他用户的表</span><br><span class="hljs-comment">-- 使用用户名.表名</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> scott.emp;<br></code></pre></td></tr></table></figure><h4 id="删除权限"><a href="#删除权限" class="headerlink" title="删除权限"></a>删除权限</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除dba权限</span><br><span class="hljs-keyword">revoke</span> dba <span class="hljs-keyword">from</span> bjsxt;<br></code></pre></td></tr></table></figure><p>最大的项目变故：项目重构；</p><p>oracle的二维表管理；</p><p>创建表；</p><p>维护表；</p><p>删除表；</p><hr><h3 id="oracle-简单的二维表创建学习"><a href="#oracle-简单的二维表创建学习" class="headerlink" title="oracle-简单的二维表创建学习"></a>oracle-简单的二维表创建学习</h3><p>oracle的二维表的管理；</p><p>二维表的创建；</p><p>可以先登录其他的用户；</p><p>select * from emp;</p><p>鼠标按住CTRL键，点击下表名；</p><p>右下角有个，查看sql的按钮，点击下，可以看到建表语句；</p><p>oracle的数值类型，只有number；</p><p>number(10,2) 整数+小数总共十位，小数位占两位；</p><p>varchar2(100) 100是长度，后面讲；</p><p>age number(3) 3就够了；</p><p>sex char(2) 或者char(4)</p><p>varchar2和char都代表String的字符；</p><p>birthday data</p><p>to_date增添新数据的时候</p><p>to_char查询数据的时候使用</p><p>number(a,b)  数值类型</p><p>总长度为a，小数长度为b，小数位可以不写；</p><p>number(a) 整型</p><p>number(a,b) 浮点类型</p><p>varchar2(ln) ln表示字符的最大长度，实际存储内存长度是根据字符的大小来分配的，不过最大不能超过ln;</p><p>看编码格式是哪个了，utf-8,gdk</p><p>一个汉字占三个字节，长度为100；</p><p>根据字的大小去开辟空间的，是浮动的；</p><p>char(ln)类型：不管字符数据长度是多大，直接开辟ln大小的空间存储数据；</p><p>char的存储速率一定高于varchar2的（因为底层没有判断的）</p><p>大量字符使用varcahr2，小型数据使用char【例如性别】；</p><p>varchar2：动态分配存储空间，节省空间；</p><p>char：存储效率高于varchar2；</p><p>性别存A也可以，没有数据的限制约束；</p><p>下节课讲解字段的约束；</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【hexo】-配置文件修改</title>
    <link href="/2022/05/18/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/hexo/hexo-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9/"/>
    <url>/2022/05/18/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/hexo/hexo-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="【hexo】-配置文件修改"><a href="#【hexo】-配置文件修改" class="headerlink" title="【hexo】-配置文件修改"></a>【hexo】-配置文件修改</h2><h3 id="浏览器标签的图标"><a href="#浏览器标签的图标" class="headerlink" title="浏览器标签的图标"></a>浏览器标签的图标</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 用于浏览器标签的图标</span><br><span class="hljs-comment"># Icon for browser tab</span><br><span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/favicon.png</span><br></code></pre></td></tr></table></figure><p>下载图标：<a href="https://www.aigei.com/icon">https://www.aigei.com/icon</a></p><hr><h3 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">blog_title: <span class="hljs-string">&quot;xuebaqiang&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="首页标题内容"><a href="#首页标题内容" class="headerlink" title="首页标题内容"></a>首页标题内容</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 首页副标题的独立设置</span><br>  <span class="hljs-comment"># Independent config of home page subtitle</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>    <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;让工作与生活更加简单！”</span><br></code></pre></td></tr></table></figure><h3 id="白天与黑夜样式调整"><a href="#白天与黑夜样式调整" class="headerlink" title="白天与黑夜样式调整"></a>白天与黑夜样式调整</h3><h4 id="标题颜色"><a href="#标题颜色" class="headerlink" title="标题颜色"></a>标题颜色</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 文章正文字体色（h1 h2 h3...）</span><br><span class="hljs-comment"># Color of Article heading (h1 h2 h3...)</span><br><span class="hljs-attr">post_heading_color:</span> <span class="hljs-string">&quot;#FF4500&quot;</span> <span class="hljs-comment">#&quot;#1a202c&quot;</span><br><span class="hljs-attr">post_heading_color_dark:</span> <span class="hljs-string">&quot;#FF4500&quot;</span> <span class="hljs-comment">#&quot;#c4c6c9&quot;</span><br></code></pre></td></tr></table></figure><h4 id="分隔线和表格边线的颜色"><a href="#分隔线和表格边线的颜色" class="headerlink" title="分隔线和表格边线的颜色"></a>分隔线和表格边线的颜色</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 分隔线和表格边线的颜色</span><br><span class="hljs-comment"># Color of horizontal rule and table border</span><br><span class="hljs-attr">line_color:</span> <span class="hljs-string">&quot;Blue&quot;</span> <span class="hljs-comment">#&quot;#eaecef&quot;</span><br><span class="hljs-attr">line_color_dark:</span> <span class="hljs-string">&quot;Green&quot;</span> <span class="hljs-comment">#&quot;#435266&quot;</span><br></code></pre></td></tr></table></figure><hr><h4 id="修改按钮的颜色："><a href="#修改按钮的颜色：" class="headerlink" title="修改按钮的颜色："></a>修改按钮的颜色：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 按钮背景色</span><br><span class="hljs-comment"># Color of button</span><br>  <span class="hljs-attr">button_bg_color:</span> <span class="hljs-string">&quot;LightGreen&quot;</span> <span class="hljs-comment">#&quot;transparent&quot;</span><br>  <span class="hljs-attr">button_bg_color_dark:</span> <span class="hljs-string">&quot;LightGreen&quot;</span> <span class="hljs-comment">#&quot;transparent&quot;</span><br>  <span class="hljs-comment"># 按钮悬浮背景色</span><br>  <span class="hljs-comment"># Color of button when hovering</span><br>  <span class="hljs-attr">button_hover_bg_color:</span> <span class="hljs-string">&quot;SpringGreen&quot;</span> <span class="hljs-comment">#&quot;#f2f3f5&quot;</span><br>  <span class="hljs-attr">button_hover_bg_color_dark:</span> <span class="hljs-string">&quot;SpringGreen&quot;</span> <span class="hljs-comment">#&quot;#46647e&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="配置图片"><a href="#配置图片" class="headerlink" title="配置图片"></a>配置图片</h3><h4 id="首页顶部图片："><a href="#首页顶部图片：" class="headerlink" title="首页顶部图片："></a>首页顶部图片：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span><br>  <span class="hljs-comment"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://w.wallhaven.cc/full/72/wallhaven-727wmy.png</span> <span class="hljs-comment">#/img/default.png</span><br></code></pre></td></tr></table></figure><hr><h4 id="首页文章图片"><a href="#首页文章图片" class="headerlink" title="首页文章图片"></a>首页文章图片</h4><p>方法一：可以在配置文件中设置默认的【default_index_img】</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://w.wallhaven.cc/full/96/wallhaven-96v3lx.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</span><br>  <span class="hljs-comment"># Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">https://w.wallhaven.cc/full/z8/wallhaven-z8mq8y.jpg</span><br></code></pre></td></tr></table></figure><p>方法二：可以文章中单独设置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">index<span class="hljs-emphasis">_img: https://w.wallhaven.cc/full/42/wallhaven-42oqy6.jpg</span><br></code></pre></td></tr></table></figure><hr><h4 id="文章首页图片"><a href="#文章首页图片" class="headerlink" title="文章首页图片"></a>文章首页图片</h4><p>方法一：可以在配置文件中设置默认的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://w.wallhaven.cc/full/96/wallhaven-96v3lx.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br></code></pre></td></tr></table></figure><p>方法二：可以文章中单独设置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">banner<span class="hljs-emphasis">_img: /img/post_</span>banner.jpg<br></code></pre></td></tr></table></figure><hr><h3 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h3><p>用了最新的版本，美化失败，原因可能是路径错误；</p><p><a class="btn" href="https://blog.csdn.net/weixin_43471926/article/details/109798811?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165149764116782390579667%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165149764116782390579667&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-109798811.142" title="可参考地址">可参考地址</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># 指定自定义 .<span class="hljs-property">js</span> 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.<span class="hljs-property">js</span> 对应存放目录 source/js/custom.<span class="hljs-property">js</span><br># <span class="hljs-title class_">Specify</span> the path <span class="hljs-keyword">of</span> your custom js file, support list. <span class="hljs-title class_">The</span> path is relative to the source directory, such <span class="hljs-keyword">as</span> <span class="hljs-string">`/js/custom.js`</span> corresponding to the directory <span class="hljs-string">`source/js/custom.js`</span><br><span class="hljs-attr">custom_js</span>:<br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/caidai.js # 动态彩带</span><br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiantiao.js # 动态黑色线条</span><br>  #- <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/jingtaisidai.js # 静态彩带</span><br>  #- <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiaoxingxing.js # 鼠标跟随小星星</span><br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/love.js # 鼠标点击出小爱心❤</span><br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/yinghua.js # 樱花飘落</span><br><br><br># 指定自定义 .<span class="hljs-property">css</span> 文件路径，用法和 custom_js 相同<br># <span class="hljs-title class_">The</span> usage is the same <span class="hljs-keyword">as</span> custom_js<br><span class="hljs-attr">custom_css</span>:<br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/shubiao.css# 鼠标指针</span><br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/gundongtiao.css# 滚动条颜色</span><br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/toubudaziji.css # 头部打字机颜色效果渐变</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-fluid主题-配置文件修改</title>
    <link href="/2022/05/18/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/hexo/hexo-fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9/"/>
    <url>/2022/05/18/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/hexo/hexo-fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo-fluid主题-配置文件修改"><a href="#hexo-fluid主题-配置文件修改" class="headerlink" title="hexo-fluid主题-配置文件修改"></a>hexo-fluid主题-配置文件修改</h2><h3 id="主题-语言-所属者"><a href="#主题-语言-所属者" class="headerlink" title="主题+语言+所属者"></a>主题+语言+所属者</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">title:</span> <span class="hljs-string">myBlog</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">xuebaqiang</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><hr><h3 id="项目url"><a href="#项目url" class="headerlink" title="项目url"></a>项目url</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">url: https:<span class="hljs-comment">//xuebaqiang.github.io</span><br></code></pre></td></tr></table></figure><hr><h3 id="文件访问路径修改"><a href="#文件访问路径修改" class="headerlink" title="文件访问路径修改"></a>文件访问路径修改</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="白天与黑夜样式调整"><a href="#白天与黑夜样式调整" class="headerlink" title="白天与黑夜样式调整"></a>白天与黑夜样式调整</h3><h4 id="标题颜色"><a href="#标题颜色" class="headerlink" title="标题颜色"></a>标题颜色</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 文章正文字体色（h1 h2 h3...）</span><br><span class="hljs-comment"># Color of Article heading (h1 h2 h3...)</span><br><span class="hljs-attr">post_heading_color:</span> <span class="hljs-string">&quot;#FF4500&quot;</span> <span class="hljs-comment">#&quot;#1a202c&quot;</span><br><span class="hljs-attr">post_heading_color_dark:</span> <span class="hljs-string">&quot;#FF4500&quot;</span> <span class="hljs-comment">#&quot;#c4c6c9&quot;</span><br></code></pre></td></tr></table></figure><h4 id="分隔线和表格边线的颜色"><a href="#分隔线和表格边线的颜色" class="headerlink" title="分隔线和表格边线的颜色"></a>分隔线和表格边线的颜色</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 分隔线和表格边线的颜色</span><br><span class="hljs-comment"># Color of horizontal rule and table border</span><br><span class="hljs-attr">line_color:</span> <span class="hljs-string">&quot;Blue&quot;</span> <span class="hljs-comment">#&quot;#eaecef&quot;</span><br><span class="hljs-attr">line_color_dark:</span> <span class="hljs-string">&quot;Green&quot;</span> <span class="hljs-comment">#&quot;#435266&quot;</span><br></code></pre></td></tr></table></figure><hr><h4 id="修改按钮的颜色："><a href="#修改按钮的颜色：" class="headerlink" title="修改按钮的颜色："></a>修改按钮的颜色：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 按钮背景色</span><br><span class="hljs-comment"># Color of button</span><br>  <span class="hljs-attr">button_bg_color:</span> <span class="hljs-string">&quot;LightGreen&quot;</span> <span class="hljs-comment">#&quot;transparent&quot;</span><br>  <span class="hljs-attr">button_bg_color_dark:</span> <span class="hljs-string">&quot;LightGreen&quot;</span> <span class="hljs-comment">#&quot;transparent&quot;</span><br>  <span class="hljs-comment"># 按钮悬浮背景色</span><br>  <span class="hljs-comment"># Color of button when hovering</span><br>  <span class="hljs-attr">button_hover_bg_color:</span> <span class="hljs-string">&quot;SpringGreen&quot;</span> <span class="hljs-comment">#&quot;#f2f3f5&quot;</span><br>  <span class="hljs-attr">button_hover_bg_color_dark:</span> <span class="hljs-string">&quot;SpringGreen&quot;</span> <span class="hljs-comment">#&quot;#46647e&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="配置图片"><a href="#配置图片" class="headerlink" title="配置图片"></a>配置图片</h3><h4 id="首页顶部图片："><a href="#首页顶部图片：" class="headerlink" title="首页顶部图片："></a>首页顶部图片：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span><br>  <span class="hljs-comment"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://w.wallhaven.cc/full/72/wallhaven-727wmy.png</span> <span class="hljs-comment">#/img/default.png</span><br></code></pre></td></tr></table></figure><hr><h4 id="首页文章图片"><a href="#首页文章图片" class="headerlink" title="首页文章图片"></a>首页文章图片</h4><p>方法一：可以在配置文件中设置默认的【default_index_img】</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://w.wallhaven.cc/full/96/wallhaven-96v3lx.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</span><br>  <span class="hljs-comment"># Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">https://w.wallhaven.cc/full/z8/wallhaven-z8mq8y.jpg</span><br></code></pre></td></tr></table></figure><p>方法二：可以文章中单独设置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">index<span class="hljs-emphasis">_img: https://w.wallhaven.cc/full/42/wallhaven-42oqy6.jpg</span><br></code></pre></td></tr></table></figure><hr><h4 id="文章首页图片"><a href="#文章首页图片" class="headerlink" title="文章首页图片"></a>文章首页图片</h4><p>方法一：可以在配置文件中设置默认的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://w.wallhaven.cc/full/96/wallhaven-96v3lx.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br></code></pre></td></tr></table></figure><p>方法二：可以文章中单独设置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">banner<span class="hljs-emphasis">_img: /img/post_</span>banner.jpg<br></code></pre></td></tr></table></figure><hr><h3 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h3><p>用了最新的版本，美化失败，原因可能是路径错误；</p><p><a class="btn" href="https://blog.csdn.net/weixin_43471926/article/details/109798811?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165149764116782390579667%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165149764116782390579667&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-109798811.142" title="可参考地址">可参考地址</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># 指定自定义 .<span class="hljs-property">js</span> 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.<span class="hljs-property">js</span> 对应存放目录 source/js/custom.<span class="hljs-property">js</span><br># <span class="hljs-title class_">Specify</span> the path <span class="hljs-keyword">of</span> your custom js file, support list. <span class="hljs-title class_">The</span> path is relative to the source directory, such <span class="hljs-keyword">as</span> <span class="hljs-string">`/js/custom.js`</span> corresponding to the directory <span class="hljs-string">`source/js/custom.js`</span><br><span class="hljs-attr">custom_js</span>:<br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/caidai.js # 动态彩带</span><br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiantiao.js # 动态黑色线条</span><br>  #- <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/jingtaisidai.js # 静态彩带</span><br>  #- <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiaoxingxing.js # 鼠标跟随小星星</span><br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/love.js # 鼠标点击出小爱心❤</span><br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/yinghua.js # 樱花飘落</span><br><br><br># 指定自定义 .<span class="hljs-property">css</span> 文件路径，用法和 custom_js 相同<br># <span class="hljs-title class_">The</span> usage is the same <span class="hljs-keyword">as</span> custom_js<br><span class="hljs-attr">custom_css</span>:<br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/shubiao.css# 鼠标指针</span><br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/gundongtiao.css# 滚动条颜色</span><br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/toubudaziji.css # 头部打字机颜色效果渐变</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作中需要掌握的技术</title>
    <link href="/2022/05/18/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E6%8A%80%E6%9C%AF%E5%92%8C%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/05/18/%E5%B7%A5%E4%BD%9C/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E6%8A%80%E6%9C%AF%E5%92%8C%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="工作中需要掌握的技术和技巧"><a href="#工作中需要掌握的技术和技巧" class="headerlink" title="工作中需要掌握的技术和技巧"></a>工作中需要掌握的技术和技巧</h1><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="编写自己的文档"><a href="#编写自己的文档" class="headerlink" title="编写自己的文档"></a>编写自己的文档</h3><p>文档：</p> <div class="note note-success">            <p>1）页面的主表+次表？</p><p>前端操作+后端注释就可以完成</p><p>这步做出来之后，就研究下主表及其属性；</p><p>2）次表与主表的连接条件</p><p>3）次表.表字段</p><p>这个页面中是否存在其他的表的字段？</p><p>如果存在的话是哪个，对应表中的字段是哪个？【表.字段】</p><p>4）重要操作调用后端的接口</p><p>按钮调用的后端接口有哪些？【后端接口】</p><p>5）接口的大体逻辑</p><p>这些接口的逻辑是什么？【接口逻辑】</p><p>6）操作判断条件及做的事情</p><p>按钮调用逻辑？【接口的判断逻辑】</p>          </div> <p>要知道先后循序，一个一个完成；</p><p>先把架子搭建起来；</p> <div class="note note-success">            <p>分两个文档记录；</p><p>一个是页面主表及其剩余表字段+接口，接口逻辑</p>          </div> <p>工作中：需要大体知道哪个页面对应的主表是哪个？</p><p>如果遇到某个需求的时候，就要理解需求中涉及到的表有哪些，</p><p>数据是在页面中的哪个地方新增的？</p><p>工作中</p><h3 id="创建表结构"><a href="#创建表结构" class="headerlink" title="创建表结构"></a>创建表结构</h3><p>创建表的时候，属性字段解释说明就要写清楚；【特别是状态、枚举】</p><p>状态字段的话：oracle 取【number(3)】</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><h3 id="数据库技术【特重要】"><a href="#数据库技术【特重要】" class="headerlink" title="数据库技术【特重要】"></a>数据库技术【特重要】</h3><p>数据库（orcle和mysql）如何写出符合要求的sql【不允许要掌握】</p><p>掌握它的话可以减少后端的很多代码的编写；</p><p>还可以减少开发的时间；</p><p>【工作中使用的数据库技术优先掌握】</p><p>写需求的时候可以先把sql写好；再在项目中编写判断条件，执行对应的sql;</p><hr><h3 id="对项目业务的了解【特重要】"><a href="#对项目业务的了解【特重要】" class="headerlink" title="对项目业务的了解【特重要】"></a>对项目业务的了解【特重要】</h3><h4 id="表与表之间的关系"><a href="#表与表之间的关系" class="headerlink" title="表与表之间的关系"></a>表与表之间的关系</h4><p>表与表之间的关系需要整理（连接条件）；</p><p>可以在开发需求的时候慢慢的整理；</p><p>空闲的时候也可以整理；</p><p>主表与次表的对应关系（跟前端页面有关系）</p><table><thead><tr><th>表的分类（我）</th><th>解释说明</th></tr></thead><tbody><tr><td>单独单页的表</td><td>需要重点关注（关注重要的属性，别的表关联它的）</td></tr><tr><td>公共使用的表</td><td>没有它，几乎全部模块都不能运行了（并不依赖与某一模块）；不需要太大的关注<br>用户表、部门表、角色表；</td></tr></tbody></table><p>公共使用的表：不需要太在意，直接列举出来，使用的时候查看即可；</p><hr><h4 id="页面与表、页面与字段的关系"><a href="#页面与表、页面与字段的关系" class="headerlink" title="页面与表、页面与字段的关系"></a>页面与表、页面与字段的关系</h4><p>一个页面中使用到了那些表；</p><p>表在页面中的分布；</p><p>属性在页面中的分布；</p><p><strong>次表的属性</strong>在页面中哪个位置体现了；</p><hr><h4 id="接口的执行条件与接口业务"><a href="#接口的执行条件与接口业务" class="headerlink" title="接口的执行条件与接口业务"></a>接口的执行条件与接口业务</h4><p>接口什么情况下执行；（是前端需要判断的，需要读前端；）</p><p>接口的作用也接口大致的思路；（需要读后端代码）</p><hr><h3 id="校验数据【重要】"><a href="#校验数据【重要】" class="headerlink" title="校验数据【重要】"></a>校验数据【重要】</h3><p>校验接口传过来的数据是否合法；</p><table><thead><tr><th>数据校验方法</th><th>方法说明</th></tr></thead><tbody><tr><td>1）正则表达式</td><td></td></tr><tr><td>2）使用专门的API</td><td>之前的开发人员写好的，例如：校验身份证号是否合法</td></tr><tr><td>3）自己编写接口校验</td><td></td></tr></tbody></table><p>建议使用正则表达式（正则表达式的使用需要很熟悉，正则表达式的图需要了解）；</p><hr><h3 id="判断API的使用【重要】"><a href="#判断API的使用【重要】" class="headerlink" title="判断API的使用【重要】"></a>判断API的使用【重要】</h3><p>判断是否为空（各种类型的：字符串、list、数组等）；</p><p>StringUtils.isEmpty</p><p>判断是否相等；</p><hr><h3 id="后端接口事务的使用"><a href="#后端接口事务的使用" class="headerlink" title="后端接口事务的使用"></a>后端接口事务的使用</h3><p>这个较为简单，直接使用事务注解即可；</p><p>不同的项目，可能使用是不同的，需要注意；</p><hr>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. oralce数据库安装以及简单的SQL语句</title>
    <link href="/2022/05/18/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/1.%20oralce%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E7%9A%84SQL%E8%AF%AD%E5%8F%A5/"/>
    <url>/2022/05/18/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/1.%20oralce%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E7%9A%84SQL%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="oralce数据库安装以及简单的SQL语句"><a href="#oralce数据库安装以及简单的SQL语句" class="headerlink" title="oralce数据库安装以及简单的SQL语句"></a>oralce数据库安装以及简单的SQL语句</h2><h3 id="数据库相关概念介绍"><a href="#数据库相关概念介绍" class="headerlink" title="数据库相关概念介绍"></a>数据库相关概念介绍</h3><p><strong>数据存储</strong>：使用变量（基本类型、引用类型）</p><p>​基本类型：少量数据</p><p>​引用类型：保证数据的完整性</p><p><strong>数据源</strong>：变量、对象、数组、集合（存数据）【声明变量要给变量赋值】【是否是声明的就是数据源呢？】</p><p><strong>java语言</strong>：主要用来存数据、处理数据</p><p>最先开始使用JAVA语言-》我们开发时，就是直接将数据写死，直接赋值；</p><p>后来-》io流将硬盘中的数据读出来，赋值给变量</p><p>直接写死-》io流从硬盘读取-》从数据库中读取</p><p>数据不一样，使用的流不一样，字节流都是可以读的【字节流是万能的】</p><p>写java，一部分直接赋值；一部分从从磁盘中读取；</p><p><strong>代码</strong>：先声明后执行（流水线）</p><p>java代码在内存中，不能够修改的</p><p><strong>编写代码要清楚</strong>：假的数据来的话如何处理，真的数据来之后如何去处理；</p><p><strong>BUG的分类：</strong>逻辑BUG，功能BUG，异常BUG</p><p>分析这个功能如何读取</p><p><strong>数据：</strong>有的人存的很工整，有些存的数据很乱【数据乱存】（数据都不知道存在哪里了）</p><p>所以，处理数据存储分类要合理</p><p>java在处理数据时，需要从硬盘中读取数据；</p><p>如果硬盘的数据存储的很乱，会造成读取效率低，数据也可能出现冗余（重复）【可能会读取很多的重复数据】，效率会更低</p><p>网盘，非会员让线程睡觉了（不同的会员用户，线程睡眠的时间不一样），有的时候快有的时候慢；</p><p>数据要存的比较好；</p><p>数据转码、数据冗余</p><p>数据要合理化、</p><p><strong>解决：</strong>使用数据库</p><p>出现冗余了要如何处理——》存数据交给数据库，取数据让数据库给你取</p><p>数据还是存储到硬盘中的；</p><p><strong>使用：</strong>数据库存储数据</p><p>​数据库获取数据</p><p><strong>数据：</strong>是现实生活事务的符号；</p><p>事物的相关信息符号存储进去</p><p><strong>数据库：</strong>给数据开辟的空间就是数据库</p><p>数据库包括两大块：数据库管理系统、数据库</p><p>数据库系统：是一个体系</p><p>滴滴：因运营系统单一，所以容易就被别的商家给XX掉；</p><p>支付宝运营系统越复杂，功能越多，所以支付宝有滴滴功能，美团也有滴滴功能；</p><p>数据库系统：用户+数据库管理系统+数据库+数据库应用系统+数据库管理员；</p><p>数据库管理系统之上-》数据库应用系统</p><p><strong>数据库应用系统</strong>：对数据的映射，在数据库管理系统之上的系统，专门<strong>给普通用户使用的</strong>系统</p><p>我们开发的就是数据库应用系统；</p><p><strong>服务器：</strong> 代码启动起来不能停，while try</p><p>通过数据库管理系统操作数据库，以后会学习数据库应用系统操作数据库</p><hr><h3 id="oracle-数据存储结构-amp-Oracle介绍学习"><a href="#oracle-数据存储结构-amp-Oracle介绍学习" class="headerlink" title="oracle-数据存储结构&amp;Oracle介绍学习"></a>oracle-数据存储结构&amp;Oracle介绍学习</h3><p>数据存储结构不一样，数据库存储效率也不一样</p><table><thead><tr><th>数据存储结构:</th><th></th></tr></thead><tbody><tr><td>网状数据库</td><td></td></tr><tr><td>层次数据库</td><td></td></tr><tr><td>关系数据库【重要】</td><td>数据、数据的描述、数据的关系<br>二维表关系数据库  纵横，数据有描述</td></tr><tr><td>对象结构</td><td></td></tr></tbody></table><p>NOSQL：非关系型数据库</p><div class="note note-success">            <p>常见的数据库管理系统：</p><p>oracle\mysql\sql server\DB2\Access</p>          </div><p>数据库管理系统不一样，sql其实差不多是一样的;</p><p>就像Eclipse与MyEclipse或idea一样，代码就是一样的，功能按钮可能不一样;</p><p>Oracle  甲骨文公司;</p><p>没有任何的语言是长久不衰的;</p><p>程序员，语言也好掌握好几种;</p><p>数据库很多语言都是要用的；【所以学习数据库特别的重要】</p><p>我们使用oracleXE；</p><p>oracle作用：合理的管理数据库的<strong>存储和处理</strong>；</p><p>要对数据管理系统的了解+学习sql</p><p>软件的安装:</p><p>使用oracle XE版本【可以取百度网盘章节-》oracle-&gt;11资料中下载】，一路next安装就可以</p><p>​第三方软件：使用PLSQL【也可以在里面下载】</p><p>​软件的卸载：必须手动卸载（还是比较麻烦的），卸载不干净，可能安装不上去；（卸完之后用360扫描一下最好）</p><p>​xe直接停止运行（开始中点中停止运行），直接卸载就可以【卸载的时候再回来看看视频】</p><p>​要养成百度的习惯；</p><p>密码要记住，不能忘记；system  admin</p><hr><h3 id="oracle目录介绍-amp-oracle网络配置"><a href="#oracle目录介绍-amp-oracle网络配置" class="headerlink" title="oracle目录介绍&amp;oracle网络配置"></a>oracle目录介绍&amp;oracle网络配置</h3><p>软件的使用：</p><p>使用的是oracleXE版本；一路next就好；</p><p>有下载文档的；【没有必要看】</p><p>验证是否安装成功：运行sql命令行-中输入:<code> conn system/你的密码</code>;【我的密码是：admin】回车后显示已连接，则表示安装成功；</p><p>先介绍下软件和服务：</p><p><strong>数据库管理系统</strong>只有一个，而<strong>数据库</strong>可以有多个；</p><p>使用数据库管理系统操作数据库；</p><p>库需要有名字的；</p><p>oracleXE版本有一个SID（数据库的唯一标识符）；</p><p>oracleXE版本默认安装了一个数据库库名为：XE；</p><p>安装成功后，有一个系统，有一个库；</p><p>什么是服务？</p><p>客户端与服务器端；</p><p>服务里面开启的都是软件相关的，给操作系统的调度；</p><p>服务：操作系统知道开启的是什么；</p><p>只要是服务开启的运行程序，win操作系统都知道；</p><p><strong>服务：</strong>程序在操作系统平台中运行的时候，必须要开启服务；</p><p>oracle也有服务，有四个服务；</p><p>Oracle重要的两个服务：<code>OracleServiceXE</code>【相当于Oracle的开关】<code>OracleXETNSListener</code>【oracle的监听器】;</p><p>oracle启动的时候<strong>必须开启这两个服务</strong>；</p><p>服务有自启的软件，服务；oracle就是</p><p>启动服务就会进CPU了；</p><p>如果停止服务，oracle数据库系统就关了（OracleServiceXE）【重要】</p><p><strong>软件目录集合</strong>：软件使用所有相关的数据；</p><p>数据是通过数据库管理系统管理的，-》我们是看不懂的；</p><p>我们的数据存储到XE文件夹下；</p><p>子目录oradara：数据库空间（下面有一个XE文件夹）</p><p><strong>product目录:</strong> 数据库管理系统的相关信息；（下面有一个版本的文件夹）</p><p>对数据的操作一定要通过数据库管理系统来操作；</p><p>装软件都会有bin目录，之前我们打开的黑窗口(之前我可没有凑操作过)sqlplus.exe（数据库管理系统的黑界面）（通过客户端进行交互）</p><p>介绍比较重要的一些目录：</p><p><strong>bin目录：</strong>数据库管理系统软件的启动目录；</p><p><strong>jdbc目录：</strong>数据库和java连接诶所需的jar包；</p><p><strong>netWork：</strong>数据库管理系统所需的网络配置目录；</p><p><strong>log目录:</strong> oracle异常日志信息存储目录；</p><hr><p>软件原理：</p><p>软件体系架构：</p><p><strong>B&#x2F;S架构：</strong>Browser&#x2F;Server（浏览器服务器模式）</p><p><strong>C&#x2F;S架构</strong>：Client&#x2F;Server(客户端服务器模式)</p><p>浏览器服务器模式：只需要一个浏览器就可以浏览很多的网站；</p><p>好处：用户用起来方便；</p><p>缺点：东西都放在服务器上；</p><p>客户端服务器：用户的体验度更好（可以理解专门给你配置了一个客户端），升级需要用户确定，很容易让用户流失；</p><p>必须要安装客户端才可以使用；</p><p>oracle的客户端在哪里啊？</p><p>电话，有延迟，会先进服务器；</p><p>自己的电脑中是有一个库的；</p><p>用户通过数据库管理系统（数据库客户端+服务器）</p><p>服务器是不能关的；</p><p>客户端是可以关的；</p><p>用户操作客服端，客户端操作服务器；</p><p>客户端登录显示在线人数：登录成功连上服务器了，服务器将谁连接成功返回给客户端；</p><p>打开的黑窗口，是客户端；</p><hr><p>客户端连接服务器，去访问数据库；（服务器和数据库是不一样的）</p><p>用户一，登录客户端，连接上用户二的服务器，用户一就可以访问用户二的数据库了；</p><p>CS架构的好处，可以同事多用户处理；</p><p><img src="/2022/05/18/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/1.%20oralce%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E7%9A%84SQL%E8%AF%AD%E5%8F%A5/1652890930552.png" alt="1652890930552"></p><p>服务器能做的事情客户端都已做；</p><p>oracle客服端服务器模式，登录和写命令的地方分开了；减少了客户端的压力;</p><p>安装完之后又客户端+服务器+数据库；</p><p>我们其实只需要一个客户端就可以使用数据库了；【使用客户端连接别人的oracle服务器】</p><p>网络编程+io流；</p><p>将我的文件发给同桌存到它的硬盘里；</p><p>让同桌接的东西都存到硬盘中；</p><p>我的电脑成 了客户端，同桌的电脑就是服务器；</p><p>每个人都用客户端，每个人都有服务器；都可以相互访问；</p><p>自己连接的时候，就是自己的客户端连接自己的服务器操作自己的数据库；</p><p>网络编程做事情的时候；</p><p>客户端+服务器端（服务器端监听端口）</p><p>ip+端口号+协议；</p><p>数据库是基于客户端与服务器模式的；</p><p>需要ip+端口号+协议+库名；</p><p>不停的代码叫做服务器；</p><p>oracle是基于客户端和服务器架构的，它的基础交互流程是：</p><p>oracle客户端连接oracle服务器，oracle服务器操作数据库；</p><p>oracle客户端（位置地域不限）</p><p>通过IP+端口号+协议+库名</p><p>conn system 没有写客户端就可以连接了？</p><p>客户端会默认加载协议配置文件；</p><p>network目录下-》tnsnames.ora（D:\work_soft\oracle\app\oracle\product\10.2.0\server\NETWORK\ADMIN）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">XE =<br>  (DESCRIPTION =<br>    (ADDRESS = (PROTOCOL = TCP)(HOST = DESKTOP-C6239U9)(PORT = <span class="hljs-number">1521</span>))<br>    (CONNECT_DATA =<br>      (SERVER = DEDICATED)<br>      (SERVICE_NAME = XE)<br>    )<br>  )<br></code></pre></td></tr></table></figure><p>可以看到键与值；</p><p><code>tnsnames.ora</code>存储的是键值对，</p><p>oracle客户端会自动加载tnsnames.ora文件内容，连接配置好的数据库；</p><p>直接写用户名密码就可以连接了；</p><p>oracle的客户端是一个黑窗口；</p><p>我们有一个专门的客户端（PL&#x2F;SQL）;(不能说是一个客户端，是一个插件)</p><p>它是基于黑窗口连接的；</p><p>用户名：system</p><p>密码：admin</p><p><code>tnsnames.ora</code>：配置数据库地址信息的；</p><hr><h3 id="oracle监听器配置"><a href="#oracle监听器配置" class="headerlink" title="oracle监听器配置"></a>oracle监听器配置</h3><p>PL\Sql不是数据库的客户端，<strong>PL\SQL是插件</strong>，<strong>黑窗口是客户端</strong></p><p>自己的电脑，既有服务器又有客户端；</p><p>十个人同事连接一个人的服务器；</p><p>电脑中有端口号，还有一个监听器；</p><p>判断这个来了是不是1521，使用的是监听器；</p><p>监听器：服务器端在用；</p><p>有连接列表：说明客户端可以访问到网络服务列表；</p><hr><p>监听器配置的有问题怎么办？</p><p><img src="/2022/05/18/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/1.%20oralce%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E7%9A%84SQL%E8%AF%AD%E5%8F%A5/1652892933030.png" alt="1652892933030"></p><p><code>listener.ora</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">LISTENER</span> <span class="hljs-string">=</span><br>  <span class="hljs-string">(DESCRIPTION_LIST</span> <span class="hljs-string">=</span><br>    <span class="hljs-string">(DESCRIPTION</span> <span class="hljs-string">=</span><br>      <span class="hljs-string">(ADDRESS</span> <span class="hljs-string">=</span> <span class="hljs-string">(PROTOCOL</span> <span class="hljs-string">=</span> <span class="hljs-string">IPC)(KEY</span> <span class="hljs-string">=</span> <span class="hljs-string">EXTPROC_FOR_XE))</span><br>      <span class="hljs-string">(ADDRESS</span> <span class="hljs-string">=</span> <span class="hljs-string">(PROTOCOL</span> <span class="hljs-string">=</span> <span class="hljs-string">TCP)(HOST</span> <span class="hljs-string">=</span> <span class="hljs-string">DESKTOP-C6239U9)(PORT</span> <span class="hljs-string">=</span> <span class="hljs-number">1521</span><span class="hljs-string">))</span><br>    <span class="hljs-string">)</span><br>  <span class="hljs-string">)</span><br></code></pre></td></tr></table></figure><p>数据库这个选项可以自己写（ip&#x2F;XE）(默认使用的是TCP协议)</p><p>常见错误：ora-12514</p><p>解决：用的时候再看吧；<code>listener.ora</code>中文件修改，需要添加一些内容；修改完成后重启监听服务；（OracleXETNSListener）</p><p>用的时候自己找PPT；</p><p>有时候将配置文件拿出来再粘贴进去，重启下监听服务就可以了；（很少可能会出现这种情况）；</p><p>还可能一会就好了，一会又不好了；因为oracle对win系统不怎么友好；</p><p>监听服务文件中，计算机的名称不能为中文；</p><p>连接为：</p><p>nomal:普通用户身份；这个我可以登录</p><p>sysdba:管理员用户身份；这个我登录不了</p><p><img src="/2022/05/18/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/1.%20oralce%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E7%9A%84SQL%E8%AF%AD%E5%8F%A5/1652969736247.png" alt="1652969736247"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hutool学习</title>
    <link href="/2022/05/16/%E5%90%8E%E7%AB%AF/Hutool%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/05/16/%E5%90%8E%E7%AB%AF/Hutool%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>前言可参考文章：<a href="https://blog.csdn.net/qq_41770757/article/details/109540422?utm_term=hutool%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-3-109540422-null-null&spm=3001.4430">https://blog.csdn.net/qq_41770757/article/details/109540422?utm_term=hutool%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-3-109540422-null-null&amp;spm=3001.4430</a></p><p> Hutool是一个Java工具包，也只是一个工具包，它帮助我们简化每一行代码，减少每一个方法，让Java语言也可以“甜甜的”。Hutool最初是我项目中“util”包的一个整理，后来慢慢积累并加入更多非业务相关功能，并广泛学习其它开源项目精髓，经过自己整理修改，最终形成丰富的开源工具集。(抄自作者简介) </p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hutool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tampermonkey插件</title>
    <link href="/2022/05/13/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/Tampermonkey%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/05/13/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/Tampermonkey%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="官网下载油猴"><a href="#官网下载油猴" class="headerlink" title="官网下载油猴"></a>官网下载油猴</h2><p><a href="https://www.tampermonkey.net/">https://www.tampermonkey.net/</a></p><hr><h2 id="将插件安装到浏览器"><a href="#将插件安装到浏览器" class="headerlink" title="将插件安装到浏览器"></a>将插件安装到浏览器</h2><p>建议使用谷歌浏览器；</p><p>谷歌浏览器：更多工具-》扩展程序，打开<code>开发者模式</code>,将官网下载的<code>tampermonkey_stable.crx</code>文件拖进去即可安装成功；</p><p>360浏览器：进去<code>设置</code>页面，将官网下载的<code>tampermonkey_stable.crx</code>文件拖进去即可安装成功；</p><h2 id="添加扩展程序"><a href="#添加扩展程序" class="headerlink" title="添加扩展程序"></a>添加扩展程序</h2><h3 id="解析腾讯，优酷，爱奇艺等全网会员视频，vip视频，添加百度网盘超级会员账号共享"><a href="#解析腾讯，优酷，爱奇艺等全网会员视频，vip视频，添加百度网盘超级会员账号共享" class="headerlink" title="解析腾讯，优酷，爱奇艺等全网会员视频，vip视频，添加百度网盘超级会员账号共享"></a>解析腾讯，优酷，爱奇艺等全网会员视频，vip视频，添加百度网盘超级会员账号共享</h3><p><a class="btn" href="https://okjx.cc/?url=" title="ok解析">OK解析</a>【vip视频解析】<br><a class="btn" href="https://z1.m1907.cn/?jx=" title="M1970">M1970</a>【支持搜索片名】<br><a class="btn" href="https://jx.blbo.cc:4433/?url=" title="人人">人人</a><br><a class="btn" href="https://ckmov.ccyjjd.com/ckmov/?url=" title="ckmov2">ckmov2</a><br><a class="btn" href="https://www.ckmov.vip/api.php?url=" title="ckmov.vip">ckmov.vip</a><br><a class="btn" href="https://www.playm3u8.cn/jiexi.php?url=" title="play">play</a><br><a class="btn" href="https://parse.mw0.cc/Bei/?url=" title="解析">解析</a><br><a class="btn" href="https://jx.m3u8.tv/jiexi/?url=" title="视频流">视频流</a><br><a class="btn" href="https://www.ckplayer.vip/jiexi/?url=" title="CK">CK</a><br><a class="btn" href="https://vip.laobandq.com/jiexi.php?url=" title="laoban">laoban</a><br><a class="btn" href="https://www.h8jx.com/jiexi.php?url=" title="H8">H8</a><br><a class="btn" href="https://www.pangujiexi.cc/jiexi.php?url=" title="盘古">盘古</a><br><a class="btn" href="https://www.8090g.cn/?url=" title="8090g">8090g</a><br><a class="btn" href="https://jx.52damu.com/dmjx/jiexi.php?url=" title="52damu">52damu</a><br><a class="btn" href="https://api.jiexi.la/?url=" title="解析la">解析la</a><br><a class="btn" href="https://jx.rdhk.net/?v=" title="Hk">Hk</a><br><a class="btn" href="https://jx.618g.com/?url=" title="618">618</a><br><a class="btn" href="https://vip.2ktvb.com/player/?url=" title="2k">2k</a><br><a class="btn" href="https://www.administratorw.com/video.php?url=" title="administratorw">administratorw</a><br><a class="btn" href="https://jx.xmflv.com/?url=" title="虾米">虾米</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&quot;name&quot;:&quot;OK解析&quot;,&quot;url&quot;:&quot;https://okjx.cc/?url=&quot;&#125;,  <br>&#123;name: &#x27;M1970&#x27;, url: &#x27;https://z1.m1907.cn/?jx=&#x27;&#125;,<br>&#123;&quot;name&quot;:&quot;人人&quot;,&quot;url&quot;:&quot;https://jx.blbo.cc:4433/?url=&quot;&#125;,<br>&#123;&quot;name&quot;:&quot;ckmov2&quot;,&quot;url&quot;:&quot;https://ckmov.ccyjjd.com/ckmov/?url=&quot;&#125;, <br>&#123;&quot;name&quot;:&quot;ckmov.vip&quot;,&quot;url&quot;:&quot;https://www.ckmov.vip/api.php?url=&quot;&#125;, <br>&#123;&quot;name&quot;:&quot;play&quot;,&quot;url&quot;:&quot;https://www.playm3u8.cn/jiexi.php?url=&quot;&#125;, <br>&#123;&quot;name&quot;:&quot;解析&quot;,&quot;url&quot;:&quot;https://parse.mw0.cc/Bei/?url=&quot;&#125;,<br>&#123;&quot;name&quot;:&quot;视频流&quot;,&quot;url&quot;:&quot;https://jx.m3u8.tv/jiexi/?url=&quot;&#125;,  <br>&#123;&quot;name&quot;:&quot;CK&quot;,&quot;url&quot;:&quot;https://www.ckplayer.vip/jiexi/?url=&quot;&#125;, <br>&#123;&quot;name&quot;:&quot;laoban&quot;,&quot;url&quot;:&quot;https://vip.laobandq.com/jiexi.php?url=&quot;&#125;,<br>&#123;&quot;name&quot;:&quot;H8&quot;,&quot;url&quot;:&quot;https://www.h8jx.com/jiexi.php?url=&quot;&#125;, <br>&#123;&quot;name&quot;:&quot;盘古&quot;,&quot;url&quot;:&quot;https://www.pangujiexi.cc/jiexi.php?url=&quot;&#125;,<br>&#123;&quot;name&quot;:&quot;8090g&quot;,&quot;url&quot;:&quot;https://www.8090g.cn/?url=&quot;&#125;,<br>&#123;&quot;name&quot;:&quot;52damu&quot;,&quot;url&quot;:&quot;https://jx.52damu.com/dmjx/jiexi.php?url=&quot;&#125;, <br>&#123;&quot;name&quot;:&quot;解析la&quot;,&quot;url&quot;:&quot;https://api.jiexi.la/?url=&quot;&#125;,<br>&#123;&quot;name&quot;:&quot;Hk&quot;,&quot;url&quot;:&quot;https://jx.rdhk.net/?v=&quot;&#125;,<br>&#123;&quot;name&quot;:&quot;618&quot;,&quot;url&quot;:&quot;https://jx.618g.com/?url=&quot;&#125;,<br>&#123;&quot;name&quot;:&quot;2k&quot;,&quot;url&quot;:&quot;https://vip.2ktvb.com/player/?url=&quot;&#125;,<br>&#123;&quot;name&quot;:&quot;administratorw&quot;,&quot;url&quot;:&quot;https://www.administratorw.com/video.php?url=&quot;&#125;, <br>&#123;&quot;name&quot;:&quot;虾米&quot;,&quot;url&quot;:&quot;https://jx.xmflv.com/?url=&quot;&#125;,];<br></code></pre></td></tr></table></figure><hr><h3 id="HTML5视频播放器增强脚本"><a href="#HTML5视频播放器增强脚本" class="headerlink" title="HTML5视频播放器增强脚本"></a>HTML5视频播放器增强脚本</h3><p>可以自定义加速视频的脚本</p>]]></content>
    
    
    <categories>
      
      <category>插件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>notepad++-常用的操作</title>
    <link href="/2022/05/12/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/notepad++/notepad++-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/05/12/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/notepad++/notepad++-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="notepad-常用的操作"><a href="#notepad-常用的操作" class="headerlink" title="notepad++-常用的操作"></a>notepad++-常用的操作</h2><h3 id="将逗号替换成换行"><a href="#将逗号替换成换行" class="headerlink" title="将逗号替换成换行"></a>将逗号替换成换行</h3><p><img src="/2022/05/12/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/notepad++/notepad++-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C/1652336594469.png" alt="1652336594469"></p><hr><h3 id="删除每行的前n个字符"><a href="#删除每行的前n个字符" class="headerlink" title="删除每行的前n个字符"></a>删除每行的前n个字符</h3><ul><li>按住Alt键</li><li>移动光标，选中需要删除的内容</li><li>按下删除键。</li></ul><hr><h3 id="使用nppftp插件连接服务器"><a href="#使用nppftp插件连接服务器" class="headerlink" title="使用nppftp插件连接服务器"></a>使用nppftp插件连接服务器</h3><h4 id="安装插件-NppFTP"><a href="#安装插件-NppFTP" class="headerlink" title="安装插件-NppFTP"></a>安装插件-NppFTP</h4><p>插件–》Plugins Admin</p><p>搜索  NppFTP  插件，并选中</p><p>点击安装  “Install”，会弹出提示框，然后点击 “是”</p><h4 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h4><p>插件–》NppFTP–&gt;show NppFTP Window</p><p>点击设置：–》Profile settings</p><h4 id="配置服务器连接"><a href="#配置服务器连接" class="headerlink" title="配置服务器连接"></a>配置服务器连接</h4><p>Add New–&gt;填写IP+Connection Type&#x3D;&#x3D;【SFTP】&#x3D;&#x3D;+端口号</p><p>用户名+密码</p><p>&#x3D;&#x3D;特别注意:&#x3D;&#x3D;用户名和密码是服务器的用户名和密码</p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>notepad++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何写出优质代码</title>
    <link href="/2022/05/11/%E5%B7%A5%E4%BD%9C/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E4%BC%98%E8%B4%A8%E4%BB%A3%E7%A0%81/"/>
    <url>/2022/05/11/%E5%B7%A5%E4%BD%9C/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E4%BC%98%E8%B4%A8%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>有清晰的思路，可以在开发过程中完善；</p><h3 id="方法上添加注释"><a href="#方法上添加注释" class="headerlink" title="方法上添加注释"></a>方法上添加注释</h3><p>简要说明方法作用</p><p>详细说明方法作用（让自己思路更清晰，把思路写到代码中，给自己的脑子减压）</p><ul><li>转则之前（大点的转折点）要加注释</li><li>方法return也要打印下</li><li>方法异常时</li></ul><p>方法入参意思</p><p>方法出参意思</p><p>方法作者</p><p>写明方法需求</p><hr><h3 id="方法中添加注释"><a href="#方法中添加注释" class="headerlink" title="方法中添加注释"></a>方法中添加注释</h3><p>写明步骤注释，要有自己的特殊符号（当前使用@-符号）</p><p>写明普通注释</p><p>在必要的地方写清楚打印注释【重要】（可以快速找到出错问题所在）</p><p>修改代码的地方写明作者+时间+代码作用+需求名</p><p>进入方法与出方法之前要加注释</p><hr><h3 id="要经常使用判空"><a href="#要经常使用判空" class="headerlink" title="要经常使用判空"></a>要经常使用判空</h3><p>开发过程中没有必要去深究；</p>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BWF-记录</title>
    <link href="/2022/05/11/%E5%B7%A5%E4%BD%9C/BWF/BWF-%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/05/11/%E5%B7%A5%E4%BD%9C/BWF/BWF-%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="报销系统登录网址"><a href="#报销系统登录网址" class="headerlink" title="报销系统登录网址"></a>报销系统登录网址</h2><p><a href="http://111.231.112.44:8080/">http://111.231.112.44:8080/</a></p><p>用户名：<a href="mailto:&#x58;&#x58;&#88;&#64;&#53;&#x31;&#116;&#x65;&#115;&#x74;&#105;&#110;&#x67;&#x2e;&#x63;&#111;&#109;">&#x58;&#x58;&#88;&#64;&#53;&#x31;&#116;&#x65;&#115;&#x74;&#105;&#110;&#x67;&#x2e;&#x63;&#111;&#109;</a></p>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高清图片地址</title>
    <link href="/2022/05/08/%E5%85%B6%E4%BB%96/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80/"/>
    <url>/2022/05/08/%E5%85%B6%E4%BB%96/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h2 id="高清图片地址"><a href="#高清图片地址" class="headerlink" title="高清图片地址"></a>高清图片地址</h2><h3 id="wallhaven"><a href="#wallhaven" class="headerlink" title="wallhaven"></a>wallhaven</h3><p>【强烈推荐使用】</p><p><a class="btn" href="https://wallhaven.cc/" title="打开网页">打开网页</a></p><p>访问速度快，</p><p>里面有丰富的图片，</p><p>支持搜索</p><p>可以选择像素及图片比例</p><hr><h3 id="Unsplash"><a href="#Unsplash" class="headerlink" title="Unsplash"></a>Unsplash</h3><p><a class="btn" href="https://unsplash.com/" title="打开网页">打开网页</a></p><p>支持搜素</p><p>有丰富的图片</p><p>访问速度略慢</p><hr><h3 id="wallpaperhub"><a href="#wallpaperhub" class="headerlink" title="wallpaperhub"></a>wallpaperhub</h3><p><a class="btn" href="https://wallpaperhub.app/" title="打开网页">打开网页</a></p><p>可以看到不同像素的图片</p><p>访问速度很慢</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-定位页面</title>
    <link href="/2022/05/05/vue-%E5%AE%9A%E4%BD%8D%E9%A1%B5%E9%9D%A2/"/>
    <url>/2022/05/05/vue-%E5%AE%9A%E4%BD%8D%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="接口定位"><a href="#接口定位" class="headerlink" title="接口定位"></a>接口定位</h3><p>根据页面调用的接口快速找到页面【感觉比较好用】</p><p>定位进入页面时调用的方法</p><p>定位点击检索按钮调用的方法</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-fluid主题使用</title>
    <link href="/2022/05/02/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/hexo/hexo-fluid%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/02/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/hexo/hexo-fluid%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="fluid主题的使用"><a href="#fluid主题的使用" class="headerlink" title="fluid主题的使用"></a>fluid主题的使用</h2><h3 id="下载fluid主题"><a href="#下载fluid主题" class="headerlink" title="下载fluid主题"></a>下载fluid主题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git clone https:<span class="hljs-comment">//github.com/fluid-dev/hexo-theme-fluid.git</span><br></code></pre></td></tr></table></figure><p>建议下载安装包；建议下载最新版的主题；</p><hr><h3 id="fluid异常可能出现的原因"><a href="#fluid异常可能出现的原因" class="headerlink" title="fluid异常可能出现的原因"></a>fluid异常可能出现的原因</h3><p>如果出现问题，看github中给的两个案例是否可正常访问；</p><p>如果可以正常访问，则下载最新的fluid主题版本进行配置；</p><p>配置文件（_config.fluid.yml）存在问题；</p><p>建议下载最新版的fluid主题；重新配置（_config.fluid.yml）文件；</p><p>下载最新版本网址：<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">https://github.com/fluid-dev/hexo-theme-fluid/releases</a></p><p>如果js\css\img访问不到，查看内部静态是否发生了改变（_config.fluid.yml-static_prefix）</p><hr><h3 id="配置指南"><a href="#配置指南" class="headerlink" title="配置指南"></a>配置指南</h3><h4 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h4><p class="note note-primary">方式一：建议文本只有一行的时候使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p class="note note-primary">方式二：建议多行的时候使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% note success %&#125;<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>url：跳转链接<br>        text：显示的文字<br>        title：鼠标悬停时显示的文字（可选）</p><hr><h3 id="解决图片不显示"><a href="#解决图片不显示" class="headerlink" title="解决图片不显示"></a>解决图片不显示</h3><p><a class="btn" href="https://blog.csdn.net/u010828718/article/details/55505631?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165149520016781667897197%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165149520016781667897197&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-55505631.142" title="可参考链接">可参考链接</a></p><blockquote><p> 设置站点配置_config.yml </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">post_asset_folder: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><blockquote><p> 安装插件 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm install https:<span class="hljs-comment">//github.com/CodeFalling/hexo-asset-image --save</span><br></code></pre></td></tr></table></figure><p>注意：步骤没有问题，如果不能正常显示，请重新初始化hexo;</p><hr><h3 id="hexo-d-报-ERROR"><a href="#hexo-d-报-ERROR" class="headerlink" title="hexo d 报 ERROR"></a>hexo d 报 ERROR</h3><p>ERROR Deployer not found: git</p><p><img src="/2022/05/02/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/hexo/hexo-fluid%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8/1652774408010.png" alt="1652774408010"></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><hr><h3 id="给文章加密"><a href="#给文章加密" class="headerlink" title="给文章加密"></a>给文章加密</h3><p><a class="btn" href="https://blog.csdn.net/qq_43701912/article/details/107018127?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1-107018127-blog-103985916.pc_relevant_without_ctrlist_v2&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1-107018127-blog-103985916.pc_relevant_without_ctrlist_v2&utm_relevant_index=1" title="参考文章地址">参考文章地址</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install hexo-blog-encrypt<br></code></pre></td></tr></table></figure><p class="note note-primary">修改主配置文件</p>配置文件在该主题中不修改也可以<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">encrypt</span>:<br>  <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p class="note note-primary">在文章头中添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">password</span>: <span class="hljs-variable constant_">XXXXXX</span><br><span class="hljs-attr">abstract</span>: <span class="hljs-title class_">Welcome</span> to my blog, enter password to read<br><span class="hljs-attr">message</span>: 请输入你的密码<br><span class="hljs-attr">wrong_pass_message</span>: 密码错误，请输入正确密码<br></code></pre></td></tr></table></figure><hr><h3 id="添加卡通人物"><a href="#添加卡通人物" class="headerlink" title="添加卡通人物"></a>添加卡通人物</h3><p><a class="btn" href="https://blog.csdn.net/weixin_41811536/article/details/115753289?spm=1001.2101.3001.6650.14&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-14-115753289-blog-107310923.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-14-115753289-blog-107310923.pc_relevant_paycolumn_v3&utm_relevant_index=17" title="可参考地址">可参考地址</a></p><h4 id="输入如下命令获取live2d"><a href="#输入如下命令获取live2d" class="headerlink" title="输入如下命令获取live2d"></a>输入如下命令获取live2d</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install --save hexo-helper-live2d  <br></code></pre></td></tr></table></figure><h4 id="下载模板模型"><a href="#下载模板模型" class="headerlink" title="下载模板模型"></a>下载模板模型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install live2d-widget-model-epsilon2_1<br></code></pre></td></tr></table></figure><p> <a class="btn" href="https://blog.csdn.net/wang_123_zy/article/details/87181892" title="模型预览传送门">模型预览传送门</a></p><h4 id="修改根目录配置文件-config-yml"><a href="#修改根目录配置文件-config-yml" class="headerlink" title="修改根目录配置文件_config.yml"></a>修改根目录配置文件_config.yml</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">live2d</span>:<br>  <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span><br>  <span class="hljs-attr">scriptFrom</span>: local<br>  <span class="hljs-attr">model</span>:<br>    <span class="hljs-attr">use</span>: live2d-widget-model-epsilon2_1 #模型选择<br>  <span class="hljs-attr">display</span>:<br>    <span class="hljs-attr">position</span>: left #模型位置<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">150</span> #模型宽度<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">300</span> #模型高度<br>  <span class="hljs-attr">mobile</span>:<br>    <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span> #是否在手机端显示<br></code></pre></td></tr></table></figure><p><img src="/2022/05/02/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/hexo/hexo-fluid%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8/1651927368636.png" alt="页面效果"></p><hr><h3 id="文章目录默认展开【toc】"><a href="#文章目录默认展开【toc】" class="headerlink" title="文章目录默认展开【toc】"></a>文章目录默认展开【toc】</h3><p>【hexo目录】</p><p><strong>修改hexo主题配置文件</strong>，修改下图中的<code>collapseDepth</code>属性的值即可【尽可能的大一点】</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/1651928072641.png" alt="1651928072641"></div><div class="group-image-wrap"><img src="/1651928206499.png" alt="进入页面目录默认展开"></div></div></div><hr><h3 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h3><p>示例： &#96;</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea--eclipse风格快捷键</title>
    <link href="/2022/04/29/idea--eclipse%E9%A3%8E%E6%A0%BC%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2022/04/29/idea--eclipse%E9%A3%8E%E6%A0%BC%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="idea–eclipse风格快捷键"><a href="#idea–eclipse风格快捷键" class="headerlink" title="idea–eclipse风格快捷键"></a>idea–eclipse风格快捷键</h2><p>常用快捷键：</p><table><thead><tr><th>提示补全</th><th>Alt + &#x2F;</th></tr></thead><tbody><tr><td>单行注释</td><td>ctrl + &#x2F;</td></tr><tr><td>多行注释</td><td>ctrl + shift + &#x2F;</td></tr><tr><td>向下复制一行</td><td>Ctrl + alt + down</td></tr><tr><td>删除一行或选中行</td><td>Ctrl + d</td></tr><tr><td>向下移动行</td><td>Alt + down</td></tr><tr><td>向上移动行</td><td>Alt + up</td></tr><tr><td>万能纠错&#x2F;生成返回值变量</td><td>Alt + enter（依然可用）</td></tr><tr><td>后退历史记录</td><td>【Alt+←】</td></tr><tr><td>前进历史记录</td><td>【Alt+→】</td></tr><tr><td>快速定位到上一次编辑的位置</td><td>Ctrl+Q</td></tr><tr><td>查看继承关系(type hierarchy)【无效】</td><td>F4</td></tr><tr><td>格式化代码【无效】</td><td>ctrl+shift+F</td></tr><tr><td>选中数行，整体往后移动</td><td>tab</td></tr><tr><td>选中数行，整体往前移动</td><td>shift + tab</td></tr><tr><td>查看类的结构：类似于eclipse 的outline</td><td>【Ctrl+O】</td></tr><tr><td>修改变量名与方法名</td><td>Alt + shift + r</td></tr><tr><td>大写转小写&#x2F; 小写转大写</td><td>Ctrl + shift + y&#x2F;x</td></tr><tr><td>生成构造器&#x2F;get&#x2F;set&#x2F;toString</td><td>Alt + insert（依然可用）</td></tr><tr><td>Shift+shift</td><td>万能搜索（依然可用）</td></tr><tr><td>查找&#x2F;替换(当前)</td><td>Ctrl + f</td></tr><tr><td>查找(全局)</td><td>Ctrl + h</td></tr><tr><td>查看类的继承结构图</td><td>Ctrl + ALT+ u</td></tr><tr><td>打开最近改的文件</td><td>Ctrl + E</td></tr><tr><td>查找方法在哪里被调用</td><td>Ctrl + G</td></tr><tr><td>清理导包，去除无用的包</td><td>Ctrl +shift+O</td></tr><tr><td>调出最近复制的N份内容</td><td>Ctrl + Shift + V</td></tr><tr><td>上下滚屏</td><td>Ctrl+Up&#x2F;Down</td></tr><tr><td>在当前行下面增加一行</td><td>Shift+Enter</td></tr></tbody></table><hr><h3 id="快速开发相关"><a href="#快速开发相关" class="headerlink" title="快速开发相关"></a>快速开发相关</h3><h4 id="补全当前行"><a href="#补全当前行" class="headerlink" title="补全当前行"></a>补全当前行</h4><p> Ctrl + Shift + Enter </p><p> 神器，补全当前行，最常用的场景时补全当前行后的；）号，并将光标定位到下一行 </p><h4 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h4><p> Ctrl+Shift+U   对选中代码进行大小写转换 </p><h4 id="生成get，set方法"><a href="#生成get，set方法" class="headerlink" title="生成get，set方法"></a>生成get，set方法</h4><p> Shift+Alt+S </p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux-基础命令案例</title>
    <link href="/2022/04/22/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%A1%88%E4%BE%8B/"/>
    <url>/2022/04/22/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="删除文件和文件夹"><a href="#删除文件和文件夹" class="headerlink" title="删除文件和文件夹"></a>删除文件和文件夹</h4><p> <code>rm</code>用于删除所有文件和目录，前提是有相应权限 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">rm -r webapps<br>rm -rf webapps<br></code></pre></td></tr></table></figure><p> <code>-r</code>表示递归删除 </p><p> <code>f</code>表示删除时不需要确认，不需要交互，直接删除 </p><p><img src="/2022/04/22/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%A1%88%E4%BE%8B/1650559182091.png" alt="1650559182091"></p><hr><h4 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mv webapps1 webapps<br></code></pre></td></tr></table></figure><p><img src="/2022/04/22/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%A1%88%E4%BE%8B/1650559382096.png" alt="1650559382096"></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>案例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux-基础软件安装</title>
    <link href="/2022/04/07/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux-%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2022/04/07/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux-%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>开发环境搭建和Shell编程：<a href="%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8CShell%E7%BC%96%E7%A8%8B.pdf" title="开发环境搭建和Shell编程.pdf">点击查看</a> </p><h3 id="jdk下载和jdk安装"><a href="#jdk下载和jdk安装" class="headerlink" title="jdk下载和jdk安装"></a>jdk下载和jdk安装</h3><h4 id="下载和安装方式"><a href="#下载和安装方式" class="headerlink" title="下载和安装方式"></a>下载和安装方式</h4><p>下载地址：<a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></p><blockquote><p>jdk8下载与安装-可参考：<a href="https://blog.csdn.net/tengtianshan/article/details/119035898">https://blog.csdn.net/tengtianshan/article/details/119035898</a></p></blockquote><p>安装方式：将下载好的jdk安装包通过Xftp工具传输到CentOS系统中，使用tar命令解压即可。</p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>使用root用户打开配置文件&#x2F;etc&#x2F;profile，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">export JAVA_HOME=/usr/javajdk<br>export PATH=$JAVA_HOME/bin:$PATH<br></code></pre></td></tr></table></figure><p>保存退出后让文件生效并验证是否配置成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">source /etc/profile<br>javac -version<br></code></pre></td></tr></table></figure><h3 id="tomcat下载与tomcat安装"><a href="#tomcat下载与tomcat安装" class="headerlink" title="tomcat下载与tomcat安装"></a>tomcat下载与tomcat安装</h3><p>下载地址：<a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a></p><p>启动和关闭方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">startup.sh<br>shutdown.sh<br></code></pre></td></tr></table></figure><blockquote><p>linux安装多个tomcat</p><p>参考地址：<a href="https://blog.csdn.net/yang13563758128/article/details/102782207">https://blog.csdn.net/yang13563758128/article/details/102782207</a></p><p>需要修改三个port</p></blockquote><h3 id="nginx下载与nginx安装"><a href="#nginx下载与nginx安装" class="headerlink" title="nginx下载与nginx安装"></a>nginx下载与nginx安装</h3><ul><li>下载nginx</li></ul><p>nginx安装包(.tar⽂件)下载地址：<a href="http://nginx.org/">http://nginx.org</a></p><p><a href="nginx-1.17.8.tar" title="nginx-1.17.8.tar">nginx-1.17.8版本下载</a></p><ul><li>安装Nginx依赖（推荐使⽤yum源⾃动安装）</li></ul><p>yun源类似于maven</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel<br></code></pre></td></tr></table></figure><ul><li>解包Nginx软件包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">tar -xvf nginx-<span class="hljs-number">1.17</span><span class="hljs-number">.8</span>.tar<br></code></pre></td></tr></table></figure><ul><li>进⼊解压之后的⽬录 nginx-1.17.8</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cd nginx-<span class="hljs-number">1.17</span><span class="hljs-number">.8</span><br></code></pre></td></tr></table></figure><ul><li><p>命令⾏执⾏.&#x2F;configure</p></li><li><p>命令⾏执⾏ make</p></li><li><p>命令⾏执⾏ make install</p><p>完毕之后&#x2F;usr&#x2F;local&#x2F;下会产⽣⼀个nginx⽬录</p></li><li><p>启动nginx</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">cd /usr/local/nginx/sbin<br>./nginx<br></code></pre></td></tr></table></figure></li><li><p>访问服务器的80端⼝</p></li></ul><blockquote><p><strong>nginx常用命令：</strong></p><ul><li>.&#x2F;nginx  【nginx启动】</li><li>.&#x2F;nginx -s stop  【nginx终⽌】</li><li>.&#x2F;nginx -s reload 【nginx重新加载】(重新加载nginx.conf配置⽂件)</li></ul><p>信号：signal</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linxu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-从数据中提取某列</title>
    <link href="/2022/04/06/%E5%89%8D%E7%AB%AF/js-%E4%BB%8E%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%8F%90%E5%8F%96%E6%9F%90%E5%88%97/"/>
    <url>/2022/04/06/%E5%89%8D%E7%AB%AF/js-%E4%BB%8E%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%8F%90%E5%8F%96%E6%9F%90%E5%88%97/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">js 把数组中每个元素的某个字段取出<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">let</span> <span class="hljs-variable">cities</span> <span class="hljs-operator">=</span>  [<br>　　&#123;city:<span class="hljs-string">&quot;北京&quot;</span>,bOn:<span class="hljs-literal">false</span>&#125;,<br>　　&#123;city:<span class="hljs-string">&quot;上海&quot;</span>,bOn:<span class="hljs-literal">false</span>&#125;,<br>　　&#123;city:<span class="hljs-string">&quot;重庆&quot;</span>,bOn:<span class="hljs-literal">false</span>&#125;,<br>　　&#123;city:<span class="hljs-string">&quot;广州&quot;</span>,bOn:<span class="hljs-literal">false</span>&#125;,<br>　　&#123;city:<span class="hljs-string">&quot;西安&quot;</span>,bOn:<span class="hljs-literal">false</span>&#125;<br>];<br>　<span class="hljs-type">let</span> <span class="hljs-variable">city</span> <span class="hljs-operator">=</span> cities.map((item) =&gt;&#123;<br>　　　<span class="hljs-keyword">return</span> item.city<br>　&#125;);<br>　console.log(<span class="hljs-string">&#x27;city == &#x27;</span>,city);<br></code></pre></td></tr></table></figure><p>js–获取后要.data,相当于有层级一样【类似于对象-对象中有data-数组】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">checkStatus.data<br></code></pre></td></tr></table></figure><p>可以使用console窗口查看</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端-解决js浮点数计算精度问题</title>
    <link href="/2022/04/06/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF-%E8%A7%A3%E5%86%B3js%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/06/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF-%E8%A7%A3%E5%86%B3js%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">amount1</span> <span class="hljs-operator">=</span> Number(totalLoanAmount).sub(Number(amount));<br><span class="hljs-type">var</span> <span class="hljs-variable">totalAmount</span> <span class="hljs-operator">=</span> Number(totalAmount).add(Number(returnAmount1));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dom4j解析xml出错处理</title>
    <link href="/2022/04/06/%E5%90%8E%E7%AB%AF/dom4j%E8%A7%A3%E6%9E%90xml%E5%87%BA%E9%94%99%E5%A4%84%E7%90%86/"/>
    <url>/2022/04/06/%E5%90%8E%E7%AB%AF/dom4j%E8%A7%A3%E6%9E%90xml%E5%87%BA%E9%94%99%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="x3D-x3D-dom4j解析xml出错-x3D-x3D"><a href="#x3D-x3D-dom4j解析xml出错-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;dom4j解析xml出错&#x3D;&#x3D;"></a>&#x3D;&#x3D;dom4j解析xml出错&#x3D;&#x3D;</h3><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.ClassNotFoundException: org.jaxen.JaxenException<br>at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:<span class="hljs-number">1720</span>)<br>at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:<span class="hljs-number">1571</span>)<br>at org.dom4j.DocumentFactory.createXPath(DocumentFactory.java:<span class="hljs-number">230</span>)<br>————————————————<br>版权声明：本文为CSDN博主「九黎小康」的原创文章，遵循CC <span class="hljs-number">4.0</span> BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https:<span class="hljs-comment">//blog.csdn.net/kzdwts/article/details/78082188</span><br></code></pre></td></tr></table></figure><h3 id="引入jar包【jaxen】"><a href="#引入jar包【jaxen】" class="headerlink" title="引入jar包【jaxen】"></a>引入jar包【jaxen】</h3><p>确实jar包，需要引入jar包【&#x3D;&#x3D;jaxen&#x3D;&#x3D;】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>      &lt;groupId&gt;dom4j&lt;/groupId&gt;<br>      &lt;artifactId&gt;dom4j&lt;/artifactId&gt;<br>      &lt;version&gt;<span class="hljs-number">1.6</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;jaxen&lt;/groupId&gt;<br>      &lt;artifactId&gt;jaxen&lt;/artifactId&gt;<br>      &lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom4j</tag>
      
      <tag>异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web-请求状态码</title>
    <link href="/2022/04/06/%E5%90%8E%E7%AB%AF/web-%E8%AF%B7%E6%B1%82%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <url>/2022/04/06/%E5%90%8E%E7%AB%AF/web-%E8%AF%B7%E6%B1%82%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h3><p>400是一种<a href="https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660">HTTP状态码</a>，告诉客户端它发送了一条异常请求</p><p>可能原因：数据封装失败</p>]]></content>
    
    
    <categories>
      
      <category>浏览器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>枚举enum的使用</title>
    <link href="/2022/04/06/%E5%90%8E%E7%AB%AF/%E6%9E%9A%E4%B8%BEenum%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/04/06/%E5%90%8E%E7%AB%AF/%E6%9E%9A%E4%B8%BEenum%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="根据值获取名称"><a href="#根据值获取名称" class="headerlink" title="根据值获取名称"></a>根据值获取名称</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">PersonnelMasterModalityEnum</span> &#123;<br><br>U_STATUS(<span class="hljs-string">&quot;计件&quot;</span>,<span class="hljs-number">1</span>),<br>T_STATUS(<span class="hljs-string">&quot;计时&quot;</span>,<span class="hljs-number">2</span>),<br>D_STATUS(<span class="hljs-string">&quot;日结&quot;</span>,<span class="hljs-number">3</span>);<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value;<br>    <br>    <br>    PersonnelMasterModalityEnum(String name, <span class="hljs-type">int</span> value) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">for</span> (PersonnelMasterModalityEnum c : PersonnelMasterModalityEnum.values()) &#123;<br>            <span class="hljs-keyword">if</span> (c.getName().equals(name)) &#123;<br>                <span class="hljs-keyword">return</span> c.value;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">for</span> (PersonnelMasterModalityEnum c : PersonnelMasterModalityEnum.values()) &#123;<br>            <span class="hljs-keyword">if</span> (c.getValue()==value) &#123;<br>                <span class="hljs-keyword">return</span> c.name;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*-----------------功能:筛选出来所有符合条件的信息(日期--项目名)  2021-07-30-----------------*/</span><br>List&lt;KAttendenceDetailsVo&gt; kAttendenceDetailsVoList =  kAttendenceConfMapper.getAllDetailsByDateProject(vendorId,attendanceOrderId,confirmType);<br><span class="hljs-keyword">for</span>(KAttendenceDetailsVo kadv : kAttendenceDetailsVoList) &#123;<br>kadv.setAModality(PersonnelMasterModalityEnum.getName(Integer.parseInt(kadv.getAModality())));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>enum</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>navicat-解决打开表慢问题</title>
    <link href="/2022/04/06/%E6%95%B0%E6%8D%AE%E5%BA%93/navicat-%E8%A7%A3%E5%86%B3%E6%89%93%E5%BC%80%E8%A1%A8%E6%85%A2%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/06/%E6%95%B0%E6%8D%AE%E5%BA%93/navicat-%E8%A7%A3%E5%86%B3%E6%89%93%E5%BC%80%E8%A1%A8%E6%85%A2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>编辑连接–》高级–》保持连接间隔（秒）：30</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>navicat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oracle-函数使用</title>
    <link href="/2022/04/06/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle-%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/04/06/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle-%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="NVL函数用法"><a href="#NVL函数用法" class="headerlink" title="NVL函数用法"></a>NVL函数用法</h3><p>语法</p><p>NVL(eExpression1, eExpression2)</p><p>参数<br>eExpression1, eExpression2</p><p>如果 eExpression1 的计算结果为 null 值，则 NVL( ) 返回 eExpression2。如果 eExpression1 的计算结果不是 null 值，则返回 eExpression1。eExpression1 和 eExpression2 可以是任意一种数据类型。如果 eExpression1 与 eExpression2 的结果皆为 null 值，则 NVL( ) 返回 .NULL.。</p><p>理解：第一个为nullnull，取第二个值，第一个第二个都为null则返回为null</p><h3 id="nulls-last"><a href="#nulls-last" class="headerlink" title="nulls last"></a>nulls last</h3><p>【前提】order by 后使用<br>select * from 表 where 条件 order by 某个字段 (asc&#x2F;descv) nulls last;</p><p>nulls first和nulls last是Oracle Order by支持的语法<br>如果Order by 中指定了表达式Nulls first则表示null值的记录将排在最前(不管是asc 还是 desc)<br>如果Order by 中指定了表达式Nulls last则表示null值的记录将排在最后 (不管是asc 还是 desc)<br>————————————————<br>版权声明：本文为CSDN博主「goodStudy_H」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/goodStudy_H/article/details/106472530">https://blog.csdn.net/goodStudy_H/article/details/106472530</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-zookeeper集群搭建</title>
    <link href="/2022/04/06/%E6%9C%8D%E5%8A%A1%E5%99%A8/docker-zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/04/06/%E6%9C%8D%E5%8A%A1%E5%99%A8/docker-zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="集群一步搭建"><a href="#集群一步搭建" class="headerlink" title="集群一步搭建"></a>集群一步搭建</h3><p>参考地址：<a href="https://blog.51cto.com/nginxs/1908591">https://blog.51cto.com/nginxs/1908591</a></p><p>只需要后面三步即可成功搭建Zookeeper集群；</p><p>前面两步不清楚</p><h4 id="编写配置文件："><a href="#编写配置文件：" class="headerlink" title="编写配置文件："></a>编写配置文件：</h4><p>docker-compose.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">version: <span class="hljs-string">&#x27;3&#x27;</span><br>services:<br>  zk1:<br>    image: registry.cn-hangzhou.aliyuncs.com/forker/zookeeper<br>    restart: always<br>    container_name: zk1<br>    ports:<br>      - <span class="hljs-string">&quot;2181:2181&quot;</span><br>    environment:<br>      ZK_ID: <span class="hljs-number">1</span><br>      ZK_NODE_LIST: server<span class="hljs-number">.1</span>=zk1:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span> server<span class="hljs-number">.2</span>=zk2:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span> server<span class="hljs-number">.3</span>=zk3:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span><br><br>  zk2:<br>    image: registry.cn-hangzhou.aliyuncs.com/forker/zookeeper<br>    restart: always<br>    container_name: zk2<br>    ports:<br>      - <span class="hljs-string">&quot;2182:2181&quot;</span><br>    environment:<br>      ZK_ID: <span class="hljs-number">2</span><br>      ZK_NODE_LIST: server<span class="hljs-number">.1</span>=zk1:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span> server<span class="hljs-number">.2</span>=zk2:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span> server<span class="hljs-number">.3</span>=zk3:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span><br><br>  zk3:<br>    image: registry.cn-hangzhou.aliyuncs.com/forker/zookeeper<br>    restart: always<br>    container_name: zk3<br>    ports:<br>      - <span class="hljs-string">&quot;2183:2181&quot;</span><br>    environment:<br>      ZK_ID: <span class="hljs-number">3</span><br>      ZK_NODE_LIST: server<span class="hljs-number">.1</span>=zk1:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span> server<span class="hljs-number">.2</span>=zk2:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span> server<span class="hljs-number">.3</span>=zk3:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span><br></code></pre></td></tr></table></figure><h4 id="启动我的compose服务"><a href="#启动我的compose服务" class="headerlink" title="启动我的compose服务"></a><strong>启动我的compose服务</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@test</span>-node3 zk_cluster]# docker-compose up -d<br>WARNING: The Docker Engine you<span class="hljs-string">&#x27;re using is running in swarm mode.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Compose does not use swarm mode to deploy services to multiple nodes in a swarm. All containers will be scheduled on the current node.</span><br><span class="hljs-string"></span><br><span class="hljs-string">To deploy your application across the swarm, use `docker stack deploy`.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Creating network &quot;zkcluster_default&quot; with the default driver</span><br><span class="hljs-string">Creating zk3</span><br><span class="hljs-string">Creating zk1</span><br><span class="hljs-string">Creating zk2</span><br></code></pre></td></tr></table></figure><h4 id="测试zookeeper集群"><a href="#测试zookeeper集群" class="headerlink" title="测试zookeeper集群"></a><strong>测试zookeeper集群</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@test</span>-node zk_cluster]# echo  <span class="hljs-string">&quot;conf&quot;</span>|nc localhost <span class="hljs-number">2181</span><br>clientPort=<span class="hljs-number">2181</span><br>secureClientPort=-<span class="hljs-number">1</span><br>dataDir=/<span class="hljs-keyword">var</span>/lib/zookeeper/version-<span class="hljs-number">2</span><br>dataDirSize=<span class="hljs-number">67109393</span><br>dataLogDir=/<span class="hljs-keyword">var</span>/lib/zookeeper/version-<span class="hljs-number">2</span><br>dataLogSize=<span class="hljs-number">67109393</span><br>tickTime=<span class="hljs-number">2000</span><br>maxClientCnxns=<span class="hljs-number">60</span><br>minSessionTimeout=<span class="hljs-number">4000</span><br>maxSessionTimeout=<span class="hljs-number">40000</span><br>serverId=<span class="hljs-number">1</span><br>initLimit=<span class="hljs-number">10</span><br>syncLimit=<span class="hljs-number">5</span><br>electionAlg=<span class="hljs-number">3</span><br>electionPort=<span class="hljs-number">4181</span><br>quorumPort=<span class="hljs-number">3181</span><br>peerType=<span class="hljs-number">0</span><br>membership:<br>server<span class="hljs-number">.1</span>=zk1:<span class="hljs-number">3181</span>:<span class="hljs-number">4181</span>:participant<br>server<span class="hljs-number">.2</span>=zk2:<span class="hljs-number">3181</span>:<span class="hljs-number">4181</span>:participant<br>server<span class="hljs-number">.3</span>=zk3:<span class="hljs-number">3181</span>:<span class="hljs-number">4181</span>:participant<br>version=<span class="hljs-number">100000000</span><br></code></pre></td></tr></table></figure><h4 id="查看Zookeeper版本"><a href="#查看Zookeeper版本" class="headerlink" title="查看Zookeeper版本"></a>查看Zookeeper版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# echo stat|nc <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-number">2181</span><br>Zookeeper version: <span class="hljs-number">3.5</span><span class="hljs-number">.1</span>-alpha-<span class="hljs-number">1693007</span>, built on <span class="hljs-number">07</span>/<span class="hljs-number">28</span>/<span class="hljs-number">2015</span> <span class="hljs-number">07</span>:<span class="hljs-number">19</span> GMT<br>Clients:<br> /<span class="hljs-number">172.19</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">44534</span>[<span class="hljs-number">0</span>](queued=<span class="hljs-number">0</span>,recved=<span class="hljs-number">1</span>,sent=<span class="hljs-number">0</span>)<br> /<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">1</span>:<span class="hljs-number">48444</span>[<span class="hljs-number">1</span>](queued=<span class="hljs-number">0</span>,recved=<span class="hljs-number">16445</span>,sent=<span class="hljs-number">16445</span>)<br><br>Latency min/avg/max: <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">32</span><br>Received: <span class="hljs-number">16795</span><br>Sent: <span class="hljs-number">16794</span><br>Connections: <span class="hljs-number">2</span><br>Outstanding: <span class="hljs-number">0</span><br>Zxid: <span class="hljs-number">0x10000000e</span><br>Mode: follower<br>Node count: <span class="hljs-number">13</span><br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# <br></code></pre></td></tr></table></figure><p>show full method signatures </p><h3 id="笨方法搭建【废弃】"><a href="#笨方法搭建【废弃】" class="headerlink" title="笨方法搭建【废弃】"></a>笨方法搭建【废弃】</h3><p>拉取zookpper镜像</p><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# docker run  -id --name=zookeeper1 -p <span class="hljs-number">2181</span>:<span class="hljs-number">2181</span> -v /root/zookeeper/zookeeper1/data:/data -v /root/zookeeper/zookeeper1/conf:/conf zookeeper:latest /bin/bash<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# docker run  -id --name=zookeeper2 -p <span class="hljs-number">2182</span>:<span class="hljs-number">2181</span> -v /root/zookeeper/zookeeper2/data:/data -v /root/zookeeper/zookeeper2/conf:/conf zookeeper:latest /bin/bash<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# docker run  -id --name=zookeeper3 -p <span class="hljs-number">2183</span>:<span class="hljs-number">2181</span> -v /root/zookeeper/zookeeper3/data:/data -v /root/zookeeper/zookeeper3/conf:/conf zookeeper:latest /bin/bash<br></code></pre></td></tr></table></figure><p><strong>docker –privileged&#x3D;true 参数作用</strong></p><ul><li>使用该参数，container内的root拥有真正的root权限。</li></ul><p>查看是否运行成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> data]# docker ps<br></code></pre></td></tr></table></figure><h4 id="进入容器：查看容器ip"><a href="#进入容器：查看容器ip" class="headerlink" title="进入容器：查看容器ip"></a>进入容器：查看容器ip</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> ~]# docker inspect --format=<span class="hljs-string">&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27;</span> zookeeper1<br><span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.6</span><br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> ~]# docker inspect --format=<span class="hljs-string">&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27;</span> zookeeper2<br><span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.7</span><br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> ~]# docker inspect --format=<span class="hljs-string">&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27;</span> zookeeper3<br><span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.8</span><br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> ~]# <br></code></pre></td></tr></table></figure><h4 id="配置myid文件"><a href="#配置myid文件" class="headerlink" title="配置myid文件"></a>配置myid文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# vim /root/zookeeper/zookeeper1/data/myid <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# vim /root/zookeeper/zookeeper2/data/myid <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# vim /root/zookeeper/zookeeper3/data/myid <br></code></pre></td></tr></table></figure><h4 id="配置zoo-cft文件"><a href="#配置zoo-cft文件" class="headerlink" title="配置zoo.cft文件"></a>配置zoo.cft文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">server<span class="hljs-number">.1</span>=<span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.6</span>:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span>;<span class="hljs-number">2181</span><br>server<span class="hljs-number">.2</span>=<span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.7</span>:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span>;<span class="hljs-number">2181</span><br>server<span class="hljs-number">.3</span>=<span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.8</span>:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span>;<span class="hljs-number">2181</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# vim /root/zookeeper/zookeeper2/data/myid <br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# vim /root/zookeeper/zookeeper2/data/myid <br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# vim /root/zookeeper/zookeeper3/data/myid <br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# vim /root/zookeeper/zookeeper1/conf/zoo.cfg <br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# vim /root/zookeeper/zookeeper2/conf/zoo.cfg <br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# vim /root/zookeeper/zookeeper3/conf/zoo.cfg<br></code></pre></td></tr></table></figure><h4 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# docker restart zookeeper1<br>e913d682c700<br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# docker restart zookeeper2<br>b0a4022f1253<br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# docker restart zookeeper3<br>eaa52d11e8a7<br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# <br></code></pre></td></tr></table></figure><h4 id="查看是否配置成功"><a href="#查看是否配置成功" class="headerlink" title="查看是否配置成功"></a>查看是否配置成功</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# docker exec -it zookeeper1 /bin/bash<br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# docker exec -it zookeeper2 /bin/bash<br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> /]# docker exec -it zookeeper3 /bin/bash<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">root<span class="hljs-meta">@eaa52d11e8a7</span>:/apache-zookeeper-<span class="hljs-number">3.7</span><span class="hljs-number">.0</span>-bin# zkServer.sh status<br></code></pre></td></tr></table></figure><p>在宿主机的数据卷中配置</p><h4 id="脚本编写："><a href="#脚本编写：" class="headerlink" title="脚本编写："></a>脚本编写：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> zookeeper]# vim zookeeperBatchReStart.sh<br>[root@<span class="hljs-number">10</span>-<span class="hljs-number">23</span>-<span class="hljs-number">151</span>-<span class="hljs-number">218</span> zookeeper]# vim zookeeperBatchStop.sh<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">echo <span class="hljs-string">&quot;==================================================&quot;</span><br>docker restart zookeeper1<br>echo <span class="hljs-string">&quot;==================zookeeper1 start================&quot;</span><br>docker restart zookeeper2<br>echo <span class="hljs-string">&quot;==================zookeeper2 start================&quot;</span><br>docker restart zookeeper3<br>echo <span class="hljs-string">&quot;==================zookeeper3 start================&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">echo  <span class="hljs-string">&quot;==================================================&quot;</span><br>docker stop zookeeper1<br>echo <span class="hljs-string">&quot;==================zookeeper1 stop ================&quot;</span><br>docker stop zookeeper2<br>echo <span class="hljs-string">&quot;==================zookeeper2 stop ================&quot;</span><br>docker stop zookeeper3<br>echo <span class="hljs-string">&quot;==================zookeeper3 stop ================&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.51cto.com/nginxs/1908591">https://blog.51cto.com/nginxs/1908591</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> stat | nc <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">2181</span><br></code></pre></td></tr></table></figure><p> <strong>这里可以看到其实zk1,zk2,zk3每个都是一个service，而且compose会为这个应用创建一个默认的桥接网络</strong></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AutoHotkey-使用说明</title>
    <link href="/2022/04/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/AutoHotkey-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <url>/2022/04/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/AutoHotkey-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="AutoHotkey使用"><a href="#AutoHotkey使用" class="headerlink" title="AutoHotkey使用"></a>AutoHotkey使用</h2><p><a class="btn" href="https://blog.csdn.net/ChinarCSDN/article/details/82914429?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162887081016780357242453%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=162887081016780357242453&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~hot_rank-1-82914429.pc_v2_rank_blog_default&utm_term=autohotkey%E4%B8%AD%E6%96%87%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4450" title="参考地址">参考地址</a></p><h3 id="下载网址："><a href="#下载网址：" class="headerlink" title="下载网址："></a>下载网址：</h3><p><a href="https://www.autohotkey.com/">https://www.autohotkey.com/</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>home-&gt;modify–&gt;Unicode 64-bit–&gt;选择安装的文件夹–》目前使用默认安装–》Exit</p><h3 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h3><p><strong>直接在桌面右键→→新建→→ AutoHotkey Script 即可创建一个脚本</strong></p><p>右击–》&#x3D;&#x3D;编辑脚本&#x3D;&#x3D;</p><p><a href="http://www.chinar.xin/">http://www.chinar.xin</a></p><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">::chinar::http:<span class="hljs-comment">//www.chinar.xin</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">::chinar::<br>Send http:<span class="hljs-comment">//www.chinar.xin</span><br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p><strong>AHK语法中： Send 是发送命令， return 是结束</strong></p><h3 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h3><p><strong>保存后，右键文件 →→ Run Script 运行脚本</strong></p><p><strong>然后，当我们输入文本<code>chinar</code> 按下 空格键 &#x2F; 回车键 &#x2F; tab 键时，会自动帮我们替换为<code>http://www.chinar.xin</code></strong></p><h2 id="AutoHotkey案例"><a href="#AutoHotkey案例" class="headerlink" title="AutoHotkey案例"></a>AutoHotkey案例</h2><h3 id="AutoHotkey–typora-字体颜色快捷键"><a href="#AutoHotkey–typora-字体颜色快捷键" class="headerlink" title="AutoHotkey–typora-字体颜色快捷键"></a>AutoHotkey–typora-字体颜色快捷键</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">; Typora<br>; 快捷增加字体颜色<br>; SendInput &#123;Text&#125; 解决中文输入法问题<br><br>#IfWinActive ahk_exe Typora.exe<br>&#123;<br>    ; Ctrl+Alt+o 橙色<br>    ^!o::addFontColor(<span class="hljs-string">&quot;orange&quot;</span>)<br><br>    ; Ctrl+Alt+z 红色高亮<br>    ^!z::addLightFontColor()<br><br> ; Ctrl+Alt+g 绿色<br>    ^!g::addFontColor(<span class="hljs-string">&quot;green&quot;</span>)<br><br>    ; Ctrl+Alt+b 浅蓝色<br>    ^!b::addFontColor(<span class="hljs-string">&quot;cornflowerblue&quot;</span>)<br>&#125;<br><br>; 快捷增加字体颜色<br>addFontColor(color)&#123;<br>    clipboard := <span class="hljs-string">&quot;&quot;</span> ; 清空剪切板<br>    Send &#123;ctrl down&#125;c&#123;ctrl up&#125; ; 复制<br>    SendInput &#123;TEXT&#125;&lt;font color=<span class="hljs-string">&#x27;%color%&#x27;</span>&gt;<br>    SendInput &#123;ctrl down&#125;v&#123;ctrl up&#125; ; 粘贴<br>    If(clipboard = <span class="hljs-string">&quot;&quot;</span>)&#123;<br>        SendInput &#123;TEXT&#125;&lt;/font&gt; ; Typora 在这不会自动补充<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        SendInput &#123;TEXT&#125;&lt;/ ; Typora中自动补全标签<br>    &#125;<br>&#125;<br>; 增加字体高亮颜色<br>addLightFontColor()&#123;<br>clipboard := <span class="hljs-string">&quot;&quot;</span> ; 清空剪切板<br>Send &#123;ctrl down&#125;c&#123;ctrl up&#125; ; 复制<br>    SendInput &#123;TEXT&#125;==<br>    SendInput &#123;ctrl down&#125;v&#123;ctrl up&#125; ; 粘贴<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AutoHotkey</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>比较好用的软件</title>
    <link href="/2022/04/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%AF%94%E8%BE%83%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6/"/>
    <url>/2022/04/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%AF%94%E8%BE%83%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="比较好用的软件"><a href="#比较好用的软件" class="headerlink" title="比较好用的软件"></a>比较好用的软件</h2><h3 id="【1】Listary【常用】"><a href="#【1】Listary【常用】" class="headerlink" title="【1】Listary【常用】"></a>【1】Listary【常用】</h3><p>用于检索文件</p><p><a href="Listary.exe" title="Listary.exe">Listary下载</a> </p><p>如果是U盘或者外接磁盘使用：需要给盘创建索引；</p><hr><h3 id="【2】Everything"><a href="#【2】Everything" class="headerlink" title="【2】Everything"></a>【2】Everything</h3><p>也可以快速的找到需要的文件</p><p>Listary与Everything使用其中一个即</p><hr><h3 id="【3】Docfetcher"><a href="#【3】Docfetcher" class="headerlink" title="【3】Docfetcher"></a>【3】Docfetcher</h3><p>【电脑文件找不到的话-可以使用】【不知道如何使用了】</p><p><a class="btn" href="https://www.onlinedown.net/soft/1108934.html" title="Docfetcher下载">Docfetcher下载</a></p><p><a class="btn" href="https://blog.csdn.net/weixin_39864601/article/details/115506234" title="Docfetcher使用说明">Docfetcher使用说明</a></p><p>Docfetcher：可根据文件内容模糊搜索</p><p>适用于window系统</p><p>Docfetcher需要创建索引才可以使用，建议对小文件夹创建索引</p><hr><h3 id="【4】WinTop窗口置顶器【常用】"><a href="#【4】WinTop窗口置顶器【常用】" class="headerlink" title="【4】WinTop窗口置顶器【常用】"></a>【4】WinTop窗口置顶器【常用】</h3><p><a class="btn" href="http://www.xitongzhijia.net/xtjc/20200706/182958.html" title="可看考文档">可参考文档</a></p><p>选中窗口置顶即可使用</p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>excel--查看相同值的数据条数(数据透视表)</title>
    <link href="/2022/04/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/office/excel--%E6%9F%A5%E7%9C%8B%E7%9B%B8%E5%90%8C%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE%E6%9D%A1%E6%95%B0(%E6%95%B0%E6%8D%AE%E9%80%8F%E8%A7%86%E8%A1%A8)/"/>
    <url>/2022/04/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/office/excel--%E6%9F%A5%E7%9C%8B%E7%9B%B8%E5%90%8C%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE%E6%9D%A1%E6%95%B0(%E6%95%B0%E6%8D%AE%E9%80%8F%E8%A7%86%E8%A1%A8)/</url>
    
    <content type="html"><![CDATA[<h2 id="excel–查看相同值的数据条数-数据透视表"><a href="#excel–查看相同值的数据条数-数据透视表" class="headerlink" title="excel–查看相同值的数据条数(数据透视表)"></a>excel–查看相同值的数据条数(数据透视表)</h2><p><img src="/2022/04/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/office/excel--%E6%9F%A5%E7%9C%8B%E7%9B%B8%E5%90%8C%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE%E6%9D%A1%E6%95%B0(%E6%95%B0%E6%8D%AE%E9%80%8F%E8%A7%86%E8%A1%A8)/image-20220906004948481.png" alt="image-20220906004948481"></p><h3 id="【1】全选数据表"><a href="#【1】全选数据表" class="headerlink" title="【1】全选数据表"></a>【1】全选数据表</h3><hr><h3 id="【2】插入-数据透视表"><a href="#【2】插入-数据透视表" class="headerlink" title="【2】插入-数据透视表"></a>【2】插入-数据透视表</h3><p>插入–》数据透视表</p><hr><h3 id="【3】勾选要查看的列"><a href="#【3】勾选要查看的列" class="headerlink" title="【3】勾选要查看的列"></a>【3】勾选要查看的列</h3><p>将想要看相同值的列放到行标签中（列可以是多列）</p><p>例如：姓名、年龄</p><hr><h3 id="【4】指定计数列"><a href="#【4】指定计数列" class="headerlink" title="【4】指定计数列"></a>【4】指定计数列</h3><p>勾选任何一列，可以选择ID列，也可以是相同值的列</p><p>例如：姓名、年龄、证件号码（年龄感觉更好）</p><p>点击–》值字段设置–》选择计数确定</p><hr><h3 id="将行标签中的多列分开"><a href="#将行标签中的多列分开" class="headerlink" title="将行标签中的多列分开"></a>将行标签中的多列分开</h3><p>设计–》分类汇总–》不显示分类汇总</p><p>设计–》报表布局–》以表格形式显示</p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typora-比较好用的设置</title>
    <link href="/2022/04/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/typora/typora-%E6%AF%94%E8%BE%83%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
    <url>/2022/04/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/typora/typora-%E6%AF%94%E8%BE%83%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="设置背景颜色"><a href="#设置背景颜色" class="headerlink" title="设置背景颜色"></a>设置背景颜色</h3><p>比较好看的背景颜色：<a href="https://blog.csdn.net/zhanglir333/article/details/79746384">https://blog.csdn.net/zhanglir333/article/details/79746384</a></p><p>打开主题文件夹</p><p>在github.css中修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">h1,<br>h2,<br>h3,<br>h4,<br>h5,<br>h6 &#123;<br>    position: relative;<br>    margin-top: 1rem;<br>    margin-bottom: 1rem;<br>    font-weight: bold;<br>    line-height: <span class="hljs-number">1.4</span>;<br>    cursor: text;<br>background-color: #E8E8FF;   # 需要添加的语句<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="标题序号自增"><a href="#标题序号自增" class="headerlink" title="标题序号自增"></a>标题序号自增</h3><p>创建文件：base.user.css，放在主题文件夹下</p><p>二级标题开始，三级标题是【】格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** initialize css counter */</span><br>.outline-h1,<br>h1 &#123;<br>    counter-reset: h2;<br>&#125;<br><br>.outline-h2,<br>h2 &#123;<br>    counter-reset: h3;<br>&#125;<br><br>.outline-h3,<br>h3 &#123;<br>    counter-reset: h4;<br>&#125;<br><br>.outline-h4,<br>h4 &#123;<br>    counter-reset: h5;<br>&#125;<br><br>.outline-h5,<br>h5 &#123;<br>    counter-reset: h6;<br>&#125;<br><br>#write h2:before,<br>.outline-h2 &gt; .outline-item &gt; .outline-label:before &#123;<br>    counter-increment: h2;<br>    content: counter(h2) <span class="hljs-string">&quot;.&quot;</span>;<br>&#125;<br><br>#write h3:before,<br>h3.md-focus.md-heading:before, <span class="hljs-comment">/** override the default style for focused headings */</span><br>.outline-h3 &gt; .outline-item &gt; .outline-label:before &#123;<br>    counter-increment: h3;<br>    content: <span class="hljs-string">&quot;【&quot;</span> counter(h3)<span class="hljs-string">&quot;】&quot;</span>;<br>&#125;<br><br>#write h4:before,<br>h4.md-focus.md-heading:before,<br>.outline-h4 &gt; .outline-item &gt; .outline-label:before &#123;<br>    counter-increment: h4;<br>    content: <span class="hljs-string">&quot;【&quot;</span> counter(h3) <span class="hljs-string">&quot;-&quot;</span> counter(h4) <span class="hljs-string">&quot;】&quot;</span>;<br>&#125;<br><br>#write h5:before,<br>h5.md-focus.md-heading:before,<br>.outline-h5 &gt; .outline-item &gt; .outline-label:before &#123;<br>    counter-increment: h5;<br>    content: counter(h2) <span class="hljs-string">&quot;.&quot;</span> counter(h3) <span class="hljs-string">&quot;.&quot;</span> counter(h4) <span class="hljs-string">&quot;.&quot;</span> counter(h5) <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br>#write h6:before,<br>h6.md-focus.md-heading:before,<br>.outline-h6 &gt; .outline-item &gt; .outline-label:before &#123;<br>    counter-increment: h6;<br>    content: counter(h2) <span class="hljs-string">&quot;.&quot;</span> counter(h3) <span class="hljs-string">&quot;.&quot;</span> counter(h4) <span class="hljs-string">&quot;.&quot;</span> counter(h5) <span class="hljs-string">&quot;.&quot;</span> counter(h6) <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-comment">/** override the default style for focused headings */</span><br>#write &gt; h3.md-focus:before,<br>#write &gt; h4.md-focus:before,<br>#write &gt; h5.md-focus:before,<br>#write &gt; h6.md-focus:before,<br>h3.md-focus:before,<br>h4.md-focus:before,<br>h5.md-focus:before,<br>h6.md-focus:before &#123;<br>    color: inherit;<br>    border: inherit;<br>    border-radius: inherit;<br>    position: inherit;<br>    left: initial;<br>    <span class="hljs-type">float</span>: none;<br>    top: initial;<br>    font-size: inherit;<br>    padding-left: inherit;<br>    padding-right: inherit;<br>    vertical-align: inherit;<br>    font-weight: inherit;<br>    line-height: inherit;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Typora自动保存"><a href="#Typora自动保存" class="headerlink" title="Typora自动保存"></a>Typora自动保存</h3><p>偏好设置-》通用</p><p><img src="/2022/04/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/typora/typora-%E6%AF%94%E8%BE%83%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%BE%E7%BD%AE/1651570395851.png" alt="1651570395851"></p><h4 id="设置保存时间"><a href="#设置保存时间" class="headerlink" title="设置保存时间"></a>设置保存时间</h4><p> 您可以在“首选项”面板上启用此功能。 默认情况下，文档每5分钟保存一次。 如果要更改时间间隔，请在首选项面板上单击“打开高级设置”按钮，这会弹出一个名为的文件夹<code>conf</code>，然后编辑或创建一个名为的文件<code>conf.user.json</code>，并修改&#x2F;添加以下设置： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>  <span class="hljs-string">&quot;autoSaveTimer&quot;</span>: <span class="hljs-number">5</span> <span class="hljs-comment">// Double, default is 5. The unit is &quot;minute&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="恢复未保存的草稿（Windows-x2F-Linux）"><a href="#恢复未保存的草稿（Windows-x2F-Linux）" class="headerlink" title="恢复未保存的草稿（Windows &#x2F; Linux）"></a>恢复未保存的草稿（Windows &#x2F; Linux）</h4><p>无论是否启用了“自动保存”选项，如果Typora退出或崩溃而没有保存文件，或者您不小心保留了Typora而不保存您的文字，您都可以单击“恢复未保存的草稿”按钮来找到一些自动的草稿由Typora保存。 这些备份草稿的文件名就像一样<code>&#123;date&#125;-&#123;filename&#125;.md``&#123;filename&#125;</code></p><p><img src="/2022/04/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/typora/typora-%E6%AF%94%E8%BE%83%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%BE%E7%BD%AE/1651570885003.png" alt="1651570885003"></p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typora-自定义快捷键</title>
    <link href="/2022/04/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/typora/typora-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2022/04/06/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/typora/typora-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="conf-user-json"><a href="#conf-user-json" class="headerlink" title="conf.user.json"></a>conf.user.json</h3><p>&#x3D;&#x3D;找到配置文件&#x3D;&#x3D;</p><p>文件-》偏好设置-》通用-》打开高级设置</p><p>编辑文件conf.user.json</p><h3 id="编辑快捷键"><a href="#编辑快捷键" class="headerlink" title="编辑快捷键"></a>编辑快捷键</h3><p>在conf.user.json文件中找到标签:&#x3D;&#x3D;keyBinding&#x3D;&#x3D;</p><p>在里面编辑快捷键：</p><h3 id="标题快捷键"><a href="#标题快捷键" class="headerlink" title="标题快捷键"></a>标题快捷键</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;keyBinding&quot;</span>: &#123;<br><span class="hljs-string">&quot;Heading 2&quot;</span>:<span class="hljs-string">&quot;Alt+1&quot;</span>,<br><span class="hljs-string">&quot;Heading 3&quot;</span>:<span class="hljs-string">&quot;Alt+2&quot;</span>,<br><span class="hljs-string">&quot;Heading 4&quot;</span>:<span class="hljs-string">&quot;Alt+3&quot;</span>,<br><span class="hljs-string">&quot;Heading 5&quot;</span>:<span class="hljs-string">&quot;Alt+4&quot;</span><br><br>    <span class="hljs-comment">// for example: </span><br>    <span class="hljs-comment">// &quot;Always on Top&quot;: &quot;Ctrl+Shift+P&quot;</span><br>  &#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lagou-学习记录</title>
    <link href="/2022/04/04/lagou-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/04/04/lagou-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p><strong>学习方法：</strong></p><p>1、在看视频前，先将文档大致看下，一次可以看少一点；</p><p>2、视频找重点看；</p><p>3、视频中遇到的问题，</p><p>​ 记下来</p><p>​视频往后看五集</p><p>​问题还没有讲解到-在网上查找</p><p>计划三个半月完成拉钩高级全部课程，从2022-4-4-》2022-7-19</p><p><strong>计划完成：</strong></p><p><strong>完成情况：</strong></p><p><strong>自我评价：</strong></p><p><strong>自我总结：</strong></p><h3 id="2022-4"><a href="#2022-4" class="headerlink" title="2022-4"></a>2022-4</h3><h4 id="2022-4-4"><a href="#2022-4-4" class="headerlink" title="2022-4-4"></a>2022-4-4</h4><p><strong>计划完成：</strong> 第二阶段 分布式架构性能调优 模块一： Tomcat深度剖析及性能调优、Nginx深度剖析及性能调优 </p><p><strong>完成情况：</strong>Tomcat深度剖析及性能调优源码部分没有看完，自己开发一个迷你型的tomcat没有开发；Nginx深度剖析及性能调优部分：完成了一半</p><p><strong>自我评价：</strong>非常差劲</p><p><strong>自我总结：</strong></p><ol><li>如果看不下去，先跳过这一部分往下继续走</li><li>先看文档，再看视频，再总结</li></ol><h4 id="2022-4-7"><a href="#2022-4-7" class="headerlink" title="2022-4-7"></a>2022-4-7</h4>]]></content>
    
    
    <categories>
      
      <category>日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>拉钩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html转pdf</title>
    <link href="/2022/04/04/%E5%85%B6%E4%BB%96/html%E8%BD%ACpdf/"/>
    <url>/2022/04/04/%E5%85%B6%E4%BB%96/html%E8%BD%ACpdf/</url>
    
    <content type="html"><![CDATA[<h3 id="【1】open打印页面"><a href="#【1】open打印页面" class="headerlink" title="【1】open打印页面"></a>【1】open打印页面</h3><p>可以使用谷歌浏览器</p><p>控制台输入-》回车</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">(function()&#123;<br>$(<span class="hljs-string">&quot;#side&quot;</span>).remove();<br>$(<span class="hljs-string">&quot;#comment_title, #comment_list, #comment_bar, #comment_form, .announce, #ad_cen, #ad_bot&quot;</span>).remove();<br>$(<span class="hljs-string">&quot;.nav_top_2011, #header, #navigator&quot;</span>).remove();<br>$(<span class="hljs-string">&quot;.p4course_target, .comment-box, .recommend-box, #csdn-toolbar, #tool-box&quot;</span>).remove();<br>$(<span class="hljs-string">&quot;aside&quot;</span>).remove();<br>$(<span class="hljs-string">&quot;.tool-box&quot;</span>).remove();<br>$(<span class="hljs-string">&quot;.csdn-side-toolbar&quot;</span>).remove();<br>$(<span class="hljs-string">&quot;.more-toolbox&quot;</span>).remove();<br>$(<span class="hljs-string">&quot;.template-box&quot;</span>).remove();<br>$(<span class="hljs-string">&quot;.bottom-pub-footer&quot;</span>).remove();<br>$(<span class="hljs-string">&quot;.pre-numbering&quot;</span>).remove();<br>$(<span class="hljs-string">&quot;main&quot;</span>).css(<span class="hljs-string">&#x27;display&#x27;</span>,<span class="hljs-string">&#x27;content&#x27;</span>); <br>$(<span class="hljs-string">&quot;main&quot;</span>).css(<span class="hljs-string">&#x27;float&#x27;</span>,<span class="hljs-string">&#x27;left&#x27;</span>); <br>window.print();<br> <br>$(<span class="hljs-string">&quot;tool-box&quot;</span>).remove();<br>&#125;)();<br></code></pre></td></tr></table></figure><p>关闭打印页面</p><h3 id="【2】隐藏不想要的元素"><a href="#【2】隐藏不想要的元素" class="headerlink" title="【2】隐藏不想要的元素"></a>【2】隐藏不想要的元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;div style=<span class="hljs-string">&quot;display:none;&quot;</span>&gt;你是看不见我的&lt;/div&gt; <br></code></pre></td></tr></table></figure><h3 id="【3】open打印页面"><a href="#【3】open打印页面" class="headerlink" title="【3】open打印页面"></a>【3】open打印页面</h3><p>Ctrl+p</p><h3 id="【4】设置参数-保存"><a href="#【4】设置参数-保存" class="headerlink" title="【4】设置参数-保存"></a>【4】设置参数-保存</h3><p>根据页面不同，参数可能不同；</p><p>可以使用：横向+A2【建议使用A0，保存下来后随便剪裁】</p><p>如果想要转成word，建议使用A4</p><h3 id="【5】裁剪页面"><a href="#【5】裁剪页面" class="headerlink" title="【5】裁剪页面"></a>【5】裁剪页面</h3><p>使用万兴PDF专家</p><p>页面–》页面框–》裁剪框+页面范围（所有）</p><p>编辑–》裁剪–》选择区域+所有页面–》确定</p><h3 id="【5】添加页码"><a href="#【5】添加页码" class="headerlink" title="【5】添加页码"></a>【5】添加页码</h3><p>万兴PDF专家</p><p>编辑-》页眉页脚–》新建页眉页脚–》选中区域【右下角】+插入宏–》确定即可</p><h3 id="【6】使用OCR和压缩PDF"><a href="#【6】使用OCR和压缩PDF" class="headerlink" title="【6】使用OCR和压缩PDF"></a>【6】使用OCR和压缩PDF</h3><p>可以使用万兴PDF专家，工具菜单栏中的压缩功能</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pdf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springBoot-定时任务</title>
    <link href="/2022/04/04/%E5%90%8E%E7%AB%AF/springboot-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/2022/04/04/%E5%90%8E%E7%AB%AF/springboot-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="时间设置"><a href="#时间设置" class="headerlink" title="时间设置"></a>时间设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Cron表达式参数分别表示：<br><br>秒（<span class="hljs-number">0</span>~<span class="hljs-number">59</span>） 例如<span class="hljs-number">0</span>/<span class="hljs-number">5</span>表示每<span class="hljs-number">5</span>秒<br>分（<span class="hljs-number">0</span>~<span class="hljs-number">59</span>）<br>时（<span class="hljs-number">0</span>~<span class="hljs-number">23</span>）<br>日（<span class="hljs-number">0</span>~<span class="hljs-number">31</span>）的某天，需计算<br>月（<span class="hljs-number">0</span>~<span class="hljs-number">11</span>）<br>周几（ 可填<span class="hljs-number">1</span>-<span class="hljs-number">7</span> 或 SUN/MON/TUE/WED/THU/FRI/SAT）<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Cron表达式范例：</span><br><br>每隔<span class="hljs-number">5</span>秒执行一次：*/<span class="hljs-number">5</span> * * * * ?<br><br>每隔<span class="hljs-number">1</span>分钟执行一次：<span class="hljs-number">0</span> */<span class="hljs-number">1</span> * * * ?<br><br>每天<span class="hljs-number">23</span>点执行一次：<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">23</span> * * ?<br><br>每天凌晨<span class="hljs-number">1</span>点执行一次：<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> * * ?<br><br>每月<span class="hljs-number">1</span>号凌晨<span class="hljs-number">1</span>点执行一次：<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> * ?<br><br>每月最后一天<span class="hljs-number">23</span>点执行一次：<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">23</span> L * ?<br><br>每周星期天凌晨<span class="hljs-number">1</span>点实行一次：<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> ? * L<br><br>在<span class="hljs-number">26</span>分、<span class="hljs-number">29</span>分、<span class="hljs-number">33</span>分执行一次：<span class="hljs-number">0</span> <span class="hljs-number">26</span>,<span class="hljs-number">29</span>,<span class="hljs-number">33</span> * * * ?<br><br>每天的<span class="hljs-number">0</span>点、<span class="hljs-number">13</span>点、<span class="hljs-number">18</span>点、<span class="hljs-number">21</span>点都执行一次：<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>,<span class="hljs-number">13</span>,<span class="hljs-number">18</span>,<span class="hljs-number">21</span> * * ?<br></code></pre></td></tr></table></figure><h3 id="定时任务案例"><a href="#定时任务案例" class="headerlink" title="定时任务案例"></a>定时任务案例</h3><p>【代码补全还需完善】【需完善】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ldapUserSysJob:<br>      jobName: LdapUserSysJob<br>      cron: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">22</span> * * ?<br>      shardingTotalCount: <span class="hljs-number">1</span><br>      shardingItemParameters: <span class="hljs-number">0</span>=<span class="hljs-number">0</span><br>      failover: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 同步人员数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Param</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 欧凯波</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2020/8/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LdapUserSysJob</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSimpleJob</span> &#123;<br><br><br>    <span class="hljs-meta">@Value(&quot;$&#123;elastic.job.ldapUserSysJob.jobName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String jobName;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;elastic.job.ldapUserSysJob.cron&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String cron;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;elastic.job.ldapUserSysJob.shardingTotalCount&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer shardingTotalCount;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;elastic.job.ldapUserSysJob.shardingItemParameters&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String shardingItemParameters;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;elastic.job.ldapUserSysJob.failover&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean failover;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JobExecuteService jobExecuteService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LdapUserSysJob</span><span class="hljs-params">(JobExecuteService jobExecuteService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.jobExecuteService = jobExecuteService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(ShardingContext shardingContext)</span> &#123;<br>        jobExecuteService.getLadpUser();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br>        registerSimpleJob(jobName, cron, shardingTotalCount, shardingItemParameters, failover);<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lagou高级-Nginx深度剖析及性能调优</title>
    <link href="/2022/04/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/lagou%E9%AB%98%E7%BA%A7-Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    <url>/2022/04/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/lagou%E9%AB%98%E7%BA%A7-Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
    
    <content type="html"><![CDATA[<p>第二阶段模块一</p><p><strong>Nginx课程笔记：</strong><a href="Nginx%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0.pdf" title="Nginx课程笔记.pdf">点击查看</a></p><blockquote><p>nginx 是俄罗斯人开发</p></blockquote><p><strong>MAC系统和linux系统有什么区别？</strong></p><p><a href="https://www.zhihu.com/question/62465468">https://www.zhihu.com/question/62465468</a></p><ul><li>两者都是类Unix系统，有许多相似之处。 </li><li>两个系统，内核不一样 ： Mac是基于BSD内核的，Linux是linux内核 </li><li>Mac的内核叫Darwin，是开源的。但Mac系统本身是商业的，看不到源码的。</li></ul><p>Linux整体都是开源的。</p><p><strong>Nginx 到底是什么？</strong></p><ul><li>⾼性能的HTTP服务器</li><li>反向代理web服务器</li></ul><p><strong>Nginx的特点是什么？</strong></p><ul><li>⾼并发，性能好</li><li>跨平台</li><li>上⼿容易，配置简单</li><li>稳定性也特别好，宕机概率很低</li></ul><p><strong>Nginx ⼜能做什么事情（应⽤场景）？</strong></p><ul><li><p>Http服务器（Web服务器）</p><p>⽀持50000个并发连接数，不仅如此，CPU和内存的占⽤也⾮常的低，</p></li></ul><blockquote><p>并发连接数： 并发连接数指的是客户端向服务器发起请求，并建立了TCP连接。每秒钟服务器链接的总TCP数量，就是并发连接数。 </p></blockquote><ul><li>反向代理服务器</li><li>负载均衡服务器</li><li>动静分离</li></ul><p>擅长静态资源处理的软件：Apache、Nginx</p><p>【未解决】Apache是一个什么软件？知道apache-tomat..</p><p>特别想做一个代理服务器，使用正向代理</p><p>通过代理服务器进行网站的访问；</p><p><strong>Nginx的安装</strong></p><p>可参考：linux-基础软件安装</p><p><strong>查看nginx是否有进程使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ps -ef|grep nginx<br></code></pre></td></tr></table></figure><p><strong>修改Nginx端口号</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">vim /usr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><p><img src="/2022/04/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/lagou%E9%AB%98%E7%BA%A7-Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/1649093717163.png" alt="1649093717163"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">cd /usr/local/nginx/sbin<br>./nginx -s reload<br></code></pre></td></tr></table></figure><h3 id="Nginx的核⼼配置⽂件"><a href="#Nginx的核⼼配置⽂件" class="headerlink" title="Nginx的核⼼配置⽂件"></a>Nginx的核⼼配置⽂件</h3><p>Nginx的核⼼配置⽂件conf&#x2F;nginx.conf包含三块内容：全局块、events块、http块</p><p>详情可以看文档开头中的文件</p><p>http块中可以有多个server</p><p> 【未解决】 server-name及root的使用？</p><p><img src="/2022/04/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/lagou%E9%AB%98%E7%BA%A7-Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/1649095665927.png" alt="1649095665927"></p><p><strong>nginx配置文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js">worker_processes  <span class="hljs-number">1</span>; #work的进程数，默认为<span class="hljs-number">1</span><br>#配置 影响nginx服务器与用户的网络连接<br>events &#123;<br>    worker_connections  <span class="hljs-number">1024</span>; #单个work 最大并发连接数<br>&#125;<br><br># http块是配置最频繁的部分 可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能<br>http &#123;<br># 引入mime类型定义文件<br>    include       mime.<span class="hljs-property">types</span>;<br>    default_type  application/octet-stream;<br>    sendfile        on;<br>    keepalive_timeout  <span class="hljs-number">65</span>; # 超时时间<br><br>#server 配置虚拟主机的相关参数 可以有多个,一个server就是一个虚拟主机<br>    server &#123;<br># 监听的端口<br>        listen       <span class="hljs-number">80</span>; <br>#监听地址<br>        server_name  localhost;         <br><br># 默认请求配置<br>        location / &#123;<br>            root   html; # 默认网站根目录<br>            index  index.<span class="hljs-property">html</span> index.<span class="hljs-property">htm</span>; # 欢迎页<br>        &#125;<br><br># 错误提示页面<br>        error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.<span class="hljs-property">html</span>;<br>        location = /50x.<span class="hljs-property">html</span> &#123;<br>            root   html;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Nginx反向代理案例"><a href="#Nginx反向代理案例" class="headerlink" title="Nginx反向代理案例"></a>Nginx反向代理案例</h3><p>案例一：浏览器访问nginx,nginx转发给tomcat</p><p><img src="/2022/04/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/lagou%E9%AB%98%E7%BA%A7-Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/1649165789657.png" alt="1649165789657"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">proxy_pass http:<span class="hljs-comment">//127.0.0.1:8080;</span><br></code></pre></td></tr></table></figure><p>直接访问ip</p><p><img src="/2022/04/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/lagou%E9%AB%98%E7%BA%A7-Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/1649166092982.png" alt="1649166092982"></p><p>需求二：再部署⼀台tomcat，保持默认监听8081端⼝</p><p>配置另外一台tomcat服务器时注意配置文件中三个端口号的修改，否则会出现问题</p><p>可能出现的问题：一个tomcat可以访问，一个不可以访问【端口被占用了，端口冲突了】</p><p>在nginx配置文件中，localhost 后根据路径访问  &#x2F;abc&#x2F;  &#x2F;def&#x2F;（注意不是：&#x2F;abc  &#x2F;def）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">location /abc/ &#123;<br>                proxy_pass http:<span class="hljs-comment">//127.0.0.1:8080/;</span><br>            # root   html;<br>            #index  index.html index.htm;<br>        &#125;<br><br>        location /def/ &#123;<br>                proxy_pass http:<span class="hljs-comment">//127.0.0.1:8081/;</span><br>            # root   html;<br>            #index  index.html index.htm;<br>        &#125;<br></code></pre></td></tr></table></figure><p>【异常】：根据路径访问，访问得到的页面没有样式</p><p><img src="/2022/04/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/lagou%E9%AB%98%E7%BA%A7-Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/1649262063131.png" alt="1649262063131"></p><p>解决：多加一个&#x2F;就可以了，为什么老师是可以的-不清楚</p><p><img src="/2022/04/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/lagou%E9%AB%98%E7%BA%A7-Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/1649264279470.png" alt="1649264279470"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lagou高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lagou高级-Tomcat深度剖析及性能调优</title>
    <link href="/2022/04/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/lagou%E9%AB%98%E7%BA%A7-Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    <url>/2022/04/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/lagou%E9%AB%98%E7%BA%A7-Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
    
    <content type="html"><![CDATA[<p>lagou高级-第二阶段模块一</p><p>什么是静态资源，什么是动态资源？</p><p>sevlet 动态资源</p><p>jsp 今天资源</p><p>一个socket一个线程</p><p>请求与请求不受任何影响</p><p>多线程资源的浪费，使用线程池；</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>laogu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Postwoman插件</title>
    <link href="/2022/04/04/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/Postwoman%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/04/04/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/Postwoman%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="Postwoman-Http接口调试"><a href="#Postwoman-Http接口调试" class="headerlink" title="Postwoman | Http接口调试"></a>Postwoman | Http接口调试</h3><p>可以进行接口测试</p><p>用户名：名字拼音</p><p>用户名：<a href="mailto:&#88;&#88;&#x58;&#88;&#x58;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;">&#88;&#88;&#x58;&#88;&#x58;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;</a></p><p>密码：150381XXXXXhao</p>]]></content>
    
    
    <categories>
      
      <category>插件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Transaction】- 出现的问题</title>
    <link href="/2022/04/01/%E5%90%8E%E7%AB%AF/%E3%80%90Transaction%E3%80%91-%20%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/01/%E5%90%8E%E7%AB%AF/%E3%80%90Transaction%E3%80%91-%20%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="事务标记为rollback-only，后又提交"><a href="#事务标记为rollback-only，后又提交" class="headerlink" title="事务标记为rollback-only，后又提交"></a>事务标记为rollback-only，后又提交</h2><p><code>Transaction rolled back because it has been marked as rolllback-only</code></p><p>参考地址：<a href="https://www.cnblogs.com/super-chao/p/15169923.html?ivk_sa=1024320u">https://www.cnblogs.com/super-chao/p/15169923.html?ivk_sa=1024320u</a></p><h3 id="【1】处理方案"><a href="#【1】处理方案" class="headerlink" title="【1】处理方案"></a>【1】处理方案</h3><p>我采用的方法： service中try catch后，throw new RuntimeException();  controller层捕获异常并返回错误码（自己规定的）；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED,rollbackFor = Exception.class)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            testDao.addTest();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>            <span class="hljs-comment">//return &quot;exception&quot;;</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="【2】两个事务注解的区别"><a href="#【2】两个事务注解的区别" class="headerlink" title="【2】两个事务注解的区别"></a>【2】两个事务注解的区别</h3><p><code>@Transactional(propagation=Propagation.REQUIRED)</code> 和 <code>@Transactional(propagation=Propagation.REQUIRED, rollbackFor = Exception.class)</code></p><p>唯一的区别是如果没有 <code>rollbackFor = Exception.class</code> 它只会回滚 <code>RuntimeException</code> 和 <code>Error</code> 而不是其他异常发生;</p><h3 id="【3】设置手动回滚："><a href="#【3】设置手动回滚：" class="headerlink" title="【3】设置手动回滚："></a>【3】设置手动回滚：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();<br></code></pre></td></tr></table></figure><p>当我们需要在事务控制的service层类中使用try catch 去捕获异常后，就会使事务控制失效，因为该类的异常并没有抛出，就不是触发事务管理机制。怎样才能即使用try catch去捕获异常，而又让出现异常后spring回滚呢，这里就要用到<code>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</code></p><h3 id="Content-type"><a href="#Content-type" class="headerlink" title="Content-type"></a>Content-type</h3><p> 该实体头的做用是让服务器告诉浏览器它发送的数据属于什么文件类型。</p><p> 例如：当Content-Type 的值设置为text&#x2F;html和text&#x2F;plain时,前者会让浏览器把接收到的实体内容以HTML格式解析,后者会让浏览器以普通文本解析.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setHeader(<span class="hljs-string">&quot;Content-type&quot;</span>,<span class="hljs-string">&quot;这个参数在tomcat里conf下的web.xml里面找&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;extension&gt;mp4&lt;/extension&gt;<br></code></pre></td></tr></table></figure><p> 【不确定】推荐使用 <code>setsetContentType</code> &#x2F; <code>setContentLength</code> 因为少了多余的判断，性能更高，函数名也更明义。 - 先用setHeader形式吧</p><h3 id="Content-Disposition"><a href="#Content-Disposition" class="headerlink" title="Content-Disposition"></a>Content-Disposition</h3><p> 当Content-Type 的类型为要下载的类型时 , 这个信息头会告诉浏览器这个文件的名字和类型。 </p><p>Content-Disposition中指定的类型是文件的扩展名，而且弹出的下载对话框中的文件类型图片是按照文件的扩展名显示的，点保存后，文件以filename的值命名，保存类型以Content中设置的为准。</p><p>注意：在设置Content-Disposition头字段以前，必定要设置Content-Type头字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;video/x-msvideo&quot;</span>);<br>response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=aaa.doc&quot;</span>);<br></code></pre></td></tr></table></figure><p>文件下载使用：Content-type+Content-Disposition</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="实现视频下载"><a href="#实现视频下载" class="headerlink" title="实现视频下载"></a>实现视频下载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setContentType(<span class="hljs-string">&quot;application/octet-stream;charset=UTF-8&quot;</span>);<br>response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment; filename=\&quot;&quot;</span> + fileName + <span class="hljs-string">&quot;\&quot;&quot;</span>);<br>response.addHeader(<span class="hljs-string">&quot;Content-Length&quot;</span>, <span class="hljs-string">&quot;&quot;</span> + data.length);<br><br>原文链接：https:<span class="hljs-comment">//blog.csdn.net/weixin_29743373/article/details/114623041</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Transaction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【response】-.set介绍</title>
    <link href="/2022/04/01/%E5%90%8E%E7%AB%AF/%E3%80%90response%E3%80%91-.set%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/04/01/%E5%90%8E%E7%AB%AF/%E3%80%90response%E3%80%91-.set%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="response-setHeader"><a href="#response-setHeader" class="headerlink" title="response.setHeader"></a>response.setHeader</h2><h3 id="Content-type"><a href="#Content-type" class="headerlink" title="Content-type"></a>Content-type</h3><p> 该实体头的做用是让服务器告诉浏览器它发送的数据属于什么文件类型。</p><p> 例如：当Content-Type 的值设置为text&#x2F;html和text&#x2F;plain时,前者会让浏览器把接收到的实体内容以HTML格式解析,后者会让浏览器以普通文本解析.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setHeader(<span class="hljs-string">&quot;Content-type&quot;</span>,<span class="hljs-string">&quot;这个参数在tomcat里conf下的web.xml里面找&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;extension&gt;mp4&lt;/extension&gt;<br></code></pre></td></tr></table></figure><p> 【不确定】推荐使用 <code>setsetContentType</code> &#x2F; <code>setContentLength</code> 因为少了多余的判断，性能更高，函数名也更明义。 - 先用setHeader形式吧</p><h3 id="Content-Disposition"><a href="#Content-Disposition" class="headerlink" title="Content-Disposition"></a>Content-Disposition</h3><p> 当Content-Type 的类型为要下载的类型时 , 这个信息头会告诉浏览器这个文件的名字和类型。 </p><p>Content-Disposition中指定的类型是文件的扩展名，而且弹出的下载对话框中的文件类型图片是按照文件的扩展名显示的，点保存后，文件以filename的值命名，保存类型以Content中设置的为准。</p><p>注意：在设置Content-Disposition头字段以前，必定要设置Content-Type头字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;video/x-msvideo&quot;</span>);<br>response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=aaa.doc&quot;</span>);<br></code></pre></td></tr></table></figure><p>文件下载使用：Content-type+Content-Disposition</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="实现视频下载"><a href="#实现视频下载" class="headerlink" title="实现视频下载"></a>实现视频下载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setContentType(<span class="hljs-string">&quot;application/octet-stream;charset=UTF-8&quot;</span>);<br>response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment; filename=\&quot;&quot;</span> + fileName + <span class="hljs-string">&quot;\&quot;&quot;</span>);<br>response.addHeader(<span class="hljs-string">&quot;Content-Length&quot;</span>, <span class="hljs-string">&quot;&quot;</span> + data.length);<br><br>原文链接：https:<span class="hljs-comment">//blog.csdn.net/weixin_29743373/article/details/114623041</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视图层</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>思路-读需求文档</title>
    <link href="/2022/04/01/%E6%80%9D%E8%B7%AF-%E8%AF%BB%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3/"/>
    <url>/2022/04/01/%E6%80%9D%E8%B7%AF-%E8%AF%BB%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="判断文档类型是什么类型"><a href="#判断文档类型是什么类型" class="headerlink" title="判断文档类型是什么类型"></a>判断文档类型是什么类型</h2><p>1、修改型或新增型</p><p>2、清楚你有几天开发时间（开发时间-预期上线前半个月开发完成）</p><h3 id="修改型文档"><a href="#修改型文档" class="headerlink" title="修改型文档"></a>修改型文档</h3><h4 id="记录页面信息及修改信息"><a href="#记录页面信息及修改信息" class="headerlink" title="记录页面信息及修改信息"></a>记录页面信息及修改信息</h4><p>写一个文档记录以下信息【文件名称：【开发记录】需求名】：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">哪个页面？<br><br>哪个位置？【代码位置：前端+后端】<br><br>新增还是修改？<br><br>操作是什么？<br><br>难点：<br>  <br>难点解决方案：<br></code></pre></td></tr></table></figure><h4 id="修改地方的影响程度"><a href="#修改地方的影响程度" class="headerlink" title="修改地方的影响程度"></a>修改地方的影响程度</h4><p>是否存在其他地方也调用了这个接口或者页面，如果有，影响不影响？</p>]]></content>
    
    
    <categories>
      
      <category>思路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>需求</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo操作文档</title>
    <link href="/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/hexo/hexio-%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3/"/>
    <url>/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/hexo/hexio-%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="基础命令的使用"><a href="#基础命令的使用" class="headerlink" title="基础命令的使用"></a>基础命令的使用</h2><h3 id="【1】运行hexo项目"><a href="#【1】运行hexo项目" class="headerlink" title="【1】运行hexo项目"></a>【1】运行hexo项目</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hexo s<br></code></pre></td></tr></table></figure><hr><h3 id="【2】发布hexo项目到git上"><a href="#【2】发布hexo项目到git上" class="headerlink" title="【2】发布hexo项目到git上"></a>【2】发布hexo项目到git上</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><hr><h3 id="【3】文章分类"><a href="#【3】文章分类" class="headerlink" title="【3】文章分类"></a>【3】文章分类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">categories: categories # 添加博文分类<br></code></pre></td></tr></table></figure><p>前端、后端、数据库、娱乐、软件、插件、总结、日志</p><hr><h3 id="【4】文章标签"><a href="#【4】文章标签" class="headerlink" title="【4】文章标签"></a>【4】文章标签</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">tags: tags # 添加单个标签<br>tags: [tag1,tag2] # 添加多个标签<br></code></pre></td></tr></table></figure><hr><h3 id="【5】文件下载与查看"><a href="#【5】文件下载与查看" class="headerlink" title="【5】文件下载与查看"></a>【5】文件下载与查看</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">[点击下载](apache-maven-<span class="hljs-number">3.5</span><span class="hljs-number">.2</span>-bin.zip <span class="hljs-string">&quot;apache-maven-3.5.2&quot;</span>) <br>[点击查看](开发环境搭建和Shell编程.pdf <span class="hljs-string">&quot;开发环境搭建和Shell编程.pdf&quot;</span>) <br>[点击查看](one.java <span class="hljs-string">&quot;one&quot;</span>) <br>[点击查看](lagou\controller\DemoController.java <span class="hljs-string">&quot;DemoController.java&quot;</span>)  <br></code></pre></td></tr></table></figure><p>第一个属性是文件相对路径</p><p>第二个属性是文件描述</p><hr><h3 id="【6】添加pdf插件"><a href="#【6】添加pdf插件" class="headerlink" title="【6】添加pdf插件"></a>【6】添加pdf插件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm install --save hexo-pdf<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">外部链接：<br>&#123;% pdf http:<span class="hljs-comment">//7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %&#125;</span><br>本地连接：<br>&#123;% pdf pdf名字.pdf %&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="【7】文章置顶"><a href="#【7】文章置顶" class="headerlink" title="【7】文章置顶"></a>【7】文章置顶</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sticky: <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><hr><h3 id="【8】文章加密"><a href="#【8】文章加密" class="headerlink" title="【8】文章加密"></a>【8】文章加密</h3><p>注意：加密后的文章不能被搜索到</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">password</span>: <span class="hljs-string">136XXXHao@</span><br><span class="hljs-attr">abstract</span>: <span class="hljs-string">Welcome to my blog, enter password to read</span><br><span class="hljs-attr">message</span>: <span class="hljs-string">请输入你的密码</span><br><span class="hljs-attr">wrong_pass_message</span>: <span class="hljs-string">密码错误，请输入正确密码</span><br></code></pre></td></tr></table></figure><h3 id="【9】创建新的文章"><a href="#【9】创建新的文章" class="headerlink" title="【9】创建新的文章"></a>【9】创建新的文章</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hexo <span class="hljs-keyword">new</span> 我的文章<br></code></pre></td></tr></table></figure><hr><h2 id="解决出现的问题"><a href="#解决出现的问题" class="headerlink" title="解决出现的问题"></a>解决出现的问题</h2><h3 id="【1】图片访问失败"><a href="#【1】图片访问失败" class="headerlink" title="【1】图片访问失败"></a>【1】图片访问失败</h3><p>参考地址：</p><p><a href="https://www.cnblogs.com/BNTang/articles/16583413.html">https://www.cnblogs.com/BNTang/articles/16583413.html</a></p><p><a href="https://hexo.io/zh-cn/docs/asset-folders">https://hexo.io/zh-cn/docs/asset-folders</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm uninstall hexo-asset-image<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># _config.yml 需启用</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端-获取多选框被选中的值</title>
    <link href="/2022/03/31/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF-%E8%8E%B7%E5%8F%96%E5%A4%9A%E9%80%89%E6%A1%86%E8%A2%AB%E9%80%89%E4%B8%AD%E7%9A%84%E5%80%BC/"/>
    <url>/2022/03/31/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF-%E8%8E%B7%E5%8F%96%E5%A4%9A%E9%80%89%E6%A1%86%E8%A2%AB%E9%80%89%E4%B8%AD%E7%9A%84%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> $(<span class="hljs-string">&quot;input[name=&#x27;name&#x27;]:checked&quot;</span>).val();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jquery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux-搜索文件</title>
    <link href="/2022/03/31/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux-%E6%90%9C%E7%B4%A2%E6%96%87%E4%BB%B6/"/>
    <url>/2022/03/31/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux-%E6%90%9C%E7%B4%A2%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="find-名称【全】搜索"><a href="#find-名称【全】搜索" class="headerlink" title="find-名称【全】搜索"></a>find-名称【全】搜索</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@d746384d793f</span> /]# find / -name zkCli.sh<br>/usr/local/zookeeper/bin/zkCli.sh<br></code></pre></td></tr></table></figure><h3 id="find-通配符"><a href="#find-通配符" class="headerlink" title="find-通配符"></a>find-通配符</h3><p>进行模糊查询</p><p>通配符：*  ？ []</p><p>根据zoopeeper相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@d746384d793f</span> /]# find / -name zkC*<br>/usr/local/zookeeper/bin/zkCleanup.sh<br>/usr/local/zookeeper/bin/zkCli.cmd<br>/usr/local/zookeeper/bin/zkCli.sh<br>[root<span class="hljs-meta">@d746384d793f</span> /]# <br></code></pre></td></tr></table></figure><h3 id="find-不区分大小写"><a href="#find-不区分大小写" class="headerlink" title="find-不区分大小写"></a>find-不区分大小写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@d746384d793f</span> /]# find / -iname Zk*<br>/usr/local/zookeeper/bin/zkCleanup.sh<br>/usr/local/zookeeper/bin/zkCli.cmd<br>/usr/local/zookeeper/bin/zkCli.sh<br>/usr/local/zookeeper/bin/zkEnv.cmd<br></code></pre></td></tr></table></figure><h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h3><p>这个可以了解下：目前不会使用</p><p>grep命令</p><p>语法： grep [选项] 字符串 文件名</p><p>　　　　-i 忽略大小写</p><p>　　　　-v 排除指定字符串（取反）</p><p>例：grep “size” User （查找User文件里面有size的字符串）</p><p>注意：指定字符串一定要用” “</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea-自定义模板</title>
    <link href="/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="idea–自定义模板"><a href="#idea–自定义模板" class="headerlink" title="idea–自定义模板"></a>idea–自定义模板</h1><p>可以直接将下面的代码粘贴到自己建的组中</p><h2 id="【1】步骤注释"><a href="#【1】步骤注释" class="headerlink" title="【1】步骤注释"></a>【1】步骤注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;template name=<span class="hljs-string">&quot;ff&quot;</span> value=<span class="hljs-string">&quot;/*-----------------功能:$END$ $date$ -----------------*/&quot;</span> description=<span class="hljs-string">&quot;XXX-自定义注释模板&quot;</span> toReformat=<span class="hljs-string">&quot;false&quot;</span> toShortenFQNames=<span class="hljs-string">&quot;true&quot;</span>&gt;<br>  &lt;variable name=<span class="hljs-string">&quot;date&quot;</span> expression=<span class="hljs-string">&quot;date(&amp;quot;yyyy-MM-dd&amp;quot;)&quot;</span> defaultValue=<span class="hljs-string">&quot;&quot;</span> alwaysStopAt=<span class="hljs-string">&quot;false&quot;</span> /&gt;<br>  &lt;context&gt;<br>    &lt;option name=<span class="hljs-string">&quot;JAVA_CODE&quot;</span> value=<span class="hljs-string">&quot;true&quot;</span> /&gt;<br>  &lt;/context&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>integer值判断</title>
    <link href="/2022/03/31/%E5%90%8E%E7%AB%AF/integer%E5%80%BC%E5%88%A4%E6%96%AD/"/>
    <url>/2022/03/31/%E5%90%8E%E7%AB%AF/integer%E5%80%BC%E5%88%A4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h3 id="可以使用-x3D-x3D-！-x3D-判断"><a href="#可以使用-x3D-x3D-！-x3D-判断" class="headerlink" title="可以使用&#x3D;&#x3D; ！&#x3D;判断"></a>可以使用&#x3D;&#x3D; ！&#x3D;判断</h3><p>建议使用&#x3D;&#x3D;   ！&#x3D;判断，防止空指针异常</p><h3 id="可以使用equal判断"><a href="#可以使用equal判断" class="headerlink" title="可以使用equal判断"></a>可以使用equal判断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!userType.equals(<span class="hljs-number">1</span>) &amp;&amp; !userType.equals(<span class="hljs-number">2</span>))&#123;<br>map.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户类型错误，请联系管理员！&quot;</span>);<br><span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="getuType-建议使用"><a href="#getuType-建议使用" class="headerlink" title="getuType()建议使用"></a>getuType()建议使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> == kUser.getuType().intValue()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【springboot】-常用插件</title>
    <link href="/2022/03/31/%E5%90%8E%E7%AB%AF/springBoot/%E3%80%90springboot%E3%80%91-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/03/31/%E5%90%8E%E7%AB%AF/springBoot/%E3%80%90springboot%E3%80%91-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="tomcat插件"><a href="#tomcat插件" class="headerlink" title="tomcat插件"></a>tomcat插件</h3><p>springboot的tomcat插件,放到pom.xml文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;build&gt;<br>        &lt;plugins&gt;<br>            &lt;plugin&gt;<br>                &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;<br>                &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;<br>                &lt;configuration&gt;<br>                    &lt;port&gt;<span class="hljs-number">8001</span>&lt;/port&gt;<br>                    &lt;path&gt;/&lt;/path&gt;<br>                &lt;/configuration&gt;<br>                &lt;executions&gt;<br>                    &lt;execution&gt;<br>                        &lt;!-- 打包完成后,运行服务 --&gt;<br>                        &lt;phase&gt;<span class="hljs-keyword">package</span>&lt;/phase&gt;<br>                        &lt;goals&gt;<br>                            &lt;goal&gt;run&lt;/goal&gt;<br>                        &lt;/goals&gt;<br>                    &lt;/execution&gt;<br>                &lt;/executions&gt;<br>            &lt;/plugin&gt;<br>        &lt;/plugins&gt;<br>    &lt;/build&gt;<br></code></pre></td></tr></table></figure><p><strong>问题：</strong>Cannot resolve plugin org.apache.tomcat.maven:tomcat7-maven-plugin:<unknown></p><p><strong>解决办法：</strong><br>加上 <version> 2.2 </version> 后再刷新之后就可以了。</p><p>参考地址：<a href="https://blog.csdn.net/xueguchen/article/details/108616527">https://blog.csdn.net/xueguchen/article/details/108616527</a></p><hr><h3 id="Maven编译插件"><a href="#Maven编译插件" class="headerlink" title="Maven编译插件"></a>Maven编译插件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;properties&gt;<br>    &lt;project.build.sourceEncoding&gt;UTF-<span class="hljs-number">8</span>&lt;/project.build.sourceEncoding&gt;<br>    &lt;maven.compiler.source&gt;<span class="hljs-number">11</span>&lt;/maven.compiler.source&gt;<br>    &lt;maven.compiler.target&gt;<span class="hljs-number">11</span>&lt;/maven.compiler.target&gt;<br>  &lt;/properties&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--编译插件定义编译细节--&gt;<br>     &lt;plugin&gt;<br>       &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br>       &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;<br>       &lt;version&gt;<span class="hljs-number">3.1</span>&lt;/version&gt;<br>       &lt;configuration&gt;<br>         &lt;source&gt;<span class="hljs-number">11</span>&lt;/source&gt;<br>         &lt;target&gt;<span class="hljs-number">11</span>&lt;/target&gt;<br>         &lt;encoding&gt;utf-<span class="hljs-number">8</span>&lt;/encoding&gt;<br>         &lt;!--告诉编译器，编译的时候记录下形参的真实名称--&gt;<br>         &lt;compilerArgs&gt;<br>           &lt;arg&gt;-parameters&lt;/arg&gt;<br>         &lt;/compilerArgs&gt;<br>       &lt;/configuration&gt;<br>     &lt;/plugin&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>tomcat</tag>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea--显示所有构造方法</title>
    <link href="/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
    <url>/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="idea–显示所有构造方法"><a href="#idea–显示所有构造方法" class="headerlink" title="idea–显示所有构造方法"></a>idea–显示所有构造方法</h2><p>使用idea编写代码时，显示类的所有构造方法</p><p>配置如下：</p><p>Settings-&gt;Editor-&gt;Code Completion页面</p><p>【勾选】Show parameter name hints on completion【完成时显示参数名称提示】</p><p>【勾选】Show the parameter info popup in *** ms 【在多少毫秒后显示信息】</p><p><img src="/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/image-20210228192344819.png" alt="image-20210228192344819"> </p><p><img src="/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea--%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/image-20210228192430867.png" alt="image-20210228192430867"> </p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea-定位错误快捷键</title>
    <link href="/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-%E5%AE%9A%E4%BD%8D%E9%94%99%E8%AF%AF%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-%E5%AE%9A%E4%BD%8D%E9%94%99%E8%AF%AF%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>ctrl+shift+Q</p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows--解除端口占用</title>
    <link href="/2022/03/31/%E5%85%B6%E4%BB%96/windows/windows--%E8%A7%A3%E9%99%A4%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
    <url>/2022/03/31/%E5%85%B6%E4%BB%96/windows/windows--%E8%A7%A3%E9%99%A4%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1、Win-R-gt-cmd"><a href="#1、Win-R-gt-cmd" class="headerlink" title="1、Win+R-&gt;cmd"></a>1、Win+R-&gt;cmd</h2><h2 id="2、检查该端口是否被占用"><a href="#2、检查该端口是否被占用" class="headerlink" title="2、检查该端口是否被占用"></a>2、检查该端口是否被占用</h2><p><img src="/2022/03/31/%E5%85%B6%E4%BB%96/windows/windows--%E8%A7%A3%E9%99%A4%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/image-20210311222635336.png" alt="image-20210311222635336"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">C:\Users\Administrator&gt;netstat -aon|findstr <span class="hljs-string">&quot;8002&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3、端口进程运行的程序"><a href="#3、端口进程运行的程序" class="headerlink" title="3、端口进程运行的程序"></a>3、端口进程运行的程序</h2><p><img src="/2022/03/31/%E5%85%B6%E4%BB%96/windows/windows--%E8%A7%A3%E9%99%A4%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/image-20210311222813058.png" alt="image-20210311222813058"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">C:\Users\Administrator&gt;tasklist|findstr <span class="hljs-number">7728</span><br></code></pre></td></tr></table></figure><h2 id="4、杀死进程"><a href="#4、杀死进程" class="headerlink" title="4、杀死进程"></a>4、杀死进程</h2><p><img src="/2022/03/31/%E5%85%B6%E4%BB%96/windows/windows--%E8%A7%A3%E9%99%A4%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/image-20210311222906569.png" alt="image-20210311222906569"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">C:\Users\Administrator&gt;taskkill /f /t /im java.exe<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows--软件-开机自启动</title>
    <link href="/2022/03/31/%E5%85%B6%E4%BB%96/windows/windows-%E8%BD%AF%E4%BB%B6-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/"/>
    <url>/2022/03/31/%E5%85%B6%E4%BB%96/windows/windows-%E8%BD%AF%E4%BB%B6-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="【1】使用–shell-startup命令"><a href="#【1】使用–shell-startup命令" class="headerlink" title="【1】使用–shell:startup命令"></a>【1】使用–shell:startup命令</h3><p>使用Win+R，打开后输入shell:startup命令–进入开机自启动文件夹；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">shell:startup<br></code></pre></td></tr></table></figure><hr><h3 id="【2】将快捷方式放入"><a href="#【2】将快捷方式放入" class="headerlink" title="【2】将快捷方式放入"></a>【2】将快捷方式放入</h3><p>将想要启动的软件-快捷方式-&gt;放入的该文件中即可</p><hr><h3 id="【3】需要开机自启动的软件"><a href="#【3】需要开机自启动的软件" class="headerlink" title="【3】需要开机自启动的软件"></a>【3】需要开机自启动的软件</h3><ul><li>Listary  –文件搜索神器</li><li>Snipaste.exe – 截屏神器</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql-max_allowed_packet</title>
    <link href="/2022/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql-max-allowed-packet/"/>
    <url>/2022/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql-max-allowed-packet/</url>
    
    <content type="html"><![CDATA[<p>mysql:1153 Got a packet bigger than ‘max_allowed_packet’ bytes的解决方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">show VARIABLES like <span class="hljs-string">&#x27;%max_allowed_packet%&#x27;</span>;<br>set global max_allowed_packet=<span class="hljs-number">52428800</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>异常</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea-xml文件映射插件</title>
    <link href="/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-xml%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-xml%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>mybatis-xml文件映射</p><p>idea 超好用的mybatis插件 (<code>Free Mybatis plugin</code>)</p><p>如果没有可以使用：<code>mybatisx</code></p><p>​</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云服务器密码</title>
    <link href="/2022/03/31/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AF%86%E7%A0%81/"/>
    <url>/2022/03/31/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>用户名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">root<br></code></pre></td></tr></table></figure><p>密码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">136139Hao<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【IO】-文件上传下载</title>
    <link href="/2022/03/31/%E5%90%8E%E7%AB%AF/IO/%E3%80%90IO%E3%80%91-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2022/03/31/%E5%90%8E%E7%AB%AF/IO/%E3%80%90IO%E3%80%91-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="MultipartFile-API介绍"><a href="#MultipartFile-API介绍" class="headerlink" title="MultipartFile-API介绍"></a>MultipartFile-API介绍</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">multipartFile.getContentType()<span class="hljs-comment">//在控制台打印文件的类型</span><br>multipartFile.getName()<span class="hljs-comment">//返回文件的名称</span><br>multipartFile.getOriginalFilename()<span class="hljs-comment">//返回文件的原文件名</span><br>multipartFile.getSize() <span class="hljs-comment">//单位为字节</span><br>multipartFile.getInputStream() <span class="hljs-comment">//文件转换为输入流</span><br>multipartFile.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/&quot;</span>));<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F; 文件重复问题</p><p>服务器文件目录&#x2F;模块&#x2F;时间(yyyy-MM-dd)&#x2F;系统当前时间+uuid的前七位（去掉-）；</p><p>思路：</p><p>1、如果文件目录没有的话首先要创建文件目录（使用的是file.mkdirs()）</p><p>2、文件不存在-》上传文件，文件已存在-》报提示</p><p>3、输入流-》输出流   主要操作：输入流写到输出流中</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(InputStream is,String filePath,String fileName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>           <span class="hljs-keyword">if</span> (!file.exists())&#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   file.mkdirs();<br>                   System.out.println(<span class="hljs-string">&quot;文件创建陈成功了&quot;</span>);<br>               &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                   System.out.println(<span class="hljs-string">&quot;创建文件失败&quot;</span>);<br>                   <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;创建文件失败&quot;</span>);<br>               &#125;<br>           &#125;<br>           file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath, fileName);<br>           <span class="hljs-keyword">if</span> (!file.exists())&#123;<br>               fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>               <span class="hljs-type">byte</span>[] inputBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">15</span>*<span class="hljs-number">1024</span>];<br>               <span class="hljs-type">int</span> fSize;<br>               <span class="hljs-keyword">while</span>((fSize = is.read(inputBytes)) &gt; <span class="hljs-number">0</span> )&#123;<br>                   fos.write(inputBytes,<span class="hljs-number">0</span>,fSize);<br>               &#125;<br>               System.out.println(<span class="hljs-string">&quot;文件上传成功&quot;</span>);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;存在相同的文件&quot;</span>);<br>           &#125;<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           System.out.println(e.getMessage());<br>           <span class="hljs-keyword">throw</span> e;<br>       &#125; <span class="hljs-keyword">finally</span> &#123;<br>           <span class="hljs-comment">/*------------------ 功能：关闭流 2022-01-23 ------------------*/</span><br>           <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   fos.flush();<br>                   fos.close();<br>               &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                   e.printStackTrace();<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">if</span> (is != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   is.close();<br>               &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                   e.printStackTrace();<br>               &#125;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis-模糊查询</title>
    <link href="/2022/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93/mybatis-%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/"/>
    <url>/2022/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93/mybatis-%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">and file_name like <span class="hljs-string">&#x27;%$&#123;fileName&#125;%&#x27;</span><br></code></pre></td></tr></table></figure><p>详细代码请参考:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--查询指定行数据--&gt;<br>    &lt;select id=<span class="hljs-string">&quot;queryFileContent&quot;</span> parameterType=<span class="hljs-string">&quot;com.liu.pojo.FileContent&quot;</span> resultMap=<span class="hljs-string">&quot;FileContentMap&quot;</span>&gt;<br>        select<br>        file_id, file_name, file_suffix, file_path, fcd, lcd<br>        from file_content<br>        &lt;where&gt;<br>            &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;fileName != null and fileName != &#x27;&#x27;&quot;</span>&gt;<br>                and file_name like <span class="hljs-string">&#x27;%$&#123;fileName&#125;%&#x27;</span><br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;fileSuffix != null and fileSuffix != &#x27;&#x27;&quot;</span>&gt;<br>                <span class="hljs-type">and</span> <span class="hljs-variable">file_suffix</span> <span class="hljs-operator">=</span> #&#123;fileSuffix&#125;<br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>        &lt;/where&gt;<br>    &lt;/select&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql-表设置时间戳</title>
    <link href="/2022/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql-%E8%A1%A8%E8%AE%BE%E7%BD%AE%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <url>/2022/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql-%E8%A1%A8%E8%AE%BE%E7%BD%AE%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    
    <content type="html"><![CDATA[<p>设置时间戳的好处：插入或更新操作时不需要再次操作这两个字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">CURRENT_TIMESTAMP <br></code></pre></td></tr></table></figure><p>fcd【创建人】  ：根据当前时间戳更新(不勾选)</p><p>lcd 【修改人】： 根据当前时间戳更新(勾选)</p><p>问题：总是与当前时间相差八个小时【未解决】</p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea-根据数据库表生成代码</title>
    <link href="/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-%E6%A0%B9%E6%8D%AEsql%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/"/>
    <url>/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-%E6%A0%B9%E6%8D%AEsql%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>idea根据数据库表中自动生成代码，这里只尝试过mysql数据库</p><p>使用easycode插件</p><p>在idea中连接MySql数据库</p><p>选中一张表-&gt;右击-》第一个（EasyCode）-》第一个（Generate Code）</p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea-常用主题</title>
    <link href="/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-%E5%B8%B8%E7%94%A8%E4%B8%BB%E9%A2%98/"/>
    <url>/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-%E5%B8%B8%E7%94%A8%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>是一个比较护眼的主题，建议使用</p><p>在Plugins-&gt;Marketplace中搜索</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">gradianto<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>goole-打开全局搜索窗口</title>
    <link href="/2022/03/31/%E5%85%B6%E4%BB%96/goole-%E6%89%93%E5%BC%80%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E7%AA%97%E5%8F%A3/"/>
    <url>/2022/03/31/%E5%85%B6%E4%BB%96/goole-%E6%89%93%E5%BC%80%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p>打开-》开发者工具窗口中的Sources页</p><p>方式一：使用快捷键：ctrl+shift+f</p><p>方式二：右击左边（page页）的文件夹-Search in folder</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>goole</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>趣学设计模式</title>
    <link href="/2022/03/31/%E8%B6%A3%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/03/31/%E8%B6%A3%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="模块一：理解软件编程背后的系统化思维"><a href="#模块一：理解软件编程背后的系统化思维" class="headerlink" title="模块一：理解软件编程背后的系统化思维"></a>模块一：理解软件编程背后的系统化思维</h2><h3 id="01-学习思维：怎样才能学好-Java-设计模式？"><a href="#01-学习思维：怎样才能学好-Java-设计模式？" class="headerlink" title="01 | 学习思维：怎样才能学好 Java 设计模式？"></a>01 | 学习思维：怎样才能学好 Java 设计模式？</h3><p>面试的时候会问到设计模式、前辈们给你“洗脑”，说设计模式很重要？</p><p>所以自己就感觉设计模式很重要，要学习它；</p><p>但是呢?有了很多的困惑，到底要不要学习呢？因为很难学，内心都排斥；</p><p>1）【面试中经常问、工作中很少用】在面试中时常被问到设计模式，可实际工作中却很少使用；</p><p>2）【用的时候力不从心】每个模式的样例代码都很熟悉，实际编码时却总感觉力不从心，实现困难；</p><p>3）【到了合适的时候，不知道用哪一种】很多系统设计看上去和很多模式都很像，却不知道到底该用一个模式，还是多个模式；</p><p>4）【写代码的时候有用】设计模式除了在编码阶段有用外，在设计上似乎用处并不大。</p><p>可能从一开始就没有搞清楚设计模式的应用范围和背景</p><p>设计模式到底解决什么问题？为什么要抽象这样的场景？又是如何解决这些问题的？</p><p>对设计模式存在误解:</p><p>误解一：经典模式太抽象，很难学下去</p><p>设计模式太过于经典了;</p><p>过于抽象，难以快速理解</p><p>包含的知识密度太高，需要花时间解读。</p><p>我们需要先搞清楚设计模式能解决哪些范围的问题后，才能正确使用设计模式。</p><p>设计模式解决的是<strong>“可复用”的设计问题</strong></p><p>简单来说，设计模式从不同项目中总结出来的通用经验，是为了帮助我们快速理解现有的系统，并从中找出共性规律，如果没有足够的经验或者思考，反而容易引入错误的设计，造成更多的麻烦。</p><p>“经典太抽象”只是一个事实，只要你能肯花时间认真解读，学下去并不难。</p><hr><p>误解二：设计模式太单一，复杂业务场景难落地</p><p>在理论学习中，几乎所有的开发人员都认为它很重要</p><p>在工作实践中，绝大部分开发人员在项目中又找不到合适的应用场景。</p><p>设计模式似乎只能解决技术层面上的问题，业务上完全派不上用场。</p><p>设计模式并不是一种全场景的解决方案，它需要考虑适用范围。</p><p>比如，如何设计一个秒杀系统？你不仅需要关心业务功能的实现，还要关心不同开发成员间的相互配置、服务器资源等，而此时你的脑海中浮现设计模式中的适配器模式、策略模式、状态模式……对你来说帮助并不那么明显，因为你其实还没有到如此需要细节实现的阶段。</p><p><strong>设计模式的提出就是为了解决限定领域的有限问题</strong>。</p><p>实现可复用的软件？如何能够为更多的人提高编程效率？</p><hr><p><strong>误解三：模式既然很好用，那么一切皆模式</strong></p><p>Java 设计模式原本是从不同的编程项目中总结出来的通用经验，能解决很多工具、组件、框架复用的问题。</p><p>好的设计从来不是看用的模式有多少，而是看如何合理利用模式的设计思想，以及如何利用模式解决真实的问题。</p><p>学习设计模式是为了启发我们的思考，而不是“手里握着锤子，满世界找钉子”。</p><hr><h4 id="如何正确学习设计模式"><a href="#如何正确学习设计模式" class="headerlink" title="如何正确学习设计模式"></a>如何正确学习设计模式</h4><h5 id="首先，要摆正心态。"><a href="#首先，要摆正心态。" class="headerlink" title="首先，要摆正心态。"></a>首先，要摆正心态。</h5><p> 设计模式不是万能灵药，不是银弹，设计模式能解决的问题其实是有限的，正确分析设计模式可以解决和不能解决的问题。</p><p>总之，放弃争论设计模式的有用性，花更多的时间去学习和实践，不要总想着不思考直接使用。</p><h5 id="其次，搞清楚设计模式的背景知识。"><a href="#其次，搞清楚设计模式的背景知识。" class="headerlink" title="其次，搞清楚设计模式的背景知识。"></a>其次，搞清楚设计模式的背景知识。</h5><p>学习一门知识时，如果总是忽略关联的背景知识，久而久之会养成零碎知识积累的习惯——收藏了很多资料，拆解、吸收却很少。而在学习关联知识时，你会发现，原来的知识会逐渐连接和串联起来，这是一个事半功倍的动作。</p><h5 id="再次，努力具备高手独立思考的习惯"><a href="#再次，努力具备高手独立思考的习惯" class="headerlink" title="再次，努力具备高手独立思考的习惯"></a>再次，努力具备高手独立思考的习惯</h5><p>互联网时代，不缺资料和方法，缺的是能解决复杂难题的高手。</p><p>他们在面对复杂难题时，总是能保持清晰的头脑，谦虚并具备独立思考的习惯，你应该多多向他们学习。</p><p>同样，你还需要花时间去刻意练习，在失败和挫折中探索真实的能力长什么样，并借此不断强化你的能力。</p><h5 id="最后，从现在开始，坚持。"><a href="#最后，从现在开始，坚持。" class="headerlink" title="最后，从现在开始，坚持。"></a>最后，从现在开始，坚持。</h5><p>需要面对更为枯燥的业务场景，有时还需要反复做一些你可能不太喜欢的重复工作。</p><p>大多数时候我们都更容易半途而废，可是要想突破瓶颈，提升能力，升职加薪，如果没有付出与努力，那么当机会真的到来时，你很可能会抓不住。因此，一定不要中途放弃，一定要坚持住。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>要谨记：设计 ≠ 编码，愿望 ≠ 事实。</p><p>学习设计模式的关键不在于你熟练掌握了多少设计模式，而在于能否真正灵活运用来解决更多复杂的现实问题。</p><p>你在学习设计模式时，不要太过于关注那些“无用论”，而应该多去发现“有用”的地方，让这些“有用”的地方来滋养你的思维，因为你的目的是要解决真实世界的困难问题，而不是为了在设计模式到底有没有用上争输赢。</p><p>只要你对设计模式进行不断地钻研与思考，设计模式就能带给你源源不断的新灵感和新希望。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-注解介绍及使用</title>
    <link href="/2022/03/31/%E5%90%8E%E7%AB%AF/java-%E6%B3%A8%E8%A7%A3%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/03/31/%E5%90%8E%E7%AB%AF/java-%E6%B3%A8%E8%A7%A3%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h3><p> <strong>必须要结合@ControllerAdvice和@ExceptionHandler一起使用</strong> </p><p><strong>@ExceptionHandler必须要求该方法必须要和出现问题的控制器在一个类中，才能生效。</strong></p><p><strong>如果别的类报空指针异常，则不会进该异常处理方法。</strong></p><p> 如果注解的参数是NumberFormatException.class，表示只有方法抛出NumberFormatException时，才会调用该方法 </p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration]"></a>@Configuration]</h3><p>将想要的组件添加到容器中</p><p>内部@Bean注解</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java注解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java学习者论坛密码</title>
    <link href="/2022/03/31/%E5%90%8E%E7%AB%AF/java%E5%AD%A6%E4%B9%A0%E8%80%85%E8%AE%BA%E5%9D%9B%E5%AF%86%E7%A0%81/"/>
    <url>/2022/03/31/%E5%90%8E%E7%AB%AF/java%E5%AD%A6%E4%B9%A0%E8%80%85%E8%AE%BA%E5%9D%9B%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>网站：<a href="https://goobe.io/search.aspx?k=java+%E5%AD%A6%E4%B9%A0">https://goobe.io/search.aspx?k=java+%e5%ad%a6%e4%b9%a0</a></p><p>密码：136139hao</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lambda-使用及案例</title>
    <link href="/2022/03/31/%E5%90%8E%E7%AB%AF/lambda-%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%A1%88%E4%BE%8B/"/>
    <url>/2022/03/31/%E5%90%8E%E7%AB%AF/lambda-%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="lambda-使用及案例"><a href="#lambda-使用及案例" class="headerlink" title="lambda-使用及案例"></a>lambda-使用及案例</h2><h3 id="llist中取单列生成新的list"><a href="#llist中取单列生成新的list" class="headerlink" title="llist中取单列生成新的list"></a>llist中取单列生成新的list</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从list集合中，取出字段name的列表</span><br>List&lt;String&gt; names = list.stream().map(p -&gt; p.getName()).collect(Collectors.toList());<br></code></pre></td></tr></table></figure><hr><h3 id="list中取两列-放到map中"><a href="#list中取两列-放到map中" class="headerlink" title="list中取两列-放到map中"></a>list中取两列-放到map中</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">pdr.stream().collect(Collectors.toMap(User::getId, User::getName));<br></code></pre></td></tr></table></figure><hr><h3 id="对List＜Map＞进行排序"><a href="#对List＜Map＞进行排序" class="headerlink" title="对List＜Map＞进行排序"></a>对List＜Map＞进行排序</h3><p><a class="btn" href="https://blog.csdn.net/weixin_43163261/article/details/114121021" title="可参考文档">可参考文档</a></p><p>可在当前类中写一个静态方法，用于lambda表达式对List＜Map＞进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span>&#123;<br>        <span class="hljs-keyword">return</span> ((Bigdecimal)map.get(<span class="hljs-string">&quot;age&quot;</span>)).intValue();<br>    &#125;<br></code></pre></td></tr></table></figure><p> 将BigDecimal转换成Int：  bigdecimal.intValue() </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Map&lt;String, Object&gt;&gt; newList = list.stream()<br>                .sorted(Comparator.comparing(StreamMap3::getNage)<br>                        .thenComparing((Map&lt;String, Object&gt; paramMap) -&gt; (<span class="hljs-type">int</span>) paramMap.get(<span class="hljs-string">&quot;age&quot;</span>)))<br>                .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><p>StreamMap3:指定是当前类</p><p>.thenComparing：如果第一次排序相同再根据第二个条件进行排序（可以不使用）</p><hr>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lambda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>登录windows服务器.</title>
    <link href="/2022/03/31/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%99%BB%E5%BD%95windows%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/03/31/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%99%BB%E5%BD%95windows%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="搜索远程服务器"><a href="#搜索远程服务器" class="headerlink" title="搜索远程服务器"></a>搜索远程服务器</h3><p>在计算机中搜索：&#x3D;&#x3D;远程桌面连接&#x3D;&#x3D;</p><h3 id="登录服务器"><a href="#登录服务器" class="headerlink" title="登录服务器"></a>登录服务器</h3><ul><li><p>输入计算机ip：服务器ip</p></li><li><p>输入用户名：自己的计算机名+用户名</p></li></ul><p>例如：SD-20200609CKXJ\administrator</p><p>输入：&#x3D;&#x3D;administrator&#x3D;&#x3D;也可以</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2. oralce账户管理和查询语句</title>
    <link href="/2022/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/2.%20oralce%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    <url>/2022/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/2.%20oralce%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="oralce账户管理和查询语句"><a href="#oralce账户管理和查询语句" class="headerlink" title="oralce账户管理和查询语句"></a>oralce账户管理和查询语句</h2><h3 id="oracle-创建scott用户并导入练习数据"><a href="#oracle-创建scott用户并导入练习数据" class="headerlink" title="oracle-创建scott用户并导入练习数据"></a>oracle-创建scott用户并导入练习数据</h3><p>真正存储数据的：叫做数据库；</p><p>数据库存储的结构：网状、层级、关系、对象</p><p>不仅存储数据的关系，还要存储数据的描述；</p><p>变量名就是对变量的描述；</p><p>数据库：数据库管理系统+库</p><p>数据库应用系统：</p><p>数据库系统：用户+数据库管理系统+数据库+数据库？？？</p><p>我们安装的是oracleXE版本；</p><p>用的时候记得将防火墙给关了；</p><p>防火墙拦截的是端口后；</p><p>否则别人就无法访问你的库；</p><p>服务器和库是在一起的；</p><p>客户端是一部分；</p><p>要知道链接出现问题的时候，是客户端的问题，还是服务器的问题；</p><p>oracle类似与网络游戏</p><p>mysql类似于单机游戏</p><p>oracleXE自带账户：XE</p><p>账户名：system  系统账户</p><p>sys  超级用户</p><p>sys账户比system账户的权限要多；</p><p>sys是给工程师用的；</p><p>system是给管理员用的；</p><p>oracleXE是默认没有普通用户的；</p><p>oracle11g和oracle10g自带一个普通用户scott，默认密码是：tiger；并给用户自带了四张二维表数据；</p><p>用户与用户之间是不能看到对方的信息的；</p><p>练习的话需要建立一个不同用户（我的system是普通用户，这个要解决）</p><p>oracle新建用户，必须使用system账户进行用户创建；</p><p>如果在学习过程中，没有听懂，往后学习，慢慢问题就可能解决了；</p><p>打开plsql，使用system账户登录，登录身份选择sysdba;</p><p>新建sql命令窗口；</p><p>create user 用户名 indentified by 密码;</p><p>create user scott indentified by scott</p><p>给用户赋予权限（相当与给用户上户口）</p><p>– 赋予数据库登录连接欸权限</p><p>grant connect to scott;  f8执行；</p><p>– 赋予资源操纵权限</p><p>grant resource to scott;</p><p>尝试登录scott用户，使用普通用户登录；</p><p>如何删除用户呢？</p><p>oracle11g和Oracle12g给用户了子弟啊了四张二维表</p><p>oralceXE是没有的；</p><p>资料中scott.sql文件；</p><p>将oracle11g和Oracle12g这个用户的数据给导出来了</p><p><code>scott.sql</code>:将数据导入到数据库中？</p><p>plsql-&gt;工具-》导入表 -》SQL插入（使用命令窗口）</p><p>Tables</p><hr><h3 id="oracle-单表查询select-amp-别名"><a href="#oracle-单表查询select-amp-别名" class="headerlink" title="oracle-单表查询select&amp;别名"></a>oracle-单表查询select&amp;别名</h3><p>练习的时候，建议使用scott用户；</p><p>忘记用户密码：</p><p>cmd打开命令窗口：sqlplus &#x2F;nolog</p><p>输入命令：conn &#x2F;as sysdba</p><p>输入命令：alter user 要修改密码的用户名 indentified by 123;</p><p>alter user scott indentified by admin;</p><p>可能会提示：sqlplus不是nebula命令的错误；</p><p>是因为oracle的环境变量配置的问题；</p><p>为什么要配置path?</p><p>bin下有sqlplus.exe命令；</p><p>在窗口中直接输入sqlplus就可以进入oracle命令窗口；</p><p>win操作系统会去path下找，找到了就是内部命令；</p><p>减少我们的操作；</p><p>通过scott用户操作数据；</p><p>SQL语言：结构化语句；</p><p>SQL可以做什么？</p><p>操作数据；</p><p>SQL的分类：</p><p>DDL，DML，DQL,DCL TCL</p><p>通过SQL语句进行数据库中的数据管理；</p><p>通过SQL语句管理用户</p><p>通过SQL语句管理事务；</p><p>数据的读取-》单标查询、多表查询、子查询</p><p>数据的存储-》增加表、数据  删除表数据、修改表数据</p><p>需要学习的：</p><p>完成单表的crud;</p><p>完成多表的查询；</p><p>完成子查询；</p><p>完成用户的管理；</p><p>完成表的管理；</p><p>序列、视图、索引；</p><p>数据库的分页查询；</p><p>数据库的备份；</p><p>事务管理；</p><p>– 查询表的查询学习</p><p>查询表的所有数据：select * from 表明；</p><p>select * from emp;</p><p>– 查询表中自定字段的值</p><table><thead><tr><th>数据库的操作说明</th><th>sql操作</th></tr></thead><tbody><tr><td>查询表的所有数据</td><td>select * from emp</td></tr><tr><td>指定字段查询</td><td>select empno from emp;<br>select empno,ename from emp;</td></tr><tr><td>别名查询</td><td>select empno 员工编号 from emp;<br>【前提：中间不能有特殊字符;有加双引号就好】<br>select ename “员工姓名” from emp;<br>select job as 工作 from emp;<br>select mgr as “领导编号” from emp;【官方写法】</td></tr><tr><td>连接符查询</td><td>select empno||’的姓名是’||ename as 信息 from emp;<br>[字段名||’别名’||字段名。。。]</td></tr><tr><td>去重复查询</td><td>select distinct job,mgr from emp;<br>[去的是行重复，多行数据完全一样去重]</td></tr><tr><td>排序查询</td><td>select * from emp order by ename desc;<br>【先查再去重】【默认升序】【只要是字段名就可以】<br>select * from emp order by empno,ename;<br/>【多字段排序-先排字段一，如字段一相同再按字段二排序】</td></tr><tr><td>字段的逻辑运算</td><td>select empno,ename,job,sal*2+100,sal+comm from emp;<br>【可以进行四则运算-必须要是个数字】【先查后做运算】<br>【计算后的字段可能为空，例如：sal+comm】</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><hr><h3 id="oracle-单表查询连接符-amp-去除重复-amp-排序-amp-字段逻辑运算"><a href="#oracle-单表查询连接符-amp-去除重复-amp-排序-amp-字段逻辑运算" class="headerlink" title="oracle-单表查询连接符&amp;去除重复&amp;排序&amp;字段逻辑运算"></a>oracle-单表查询连接符&amp;去除重复&amp;排序&amp;字段逻辑运算</h3><p>PLSQL如何设置语言？</p><p>PLSQL英文版设置为中文版：<a href="https://blog.csdn.net/spurs611/article/details/80974850?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-80974850-blog-114846499.pc_relevant_antiscanv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-80974850-blog-114846499.pc_relevant_antiscanv2&utm_relevant_index=2">https://blog.csdn.net/spurs611/article/details/80974850?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-80974850-blog-114846499.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-80974850-blog-114846499.pc_relevant_antiscanv2&amp;utm_relevant_index=2</a></p><p>压缩包整理的时候放到文件夹，支持下载；</p><p>安装完成后，重启plsql即可；</p><p>工具-》首选项</p><p>属性：</p><p>元祖等的介绍，用的时候回来看，可以在PPT中查看</p><p>连接符-写到上一节的表格中；</p><p>获取下一页、一直获取到最后；</p><hr><h3 id="oracle-单表查询-amp-单条件where子句"><a href="#oracle-单表查询-amp-单条件where子句" class="headerlink" title="oracle-单表查询&amp;单条件where子句"></a>oracle-单表查询&amp;单条件where子句</h3><p>视频播放错误；</p><hr><h3 id="oracle-where子句关键字学习"><a href="#oracle-where子句关键字学习" class="headerlink" title="oracle-where子句关键字学习"></a>oracle-where子句关键字学习</h3><table><thead><tr><th>使用where子句查询筛选</th><th>SQL操作</th></tr></thead><tbody><tr><td>使用运算符进行筛选 &#x3D;,&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;,&lt;&gt;</td><td>select * from emp where hiredate&gt;&#x3D;’01-1月-1981’<br>对日期进行判断【不理解】</td></tr><tr><td>and,or,like,is null,is not null, in ,between and</td><td>【like ‘%S%’】【like ‘S%’】【like ‘%S’】<code>【like &#39;_S%&#39;】``【like &#39;%/_%&#39; escape &#39;/&#39;】</code>【escape 可以将普通字符转化为转义字符】【转义字符可以将特殊字符转化为普通字符】</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3. oralce的函数学习&amp;分组&amp;增加删除修改&amp;SQL92</title>
    <link href="/2022/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/3.%20oralce%E7%9A%84%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0&amp;%E5%88%86%E7%BB%84&amp;%E5%A2%9E%E5%8A%A0%E5%88%A0%E9%99%A4%E4%BF%AE%E6%94%B9&amp;SQL92/"/>
    <url>/2022/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/3.%20oralce%E7%9A%84%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0&amp;%E5%88%86%E7%BB%84&amp;%E5%A2%9E%E5%8A%A0%E5%88%A0%E9%99%A4%E4%BF%AE%E6%94%B9&amp;SQL92/</url>
    
    <content type="html"><![CDATA[<h2 id="oralce的函数学习-amp-分组-amp-增加删除修改-amp-SQL92"><a href="#oralce的函数学习-amp-分组-amp-增加删除修改-amp-SQL92" class="headerlink" title="oralce的函数学习&amp;分组&amp;增加删除修改&amp;SQL92"></a>oralce的函数学习&amp;分组&amp;增加删除修改&amp;SQL92</h2><h3 id="oracle作业处理"><a href="#oracle作业处理" class="headerlink" title="oracle作业处理"></a>oracle作业处理</h3><p>1.选择部门30中的所有员工.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>2.列出所有办事员(CLERK)的姓名，编号和部门编号.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno,ename,deptno <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CLERK&#x27;</span><br></code></pre></td></tr></table></figure><p>【数字不加引号不会报错，字符不加一定会报错】</p><p>3.找出佣金高于薪金的员工.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm<span class="hljs-operator">&gt;</span>sal<br></code></pre></td></tr></table></figure><p>4.找出佣金高于薪金的60%的员工.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm<span class="hljs-operator">&gt;</span>sal<span class="hljs-operator">*</span><span class="hljs-number">0.6</span><br></code></pre></td></tr></table></figure><p>5.找出部门10中所有经理(MANAGER)和部门20中所有办事员(CLERK)的详细资料.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> (deptno<span class="hljs-operator">=</span><span class="hljs-number">10</span> <span class="hljs-keyword">and</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;MANAGER&#x27;</span>) <span class="hljs-keyword">or</span> (deptno<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">and</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CLERK&#x27;</span>)<br></code></pre></td></tr></table></figure><p>6.找出部门10中所有经理(MANAGER),部门20中所有办事员(CLERK),既不是经理又不是办事员但其薪金大于或等于2000的所有员工的详细资料.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (deptno<span class="hljs-operator">=</span><span class="hljs-number">10</span> <span class="hljs-keyword">and</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;MANAGER&#x27;</span>) <span class="hljs-keyword">or</span> (deptno<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">and</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CLERK&#x27;</span>) <span class="hljs-keyword">or</span> (job<span class="hljs-operator">&lt;&gt;</span><span class="hljs-string">&#x27;MANAGER&#x27;</span> <span class="hljs-keyword">and</span> job<span class="hljs-operator">&lt;&gt;</span><span class="hljs-string">&#x27;CLERK&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">sql</span><span class="hljs-operator">&gt;=</span><span class="hljs-number">2000</span>) <br></code></pre></td></tr></table></figure><p>为什么使用or呢？没问题了；</p><p>7.找出收取佣金的员工的不同工作.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><p>【不同工作-需要去重】</p><p>8.找出不收取佣金或收取的佣金低于100的员工.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> comm<span class="hljs-operator">&lt;</span><span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>10.找出早于12年前受雇的员工.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> hiredate<span class="hljs-operator">&lt;</span><span class="hljs-string">&#x27;01-1月-1982&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> hiredate<br></code></pre></td></tr></table></figure><p>11.以首字母大写的方式显示所有员工的姓名.</p><p>13.显示不带有”R”的员工的姓名.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%R%&#x27;</span><br></code></pre></td></tr></table></figure><p>17.显示员工的详细资料,按姓名排序.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> ename<br></code></pre></td></tr></table></figure><p>18.显示员工的姓名和受雇日期,根据其服务年限,将最老的员工排在最前面.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,hiredate <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> hiredate<br></code></pre></td></tr></table></figure><p>19.显示所有员工的姓名、工作和薪金,按工作的降序排序,若工作相同则按薪金排序.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,job,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> job <span class="hljs-keyword">desc</span>,sal <span class="hljs-keyword">asc</span><br></code></pre></td></tr></table></figure><p>20.显示所有员工的姓名、加入公司的年份和月份,按受雇日期所在月排序,若月份相同则将最早年份的员工排在最前面.</p><p>24.显示姓名字段的任何位置包含”A”的所有员工的姓名.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%A%&#x27;</span><br></code></pre></td></tr></table></figure><p>汉语读不通；</p><p>读通汉语后蒙了；</p><p>有思路不敢写；</p><p>目前我们对汉语中隐藏的逻辑性不敏感，看的多了就好了；</p><p>写的太少；</p><p>放心大胆的写就好，出错再写；</p><hr><h3 id="oracle-单行函数学习"><a href="#oracle-单行函数学习" class="headerlink" title="oracle-单行函数学习"></a>oracle-单行函数学习</h3><p>查询工作为SALESMAN,MANAGER并且工资大于2500的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> (job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SALESMAN&#x27;</span> <span class="hljs-keyword">or</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MANAGER&#x27;</span>) <span class="hljs-keyword">and</span> sal<span class="hljs-operator">&gt;</span><span class="hljs-number">2500</span><br></code></pre></td></tr></table></figure><p>oracle函数的学习；</p><p>【单行函数、多行函数、转换函数、其他函数】</p><p>单行函数学习</p><p>– 查询所有的员工信息，员工姓名小写显示；</p><p>oracle管理系统中用的，mysql中不一定好使；</p><table><thead><tr><th>单行函数分类</th><th></th></tr></thead><tbody><tr><td>字符函数</td><td>大小写、剪裁、翻译、查找、取、连接</td></tr><tr><td>数值函数</td><td></td></tr><tr><td>日期函数</td><td></td></tr><tr><td>转换函数</td><td></td></tr><tr><td>通用函数</td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h4 id="字符函数："><a href="#字符函数：" class="headerlink" title="字符函数："></a>字符函数：</h4><p><img src="/2022/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/3.%20oralce%E7%9A%84%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0&%E5%88%86%E7%BB%84&%E5%A2%9E%E5%8A%A0%E5%88%A0%E9%99%A4%E4%BF%AE%E6%94%B9&SQL92/1652978036701.png" alt="1652978036701"></p><table><thead><tr><th><strong>函 数</strong></th><th><strong>功 能</strong></th><th><strong>示 例</strong></th><th><strong>结 果</strong></th></tr></thead><tbody><tr><td><strong>INITCAP (char)</strong></td><td><strong>首字母大写</strong></td><td><strong>initcap</strong> <strong>(‘hello’)</strong></td><td><strong>Hello</strong></td></tr><tr><td><strong>LOWER (char)</strong></td><td><strong>转换为小写</strong></td><td><strong>lower (‘FUN’)</strong></td><td><strong>fun</strong></td></tr><tr><td><strong>UPPER (char)</strong></td><td><strong>转换为大写</strong></td><td><strong>upper (‘sun’)</strong></td><td><strong>SUN</strong></td></tr><tr><td><strong>LTRIM (char, set)</strong></td><td><strong>左剪裁</strong></td><td><strong>ltrim</strong> **(‘**xyzadams’, ‘xyz’)</td><td><strong>adams</strong></td></tr><tr><td><strong>RTRIM (char, set)</strong></td><td><strong>右剪裁</strong></td><td><strong>rtrim</strong> **(‘**xyzadams’, ‘ams’)</td><td><strong>xyzad</strong></td></tr><tr><td><strong>TRANSLATE (char, from, to)</strong></td><td><strong>按字符翻译</strong></td><td>**translate (‘jack’, ‘**abcd’, ‘1234’)</td><td><strong>j13k</strong></td></tr><tr><td><strong>REPLACE (char,</strong> <strong>search_str</strong>, <strong>replace_str</strong>)</td><td><strong>字符串替换</strong></td><td><strong>replace (‘jack and</strong> <strong>jue</strong>‘, ‘j’, ‘bl’)</td><td><strong>black and blue</strong></td></tr><tr><td><strong>INSTR (char,</strong> <strong>substr</strong>[, pos])</td><td><strong>查找子串位置</strong></td><td><strong>instr</strong> <strong>(‘worldwide’, ‘d’)</strong></td><td><strong>5</strong></td></tr><tr><td><strong>SUBSTR (char, pos,</strong> <strong>len</strong>)</td><td><strong>取子字符串</strong></td><td><strong>substr</strong> <strong>(‘abcdefg’,3,2)</strong></td><td><strong>cd</strong></td></tr><tr><td><strong>CONCAT (char1, char2)</strong></td><td><strong>连接字符串</strong></td><td><strong>concat</strong> <strong>(‘Hello’, ‘world’)</strong></td><td><strong>Helloworld</strong></td></tr></tbody></table><p>– 查询所有员工信息，员工姓名小写显示；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno,ename <span class="hljs-built_in">lower</span>(ename),job,mgr,sal,<span class="hljs-built_in">lower</span>(<span class="hljs-string">&#x27;HH&#x27;</span>) <span class="hljs-keyword">from</span> emp<br></code></pre></td></tr></table></figure><hr><h4 id="数值函数："><a href="#数值函数：" class="headerlink" title="数值函数："></a>数值函数：</h4><p>dual:伪表，不存数据，为了方便我们运算的</p><p><img src="/2022/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/3.%20oralce%E7%9A%84%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0&%E5%88%86%E7%BB%84&%E5%A2%9E%E5%8A%A0%E5%88%A0%E9%99%A4%E4%BF%AE%E6%94%B9&SQL92/1652978416186.png" alt="1652978416186"></p><hr><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><p><img src="/2022/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle/3.%20oralce%E7%9A%84%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0&%E5%88%86%E7%BB%84&%E5%A2%9E%E5%8A%A0%E5%88%A0%E9%99%A4%E4%BF%AE%E6%94%B9&SQL92/1652978593239.png" alt="1652978593239"></p><p>根据DAY四舍五入的话，是显示的是周日的时间；</p><hr><h3 id="oracle-多行函数学习"><a href="#oracle-多行函数学习" class="headerlink" title="oracle-多行函数学习"></a>oracle-多行函数学习</h3><p>单行函数不改变数据库中的原有数据；</p><p>各种函数中有很多，用的时候能想起来有字符函数就好；</p><p>有有什么，可以来看看；</p><hr><p>多行函数（max,min,avg,sum,count）</p><p>对多行数据集中显示，显示出一条；</p><p>单行对每一行都改；多行</p><table><thead><tr><th>多行函数的使用</th><th></th></tr></thead><tbody><tr><td>max</td><td>– 查询员工的最高工资<br>select max(sal) from emp</td></tr><tr><td>min</td><td>– 查询员工的最低工资<br/>select min(sal) from emp</td></tr><tr><td>avg</td><td>–查询所有的员工工资之和<br>select avg(sal) from emp;</td></tr><tr><td>sum</td><td>– 查询所有的员工工资之和<br>select sum(sal) from emp;</td></tr><tr><td>count<br>count(*)-返回表的记录数<br>count(字段名)-返回非空数<br>count(distinct 字段名)-去重复后的字段数</td><td>– 查询公司有多少员工<br>select count(*) from emp<br>– 查询有津贴员工人数<br>select count(comm) from emp<br>【null会自动过滤】<br>– 查询公司有多少工作种类<br>select count(distinct job) from emp</td></tr></tbody></table><p>sum()  avg()   仅适用数值型；</p><p>count()   max()   min()   适用任何类型数据</p><p>多行函数不能喝字段直接混用，除非分组操作的时候；</p><p>多行函数不能和单行函数使用；</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">lower</span>(ename),<span class="hljs-built_in">max</span>(sal) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><p>多行函数的作用：对查询的数据进行统计；</p><p>统计学，最高、最低、平均</p><p>使用方法：select 多行函数名(字段名),多行函数名(字段名),多行函数名(字段名)…. from 表名;</p><p>多行函数不能和不同字段和单行函数一起使用，除非分组；</p><hr><h3 id="oralce-转换函数-amp-其他函数"><a href="#oralce-转换函数-amp-其他函数" class="headerlink" title="oralce-转换函数&amp;其他函数"></a>oralce-转换函数&amp;其他函数</h3><p>日期转字符串等；</p><table><thead><tr><th>转换函数分类</th><th>解释说明</th></tr></thead><tbody><tr><td>to_number(数值类型的字符)</td><td>将字符转换为数值</td></tr><tr><td>to_char(数值或者日期)</td><td>将数值或者日期转换为字符</td></tr><tr><td>to_date(日期格式的字符)</td><td>将字符转换为日期</td></tr></tbody></table><p>to_cahr类似于中介，to_number与to_date的转换通过to_char来转换；</p><table><thead><tr><th>转换函数的使用</th><th>SQL案例</th></tr></thead><tbody><tr><td>char-&gt;number</td><td>select to_number(‘123’) from dual;</td></tr><tr><td>number-&gt;char</td><td>select to_char(123) from dual;<br>【数值转类型-》可以指定显示格式】<br>select to_char(123456789,’L999,999,999’) from dual;<br>select to_char(12345678,’000,000,000’) from dual;<br>【to_number-&gt;to_char的转换可以不写(隐式转换)】<br>select * from emp where sal&gt;’2000’</td></tr><tr><td>char-&gt;date</td><td>– 查询员工入职日期在82年后的信息<br>select * from emp where hiredate&gt;to_date(‘1982-01-01’,’yyyy-mm-dd’)<br>【需要给一个日期格式-需要匹配上】【01-1月-2018oracle认为是一个日期】</td></tr><tr><td>date-&gt;char</td><td>select to_char(hiredate,’yyyy-mm-dd’) from emp;<br>select to_char(hiredate,’yyyy&#x2F;mm&#x2F;dd’) from emp;<br>select to_char(hiredate,’yyyy”年”mm”月”dd”日”‘);<br>select * from emp where to_char(hiredate,’yyyy-mm-dd’)&gt;’1997-05-05’;</td></tr><tr><td></td><td></td></tr></tbody></table><p>$:表示位置的占位，例如999,999,999会将数字按照三个一组使用逗号隔开；</p><p>L:表示人民币符号；</p><p>$:表示美元符号；</p><p>0:可以进行占位分组，但是如果真是数据位数不足，会使用0进行部位（注意：真实位数不要超过后面的补位的位数）</p><p>sql的底层有自动转型；</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal<span class="hljs-operator">&gt;</span><span class="hljs-string">&#x27;2000&#x27;</span><br></code></pre></td></tr></table></figure><hr><p>其他函数的使用；</p><p>nvl();</p><p>nvl2();</p><p>decode()</p><table><thead><tr><th>其他函数</th><th>SQL</th></tr></thead><tbody><tr><td>nvl()</td><td></td></tr><tr><td>nvl2()</td><td></td></tr><tr><td>decode()</td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>– 查询其他员工的工资信息</p><p>select  ename,job,sal from emp;</p><p>– 查询员工的薪水信息</p><p>select ename,job,sal+comm from emp;</p><p>想实现如果没有提成，就默认显示为0；</p><p>如果不为null,返回自己；</p><p>如果为null,返回设定的值；</p><p>–nvl(字段名,默认值)：如果字段值部位null,返回字段值；如果字段值为null，返回默认值；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,job,sal<span class="hljs-operator">+</span>nvl(com,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> ename,job,nvl(sal<span class="hljs-operator">+</span>com,sal) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><p>–nvl2(字段名,处理1,处理2):如果字段值不为null,执行处理一；为null执行处理二；【不是太理解】</p><p>–decode(字段名，值1，处理1，值2，处理2，值三，处理三，。。。公共处理)：如果字段的值和docode中的条件值相同则执行对象的处理，如果都没有则执行公共处理；【感觉类似于switch】</p><hr><h3 id="oracle-分组-amp-分组筛选学习"><a href="#oracle-分组-amp-分组筛选学习" class="headerlink" title="oracle-分组&amp;分组筛选学习"></a>oracle-分组&amp;分组筛选学习</h3><p>多行函数使用的时候不能使用单行函数，除非分组；</p><p>–查询不同部门最高工资和员工数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ssql">select * from emp order by deptno,sal<br></code></pre></td></tr></table></figure><p>– 分组关键字：group by</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno<br></code></pre></td></tr></table></figure><p>select 后只能使用group by后的字段【这是规定】</p><p>分完组后，之后组叠了；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-built_in">max</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></table></figure><p>使用分组是，select后只能使用分组字段和多行函数【这是规定】</p><p>当然可以对这个分组字段使用单行函数；</p><p>where中不允许使用多行函数；</p><p>因为先筛选完成后才能再统计；</p><p>where中使用多远函数就会报错；</p><p>根据原因是先where后count；</p><p>可以使用having来实现；</p><p>查询完成后，再筛选再排序；</p><p>针对分组后的数据进行筛选；</p><p>having必须和分组结合进行使用，不能单独使用；</p><p>where 后只能使用单行函数</p><p>having后可以使用单行函数也可以使用多行函数；</p><p>where的执行效率一定高与having；</p><p>所以基础条件的筛选使用having，多行函数的筛选使用having；</p><p>where的执行顺序：from-&gt;where-&gt;group by-&gt;select-&gt;order by;</p><p>having的执行顺序: from-&gt;group by -&gt;select-&gt;having-&gt;order by;</p><hr><h3 id="oracle-增删改"><a href="#oracle-增删改" class="headerlink" title="oracle-增删改"></a>oracle-增删改</h3><h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h4><p>–在部门表中新增一个新的部门信息，部门信息的内容为：编号：56，名称：LOL学院，地址：北京；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept(deptno,dname,loc) <span class="hljs-keyword">values</span>(<span class="hljs-number">50</span>,<span class="hljs-string">&#x27;LOL学院&#x27;</span>,<span class="hljs-string">&#x27;北京&#x27;</span>);<br></code></pre></td></tr></table></figure><p>执行后，数据还是在内存中（还没有存储到数据库中）；</p><p>点击提交后，才会将数据写入到数据库中；</p><p>也可以进行回滚操作（给一个返反悔的机会）;</p><p>注意：增删改的数据SQL语句执行完毕后，不会立马进行数据的写入</p><p>还需要手动对数据进行提交；</p><p>主键：在一张表中，某个字段的值是非空并是唯一的，将这个字段设置为主键；【非空唯一、不重复】</p><p>这就是一个约束（保证数据的正确性）</p><p>可能表中有多个字段是非空唯一的，选择一个作为主键即可；</p><p>主键的作用：唯一的标识一条数据；</p><p>前面有几个值，后面必须有几个值；</p><p>如果是全字段插入（每个字段都插入），可以省略字段名部分；</p><p>如果表中有20个字段，那么就疯了；节省了工作量；</p><p>【作为一个过来人，还是建议将字段名写上去】</p><p>字段的个数和顺序都要匹配上；</p><hr><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>delete from 表名 where 条件【删除的是表中的数据】-清空表数据</p><p>truncate table dept【也是可以删的】-清空表中数据</p><p>truncate table 表名 -删除表中的所有数据，效率高与delete;</p><p>drop table 表名 【删除的是表】</p><p>部门中有员工的就不让删除；</p><hr><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p>update dept set dname&#x3D;’java学院’,loc&#x3D;’上海’ where deotno&#x3D;50;</p><hr><h4 id="数据的备份"><a href="#数据的备份" class="headerlink" title="数据的备份"></a>数据的备份</h4><p>全部备份：create table 新的表名 as select * from 备份表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> deptBak <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dept<br></code></pre></td></tr></table></figure><p>数据的备份：只会备份表结构和表的数据，约束不会备份【注意：主键约束是不会备份的】</p><p>部分备份：</p><p>create table 新的表名 as select 字段名。。。 from 备份表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> deptBak2 <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> deptno,dname <span class="hljs-keyword">from</span> dept<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> deptBak2 <span class="hljs-keyword">select</span> deptno,dname <span class="hljs-keyword">from</span> dept<br></code></pre></td></tr></table></figure><p>插入的顺序及数据的类型要一致；</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea-git的运用</title>
    <link href="/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-git%E7%9A%84%E8%BF%90%E7%94%A8/"/>
    <url>/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-git%E7%9A%84%E8%BF%90%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="某个页面-自己最近提交的代码"><a href="#某个页面-自己最近提交的代码" class="headerlink" title="某个页面-自己最近提交的代码"></a>某个页面-自己最近提交的代码</h3><p>这个功能可以查看某个文件最近提交的代码</p><p>可以看自己写的代码是否都已加了注释</p><p><img src="/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-git%E7%9A%84%E8%BF%90%E7%94%A8/1651822352689.png" alt="File Revisions"></p><p>选择一个没有被自己修改之前的版本，选择一个最合适的版本；</p><p><img src="/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-git%E7%9A%84%E8%BF%90%E7%94%A8/1651822481114.png" alt="选择之前的版本"></p><p>在右边的窗口，点击右击，查看提交人的名字</p><p><img src="/2022/03/31/%E8%BD%AF%E4%BB%B6%E6%88%96%E6%8F%92%E4%BB%B6/idea/idea-git%E7%9A%84%E8%BF%90%E7%94%A8/1651822591651.png" alt="查看提交人的名字"></p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式技术核心-Zookeeper</title>
    <link href="/2022/03/31/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20Dubbo&amp;Zookeeper/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83-Zookeeper/"/>
    <url>/2022/03/31/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20Dubbo&amp;Zookeeper/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83-Zookeeper/</url>
    
    <content type="html"><![CDATA[<h2 id="任务一：Zookeeper"><a href="#任务一：Zookeeper" class="headerlink" title="任务一：Zookeeper"></a>任务一：Zookeeper</h2><p>zookeeper一定要掌握</p><h3 id="Zookeeper简介"><a href="#Zookeeper简介" class="headerlink" title="Zookeeper简介"></a>Zookeeper简介</h3><p>美团、饿了吗、58同城都在使用zookeeper【zookeeper很火】</p><p>想吃饭，不想做饭，饭店在美团上注册下，用户在美团上的小模块里面都可以下订单</p><p>美团：商家的入驻，消费者的消费</p><p>商家入驻就是zookeeper，zookeeper就是美团等服务平台，提供协调服务的；</p><p>zookeeper提供协调服务的一个开源的分布式项目；</p><p>查询北京政府的电话、全国的所有的电话区号</p><p>使用zookeeper平台刚好有这个服务，帮助你完成这个功能</p><p>在一个陌生的地方，想理发，登录服务平台，搜索，查找附近的商家</p><p>zookeeper就是服务平台【重要】</p><p>婚姻介绍平台，找不到对象，将信息入驻到婚姻介绍所，想结婚的进入婚姻介绍所，条件比较匹配，两者就连上线了</p><p>分布式和集群要理解，是不一样的</p><p>刚开始在大数据生态圈中最先出现的；</p><p>zookeeper(动物管理员)</p><p>用什么技术都要通过zookeeper来管理应用，例如：Hadoop（大象），Hive（蜜蜂），Pig（猪）等技术</p><p>zookeeper就是美团、饿了吗等、服务型的应用平台</p><p>zookeeper提供协调服务用的；</p><hr><h3 id="Zookeeper工作机制"><a href="#Zookeeper工作机制" class="headerlink" title="Zookeeper工作机制"></a>Zookeeper工作机制</h3><p>是一种观察者模式的一种框架</p><p>有人干活就有人盯着的人；zookeeper就是盯着的角色（观察者）；</p><p>zookeeper提供观察者的注册；（有疑问：zookeeper不就是观察者吗）</p><p>zookeeper也提供通知注册的观察者；</p><p>zookeeper&#x3D;文件系统+通知机制</p><p><img src="/2022/03/31/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20Dubbo&Zookeeper/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83-Zookeeper/1652024418482.png" alt="1652024418482"></p><p>商家营业并入驻</p><p>用户可以获取当前营业的饭店列表</p><p>服务器节点下线（商家下线）</p><p>服务器节点上下线事件通知（商家打样，显示打样在页面上，上线通知客户，下线通知客户）</p><p>重新再去获取服务器列表，并注册监听</p><p>商家注册zookeeper</p><p>zookeeper进行监听</p><p>商家有任何的变化对观察者通知（对用户进行通知）</p><hr><h3 id="Zookeeper特点"><a href="#Zookeeper特点" class="headerlink" title="Zookeeper特点"></a>Zookeeper特点</h3><p>zookeeper是一个集群</p><p>集群与分布式的区别：【重要、面试题】</p><p>分布式：有一个饭店，人越来越多，多招聘一些人员，一个厨师、一个服务员、一个前台</p><p>他们负责的工作不一样，但是目的都是为饭店工作；</p><p>集群：招聘五个服务员，工作是一样的</p><p>无论分布式还是集群，都是很多人在做事情，几个人工作是否一样</p><hr><p>系统：订单系统、商品系统、用户模块、三个模块是三个不同的应用程序</p><p>三个应用程序是不一样的，三个合作完成一件事，这就是分布式</p><p>用的人很多，一个系统支持不来，订单系统部署在多台服务器上，这就是集群</p><p><img src="/2022/03/31/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20Dubbo&Zookeeper/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83-Zookeeper/1652025393558.png" alt="1652025393558"></p><p>众多的服务器上，只有一个领导者（leader），其他的都是（follower）</p><p>集群的特点：只有一个老大</p><p>zookeeper集群的特点，只有半数以上的节点存货，zookeeper才能正常工作</p><p>例如：五台服务器，两台挂掉还是可以工作的，三个挂掉就不能工作了</p><p>所以zookeeper集群搭建的时候都是使用奇数台服务器；</p><p>第一个孙悟空在第一个follwer上创建了一个数据X，其他服务器会立即同步数据</p><p>-操作数据要么都成功，要么都失败</p><p>不可能出现，一个或多个follwer成功，一个失败，这就是强一致性</p><p>数据的查询可能有一定的延迟，会有网络通讯的（实时性，在一定范围内，client读取的数据是一样的）</p><p>请求按照顺序执行（发123，执行123）-发送怎样的</p><p>六个特点一定要了解，否则不可能将zookeeper玩的666；</p><hr><h3 id="Zookeeper数据结构"><a href="#Zookeeper数据结构" class="headerlink" title="Zookeeper数据结构"></a>Zookeeper数据结构</h3><p>zookeeper数据结构跟linux文件系统很类似，是一个树状结构</p><p><img src="/2022/03/31/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20Dubbo&Zookeeper/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83-Zookeeper/1652026042534.png" alt="Zookeeper数据结构 "></p><p>每一个目录就是一个节点</p><p>所有的操作都会在很节点下进行</p><p>一个节点下可以创建多个节点，就像目录树一样</p><p>每个节点都可以存储1M的数据</p><p>zookeeper不是数据库，能存储数据就已经很强大了</p><p>zookeeper节点存储的数据时元数据</p><p>元数据：为描述的数据，</p><p>显示描述：黑帮老大，很多毒品、枪支弹药</p><p>东西不能随身携带，放到一个仓库中，会有一个钥匙，怕钥匙丢失，就把钥匙存储到银行的保险库里；如果不是本人到位，就取不出钥匙</p><p>存储的是，哪个银行+密码（地址+密码）</p><p>根据地址+密码就可以找到财富</p><p>主要描述的是属性信息，存储位置1M足以</p><hr><h3 id="Zookeeper应用场景"><a href="#Zookeeper应用场景" class="headerlink" title="Zookeeper应用场景"></a>Zookeeper应用场景</h3><p>zookeeper提供的服务有：统一命名服务、统一配置服务、统一集群服务、服务器节点上下线、负载均衡等</p><p>如果开发中需要用到这几个需求的话，可以使用zookeeper来解决</p><h4 id="统一命名服务"><a href="#统一命名服务" class="headerlink" title="统一命名服务"></a>统一命名服务</h4><p>服务器的ip不好记，比域名比ip地址好记忆</p><p>例如：<a href="http://www.baidu.com/">www.baidu.com</a></p><p>ip地址不好背；</p><p>拉钩网的背后有很多服务器，给客户说想要注册需要访问这个ip服务器里注册</p><p>访问哪个服务器访问这个域名都是一样的，集群，提供公共的域名</p><p><img src="/2022/03/31/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20Dubbo&Zookeeper/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83-Zookeeper/1652026990979.png" alt="1652026990979"></p><hr><h4 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h4><p>分布式的环境下，很多服务器配置文件</p><p>修改一处快速同步到每台服务器上；</p><p>怎样才能做到牵一发而动全身呢；</p><p><img src="/2022/03/31/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20Dubbo&Zookeeper/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83-Zookeeper/1652027393222.png" alt="1652027393222"></p><p>把配置信息写入到zookeeper的某个几点上</p><p>每个客户端都监听这个节点</p><p>一旦节点中的数据文件被修改，zookeeper这个话匣子就会通知咩太客户端服务器</p><p>一千台服务器，改动这个数据，一千台服务器配置文件数据都会更改</p><p>zookeeper节点上存的是配置文件的元数据，zookeeper监听配置文件吗？如果配置文件被修改，zookeeper就会通知这些监听的服务器吗？</p><hr><h4 id="服务器节点动态上下线"><a href="#服务器节点动态上下线" class="headerlink" title="服务器节点动态上下线"></a>服务器节点动态上下线</h4><p>客户端能够实时的获取服务器上下线的变化；</p><p>原因：美团入驻zookeeper的时候会给美团一个监听器</p><p><img src="/2022/03/31/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20Dubbo&Zookeeper/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83-Zookeeper/1652027798672.png" alt="1652027798672"></p><p>如果想做一个外卖服务平台，第一建议使用zookeeper</p><hr><h4 id="软负载均衡"><a href="#软负载均衡" class="headerlink" title="软负载均衡"></a>软负载均衡</h4><p>zookeeper会记录每台服务器的访问次数，让访问数最少的服务器去处理最新的请求</p><p>想知道如何记录的？</p><p>雨露均沾；各个服务器访问次数尽可能的一样</p><p><img src="/2022/03/31/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%83%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20Dubbo&Zookeeper/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83-Zookeeper/1652027923469.png" alt="1652027923469"></p><hr><h3 id="Zookeeper下载与安装"><a href="#Zookeeper下载与安装" class="headerlink" title="Zookeeper下载与安装"></a>Zookeeper下载与安装</h3><p><a class="btn" href="http://archive.apache.org/dist/zookeeper/" title="镜像库地址">镜像库地址</a></p><p>千万不要用最新的，不稳定(建议使用倒数第二个)</p><p>这里使用 3.6.0版本；</p><p>linux部署有两种类型的包：tar.gz  bin.tar.gz</p><p>安装bin.tar.gz  tar.gz需要安装一些jar包比较麻烦</p><p>直接下载bin.tar.gz很方便</p><p><a href="apache-zookeeper-3.6.0-bin.tar.gz" title="apache-zookeeper-3.6.0-bin.tar.gz">apache-zookeeper-3.6.0-bin.tar.gz下载</a> </p><p>我们目前的安装属于单击安装</p><p>前提需要安装JDK</p><p>在根目录的opt文件下安装（将安装包下载到这个里面）</p><p>解压安装包（tar -zxvf）</p><p>给解压后的文件重命名（mv）</p><p>创建配置文件（zoo.cfg  cp）(cp zoo_sample.cfg  zoo.cfg)</p><p>修改数据的目录【dataDir】（&#x2F;opt&#x2F;zookeeper&#x2F;zkData）</p><p>创建日志目录（注意是创建，前是没有的）【dataLogDir】（&#x2F;opt&#x2F;zookeeper&#x2F;zkLog）</p><p>需要创建数据目录及日志目录</p><p>启动zookeeper（bin )( zkServer.sh start）(status)</p><p>zookeeper访问的端口是：2180</p><p>服务型的应用程序都有方访问的端口号</p><p>孤独的运行着(Mode: standalone)</p><p>查看进程（jps）(Quor…)</p><p>进入客户端（zkCli.sh）(进入zookeeper)</p><p>查看当前目录下都有哪些节点（树状节点）（ls &#x2F;）</p><p>退出客户端（quit）</p><hr><h3 id="配置参数详解"><a href="#配置参数详解" class="headerlink" title="配置参数详解"></a>配置参数详解</h3><p>讲解配置文件zoo.cfg的参数</p><p>除了dataDir与dataLogDir其他的配置我们一般不动</p><p><strong>tickTime：</strong> zookeeper和客户端的心跳时间</p><p>很多的服务器入驻到zookpper,如何保证服务器和zookeeper连接着的呢？</p><p>每个多长时间，谁向谁发啊，没有弄清楚</p><p><strong>initLimit:</strong>  LF初始通信时限</p><p>与tickTime相关（是tickTime的倍数），多长事件还没有发送心跳，领导与跟随着彻底断开连接</p><p><strong>synclimit</strong>：</p><p>与tickTime相关（是tickTime的倍数），多长时间还没有发送心跳，认为跟随着死亡，将跟随着送列表中剔除</p><p><strong>dataDir:</strong>  数据目录</p><p><strong>dataLogDir</strong>：日志目录</p><p><strong>clientPort</strong> &#x3D;2181：客户端连接端口</p><hr><h3 id="内部原理-选举机制"><a href="#内部原理-选举机制" class="headerlink" title="内部原理-选举机制"></a>内部原理-选举机制</h3><p><strong>半数机制：</strong>zookeeper集群有半数以上服务器存活，zookeeper都可用</p><p><strong>注意：</strong>是半数以上，这也是为什么zookeeper集群服务器个数常为奇数的原因</p><p>一个领导者，其他都是跟随着；</p><p>内部有选举机制</p><p>半数以上的票数，才能成为领导</p><p><strong>五台服务器：</strong></p><p>第一台服务器给自己投一票，没有方法成为老大，将票投给了老二</p><p>老二给自己投一票，也没有方法成为老大，将两张票给老三</p><p>老三给自己投一票，可以成为老大</p><p>老四给自己投一票（老大已经出来了），承认老三是老大</p><p>老五给自己投一票（老大已经出来了），承认老三是老大</p><hr><h3 id="内部原理-节点类型"><a href="#内部原理-节点类型" class="headerlink" title="内部原理-节点类型"></a>内部原理-节点类型</h3><p>一共有<strong>四种类型</strong></p><p>可以分为两大类，四小类</p><p>两大类：持久型（永久的）与短暂型（临时的）</p><p>持久型可分为：持久的、持久顺序的、</p><p>短暂型可分为：短暂的、短暂顺序的</p><p>序号是i++,跟数据库中的自增长类似</p><hr><h3 id="内部原理-监听器的原理"><a href="#内部原理-监听器的原理" class="headerlink" title="内部原理-监听器的原理"></a>内部原理-监听器的原理</h3><p>监听器是如何工作的：</p><p><strong>zookeeper客户端</strong>（main方法）</p><p>创建zookeeper客户端的同时会创建两个进程</p><p>一个负责<strong>网络通信</strong>、一个<strong>负责监听</strong></p><p>网络通信发送信息（监听敌人），给监听列表</p><p>敌人有变化（敌人数据有变化与增减变化），将改变给监听进行</p><p>监听进程调用内部的process方法（执行应对方案）（需要我们我们自己写）</p><hr><h3 id="内部原理-写数据流程"><a href="#内部原理-写数据流程" class="headerlink" title="内部原理-写数据流程"></a>内部原理-写数据流程</h3><p>这个流程需要我们理解</p><p>1、客户端向服务器写数据</p><p>2、服务器不是leader,没有权利，会去询问leader</p><p>3、leader将这个请求发送给所有的服务器去写数据，请求操作成功后会通知leader</p><p>4、当leader收到半数以上数据写成功了，那么数据就写成功了；</p><p>5、leader告诉原先的服务器操作数据写成功；</p><p>6、服务器通知客户端数据写成功了；</p><hr><h3 id="分布式安装部署（上）"><a href="#分布式安装部署（上）" class="headerlink" title="分布式安装部署（上）"></a>分布式安装部署（上）</h3><p>这是一个重点</p><p>在zkData目录下创建一个文件（myid）(vim myid)</p><p>第一台服务器写一个1，第二台服务器写一个2,…..</p><p>可以使用cat命令查看是否写成功了</p><p><strong>新增配置</strong>（zoo.cfg）,所有的服务器这个配置文件都要改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">server<span class="hljs-number">.1</span>=ip:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span><br>server<span class="hljs-number">.2</span>=ip:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span><br>server<span class="hljs-number">.3</span>=ip:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span><br></code></pre></td></tr></table></figure><p>第一台、第二台、第三台服务器的ip</p><p>2888 集群中leader<strong>服务器交换信息的端口</strong></p><p>3888 集群中<strong>选举leader的端口</strong></p><hr><p>配置其余两台服务器</p><p>如果是虚拟机的话，找到配置文件的位置</p><p>在虚拟机数据目录vms下，创建zk02文件夹；</p><p><code>.vmx </code>与所有的<code>.vmdk</code>文件分别复制到zk02文件夹下；</p><p>进去新建的服务器（我已复制虚拟机），修改liunux中的ip（zoo.cfg 文件中的ip对应）</p><p>修改<code>myid</code>文件内容</p><hr><h3 id="分布式安装部署（下）"><a href="#分布式安装部署（下）" class="headerlink" title="分布式安装部署（下）"></a>分布式安装部署（下）</h3><p>使用xshell链接三台创建好的服务器</p><p>ifconfig 查看ip地址</p><p>每台服务器的<strong>防火墙是必须关闭</strong>的(集群启动会导致失败)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">systemctl stop firewalld.service<br></code></pre></td></tr></table></figure><p>启动zookeeper</p><p>查看zookeeper状态</p><p>Error contacting service,It is probably not running</p><p>原因：启动半数以上才可以成功启动起来</p><p>启动第二台服务器</p><p>Mode:follwer   查看第一台服务i去</p><p>Mode:leader  查看第二台服务器</p><p>半数以上没有启动会导致失败</p><p>防火墙没有关闭也会导致失败</p><hr><h3 id="客户端命令"><a href="#客户端命令" class="headerlink" title="客户端命令"></a>客户端命令</h3><p>启动客户端</p><p>进入客户端  zkCli.sh</p><p>pwd 查看当前文件目录</p><p>显示所有的命令：help</p><p>zookeeper的命令都在里面</p><p>查询zookeeper的(根目录下的)节点信息：ls &#x2F;</p><p>查看根目录下节点详情：ls -s &#x2F;</p><p>账号、密码都在这个里面记录的（了解即可）</p><p>事务ID：cZxid   修改的总的次数，记录操作事务的过程</p><p>当前节点被创建的节点数：ctime</p><p>mtime:最后修改的时间</p><p>cversion:创建的版本号，子节点别修改的次数</p><p>aclVersion：权限版本后（后面会说下）</p><p>numChildren:子节点的个数</p><hr><p>根目录下创建节点：create &#x2F;china</p><p>create &#x2F;usa</p><p>查看根目录的节点  ls &#x2F;</p><p>查看根目录的节点详情：ls -s &#x2F;</p><p>创建节点并存数据(创建目录+保存数据)：create &#x2F;ru “pujing”</p><p>获取目录数据：get &#x2F;ru</p><p>目录必须一级一级的创建，否则会报错：create &#x2F;japan&#x2F;Tokyo “hot”(没有jspan节点的话会报错)</p><p>必须先创建japan节点</p><p>默认创建的节点都是永久的</p><p>如何创建临时节点？ create -e &#x2F;uk</p><p>退出zookeeper窗口（退出zookeeper客户端，临时节点消失）</p><p>-s 顺序节点</p><p>-s -e 短暂的顺序节点</p><p>create -s &#x2F;ru&#x2F;city</p><p>city0000000000..0  city000000…1  city00000…2</p><hr><p>给节点设置值：set &#x2F;japan&#x2F;Tokyo “too hot”</p><hr><p>添加监听节点：addWatch &#x2F;usa</p><p>在另一台服务器上给这个节点设置值（set ）</p><p>在原先的服务器上会出现：NodeDataChanged path:.usa(节点数据改变)</p><p>在另一台服务器上在这个节点上创建新的节点（create &#x2F;usa&#x2F;NewYork）</p><p>在原先的服务器上会出现：NodeCreate path:&#x2F;usa&#x2F;NewYork(节点创建的变化)</p><hr><p>删除节点（delete &#x2F;uas&#x2F;NewYork）</p><p>这种方式需要一步一步来，否则会报错</p><p>如果需要递归的删除：需要使用deleteall(deleteall &#x2F;uas)</p><p>一定要记住help命令</p><hr><p>【未完成】</p>]]></content>
    
    
    <categories>
      
      <category>Java就业训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>就业-第七阶段模块一</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码--mysql</title>
    <link href="/2022/03/31/%E5%85%B6%E4%BB%96/%E5%AF%86%E7%A0%81/%E5%AF%86%E7%A0%81--mysql/"/>
    <url>/2022/03/31/%E5%85%B6%E4%BB%96/%E5%AF%86%E7%A0%81/%E5%AF%86%E7%A0%81--mysql/</url>
    
    <content type="html"><![CDATA[<p>密码–mysql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">用户：root<br>密码：136139Hao@<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java数组转字符串-逗号拼接</title>
    <link href="/2022/03/31/%E5%90%8E%E7%AB%AF/java%E6%95%B0%E7%BB%84%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-%E9%80%97%E5%8F%B7%E6%8B%BC%E6%8E%A5/"/>
    <url>/2022/03/31/%E5%90%8E%E7%AB%AF/java%E6%95%B0%E7%BB%84%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-%E9%80%97%E5%8F%B7%E6%8B%BC%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>java数组与以逗号分隔开的字符串的相互转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] strArray = &#123;<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-string">&quot;ccc&quot;</span>&#125;；<br>String  str= StringUtils.join(strArry,<span class="hljs-string">&quot;,&quot;</span>);<br>System.out.println(str);<br></code></pre></td></tr></table></figure><p>输出样式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;aaa,bbb,ccc&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-数据结构与算法(拉钩练习)</title>
    <link href="/2021/12/01/%E6%8B%89%E9%92%A9%E7%BB%83%E4%B9%A0/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E6%8B%89%E9%92%A9%E7%BB%83%E4%B9%A0)/"/>
    <url>/2021/12/01/%E6%8B%89%E9%92%A9%E7%BB%83%E4%B9%A0/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E6%8B%89%E9%92%A9%E7%BB%83%E4%B9%A0)/</url>
    
    <content type="html"><![CDATA[<h1 id="1-数据结构与算法-拉钩练习"><a href="#1-数据结构与算法-拉钩练习" class="headerlink" title="1-数据结构与算法(拉钩练习)"></a>1-数据结构与算法(拉钩练习)</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDemo</span> &#123;<br>    <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">8</span>];<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayDemo</span><span class="hljs-params">()</span> &#123;<br>        nums[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        nums[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>        nums[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br>        nums[<span class="hljs-number">3</span>] = <span class="hljs-number">4</span>;<br>        nums[<span class="hljs-number">4</span>] = <span class="hljs-number">5</span>;<br>        nums[<span class="hljs-number">5</span>] = <span class="hljs-number">6</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【1】数组"><a href="#【1】数组" class="headerlink" title="【1】数组"></a>【1】数组</h3><p>查找元素</p><p>-时间复杂度O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> n=nums[<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p>更新-时间复杂度O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">nmus[<span class="hljs-number">2</span>]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>插入元素：</p><p>（1）尾部插入</p><p>（2）中间插入</p><p>数组中如果没有定义值默认是0的；</p><p>从最后一位开始遍历，到要赋值的位为止；</p><p>将当前位的值赋值给下一位；</p><p>最后给指定的位赋值；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 中间插入</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertMiddle</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>; i &gt;= p-<span class="hljs-number">1</span>; i--) &#123;<br>        <span class="hljs-comment">//能取得值</span><br>        <span class="hljs-keyword">if</span> (nums[i] != <span class="hljs-number">0</span>) &#123;<br>            nums[i+<span class="hljs-number">1</span>]=nums[i];<br>        &#125;<br>    &#125;<br>    nums[p-<span class="hljs-number">1</span>]=n;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ArrayDemo</span> <span class="hljs-variable">arrayDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDemo</span>();<br>    arrayDemo.insertMiddle(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）超范围插入，</p><p>数组扩容，长度变为原来的2倍</p><p>数组赋值；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertOutOfBounds</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> num)</span>&#123;<br>    resize(); <span class="hljs-comment">// 数组扩容</span><br>    nums[p-<span class="hljs-number">1</span>]=num; <span class="hljs-comment">// 给数据元素赋值</span><br>&#125;<br><br><span class="hljs-comment">// 数组扩容</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span>[] newNums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length*<span class="hljs-number">2</span>];<br>    <span class="hljs-comment">// 将数组中的元素拷贝到新的数组中去</span><br>    System.arraycopy(nums,<span class="hljs-number">0</span>,newNums,<span class="hljs-number">0</span>,nums.length);<br>    <span class="hljs-comment">// 将新数组的地址赋值给原来的数组</span><br>    nums=newNums;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ArrayDemo</span> <span class="hljs-variable">arrayDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDemo</span>();<br>    arrayDemo.insertOutOfBounds(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>删除元素</p><p>跟中间插入类似，时间复杂度O(n)</p><p>以当前元素为准，从当前元素开始，后面一位赋值给当前位，到倒数第二位截止；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteMiddle</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=p-<span class="hljs-number">1</span>;i&lt;nums.length-<span class="hljs-number">1</span>;i++)&#123;<br>        nums[i]=nums[i+<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ArrayDemo</span> <span class="hljs-variable">arrayDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDemo</span>();<br>    arrayDemo.deleteMiddle(<span class="hljs-number">2</span>);<br>    System.out.println(Arrays.toString(arrayDemo.nums)); <span class="hljs-comment">// [1, 3, 4, 5, 6, 0, 0, 0]</span><br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度</p><p>读取和更新都是随机访问，所以是O(1)<br>插入数组扩容的时间复杂度是O(n)，插入并移动元素的时间复杂度也是O(n)，综合起来插入操作的时间复杂度是O(n)。<br>删除操作，只涉及元素的移动，时间复杂度也是O(n)</p><hr><h3 id="【2】链表"><a href="#【2】链表" class="headerlink" title="【2】链表"></a>【2】链表</h3><p>单链表结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Node&#123;<br><span class="hljs-type">int</span> data;<br>Node next;  <span class="hljs-comment">// 只是存储了下一个元素的地址</span><br>&#125;<br></code></pre></td></tr></table></figure><p>双向链表结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Node&#123;<br><span class="hljs-type">int</span> data;<br>Node next;<br>Node prev;<br>&#125;<br></code></pre></td></tr></table></figure><p>循环链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    String name;<br>    <span class="hljs-comment">//下一个节点</span><br>    Node next;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleLinkedList</span> &#123;<br>    <span class="hljs-comment">//初始化头节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// id:1,name:&quot;&quot;</span><br><br>    <span class="hljs-comment">//遍历链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//空链表</span><br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            System.out.println(temp);<br>            <span class="hljs-comment">//指针下移</span><br>            temp = temp.next;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>插入节点</p><p>（1）尾部插入</p><p>把最后一个节点的next指针指向新插入的节点即可</p><p>注意：node是引用数据类型；</p><p>判断是否是最后一个节点，如果是最后一个节点，则将当前node的next指向要添加的node;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 尾部插入</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(Node node)</span>&#123;<br>    Node tmp=head; <span class="hljs-comment">// 操作的是同一个节点地址</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-comment">// 判断是否是最后一个节点</span><br>        <span class="hljs-keyword">if</span>(tmp.next==<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">// 是最后一位</span><br>            tmp.next = node; <span class="hljs-comment">// 最后一位的下一位指向要加的节点</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 当前位向后移动一位(将它下一位的地址赋值给它)</span><br>            tmp=tmp.next;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">SingleLinkedList</span> <span class="hljs-variable">singleLinkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleLinkedList</span>();<br>    singleLinkedList.addNode(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;张三&quot;</span>));<br>    singleLinkedList.addNode(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;李四&quot;</span>));<br>    singleLinkedList.addNode(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;王五&quot;</span>));<br>    singleLinkedList.showList();<br>    <span class="hljs-comment">//Node&#123;id=2, name=&#x27;张三&#x27;&#125;</span><br><span class="hljs-comment">//Node&#123;id=3, name=&#x27;李四&#x27;&#125;</span><br><span class="hljs-comment">//Node&#123;id=4, name=&#x27;王五&#x27;&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（2）中间插入</p><p>第1步，新节点的next指针，指向插入位置的节点<br>第2步，插入位置前置节点的next指针，指向新节点</p><p>只考虑一种情况就可以了，tmp的ID大的情况；大的排在前面，到尾结点的时候插到最后面；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//按照指定顺序插入节点</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addByIdOrder</span><span class="hljs-params">(Node node)</span>&#123;<br>    <span class="hljs-comment">//定义一个辅助变量temp</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-comment">//定义一个标记，用来寻找 节点 要 插入的位置</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//遍历链表</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">//如果链表为null就退出循环</span><br>        <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//符合条件 退出循环</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//比如我插入的节点的编号为4 (node.no==4)，原来temp的后一个节点编号为5 (temp.next.no==5)</span><br>        <span class="hljs-comment">//所以temp后一个节点的就不再指向编号为5的节点，而是指向编号为4的节点（也就是我当前插入的节点）</span><br>        <span class="hljs-comment">//  5 &gt; 4</span><br>        <span class="hljs-keyword">if</span> (temp.next.id &gt; node.id)&#123;<br>            <span class="hljs-comment">//符合条件 退出循环</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( temp.next.id == node.id)&#123;<br>            flag = <span class="hljs-literal">true</span>;   <span class="hljs-comment">//说明编号已存在 ，不需要插入</span><br>            <span class="hljs-comment">//继续循环遍历，直到找到合适的位置</span><br>        &#125;<br>        temp = temp.next;  <span class="hljs-comment">//后移，相当于遍历当前链表</span><br>    &#125;<br>    <span class="hljs-comment">//判断flag的值</span><br>    <span class="hljs-comment">//可以写成flag == true</span><br>    <span class="hljs-keyword">if</span> (flag) &#123;  <span class="hljs-comment">//不能插入</span><br>        System.out.println(<span class="hljs-string">&quot;该节点已存在&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//插入当前节点</span><br>        node.next = temp.next;<br>        temp.next = node;<br>    &#125;<br>&#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Node n1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张飞&quot;</span>);<br>    Node n2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;关羽&quot;</span>);<br>    Node n3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;赵云&quot;</span>);<br>    Node n4=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;黄忠&quot;</span>);<br>    Node n5=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;马超&quot;</span>);<br>    SingleLinkedList sll=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleLinkedList</span>();<br>    sll.addByIdOrder(n4);<br>    sll.addByIdOrder(n5);<br>    sll.addByIdOrder(n1);<br>    sll.addByIdOrder(n2);<br>    sll.addByIdOrder(n3);<br>    sll.showList();<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度<br>查找节点 ： O(n)<br>插入节点：O(1) 注意不是O(1) 平均时间负责度是O(n)<br>更新节点：O(1)<br>删除节点：O(1)</p><p>在链表尾部添加（addLast()）需要从头遍历，时间复杂度为O(n)<br>在链表头部添加（addFirst()），时间复杂度为O(1)<br>在链表任意位置添加(add(int index,E e))，平均情况下为O(n&#x2F;2)&#x3D;O(n)</p>]]></content>
    
    
    <categories>
      
      <category>拉钩练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>任务一：SpringBoot基础回顾</title>
    <link href="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/"/>
    <url>/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="任务一：SpringBoot基础回顾"><a href="#任务一：SpringBoot基础回顾" class="headerlink" title="任务一：SpringBoot基础回顾"></a>任务一：SpringBoot基础回顾</h1><h2 id="课程内容介绍"><a href="#课程内容介绍" class="headerlink" title="课程内容介绍"></a>课程内容介绍</h2><p>自动配置springMVC;</p><h2 id="约定优于配置"><a href="#约定优于配置" class="headerlink" title="约定优于配置"></a>约定优于配置</h2><p>springBoot基于约定优于配置的；</p><p>又称按约定变成，是一种软件设计规范；</p><p>开车，靠右行驶；</p><p>java，放在src目录下；</p><p>带来一些好处，带来一些便利；</p><p>就可以省下来很多的配置；</p><p><strong>约定优于配置</strong>：本质上是对系统、类库或框架中一些东西假定一个大众化合理的默认值（缺省值）</p><p>User实体类   User表</p><p>有一个默认约定；</p><p>如果表名叫t_user,这叫做偏移约定；</p><p>需要我们额外添加一些配置的；</p><p>总结：期望的配置和约定的配置一致，那么就可以不做任何的配置；约定不符合期待时才需要进行替换配置；</p><p><strong>约定优于配置的好处</strong>：大大减少了配置项；</p><hr><h2 id="SpringBoot概念"><a href="#SpringBoot概念" class="headerlink" title="SpringBoot概念"></a>SpringBoot概念</h2><p>什么是springBoot？</p><p>学习框架最好使去官网中学习；</p><p>会提供学习玩的那个；</p><p>spring官方文档：<a href="http://spring.io/">http://spring.io/</a></p><p>springboot是在spring的基础上诞生的一个框架；</p><p>Projects-&gt;Spring Boot（可以看到最新版本）-》OVERVIEW（spingboot介绍）</p><p>快速运行spring的方式；</p><p>之前需要编写大量的配置文件；</p><p>spring很强大，但是配置是十分的繁琐的；</p><p>通过springboot可以快速的</p><p>通常和springcloud一起使用；</p><hr><p>要知道springboot由Pivotal团队在2013年开发研制的；</p><p>spring3.0开始就无需编写application_config.xml文件，还是建议保留；</p><p>spring4.0开始就可以舍弃到所有的配置文件；</p><p>springboot解决了依赖包的冲去和引用的不稳定型问题；</p><hr><h2 id="SpringBoot特性之Starter"><a href="#SpringBoot特性之Starter" class="headerlink" title="SpringBoot特性之Starter"></a>SpringBoot特性之Starter</h2><p>springboot是快速使用spring的方式；</p><p>springboot都是围绕几个特性进行学习；</p><h3 id="SpringBoot-Starter"><a href="#SpringBoot-Starter" class="headerlink" title="SpringBoot Starter:"></a>SpringBoot Starter:</h3><p>【这是springBoot的第一个特性】</p><p>将依赖进行分组，整合在一起</p><p>也称为起步依赖；</p><p>起步依赖：就是把具备某种功能的坐标打包到一起，并提供默认功能；</p><p>创建一个基于maven的web工程，</p><p>需要引入大量的依赖，</p><p>在pom.xml中编写关于web场景所需要用的坐标信息；</p><p>dependency需要用到多少个jar包就需要引入多少个dependency; </p><p>是存在问题的：</p><p>1）记忆和找这些坐标信息都比价麻烦；</p><p>2）maven有依赖传递的特性的，可能引入一个dependency依赖了很多的jar包-》容易产生依赖冲突（版本问题）-》排查问题很难；</p><p>springboot工程：</p><p>在pom.xml中</p><p>将实现相同功能的jar包进行了一个打包；</p><p>spring-web-starter工程；</p><p>中存在pom.xml;</p><p>直接依赖了很多的jar包；</p><p>这就是打包；</p><p>进行web场景开发；</p><p>直接需要引入spring-web-starter坐标就好了；</p><p>spring-web-starter直接依赖了这些jar包；</p><p>省去了直接依赖了很多jar包的过程；</p><p>spring-web-starter就解决了依赖版本冲突的问题；</p><hr><h2 id="SpringBoot特性之JavaConfig配置"><a href="#SpringBoot特性之JavaConfig配置" class="headerlink" title="SpringBoot特性之JavaConfig配置"></a>SpringBoot特性之JavaConfig配置</h2><h3 id="使编码变得简单"><a href="#使编码变得简单" class="headerlink" title="使编码变得简单"></a>使编码变得简单</h3><p>【这是springboot的第二个特性】</p><p>springBoot采用JavaConfig的方式对Spring进行配置，并提供了大量的注解，极大的提高了开发效率；</p><p>springboot为什么采用javaConfig的方式对spring进行了配置了呢？</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653322585137.png" alt="1653322585137"></p><p>查看spring版本历史：</p><p>spring3.0其实已经舍弃掉了配置文件的编写；</p><p>已经可以采用javaConfig方式进行配置；</p><p>但还是建议保留web.xml</p><p>spring4.0，可以舍弃掉所有的xml文件，同事采用javaConfig方式进行配置；</p><p>springBoot是在spring4.0的基础上设计出来的全新的轻量级框架；</p><p>所以springboot在完成bean对象的创建并存储到ioc容器的时候，它采用的机制也是javaConfig这种方式；</p><p>springboot如果想创建并存储到loc容器中我们怎么办？</p><p>可以去创建一个配置类，例如SpringBootConfiguration</p><p>在类的上面添加一个注解@Configuration，说明是一个配置类；</p><p>想创建一个对象放到容器中，可以写一个方法；</p><p>public User user（）{return new User()};</p><p>@Bean启动的会后，会进行一个包扫描，会将创建出来的对象放到loc容器中</p><p>要知道springBoot采用JavaConfig的方式对Spring进行配置；</p><p>还要知道为什么，springboot使用这种方式；</p><hr><h2 id="SpringBoot特性之自动配置"><a href="#SpringBoot特性之自动配置" class="headerlink" title="SpringBoot特性之自动配置"></a>SpringBoot特性之自动配置</h2><h3 id="自动配置："><a href="#自动配置：" class="headerlink" title="自动配置："></a>自动配置：</h3><p>【第三个特性】</p><p>利用了spring对条件化配置的支持，合理地推测应用所需的bean并自动化配置他们；【比较抽象】</p><p>springBoot在启动的过程中，会自动的将一些配置类的bean进行创建，并添加到IOC容器中；</p><p>之间使用spring的时候，会编写一个appkication.xml文件；</p><p>如果想要第三方jar包中生成实例对象放到loc容器中；</p><p>写一个bean标签，id class;</p><p>要写很多的bean标签；</p><p>配置繁琐；</p><p>要解决这个问题，springboot</p><p>不会编写applicationContext.xml文件；</p><p>只需要在pom.xml文件中引入依赖就可以；</p><p>springboot会根据依赖的引入情况，会自动的完成一些配置类bean对象的创建，同事添加到loc容器中；</p><p>如果想要使用的时候，直接使用@autowire直接使用即可；</p><p>启动过程中完成bean对象的自动装配；</p><p>问题：springboot在启动的过程中都会对那些配置类里面的bean进行自动装配？</p><p>自动装配的原理是什么？</p><p>源码部分会说明这些问题；</p><h3 id="使部署变的简单："><a href="#使部署变的简单：" class="headerlink" title="使部署变的简单："></a>使部署变的简单：</h3><p>【第四个主要特性】</p><p>之前是打成war包；</p><p>现在是将项目打成jar包；</p><p>里面内置了三种servlet容器，tomcat、Jetty、undertow</p><hr><h2 id="SpringBoot案例实现"><a href="#SpringBoot案例实现" class="headerlink" title="SpringBoot案例实现"></a>SpringBoot案例实现</h2><p>案例需求，使用Spring initializr方式创建Spring Boot项目，并请求Controller中的目标方法，将返回值相应到页面中；</p><p>会携带些目录结构，带些配置文件</p><p>选择初始话服务地址，选择默认的地址就可以；</p><p>下一步需要联网，否则一直会卡到那个页面；</p><p>创建该工程时选择依赖；</p><p>需要springMVC的一些jar包；</p><p>没有必要一个一个的引入；</p><p>直接将web的starter引入就好了；</p><p>在左侧选择web，在右侧选择Spring Web;</p><p>在左侧选择SQL,在右侧选择Mysql Driver;</p><p>看下持久层的技术选型，如果用mybatis选择MyBatis Framework</p><p>这里我们只需要一个spring web就好了；</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653401197377.png" alt="1653401197377"></p><p>version:2.4.0;</p><p>在选择dependencies的时候还可以选择版本；</p><p>选择最新的稳定版本；</p><p>默认给我们生成了一些默认的目录结构；</p><p>项目的一个主程序启动类；</p><p>运行项目就是要执行主程序项目类中的miain方法；</p><p>resources下生成了两个目录：</p><p>static:存储静态文件的；</p><p>templaates:模板页面文件夹；</p><p>application.properties是一个非常重要的文件；</p><p>springboot的全局配置文件，核心配置文件；</p><p>项目启动的时候就加载配置文件中的配置项；</p><p>test文件夹：可以在项目中编写测试方法；</p><hr><p> <a href="lagou%5Ccontroller%5CDemoController.java" title="DemoController.java">DemoController.java</a>  </p><p>@RestController是@Controller与@Response组合注解；</p><p>在controller层编写一个方法：</p><p>return “hello springboot”;</p><p>@requestMapping(“&#x2F;demo”);</p><p>启动项目；</p><p>启动过程中，可以看下控制台；</p><p>看表日志信息；</p><p>可以看到启动了一个Tomcat；</p><p>对应的端口是8080；</p><p>Start Spring  说明项目已经可以启动了；</p><p>可以在浏览器地址栏中访问地址；</p><p>访问得到的是404；</p><p>原因：项目启动类的位置不对；</p><p>@RestController注解没有被扫描到；</p><p>为什么这个注解没有起作用的；</p><p>只会扫描，项目启动类值会扫描同级目录及其子包下的文件；</p><p>如果产生中文乱码：</p><p>解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(produces =&quot;application/json; charset=utf-8&quot;)</span><br></code></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">#设置响应为utf-<span class="hljs-number">8</span><br>spring.http.encoding.force-response=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>疑问：</p><ol><li>starter是什么？我们如何去使用这些starter？</li><li>为什么包扫描只会扫描核心启动类所在的包及其子包</li><li>在springBoot启动的过程中，是如何完成自动装配的？</li><li>内嵌Tomcat是如何被创建及启动的？</li><li>使用了web场景对应的starter，springmvc是如何自动装配？</li></ol><p>（保留疑问：在源码剖析部分，主要将以上疑问进行解答）</p><p>主要的是要将这些疑问解决下；</p><hr><h2 id="SpringBoot热部署"><a href="#SpringBoot热部署" class="headerlink" title="SpringBoot热部署"></a>SpringBoot热部署</h2><p>如果一个修改时候生效；</p><p>需要重启；</p><p>这种方式叫做冷启动；</p><p>不仅会重新加载我们自己写的类文件，也会加载第三方jar的类文件；</p><p>如果项目比较大的话就会很消耗时间；</p><p>如果对类路径下的文件进行修改，会自动的对类路径下的文件进行加载；</p><p>spring开发团队给我们带来了一个插件：spring-boot-devtools</p><p>这个启动仅仅会启动类路径下的文件，第三方jar包下的类文件是不会重新加载的，这就是热部署</p><p>使用热部署，需要我们引入一个jar包【spring-boot-devtools】</p><p>建议我们在开发环境下使用；</p><p>生产环境下是不建议我们使用这个插件的；</p><p>这个插件可以在spring官网中查找；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 引入热部署依赖 --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>如果采用的是idea，需要我们将自动编译打开；</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653402523494.png" alt="1653402523494"></p><p>使用组合快捷键“Ctrl+Shift+Alt+&#x2F;”打开Maintenance选项框，选中并打开<br>Registry页面</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653402573927.png" alt="1653402573927"></p><p>允许在运行的时候开启自动编译；</p><p>再重新启动下这个web服务；</p><p>先访问下；</p><p>然后修改下返回的值；</p><p> <a href="lagou%5Ccontroller%5CDemoController.java" title="DemoController.java">DemoController.java</a>  </p><p>修改后会自动触发应用程序的修改；</p><p>那特部署的原理是什么呢？</p><p>下节讲；</p><hr><h2 id="SpringBoot热部署原理"><a href="#SpringBoot热部署原理" class="headerlink" title="SpringBoot热部署原理"></a>SpringBoot热部署原理</h2><p>官方文档中就有对热部署的一些描述</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653403408479.png" alt="1653403408479"></p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653403479024.png" alt="1653403479024"></p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653403567960.png" alt="1653403567960"></p><p>可以看到，我们引入了插件后，插件会监控我们classpath的资源变化，当classpath有变化后，会触发<br>重启；</p><p>那么重启过程是怎么样的呢？为什么不再加载第三方jar包呢？</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653403724945.png" alt="1653403724945"></p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653403737182.png" alt="1653403737182"></p><p>这里提到了，该插件重启快速的原因：这里对类加载采用了两种类加载器，对于第三方jar包采用<strong>base-classloader</strong>来加载，对于开发人员自己开发的代码则使用<strong>restartClassLoader</strong>来进行加载，这使得比停<br>掉服务重启要快的多，因为使用插件只是重启开发人员编写的代码部分。</p><p>如何进行验证呢？</p><p>在项目中加入一个类：Devtools（自己编写的）继承了InitializingBean接口；</p><p> <a href="lagou%5Cconfig%5CDevtools.java" title="Devtools.java">Devtools.java</a>  </p><p>根据打印的是类加载器的名称来看；</p><p>先将热部署jar包注释掉；</p><p>启动项目；</p><p>看日志；使用的类加载器是同一个；</p><p>加上热部署jar包；</p><p>RestartClassLoader类进行加载</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653404166709.png" alt="1653404166709"></p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653404178194.png" alt="1653404178194"></p><hr><h2 id="SpringBoot热部署排除资源"><a href="#SpringBoot热部署排除资源" class="headerlink" title="SpringBoot热部署排除资源"></a>SpringBoot热部署排除资源</h2><p>有时候想修改了某些文件，不要去触发重新启动，该如何做呢？</p><p>某些资源在更改后不一定需要触发重新启动。例如，Thymeleaf模板可以就地编辑。默认情况下，改变<br>资源 &#x2F;META-INF&#x2F;maven ， &#x2F;META-INF&#x2F;resources ， &#x2F;resources ， &#x2F;static ， &#x2F;public ，<br>或 &#x2F;templates 不触发重新启动，但确会触发现场重装。如果要自定义这些排除项，则可以使用该<br>spring.devtools.restart.exclude 属性。例如，仅排除 &#x2F;static ， &#x2F;public 您将设置以下属性：</p><p>为什么</p><p>看下jar包：</p><p>spring-boot-devtools-2.4.0.jar-&gt;META_INF-&gt;spring.factories</p><p>这个文件中有一个类：LocalDevToolsAutoConfiguration类，点开</p><p>本地热部署的自动配置类；</p><p>关注点放在DevToolsProperties.class,点进去</p><p>有这样一个属性：DEFAULT_RESTART_EXCLUDES</p><p>通过设置这个属性，排除了一些资源；</p><p>如果想变更它的默认值：比如在resoureces下目录下重新创建了一个文件夹，我们不想让这个文件下触发重新加载；</p><p>在application.properties中修改：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.devtools.restart.exclude</span>=<span class="hljs-string">static/**,public/**</span><br></code></pre></td></tr></table></figure><hr><h2 id="SpringBoot全局配置文件"><a href="#SpringBoot全局配置文件" class="headerlink" title="SpringBoot全局配置文件"></a>SpringBoot全局配置文件</h2><p>核心配置文件我们又称为全局配置文件；</p><p>为什么我们需要编写这个全局配置文件呢？</p><p>全局配置文件的作用？</p><p>都支持哪个文件作为㕂配置文件；</p><p>全局配置文件放在哪个目录下才能够被加载到？</p><p>如果存在多个全局配置文件，文件的优先级？</p><p>全局配置文件可以对默认值进行修改；</p><p>main方法的运行中会架子啊内嵌的tomcat，默认端口号是8080；</p><p>编写配置文件，修改内嵌tomcat的默认值；</p><p>启动项目的时候就会加载全局配置文件；</p><p>支持application.properties、application.yaml的文件作为配置文件；</p><p>properties是键值对；</p><p>yaml是</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653407338044.png" alt="1653407338044"></p><p>springboot加载配置文件的时候从上面或下面四个目录进行加载；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">–file:./config/<br>–file:./<br>–classpath:/config/<br>–classpath:/<br></code></pre></td></tr></table></figure><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653407414669.png" alt="1653407414669"></p><p>这四个目录下的全局配置文件都会被加载；</p><p>思考：</p><p>（1）如果在四个配置文件中配置了相同的属性，以谁为标准【优先级问题】；</p><p>（2）如果在四个全局配置文件中，配置了不同的属性，能不能都生效呢？</p><p>例如：都配置了server.port&#x3D;8081 8082 8083 8084</p><p>结果是：8081；</p><p>优先级：项目跟目录下的config目录下最先被加载的；最先被加载的，最先配置的为准；</p><p>加载顺序就是上图中的顺序；</p><p>配置：server. path&#x3D;&#x2F;springboot</p><p>配置文件都会被加载，会形成互补配置；</p><p>（3）如果相同目录下，同时存在properties和yaml配置文件，以谁为准？</p><p>先读取application.properties（优先级最高）文件；</p><p>再读取application.yaml</p><p>不建议配置多个yaml文件或者properties文件；</p><p>在多个配置文件中都配置了这个属性，优先级高的生效，低的不生效【这里感觉有歧义-需要验证】；</p><p><strong>我们的配置文件可不可以不按照application呢？</strong></p><p>可以，打jar包的时候需要指定配置文件的名称；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">$ java -jar myproject.jar --spring.config.name=myproject<br></code></pre></td></tr></table></figure><p><strong>可不可以加载其他位置的配置文件呢？</strong></p><p>也可以，打jar包的时候需要指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java -jar run-<span class="hljs-number">0.0</span><span class="hljs-number">.1</span>-SNAPSHOT.jar --spring.config.location=D:/application.properties<br></code></pre></td></tr></table></figure><hr><h2 id="SpringBoot全局配置文件加载优先级"><a href="#SpringBoot全局配置文件加载优先级" class="headerlink" title="SpringBoot全局配置文件加载优先级"></a>SpringBoot全局配置文件加载优先级</h2><p>做一个知识点补充；</p><p>相同目录下同时存在properties和yaml文件的时候，哪个生效？</p><p>这个需要看版本：</p><p>如果是2.4.0之前的版本：优先级是properties&gt;yaml</p><p>如果是2.4.0的版本，优先级yaml&gt;properties;</p><p>2.4.0之前的版本;</p><p>yaml:8090;</p><p>peroperties:8084</p><p>结果是：8084；</p><p>2.4.0的版本；</p><p>结果是：8090；</p><p>根据当前使用版本的不同，配置文件的优先级是有所不同的；</p><p>2.4.0的版本，如果想继续使用springboot2.3的配置文件配置的话，需要加一个属性配置；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.config.use-legacy-processing</span> = <span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><hr><h2 id="application-properties配置文件详解"><a href="#application-properties配置文件详解" class="headerlink" title="application.properties配置文件详解"></a>application.properties配置文件详解</h2><p>带有一些目录结构；</p><p>会生成一个application.properties文件；</p><p>可以完成一些属性的配置；</p><p>springboot自带的一些属性；</p><p>注入到某个类的成员变量的；</p><p>如何知道属性的前缀是什么呢？</p><p>可以看一下源码：</p><p>spring-boot-autoconfigure-2.4.0;</p><p>-&gt;spring.factories;</p><p>这些工程类的全路径；</p><p>找到：ServletWebServerFactoryAutoConfiguration,点进去；</p><p>在这个类的上面有一个注解<code>@EnableConfigurationProperties(ServerProperties.class)</code></p><p>点进去：ServerProperties.class</p><p>类的上面使用了@ConfigurationProperties(perfix&#x3D;”server”,…);</p><p>这个注解的作用是：以server开头的这个属性的值给输入到这个类的成员变量中；</p><p>server.port;</p><p>都是通过set方法进行注入的；</p><p>也可以自定义一些属性；</p><p>自定义的属性的值也输入到某个类的成员变量上；</p><p>对@ConfigurationProperties注解的具体使用进行一个详解；</p><p>首先准备两个实体类：Pet、Person</p><p> <a href="lagou%5Cpojo%5CPet.java" title="Pet.java">Pet.java</a>  </p><p> <a href="lagou%5Cpojo%5CPerson.java" title="Person.java">Person.java</a>  </p><p>案例需求：使用@ConfigurationProperties注解将我们在配置文件中配置的属性值注入到指定类的成员变量；</p><p>想要在配置文件中编写属性配置有提示；</p><p>需要引入一个配置处理器依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;<br>&lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>在配置文件中配置属性的值：</p><p> <a href="lagou%5Cresources%5Capplication.properties" title="application.properties">application.properties</a>  </p><p>编写测试类：</p><p>@RunWith(SpringRunner.class)</p><p>因为SpringRunner继承了SpringJUnit4ClassRunner;</p><p> <a href="lagou%5Ctest%5CSpringboot01DemoApplicationTests.java" title="Springboot01DemoApplicationTests.java">Springboot01DemoApplicationTests.java</a>  </p><p>后面讲解属性注入的时候，还会对@ConfigurationProperties注解进一步进行讲解；</p><hr><h2 id="application-yaml配置文件详解"><a href="#application-yaml配置文件详解" class="headerlink" title="application.yaml配置文件详解"></a>application.yaml配置文件详解</h2><p>yaml是支持的json超集文件格式【是配置文件的趋势】；</p><p>比properties和xml更适合做配置文件；</p><p>yml和xml相比，少了一些结构话的代码；</p><p>与properties，文件更加简洁；</p><p>yaml文件的扩展名可以是yaml或yml</p><p>application.yml语法：</p><p>key:空格 value</p><p>使用缩进控制层次关系；</p><p>缩进：tab</p><p>记得缩进和空格；</p><p>数组形式的写法：</p><p>可以有两种写法：缩进式、行内式</p><p>map类型的写法：</p><p>也有两种写法：缩进式、行内式</p><p> <a href="lagou%5Cresources%5Capplication.yaml" title="application.yaml">application.yaml</a>  </p><hr><h2 id="Value属性值注入"><a href="#Value属性值注入" class="headerlink" title="@Value属性值注入"></a>@Value属性值注入</h2><p>@ConfigurationProperties注解实现批量注入；</p><p>配置文件中配置的属性会覆盖默认属性；</p><p>属性注入的常用注解【重要】</p><p>@Configuration  说明是一个配置类；</p><p>@Bean 放返回的值加入到Bean容器中</p><p>@Value 单个属性注入，一般结合spring el表达式使用</p><p>@ConfigurationProperties(prefix&#x3D;”jdbc”) 属性的批量注入</p><p>@PropertySource(“classpath:&#x2F;jdbc.properties”)  指定外部属性文件，在类上添加</p><h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><p>给单个属性进行注入；</p><p>指定数据源：</p><p>先导入相关依赖；</p><p>在application.properties中配置数据源属性相关的值：</p><p>创建JdbcConfiguration类；</p><p>使用@Value注解可以不使用set方法；</p><p> <a href="lagou%5Cconfig%5CJdbcConfiguration.java" title="JdbcConfiguration.java">JdbcConfiguration.java</a>  </p><p>先将这个类变成配置类；@Configuration</p><p>使用@Bean注解创建DruidDataSource对象并添加到IOC容器中；</p><p>引入在雷伤添加了@Configuration，也会将这个添加到loc容器中；</p><p>在测试类中打印这个这两个对象；</p><hr><h2 id="ConfigurationProperties批量注入"><a href="#ConfigurationProperties批量注入" class="headerlink" title="@ConfigurationProperties批量注入"></a>@ConfigurationProperties批量注入</h2><p>在JdbcConfiguration类上加上这个注解 prefix&#x3D;”jdbc”;</p><p>放到这个注解上会有一个提示（没有生效）；</p><p>需要添加@EnableConfigurationProperties(JdbcConfiguration.class)【使 @ConfigurationProperties注解生效】</p><p>不会报错的，但是还需要在上面加一个@Configuration</p><p>直接将上面两个注解替换成@Component;</p><p>不能单独使用@ConfigurationProperties进行批量注入的；</p><p> <a href="lagou%5Cconfig%5CJdbcConfiguration.java" title="JdbcConfiguration.java">JdbcConfiguration.java</a>  </p><p>出现一个提示条：Spring Boot Configuration Annotation Processor not configured【springboot配置注解处理器未配置】【红色】【在配置文件中编写配置是没有配置信息的】</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653486168006.png" alt="1653486168006"></p><p>添加spring-boot-configuration-processor后出现提示，加完依赖后通过Ctrl+F9来使之生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;<br>&lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><hr><p>第三方jar包中的类；【AnotherComponent.java】</p><p>有想自定义的属性注入到这个类中；</p><p>通过@Bean注解，生成实例对象并将定义的属性注入；</p><p> <a href="lagou%5Cpojo%5CAnotherComponent.java" title="AnotherComponent.java">AnotherComponent.java</a>  </p><p>MyService,将这个类变成配置类：@Configuration</p><p>@Bean new AnotherComponent();</p><p>将属性值进行注入：</p><p>使用注解：@ConfigurationProperties(prefix&#x3D;”another”)【注意这个注解是写在方法上的】</p><p> <a href="lagou%5Cconfig%5CMyService.java" title="MyService.java">MyService.java</a>  </p><p>测试属性是否注入到对象中： <a href="lagou%5Ctest%5CSpringboot01DemoApplicationTests.java" title="Springboot01DemoApplicationTests.java">Springboot01DemoApplicationTests.java</a>  </p><hr><h2 id="ConfigurationProperties和-Value对比"><a href="#ConfigurationProperties和-Value对比" class="headerlink" title="@ConfigurationProperties和@Value对比"></a>@ConfigurationProperties和@Value对比</h2><p>这节介绍属性注入中的：松散绑定；</p><p>Spring Boot使用一些宽松的规则将环境属性绑定到@ConfigurationProperties bean，因此环境属性名<br>和bean属性名之间不需要完全匹配</p><p>先创建一个OwnerProperties类；</p><p>上面使用注解：@ConfigurationProperties(“acme.my-person.person”)</p><p>编写一个成员变量：firstName 【需要采用驼峰命名】；</p><p>配置文件中使用的是羊肉串模式；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">acme:<br>my-person:<br>person:<br>first-name: 泰森<br></code></pre></td></tr></table></figure><p>能否注入到这个属性中呢？</p><p>是可以的，并不需要完整匹配；</p><p> <a href="lagou%5Cpojo%5COwnerProperties.java" title="MyService.java">OwnerProperties.java</a>  </p><p>在测试类中打印对象OwnerProperties.java</p><p> <a href="lagou%5Ctest%5CSpringboot01DemoApplicationTests.java" title="Springboot01DemoApplicationTests.java">Springboot01DemoApplicationTests.java</a>  </p><p>不仅支持羊肉串模式，还支持其他模式：</p><table><thead><tr><th>属性文件中配置</th><th>说明</th></tr></thead><tbody><tr><td>acme.my-project.person.first-name</td><td>羊肉串模式case, 推荐使用</td></tr><tr><td>acme.myProject.person.firstName</td><td>标准驼峰模式</td></tr><tr><td>acme.my_project.person.first_name</td><td>下划线模式</td></tr><tr><td>ACME_MYPROJECT_PERSON_FIRSTNAME</td><td>大写下划线，如果使用系统环境时候推荐使用</td></tr></tbody></table><p>下划线模式经常用于数据库表中字段的模式，但是这里也是支持的；</p><p> <a href="lagou%5Cresources%5Capplication.yaml" title="application.yaml">application.yaml</a>  </p><p>@ConfigurationProperties vs @Value</p><table><thead><tr><th>特征</th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>宽松的绑定</td><td>yes</td><td>Limited（详见下方官网截图）</td></tr><tr><td>元数据支持</td><td>yes</td><td>no</td></tr><tr><td>SpEL 表达式</td><td>no</td><td>yes</td></tr><tr><td>应用场景</td><td>批量属性绑定</td><td>单个属性绑定</td></tr></tbody></table><p>宽松的绑定、元数据支持想查看链接的话请看pdf文档</p><p>json内容就是一个元数据；</p><p>SpEl表达式是啥呀？</p><hr><h2 id="SpringBoot日志框架"><a href="#SpringBoot日志框架" class="headerlink" title="SpringBoot日志框架"></a>SpringBoot日志框架</h2><p>对日志框架本身一个介绍；</p><p>日志在项目的开发中，是必不可少的组件；</p><p>构建的时候是怎样的构架设计思想？</p><p>小张：开发一个大型的项目；</p><p>想记录重要变量的一个变化</p><p>System.out.println(“”);</p><p>记录运行时的关键信息；</p><p>将关键信息打印到控制台上；</p><p>这种输出语句并包含任何的业务逻辑；</p><p>要将这些语句给删除掉；</p><p>都删除掉了也不太好；</p><p>让这些信息都可以输出出来，但是输出到一个文件中；</p><p>将打印语句进行修改，将打印语句输入到文件中；</p><p>就想自己去实现贵日志框架</p><p>通过日志框架来记录运行时的关键信息；</p><p>实现最初版功能添加的日志框架；zhang_logging.jar</p><p>在使用的过程中，功能感觉太简陋了；</p><p>想实现异步模式+自动归档的功能（每天一个文件）</p><p>又重新编写了编写了一个日志框架：zhang_logging-good.jar</p><p>使用的api和原来的api就有所不同的；</p><p>需要将原来的日志框架给替换掉；</p><p>因为api的不同，需要重新修改相关的api;</p><p>知道了这个问题，再设计一个新的日志框架；</p><p>需要替换jar包的同事，还需要重新修改相关的API；</p><p>针对于这个问题，想进行解决，是怎样的思想呢？</p><p>JDBC–数据库驱动的一个关系；</p><p>编写相关代码的时候编写的是JDBC的api</p><p>看使用的是哪个数据库；</p><p>mysql就引入mysql的相关依赖；</p><p>如果使用的是oracle，就引入oracle的相关依赖；</p><p>但是对于我们程序中编写的jdbc代码就不用修改；</p><p>基于这种思想，小张也想使用这种思想；</p><p>编写统一的接口层：（日志抽象层）logging-absract.jar</p><p>写代码的时候，统一使用接口层里面相关的API,具体实现就用那个导入的那个jar包；</p><p>不管我们导入的那个jar包，代码中使用的API是无需改变的；</p><p>需要知道这个思想；</p><p><strong>日志抽象层+日志实现层</strong>；</p><p>想用哪个实现就用哪个jar包；</p><p><strong>而市面上常见的日志框架</strong>有很多，比如：JCL、SLF4J、Jboss-logging、jUL、log4j、log4j2、logback等等，我们该如何选择呢？</p><p>通常情况下，日志是由一个抽象层+实现层的组合来搭建的。</p><table><thead><tr><th>日志-抽象层</th><th>日志-实现层</th></tr></thead><tbody><tr><td>JCL（Jakarta Commons Logging）、SLF4J（Simple LoggingFacade for Java）、jboss-logging</td><td>jul（java.util.logging）、log4j、logback、log4j2</td></tr></tbody></table><p>抽象层要用哪个，实现层要用哪个？</p><p>Commons Logging，不会陌生；</p><p>在spring的时候就会导入Commons Logging相关jar包；</p><p>Jakarta：apache下的一个小组；</p><p>日志的选择，可以使用排除法：</p><p>jboss-logging：准地特定的框架来使用的，使用的机会很少，排除；</p><p>JCL:最后一次的更新是2014年，排除；</p><p><strong>日志抽象层就使用SLF4J</strong></p><p>日志-实现层</p><p>我们比较熟悉的就是：log4j</p><p>但是存在一定的问题；</p><p>如果在log4j上修改，改动就太大了；</p><p>就重新设计了logback；</p><p>SLF4J、log4j、logback是同一个作者；</p><p>logback是log4j的升级版本</p><p>jul（java.util.logging）日志包下的实现，功能没有其他的强大；</p><p>log4j2：功能强大，但是还没有和其他框架整合的太广泛；</p><p><strong>日志-实现层使用logback</strong>；</p><p>spring框架爱默认选择私用JCL作为日志输出；</p><p>springboot默认选择了SLF4j结合logBack作为日志的输出；</p><p>要知道日志框架为什么有抽象层+实现层的组合来搭建的；</p><p>原因是什么？</p><p>要知道市面上有哪些常见的日志康佳；</p><p>框架默认的日志框架组合策略（spring、springboot）；</p><hr><h2 id="SLF4J日志工具的使用"><a href="#SLF4J日志工具的使用" class="headerlink" title="SLF4J日志工具的使用"></a>SLF4J日志工具的使用</h2><p>springboot默认选择了SLF4j结合logBack作为日志的输出；</p><p>SLF4J的使用方式；</p><p>开发中不应该使用日志实现类的；</p><p>应该使用日志抽象层的；</p><p>统一使用日志抽象层；</p><p>使用哪个实现层就引入哪个jar包就好；</p><p>参考SLF4J官方文档：<a href="https://www.slf4j.org/">https://www.slf4j.org/</a></p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653494040822.png" alt="1653494040822"></p><p>当然也可以直接访问网址：<a href="https://www.slf4j.org/manual.html">https://www.slf4j.org/manual.html</a></p><p>使用之前先下载SLF4J相关jar包；</p><p>可以查看文档中的示例；</p><p>只是使用到了日志的抽象层；</p><p>在结合实现层的时候，我们又如何来操作呢？</p><p>去选择切换日志的时候，需要切换</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653494274292.png" alt="1653494274292"></p><p> 单独使用SLF4J；</p><p>结合logback一起使用，不仅需要导入slf4j-api.jar,还需要导入logback-classic.jar、logback-core.jar；</p><p>SLF4J结合log4j:出现比较早的，不知道之后会出现日志抽象层的概念，需要使用到适配器（slf4j-log412.jar）,;</p><p>起到了承上启下的作用；</p><p>SLF4J结合logging也是一样的：需要一个适配器；</p><p>SLF4J的简单实现</p><p>切换的时候如何去做；</p><p>可以清晰的看到，SLF4J作为日志的实现，针对不同的实现导入不同的jar包；</p><p>深蓝色：具体实现</p><p>墨绿色：适配器</p><p>注意点：每个日志框架都有自己的配置文件；</p><p>都需要使用具体实现框架的配置文件；</p><p>要知道为什么有这个适配器？</p><hr><h2 id="统一日志框架的使用"><a href="#统一日志框架的使用" class="headerlink" title="统一日志框架的使用"></a>统一日志框架的使用</h2><p>上面还存在一个遗留的为题；</p><p>例如在项目中需要使用日志框架</p><p>A项目（slf4+logback）</p><p>spring（commons logging）</p><p>Hibernate(jboss-logging)</p><p>如果想在A项目中引入spring的相关依赖的时候，</p><p>commons logging相关jar包也会被引入到A项目中</p><p>A项目中引入Hibernate相关依赖也是一样的；</p><p>这样会造成什么情况？</p><p>项目中存在多个日志框架；</p><p>这种是不利于使用日志框架的；</p><p>需要我们在项目中设置统一的日志框架；</p><p>如何完成统一日志框架的设置呢？</p><p>SLF4J中给了我们一个案例；</p><p>我们所依赖的外部组件如果不是log4j或者java.util.logging的时候，需要去看SLF4J的二进制支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">In <span class="hljs-keyword">case</span> an externally-maintained component you depend on uses a logging API other than SLF4J, such as commons logging, log4j or java.util.logging, have a look at SLF4J<span class="hljs-string">&#x27;s binary-support for legacy APIs.</span><br></code></pre></td></tr></table></figure><p>里面有一张图，就是介绍如何设置统一的日志框架；</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653495958861.png" alt="1653495958861"></p><p>对日志框架进行替换；</p><p>例如Spring，将commons-logging.jar进行排除</p><p>但是会报错；</p><p>需要引入jcl-over-slf4.jar;</p><p>spring找的就是jcl-over-slf4.jar中的类；</p><p>所谓替换就是将原先的进行排除，替换成slf4的装换包；</p><p>当然了，其他的也是一样的；</p><p>先竖着看，再横着看；</p><p>先排除再替换；</p><p>从图中我们得到一种统一日志框架使用的方式，可以使用一种和要替换的日志框架类完全一样的 jar 进行替换，这样不至于原来的第三方 jar 报错，而这个替换的 jar 其实使用了 SLF4J API. 这样项目中的日<br>志就都可以通过 SLF4J API 结合自己选择的框架进行日志输出。</p><p>统一日志框架使用步骤归纳如下：</p><ol><li><strong>排除</strong>系统中的其他日志框架。</li><li>使用<strong>中间包替换</strong>要替换的日志框架。</li><li>导入我们选择的 SLF4J 实现。</li></ol><hr><h2 id="SpringBoot日志关系"><a href="#SpringBoot日志关系" class="headerlink" title="SpringBoot日志关系"></a>SpringBoot日志关系</h2><p>统一日志框架使用步骤归纳如下：</p><ol><li><strong>排除</strong>系统中的其他日志框架。</li><li>使用<strong>中间包替换</strong>要替换的日志框架。</li><li>导入我们选择的 SLF4J 实现。</li></ol><p>如果在springboot中引入了第三方框架如何排除第三方的日志框架呢？</p><h3 id="排除其他日志框架"><a href="#排除其他日志框架" class="headerlink" title="排除其他日志框架"></a>排除其他日志框架</h3><p>查看父依赖启动器；</p><p>父依赖启动器里面还有一个依赖；</p><p>当前工程引入第三方框架的时候第三方jar包版本的管理；</p><p>properties标签可以做版本的声明；</p><p>从而接近了版本冲突问题；</p><p>真正做版本锁定的是：dependencyManagement标签；</p><p>排除需要用到：exclusions标签；</p><p>依赖的排除；</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653526016525.png" alt="1653526016525"></p><p>我们排除日志的时候也可以使用这个标签进行日志依赖的排除；</p><p>查看依赖关系图：右击-》Diagrams-&gt;show dependencies</p><p>spring-boog-starter:就是一个核心的依赖启动器；</p><p>还会去用到：spring-boot-starter-logging</p><p>点进去；</p><p>可以看到组合了哪些dependency;【logback-core、slf4j-api】</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653495958861.png" alt="1653495958861"></p><p>springboot中默认使用的是logback-core+slf4j-api</p><p>可以看到有一个logback-core依赖；</p><p>点进去，可以看到的转换包也是有引入的；</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653526586385.png" alt="1653526586385"></p><p>由此可见，Spring Boot 可以自动的适配日志框架，而且底层使用 SLF4j + LogBack 记录日志，如果我们自行引入其他框架，需要排除其日志框架。</p><p>查看是否已经进行了排除，如果已经进行了排除，查看是否已经引入了替换包；</p><hr><h2 id="SpringBoot日志使用"><a href="#SpringBoot日志使用" class="headerlink" title="SpringBoot日志使用"></a>SpringBoot日志使用</h2><p>springboot默认的日志级别是什么？</p><p>springboot默认的日志输出格式是什么？</p><p>控制台中是为什么打印的日志是那样的？</p><p>可以进入日志启动器中查看：</p><p>spring-boot-starter-logging:2.4.0;</p><p>-&gt;</p><p>在这个logging启动器中就有SLF4j+logback所需的jar包；</p><p>编写相应的api-在测试类中；</p><p>编写SLF4j的API；</p><p>在测试类中编写：</p><p>之前都是通过System.out.println来输出重要的日志；</p><p>现在我们通过：</p><p>Logger logger &#x3D; LoggerFactory.getLogger(this.getClass());</p><p>获取一个计数器对象；</p><p>调用对应的方法：</p><p>logger.trace(“”);  &#x2F;&#x2F; trace 追踪的意思</p><p>logger.debug(“”);</p><p>logger.info(“”); 可以查看自定义的一些信息；</p><p>logger.warn(“”) ;  属性的值不是预期的属性值，可以抛出警告；</p><p>logger.error(“”);  如果出现异常，打印error日志；</p><p> <a href="lagou%5Ctest%5CSpringboot01DemoApplicationTests.java" title="Springboot01DemoApplicationTests.java">Springboot01DemoApplicationTests.java</a>  </p><p>日志的级别：从小到大：trace&lt;debug&lt;info&lt;warn&lt;error</p><p>日志级别是可以进行调整的；</p><p>日志输出的时候是按照日志级别进行输出；</p><p>只能输出比当前级别更高级别的日志：</p><p>例如：infor级别，只能输出info、warn、error级别的日志</p><p>springboot的默认输出级别是info级别，也就是root级别；</p><p>当前的默认输入级别是info级别；</p><p>当前默认的日志输出格式是：</p><p>日志的组成由五部分组成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2020</span>-<span class="hljs-number">11</span>-<span class="hljs-number">16</span> <span class="hljs-number">19</span>:<span class="hljs-number">58</span>:<span class="hljs-number">43.094</span> INFO <span class="hljs-number">39940</span> --- [ main]<br>com.lagou.Springboot01DemoApplicationTests : Info 日志...<br><span class="hljs-number">2020</span>-<span class="hljs-number">11</span>-<span class="hljs-number">16</span> <span class="hljs-number">19</span>:<span class="hljs-number">58</span>:<span class="hljs-number">43.094</span> WARN <span class="hljs-number">39940</span> --- [ main]<br>com.lagou.Springboot01DemoApplicationTests : Warn 日志...<br><span class="hljs-number">2020</span>-<span class="hljs-number">11</span>-<span class="hljs-number">16</span> <span class="hljs-number">19</span>:<span class="hljs-number">58</span>:<span class="hljs-number">43.094</span> ERROR <span class="hljs-number">39940</span> --- [ main]<br>com.lagou.Springboot01DemoApplicationTests : Error 日志...<br></code></pre></td></tr></table></figure><p>从上面的日志结合 Logback 日志格式可以知道 Spring Boot 默认日志格式是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;<span class="hljs-number">50</span>&#125; - %msg%n<br># %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; 时间<br># %thread 线程名称 【日志级别】<br># %-5level 日志级别从左显示<span class="hljs-number">5</span>个字符宽度<br># %logger&#123;<span class="hljs-number">50</span>&#125; 类名<br># %msg%n 日志信息加换行<br></code></pre></td></tr></table></figure><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653545050235.png" alt="1653545050235"></p><p>base.xml</p><p>配置文件中有，include标签</p><p>有一段配置；</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/1653545118731.png" alt="1653545118731"></p><p>针对这些格式都在源码中进行了配置；</p><p>base.xml配置了日志级别：info,root级别</p><hr><h2 id="SpringBoot自定义日志输出"><a href="#SpringBoot自定义日志输出" class="headerlink" title="SpringBoot自定义日志输出"></a>SpringBoot自定义日志输出</h2><p>可以直接在配置文件中修改，默认的日志级别及默认的日志输出格式的；</p><p>指定日志输出级别：</p><p>logger.level.com.lagou&#x3D;trace</p><p>可以看到包名变成了斜体；</p><p> <a href="lagou%5Ctest%5CSpringboot01DemoApplicationTests.java" title="Springboot01DemoApplicationTests.java">Springboot01DemoApplicationTests.java</a>  </p><p>可以看到日志全部进行了一个打印：</p><p>注意：只针对com.lagou的包下的文件的日志输出级别是trace，其他的还是默认的日志级别info;</p><p>指定控制台日志输出格式：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.pattern.console</span>=<span class="hljs-string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></code></pre></td></tr></table></figure><p>可以看到已经没有时分秒了；</p><p>可不可以将日志内容输入到文件中呢？不输出到控制台；</p><p>有两个属性都可以将日志文件输入到文件中；</p><p>关于日志的输出路径，可以使用 logging.file 或者 logging.path 进行定义，两者存在关系如下表。</p><table><thead><tr><th>logging.file</th><th>logging.path</th><th>例子</th><th>描述</th></tr></thead><tbody><tr><td>（没有）</td><td>（没有）</td><td></td><td>仅控制台记录。</td></tr><tr><td>具体文件</td><td>（没有）</td><td>my.log</td><td>写入指定的日志文件，名称可以是精确位置或相对于当前目录。</td></tr><tr><td>（没有）</td><td>具体目录</td><td>&#x2F;var&#x2F;log</td><td>写入 spring.log 指定的目录，名称可以是精确位置或相对于当前目录。</td></tr></tbody></table><p>（没有）：都没有配置的情况下；</p><p><strong>指定将日志信息输入到指定文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.file.name</span>=<span class="hljs-string">my.log</span><br></code></pre></td></tr></table></figure><p>在项目就会生成一个my.log的一个文件</p><p>日志文件默认是生成在工程中的；</p><p>但是也可以生成在其他的地方；</p><p>例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.file.name</span>=<span class="hljs-string">d:/my.log</span><br></code></pre></td></tr></table></figure><p>也可以指定logging.path</p><p>logging.path指定的是具体的目录；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.file.path</span>=<span class="hljs-string">/var/log</span><br></code></pre></td></tr></table></figure><p>文件会自动的创建；</p><p>打开该项目所在的目录；</p><p>会自动生成目录；</p><p>spring.log 中可以看到日志的内容；</p><p>注意：看下springboot使用的是哪个版本，版本不一样，配置也是不一样的</p><p>也可以在文件中指定日志输出格式；</p><p><strong>指定文件日志输出格式</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.pattern.file</span>=<span class="hljs-string">%d&#123;yyyy-MM-dd&#125; ======= [%thread]  === %-5level %logger&#123;50&#125; - %msg%n</span><br></code></pre></td></tr></table></figure><p>还有很多的日志配置，我们可以在使用的时候进行配置；</p><hr><h2 id="SpringBoot替换日志框架"><a href="#SpringBoot替换日志框架" class="headerlink" title="SpringBoot替换日志框架"></a>SpringBoot替换日志框架</h2><p>如何替换日志框架；</p><p>日志抽象层默认使用SLF4j</p><p>日志实现层使用的是</p><p>日志抽象层，替换具体的实现；</p><p>替换具体的实现；</p><p>log4j已经好长时间了，开发人也认为有缺陷；</p><p>log4j2:可以使用这一个；</p><p>springboot中提供了两个starter:</p><p>spring-boot-starter-logging:使用logback作为日志启动器‘；</p><p>spring-boot-starter-log4j2:使用log4j2作为日志启动器；</p><p>如果想要使用log4j2,需要排除spring-boot-starter-logging启动器的；</p><p>查看：依赖关系图</p><p>找到spring-boot-starter-logging</p><p>选中-》右击-》Exclude【spring-boot-starter-logging将这个jar给去除】</p><p>在pom.xml中会自动添加exclusions标签，将对应的依赖移除；</p><p>验证是否排除成功；</p><p>只打印了一个log,没有打印日志信息；</p><p>切换log4j2,需要引入log4j2依赖；</p><p>然后启动项目就可以在控制台看到日志输出了；</p>]]></content>
    
    
    <categories>
      
      <category>Java工程师高薪训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一阶段-开源框架源码剖析</tag>
      
      <tag>模块四-约定优于配置设计范式及Spring Boot源码剖析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>任务二：SpringBoot源码剖析</title>
    <link href="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9ASpringBoot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    <url>/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9ASpringBoot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="任务二：SpringBoot源码剖析"><a href="#任务二：SpringBoot源码剖析" class="headerlink" title="任务二：SpringBoot源码剖析"></a>任务二：SpringBoot源码剖析</h1><h2 id="源码环境搭建"><a href="#源码环境搭建" class="headerlink" title="源码环境搭建"></a>源码环境搭建</h2> <div class="note note-success">            <p>starter是什么？如何去使用这些starter?</p><p>为什么包扫描只会小苗核心启动类所在的包及其子包？</p><p>在springboot启动过程中，是如何完成自动装配的？</p><p>内嵌tomcat是如何被创建及启动的？</p><p>使用了web场景对应的starter，springmvc是如何自动装配的？</p>          </div> <p>针对上面的疑问，要进行源码分析；</p><p>将源码下载下来；</p><hr><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p>  <a class="btn" href="https://github.com/spring-projects/spring-boot/releases" title="源码下载">源码下载</a>  </p><p>可以对源码进行调试及提添加注释的；</p><p>在下载的时候我们不选择最新的版本【使用2.2.9.RELEASE】；</p><p>构建工程的时候有两种种方式构建；maven、gradle</p><p>在2.3X以后版本都是根据gradle【不正确-以后补充】,构建的；</p><p>我们学习maven方式更容易去学习；</p><p>进入源码下载也-》点击tags;</p><p>我们选择v2.2.9.RELEASE版本进行学习；</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9ASpringBoot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/1653611339978.png" alt="1653611339978"></p><p>下载解压后要对这个源码进行编译【请查看后面步骤】；</p><hr><h3 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h3><p>首先需要检查环境：</p><p>jdk版本 1.8+ </p><p>maven 3.5+</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java -version<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mvn -version<br></code></pre></td></tr></table></figure><p>maven配置环境变量与配置java环境变量类似；</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9ASpringBoot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/1653611528688.png" alt="1653611528688"></p><hr><h3 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h3><p>进⼊spring-boot源码根⽬录<br>执⾏mvn命令: mvn clean install -DskipTests -Pfast &#x2F;&#x2F; 跳过测试⽤例，会下载⼤量 jar 包（时<br>间会长一些）第二次执行就快了；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mvn clean install -DskipTests -Pfast<br></code></pre></td></tr></table></figure><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9ASpringBoot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/1653611576375.png" alt="1653611576375"></p><p><strong>把编译过后的源码导入到工程中；</strong></p><p>idea-&gt;import project-&gt;选择编译过后的工程的pom.xml-&gt;点击ok;</p><p>时间会长一点；【我使用了23.3分钟】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total time: <span class="hljs-number">23</span>:<span class="hljs-number">30</span> min<br>[INFO] Finished at: <span class="hljs-number">2022</span>-<span class="hljs-number">05</span>-27T12:<span class="hljs-number">26</span>:<span class="hljs-number">56</span>+08:<span class="hljs-number">00</span><br>[INFO] Final Memory: 793M/1483M<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><p>导入成功后；会有一些红色警告；</p><p>引入了一些东西。，但是没有进行配置；</p><p>需要关闭<strong>maven代码检查</strong>；</p><p>打开pom.xml关闭maven代码检查【加上true这一行】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;properties&gt;<br>&lt;revision&gt;<span class="hljs-number">2.2</span><span class="hljs-number">.9</span>.RELEASE&lt;/revision&gt;<br>&lt;main.basedir&gt;$&#123;basedir&#125;&lt;/main.basedir&gt;<br>&lt;disable.checks&gt;<span class="hljs-literal">true</span>&lt;/disable.checks&gt;<br>&lt;/properties&gt;<br></code></pre></td></tr></table></figure><p>这样就构建完成了；</p><p>但是呢，为了更方便的调试；</p><p>需要新建一个模块【module】</p><p>将源码导入进来后，注意修改maven配置；</p><p>最好先关闭下项目再打开，重新导入下jar包；</p><p>最好还是换一个新的maven仓库吧；</p><hr><h3 id="新建一个module"><a href="#新建一个module" class="headerlink" title="新建一个module"></a>新建一个module</h3><p>特别的注意：这个模块的位置；</p><p>要将web场景的依赖引入进去</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9ASpringBoot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/1653611988635.png" alt="1653611988635"></p><p>要将我们模块的版本改动成我们源码的版本；</p><p>这样调试的时候就会进入我们的源码工程中；</p><hr><h3 id="新建一个Controller"><a href="#新建一个Controller" class="headerlink" title="新建一个Controller"></a>新建一个Controller</h3><p>@RestController</p><p>TestController.java类</p><p> <a href="lagou%5Ccontroller%5CTestController.java" title="TestController.java">TestController.java</a>  </p><p>test()方法；</p><p>@RequestMapping(“&#x2F;test”)</p><p>更换启动类的位置（目录）；</p><p>执行main方法；【启动的时候显示端口被占用-未解决】</p><p>第一次将源码环境导入进来，所以会比较慢；</p><p>可以对接口进行访问校验；</p><p>接下来对源码部分进行解析剖析；</p><hr><h2 id="源码剖析-依赖管理-spring-boot-starter-parent"><a href="#源码剖析-依赖管理-spring-boot-starter-parent" class="headerlink" title="源码剖析-依赖管理-spring-boot-starter-parent"></a>源码剖析-依赖管理-spring-boot-starter-parent</h2><p>已经可以正常的进行源码剖析了；</p><p>我们根据问题去进行源码剖析</p><h3 id="问题1：为什么导入dependency时不需要指定版本？"><a href="#问题1：为什么导入dependency时不需要指定版本？" class="headerlink" title="问题1：为什么导入dependency时不需要指定版本？"></a>问题1：为什么导入dependency时不需要指定版本？</h3><p>之前pom引入依赖坐标中有三部分，现在只有两部分-没有版本号了；</p><p>注意作为springboot工程，都会有父依赖启动器；</p><p>我们主要看父依赖启动器都做了什么，有没有做了版本控制；</p><p>父依赖（是在我们新建的项目中）中也引入了一个依赖（爷爷依赖）；</p><p>我们看下这个父依赖中做了什么；</p><p>对jdk版本的声明（1.8）；</p><p>做了一个分隔符@；</p><p>编译源码文件utf-8;</p><p>编译后的文件utf-8;</p><p>build标签：</p><p>resource标签：</p><p>定义了资源过滤（application配置文件），支持不同环境的相关配置（不清楚）</p><p>pluginManagement标签：</p><p>提供了插件的默认值进行了管理，进行了设置（不理解）；</p><p>在我们的pom文件中，可以看到就两行，默认值就没有写了（不理解）；</p><p><strong>再看爷爷依赖：</strong></p><p>properties标签中进行了非常多的版本声明；</p><p>定义了其他各个依赖的版本号；</p><p>这是根据springboot版本进行配置的；</p><p>如果springboot版本改变，爷爷依赖中的版本定义也会发生了改变；</p><p>熟悉maven的同学可以知道，properties只是对版本进行了声明</p><p>真正起作用的是dependencyManagement标签；</p><p>这个标签中引用了版本号；</p><p>答案：spring-boot-starter-parent 通过继承 spring-boot-dependencies 从而实现了SpringBoot的版本依赖管理,所以我们的SpringBoot工程继承spring-boot-starter-parent后已经具备版本锁定等配置了,这也就是在 Spring Boot 项目中部分依赖不需要写版本号的原因</p><p>注意：部分依赖时不用写版本号的；springboot官方整合了的可以不用写；</p><p>如果springboot官方没有进行整合的依赖，需要我们写版本号；</p><p>例如：使用阿里的diruid连接池；</p><hr><h2 id="源码剖析-依赖管理-spring-boot-starter-web"><a href="#源码剖析-依赖管理-spring-boot-starter-web" class="headerlink" title="源码剖析-依赖管理-spring-boot-starter-web"></a>源码剖析-依赖管理-spring-boot-starter-web</h2><p>父依赖管理对版本的统一管理；</p><h3 id="问题2：-spring-boot-starter-parent父依赖启动器的主要作用是进行版本统一管理，那么项目运行依赖的JAR包是从何而来的？"><a href="#问题2：-spring-boot-starter-parent父依赖启动器的主要作用是进行版本统一管理，那么项目运行依赖的JAR包是从何而来的？" class="headerlink" title="问题2： spring-boot-starter-parent父依赖启动器的主要作用是进行版本统一管理，那么项目运行依赖的JAR包是从何而来的？"></a>问题2： spring-boot-starter-parent父依赖启动器的主要作用是进行版本统一管理，那么项目运行依赖的JAR包是从何而来的？</h3><p>运行依赖的JAR包是从何而来的？</p><p>项目依赖的统一jar包是如何来的呢；</p><p>使用一个启动器jar包就可以使用springmvc了；</p><p>要知道什么是起步依赖；</p><p>要知道什么是starter;</p><p>一个statter依赖传递了很多的依赖；</p><p>例如：<code>spring-boot-starter-web</code>中引入<code>spring-webmvc</code>依赖</p><p>所以可以使用了<code>springMVC</code>了；</p><p><strong>spring-boot-starter-web依赖启动器的主要作用：</strong>是打包了Web开发场景所需的底层所有依赖（基于依赖传递，当前项目也存在对应的依赖jar包）</p><p>正是如此，在pom.xml中引入spring-boot-starter-web依赖启动器时，就可以实现Web场景开发，而不需要额外导入Tomcat服务器以及其他Web依赖文件等。</p><p>看到了<code>spring-boot-starter-web</code>中引入了json及tomcat依赖；</p><p>可以在spring官方文档中查看到底引入了哪些starter;</p><p>【Using spring boot-&gt;Starters】里面有很多的；</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters</a></p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9ASpringBoot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/1653618479375.png" alt="1653618479375"></p><p>需要注意：Spring Boot官方并不是针对所有场景开发的技术框架都提供了场景启动器，例如阿里巴巴的Druid数据源等，Spring Boot官方就没有提供对应的依赖启动器。为了充分利用Spring Boot框架的优势，在Spring Boot官方没有整合这些技术框架的情况下，Druid等技术框架所在的开发团队<strong>主动与Spring Boot框架进行了整合</strong>，实现了各自的依赖启动器，例如<code>druid-spring-boot-starter</code>等。我们在pom.xml文件中引入这些第三方的依赖启动器时，<strong>切记要配置对应的版本号</strong></p><p>我们想使用数据源，Druid开发团队自动整合了来适应springboot;</p><hr><h2 id="源码剖析-自动配置-SpringBootConfiguration"><a href="#源码剖析-自动配置-SpringBootConfiguration" class="headerlink" title="源码剖析-自动配置-@SpringBootConfiguration"></a>源码剖析-自动配置-@SpringBootConfiguration</h2><p>自动配置的源码剖析很重要(面试中可能会问到)；</p><p><strong>自动配置：</strong>根据我们添加的jar包依赖，会自动将一些配置类的bean注册进ioc容器，我们可以需要的地方使用<code>@Autowired</code>或者<code>@Resource</code>等注解来使用它。</p><p> 省去了我们以前手动配置第三方bean的情况； </p><h3 id="问题：Spring-Boot到底是如何进行自动配置的，都把哪些组件进行了自动配置？"><a href="#问题：Spring-Boot到底是如何进行自动配置的，都把哪些组件进行了自动配置？" class="headerlink" title="问题：Spring Boot到底是如何进行自动配置的，都把哪些组件进行了自动配置？"></a>问题：Spring Boot到底是如何进行自动配置的，都把哪些组件进行了自动配置？</h3><p><strong>Spring Boot应用的启动入口</strong>:是@SpringBootApplication注解标注类中的<strong>main()方法</strong>，</p><p>被标注的@SpringBootApplication注解的类就是<strong>核心启动类</strong>；</p><p><code>@SpringBootApplication</code>这个注解起到了什么作用；</p><p><strong>run方法起到了什么作用？</strong></p><p>点击进入@SpringBootApplication注解；</p><p>可以看到已经整合了很多的注解（七个注解-四个元注解+三个核心注解）；</p><p>这些注释源码中是没有的，是老师给的源码中有（所以我们尽可能的使用课程中给的源码）；</p><p><a href="SourceCode%5CAutoConfigure%5CSpringBootApplication.java" title="SpringBootApplication.java">SpringBootApplication.java</a>  </p><p>@SpringBootApplication注解使用组合注解</p><p><strong>由三个主要的注解组成；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span> <span class="hljs-comment">//注解的适用范围,Type表示注解可以描述在类、接口、注解或枚举中</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="hljs-comment">//表示注解的生命周期，Runtime运行时</span><br><span class="hljs-meta">@Documented</span> <span class="hljs-comment">//表示注解可以记录在javadoc中</span><br><span class="hljs-meta">@Inherited</span> <span class="hljs-comment">//表示可以被子类继承该注解</span><br><span class="hljs-comment">//------------------------------------------------</span><br><span class="hljs-meta">@SpringBootConfiguration</span>  <span class="hljs-comment">// 标明该类为配置类</span><br><span class="hljs-meta">@EnableAutoConfiguration</span>  <span class="hljs-comment">// 启动自动配置功能</span><br><span class="hljs-meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="hljs-meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span> <span class="hljs-comment">//注解扫描</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;<br></code></pre></td></tr></table></figure><p>三个重要的注解要进行解析；</p><p><code>@SpringBootConfiguration</code>（第一个核心注解）注解点进去；</p><p>发现也是组合注解；</p><p><a href="SourceCode%5CAutoConfigure%5CSpringBootConfiguration.java" title="SpringBootConfiguration.java">SpringBootConfiguration.java</a>  </p><p>底层用到的是<code>@Configuration</code>注解；</p><p>@Configuration注解是spring的注解；声明该类是一个配置类；</p><p>-》@SpringBootConfiguration注解是@Configuration注解的包装；</p><p>-》@SpringBootConfiguration注解是springboot的主配置类；</p><hr><h2 id="源码剖析-自动配置-AutoConfigurationPackage"><a href="#源码剖析-自动配置-AutoConfigurationPackage" class="headerlink" title="源码剖析-自动配置-@AutoConfigurationPackage"></a>源码剖析-自动配置-@AutoConfigurationPackage</h2><p>这节主要讲解注解：</p><p><code>@EnableAutoConfiguration</code>注解（第二个核心注解）  &#x2F;&#x2F; 启动自动配置功能</p><p>Enable开头的注解：</p><p>作用：借助@Import开手机并注册特定场景相关的Bean;</p><p>@EnableAutoConfiguration借助<code>@Import</code>注解来收集所有符合自动配置条件的bean定义，并加载到loc容器中；</p><p>进入这个注解查看；</p><p><a href="SourceCode%5CAutoConfigure%5CEnableAutoConfiguration.java" title="EnableAutoConfiguration.java">EnableAutoConfiguration.java</a>  </p><p>也是一个组合注解；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigurationPackage</span> <span class="hljs-comment">// 自动配置包</span><br><span class="hljs-meta">@Import(AutoConfigurationImportSelector.class)</span> <span class="hljs-comment">// Spring的底层注解@Import，给容器中导入一个组件；</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;<br></code></pre></td></tr></table></figure><p>知道这个注解的整体作用就需要看上面这两个注解；</p><p><strong>先看第一个注解</strong><code>@AutoConfigurationPackage</code>注解（EnableAutoConfiguration的第一个注解）：</p><p>Spring的底层注解@Import，给容器中导入一个组件：</p><p>向容器中导入AutoConfigurationPackages类的Registrar</p><p><a href="SourceCode%5CAutoConfigure%5CAutoConfigurationPackage.java" title="AutoConfigurationPackage.java">AutoConfigurationPackage.java</a>  </p><p>点进去Registrar；</p><p>里面有一个registerBeanDefinitions()方法【将注解标注的元信息传入，获取到相应的包名】；</p><p><strong>需要传递两个参数：</strong></p><p>metadata【元数据信息】</p><p>registry【注册中心】</p><p>获取到相应的包名；</p><p><a href="SourceCode%5CAutoConfigure%5CAutoConfigurationPackages.java" title="AutoConfigurationPackages.java">AutoConfigurationPackages.java</a>  </p><p><strong>进入register方法：</strong></p><p>*@-判断对应的bean是否已经被注册；</p><p>如果尚未注册：</p><p>*@-注册<code>BasePackages</code>，存储包名【以后可能会用到过】【com.lagou】</p><p>总结：</p><p>AutoConfigurationPackages.Registrar这个类就干一个事，注册一个 Bean ，这个 Bean 就是<br>org.springframework.boot.autoconfigure.AutoConfigurationPackages.<code>BasePackages </code>，它有一个参数，这个参数是使用了@AutoConfigurationPackage【EnableAutoConfiguration的第一个注解】，这个注解的类所在的包路径,保存自动配置类以供之后的使用，比如给 JPA entity 扫描器用来扫描开发人员通过注解 <code>@Entity</code>定义的 entity类。</p><p>只装备了一个类，说明还不够强大；</p><p>下节将@EnableAutoConfiguration注解中的另一个重要注解；</p><p>说明另外一个注解功能特别的强大；</p><hr><h2 id="源码剖析-自动配置-Import（上）"><a href="#源码剖析-自动配置-Import（上）" class="headerlink" title="源码剖析-自动配置-@Import（上）"></a>源码剖析-自动配置-@Import（上）</h2><p>上节讲解了@EnableAutoConfiguration注解中的@AutoConfigurationPackage注解【EnableAutoConfiguration第一个注解】</p><p>这节讲解@EnableAutoConfiguration注解中的另一个重要注解：</p><p><code>@Import(AutoConfigurationImportSelector.class)</code>【EnableAutoConfiguration第二个注解】</p><p><a href="SourceCode%5CAutoConfigure%5CEnableAutoConfiguration.java" title="EnableAutoConfiguration.java">EnableAutoConfiguration.java</a>  </p><p><code>AutoConfigurationImportSelector</code>类是springboot完成自动配置很关键的一个组件类；</p><p><code>AutoConfigurationImportSelector </code>可以帮助 Springboot 应用将所有符合条件的 <code>@Configuration</code>配置都加载到当前 SpringBoot 创建并使用的 IOC 容器( ApplicationContext )中。</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9ASpringBoot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/1653633240216.png" alt="1653633240216"></p><p><a href="SourceCode%5CAutoConfigure%5CAutoConfigurationImportSelector.java" title="AutoConfigurationImportSelector.java">AutoConfigurationImportSelector.java</a>  </p><p>通过类图和文件中都可以看到，它实现了很多的Aware接口，分别表示在某个时机会被回调。</p><p>通过回调接口会拿到spring的底层组件（四个spring底层组件）；</p><p>正好赋值给里面的四个成员变量；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ConfigurableListableBeanFactory beanFactory;<br><br><span class="hljs-keyword">private</span> Environment environment;<br><br><span class="hljs-keyword">private</span> ClassLoader beanClassLoader;<br><br><span class="hljs-keyword">private</span> ResourceLoader resourceLoader;<br></code></pre></td></tr></table></figure><p><strong>看图的最右边：</strong></p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9ASpringBoot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/1653633240216.png" alt="1653633240216"></p><p>还实现了<code>DeferredImpirtSelector</code>接口，这个接口又继承了<code>ImportSelector</code>接口；</p><p><strong>ImportSelector在spring中的作用是</strong>：导入外部配置的核心接口【很重要】；</p><p>DeferredImportSelector是ImportSelector拓展接口，是改变了一个触发时机；</p><p><strong>我们现在只需要知道一点</strong>：<code>AutoConfigurationImportSelector</code>类 继承了<code>DeferredImpirtSelector</code>接口；</p><p>调用的时候就会执行<code>DeferredImportSelectorGrouping </code>类中的<code>getImport</code>方法；</p><p><strong>getImports方法:</strong> 就是确定自动配置实现逻辑的入口方法；</p><p>从这个方法开始分析自动配置实现；</p><p>如何调用到这个方法的?；</p><p>打开这个类：<code>DeferredImportSelectorGrouping</code>【双shift】；</p><p>这个文件在jar包中，没有办法弄出来；</p><p>可以找到那个类，找到里面的方法：getImports()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Iterable&lt;Group.Entry&gt; getImports() &#123;<br><span class="hljs-keyword">for</span> (DeferredImportSelectorHolder deferredImport : <span class="hljs-built_in">this</span>.deferredImports) &#123;<br><span class="hljs-built_in">this</span>.group.process(deferredImport.getConfigurationClass().getMetadata(),<br>deferredImport.getImportSelector());<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.group.selectImports();<br>&#125;<br></code></pre></td></tr></table></figure><p>打个断点可以调试一下；</p><p>这个方法中看两点：</p><p>1）<strong>this.group.process</strong></p><p>this.group:点击进去-》到了DeferredImportSelectorGrouping的成员变量中；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DeferredImportSelector.Group group;<br></code></pre></td></tr></table></figure><p>点击Group-》是DeferredImportSelector.java的Group接口</p><p>说明：DeferredImportSelector.java中还有一个内部接口Group；</p><p><strong>process方法:</strong> 就是进行自动配置业务逻辑的方法；</p><p><strong>重点看下process()方法</strong></p><p>getImports()方法不仅调用了process()方法；</p><p>还调用的selectImports()；</p><p>接下来都来介绍一下；</p><p><strong>process()：</strong> 传入的参数有一个-deferredImport.getImportSelector &#x3D; AutoConfigurationImportSelector组件类；</p><p>自动配置的相关逻辑交给这个组件类来配置；</p><p>进入process();</p><p>找具体的实现，有两个实现，走的是AutoConfigurationImportSelector这个实现；</p><p>process()是在AutoConfigurationGroup类中；</p><p>AutoConfigurationGroup类是AutoConfigurationImportSelector组件中的类；</p><p>process()方法是在AutoConfigurationImportSelector类中；</p><p>所以也可以在EnableAutoConfiguration.java中直接点击@Import中的AutoConfigurationImportSelector组件，往下找找到process()方法；</p><p><a href="SourceCode%5CAutoConfigure%5CEnableAutoConfiguration.java" title="EnableAutoConfiguration.java">EnableAutoConfiguration.java</a>  </p><p><a href="SourceCode%5CAutoConfigure%5CAutoConfigurationImportSelector.java" title="AutoConfigurationImportSelector.java">AutoConfigurationImportSelector.java</a>  </p><p>可以了解下调用之前走的流程；</p><p>process()方法中调用了一个方法：<strong>getAutoConfigurationEntry()</strong></p><p>*@-得到spring.factories文件配置的所有自动配置类</p><p>getCandidateConfigurations();</p><p>进入查看;再进去；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">factoryTypeName =getSpringFactoriesLoaderFactoryClass()<br></code></pre></td></tr></table></figure><p>这个方法返回的是EnableAutoConfiguration.class</p><p>加载<code>spring.factories</code>文件；</p><p>可以搜索到多个spring.factories文件，都是要进行加载的；</p><p>随便打开一个；【我们早自动配置项目下的spring.factories文件】</p><p>数据是由key value的形式展示的；</p><p><a href="SourceCode%5CAutoConfigure%5Cspring.factories" title="spring.factories">spring.factories</a>  </p><p>找到：key值为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="hljs-string">\</span><br></code></pre></td></tr></table></figure><p>现在就是将它进行加载；</p><p>在启动过程过可以进行自动装配的类；</p><p>可以随便查看一个值：</p><p>例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\<br></code></pre></td></tr></table></figure><p>点击进去，可以看到有很多的方法；</p><p>方法上添加了@Bean注解；</p><p>会将该方法的返回值存入到容器中；</p><p><a href="SourceCode%5CAutoConfigure%5Camqp%5CRabbitAutoConfiguration.java" title="RabbitAutoConfiguration.java">RabbitAutoConfiguration.java</a>  </p><p>里面不仅仅有RabbitAutoConfiguration，还有很多的；</p><p><a href="SourceCode%5CAutoConfigure%5Cspring.factories" title="spring.factories">spring.factories</a>  </p><p><strong>是将所有的都进行自动配置吗？</strong>当然不是</p><p>将这些值返回了一个枚举类型；</p><p>调用方法结束后最终，返回的一个list集合【所有spring.factories文件中的对应key的值全部取出来】；-可以调试自己进行一下；</p><p>是将所有的都进行自动装配吗？当然不是；</p><p>*@接下来对list进行过滤，进行去重；</p><p>*@获取要移除的自动配置类；</p><p>*@检查要移除的自动配置类（查看是否是真正的自动配置类）；</p><p>*@移除自动配置类</p><hr><h2 id="源码剖析-自动配置-Import（下）"><a href="#源码剖析-自动配置-Import（下）" class="headerlink" title="源码剖析-自动配置-@Import（下）"></a>源码剖析-自动配置-@Import（下）</h2><p>在启动过程中会执行AutoConfigurationImportSelector中的process方法；</p><p>获取所有的spring.factories文件中key对应的value列表；</p><p>并不是要把每一个配置类进行自动装配；</p><p>*@-接下来对list进行过滤，进行去重；</p><p>*@-获取要移除的自动配置类；【@SpringBootApplication(exclude &#x3D; FreeMarkerAutoConfiguration.class)】</p><p>*@-检查要移除的自动配置类（查看是否是真正的自动配置类）；</p><p>*@-移除自动配置类</p><p>没有必要让所有的都自动配置的；</p><p>重点关注<code>filter</code>方法【起到非常关键的过滤】【都是getAutoConfigurationEntry方法内的逻辑】</p><p>在这个方法会调用<code>match</code>的方法:</p><p>spring.factories中配置类的上面都会有一个@Conditional开头的相关注解；</p><p><a href="SourceCode%5CAutoConfigure%5Camqp%5CRabbitAutoConfiguration.java" title="RabbitAutoConfiguration.java">RabbitAutoConfiguration.java</a>  </p><p><strong>这些注解(@Conditional开头的注解)起到了什么作用？</strong></p><p><code>@Conditional</code>是Spring4新提供的注解，它的作用是按照一定的条件进行判断，满足条件给容器注册bean。</p> <div class="note note-success">            <p>@ConditionalOnBean：仅仅在当前上下文中存在某个对象时，才会实例化一个Bean。<br>@ConditionalOnClass：某个class位于类路径上，才会实例化一个Bean。<br>@ConditionalOnExpression：当表达式为true的时候，才会实例化一个Bean。基于SpEL表达式的条件判断。<br>@ConditionalOnMissingBean：仅仅在当前上下文中不存在某个对象时，才会实例化一个Bean。<br>@ConditionalOnMissingClass：某个class类路径上不存在的时候，才会实例化一个Bean。<br>@ConditionalOnNotWebApplication：不是web应用，才会实例化一个Bean。<br>@ConditionalOnWebApplication：当项目是一个Web项目时进行实例化。<br>@ConditionalOnNotWebApplication：当项目不是一个Web项目时进行实例化。<br>@ConditionalOnProperty：当指定的属性有指定的值时进行实例化。<br>@ConditionalOnJava：当JVM版本为指定的版本范围时触发实例化。<br>@ConditionalOnResource：当类路径下有指定的资源时触发实例化。<br>@ConditionalOnJndi：在JNDI存在的条件下触发实例化。<br>@ConditionalOnSingleCandidate：当指定的Bean在容器中只有一个，或者有多个但是指定了首选的Bean时触发实例化。</p>          </div> <p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConditionalOnClass(&#123; RabbitTemplate.class, Channel.class &#125;)</span><br></code></pre></td></tr></table></figure><p>classpath下存在RabbitTemplate.class与Channel.class才会生效；</p><p><strong>什么情况下classpath下会存在RabbitTemplate.class与Channel.class？</strong></p><p>只有导入相关的依赖jar包classpath下才会有对应的class文件；</p><p>需要导入依赖：spring-boot-starter-web依赖；</p><p>classpath下才会存在RabbitTemplate.class与Channel.class文件；</p><p>RabbitAutoConfiguration自动配置类才会生效；</p><p>生效之后，标注了的@Bean的方法才会去执行；</p><p>从而产生对象存储到容器中；</p><p>*@-根据注解的条件会筛选些自动配置类的</p><p>自动配置类有多少个跟我们导入的依赖息息相关的；</p><p>*@-记录符合条件的配置类；</p><p>*@-返回我们需要自动配置的配置类列表+需要移除的自动配置类列表；</p><p><strong>这里process方法的第一步已经完成；</strong></p><p>*@-分别向两个集合中进行了存放；</p><p>process方法只是找到了哪些自动配置类需要生效了一些逻辑；</p><p><strong>自动配置逻辑的入口：</strong> 就是DeferredImportSelectorGrouping类；</p><p>这里面有getImports()方法；</p><p>我们刚才看到的是this.group.process方法【获取到了需要自动配置类的列表】</p><hr><p><strong>接下来看下this.group.selectImports()方法；</strong></p><p><a href="SourceCode%5CAutoConfigure%5CAutoConfigurationImportSelector.java" title="AutoConfigurationImportSelector.java">AutoConfigurationImportSelector.java</a>  </p><p>这个方法中还要进行一个过滤；</p><p>*@-移除到要排除的自动配置类；（在process方法中已经将需要移除的自动配置类进行了移除，这里为什么还要移除下？）</p><p>*@-对标注有@Order注解的自动配置类进行排序</p><p>最终返回自动配置工厂类的全路径；</p><p><strong>我们将最上面的进行一个总结：</strong></p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9ASpringBoot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/1653667583653.png" alt="1653667583653"></p><p><code>spring.factories</code>中会配置相关组件工厂类的全路径；</p><p>启动过程中会通过@EnableAutoConfiguration底层的@Import注解；</p><p>通过AutoConfigurationImportSelector类里面的核心组件类去收集配置文件的配置工厂类；</p><p>进行最终的一个过滤；</p><p>过滤后其实去这些实例化工厂;</p><p>调用里面带有@Bean注解的方法，创建bean对象并放入到ioc容器中；</p><p>目前自动配置类设计到的两个注解都已经介绍完了；</p><p><a href="SourceCode%5CAutoConfigure%5CEnableAutoConfiguration.java" title="EnableAutoConfiguration.java">EnableAutoConfiguration.java</a>  </p><hr><h2 id="源码剖析-自动配置-HttpEncodingAutoConfiguration"><a href="#源码剖析-自动配置-HttpEncodingAutoConfiguration" class="headerlink" title="源码剖析-自动配置-HttpEncodingAutoConfiguration"></a>源码剖析-自动配置-HttpEncodingAutoConfiguration</h2><p>springboot启动过程中；</p><p>获取加载所有META_info目录下的文件；</p><p>通过这些的加载，就会获取所有工厂类的全路径；</p><p>得到全路径后，会多这列路径进行过滤；</p><p>是根据@Conditional开头的注解进行过滤的；</p><p>获取到所有需要自动配置的全路径后；</p><p>spring会根据这些配置类创建各个的bean对象放入到IOC容器中；</p><p>这是自动配置的原理；</p><p>接下来根据HttpEncodingAutoConfiguration深刻的体会下自动配置的原理；</p><p>以前创建web项目的时候，需要配置一个前端过滤器及编码器；</p><p>web.xml文件；</p><p><img src="/2000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E6%A8%A1%E5%9D%97%E5%9B%9B-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%E5%8F%8ASpring%20Boot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9ASpringBoot%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/1653750201196.png" alt="1653750201196"></p><p>springboot项目中现在没有了web.xml文件，如果再次接受post请求的时候会不会报异常？</p><p>不会，原因：因为springboot针对CharacterEncodingFilter这个类是进行自动装配的；</p><p>这个对应的工厂类就是HttpEncodingAutoConfiguration类；</p><p>再次看下getAutoConfigurationEntry方法；</p><p>加载所有jar包下所有spring.factories文件；</p><p>可以看到包含HttpEncodingAutoConfiguration工厂配置类；</p><p>可以看下这个自动配置类代码；</p><p><a href="SourceCode%5CAutoConfigure%5Cservlet%5CHttpEncodingAutoConfiguration.java" title="HttpEncodingAutoConfiguration.java">HttpEncodingAutoConfiguration.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><br><span class="hljs-comment">// 启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；</span><br><span class="hljs-meta">@EnableConfigurationProperties(HttpProperties.class)</span><br><br><span class="hljs-comment">// Spring底层@Conditional注解，根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效。</span><br><span class="hljs-comment">// 判断当前应用是否是web应用，如果是，当前配置类生效</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><br><span class="hljs-comment">// 判断当前项目有没有这个CharacterEncodingFilter ： SpringMVC中进行乱码解决的过滤器</span><br><span class="hljs-meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span><br><br><span class="hljs-comment">// 判断配置文件中是否存在某个配置 spring.http.encoding.enabled 如果不存在，判断也是成立的</span><br><span class="hljs-comment">// matchIfMissing = true 表示即使我们配置文件中不配置spring.http.encoding.enabled=true，说明没有也是默认生效的</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpEncodingAutoConfiguration</span> &#123;<br></code></pre></td></tr></table></figure><p>@EnableConfigurationProperties注解要理解，之前讲过的；</p><p>需要这个注解@ConfigurationProperties注解才能生效；</p><p>点进HttpProperties.java：</p><p><a href="SourceCode%5CAutoConfigure%5Chttp%5CHttpProperties.java" title="HttpProperties.java">HttpProperties.java</a></p><p>可以看到里面有个内部类：Encoding类型；</p><p>可以直接使用类名.Encoding.XX赋值；</p><p>@ConditionalOnWebApplication注解：条件判断注解；</p><p>导入web场景的依赖启动器，springmbc依赖的jar包也被一并导入；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span>  <span class="hljs-comment">//给容器中添加一个组件，这个组件中的某些值需要从properties中获取</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span>  <span class="hljs-comment">//判断容器中没有这个组件</span><br><span class="hljs-keyword">public</span> CharacterEncodingFilter <span class="hljs-title function_">characterEncodingFilter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderedCharacterEncodingFilter</span>();<br>filter.setEncoding(<span class="hljs-built_in">this</span>.properties.getCharset().name());<br>filter.setForceRequestEncoding(<span class="hljs-built_in">this</span>.properties.shouldForce(Type.REQUEST));<br>filter.setForceResponseEncoding(<span class="hljs-built_in">this</span>.properties.shouldForce(Type.RESPONSE));<br><span class="hljs-keyword">return</span> filter;<br>&#125;<br></code></pre></td></tr></table></figure><p>@ConditionalOnMissingBean  &#x2F;&#x2F;判断容器中没有这个组件；</p><p>没有的才调用下面的方法；</p><p>要知道如何找到我们的编码格式；</p><p>也要知道文件中其他设置的默认值；</p><p>要知道如何修改请求的编码格式；</p><p>解决了繁琐的相关配置；</p><p>springboot启动过程中加载自动配置类；</p><p>通过这些注解的过滤；</p><p>然后spring调用工厂配置类中的bean注解的方法，将默认值赋值给对象并返回，注入到IOC容器中；</p><hr><h2 id="源码剖析-ComponentScan注解"><a href="#源码剖析-ComponentScan注解" class="headerlink" title="源码剖析-@ComponentScan注解"></a>源码剖析-@ComponentScan注解</h2><p>上面已经介绍了SpringBootApplication的@SpringBootConfiguration注解和@EnableAutoConfiguration注解；</p><p>接下来介绍SpringBootApplication组件的最后一个注解；</p><p><a href="SourceCode%5CAutoConfigure%5CSpringBootApplication.java" title="SpringBootApplication.java">SpringBootApplication.java</a>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//------------------------------------------------</span><br><span class="hljs-meta">@SpringBootConfiguration</span>  <span class="hljs-comment">// 标明该类为配置类</span><br><span class="hljs-meta">@EnableAutoConfiguration</span>  <span class="hljs-comment">// 启动自动配置功能</span><br><span class="hljs-meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="hljs-meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span> <span class="hljs-comment">//注解扫描</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;<br></code></pre></td></tr></table></figure><p>在学习spring的过程中接触过这个注解；</p><p>这个注解的所用：做注解扫描的；</p><p>让这些注解标注的类生成实例对象并注入到IOC容器中；</p><p>例如：@RestController</p><p>注解类生效的才可以注入到IOC容器中；</p><p>@RestController注解怎样才能让扫描，怎样才可以生效呢？</p><p>需要用到@ComponentScan注解；</p><p>需要给一个扫描路径的；</p><p>通过这个注解中的两个属性设置路径（注basePackages及value）;</p><p>SpringBootApplication上的注解中没有使用到这两个属性（注basePackages及value），那如何配置路径的呢？</p> <div class="note note-success">            <p>常用属性如下：<br>basePackages、value：指定扫描路径，如果为空则以@ComponentScan注解的类所在的包为基<br>本的扫描路径<br>basePackageClasses：指定具体扫描的类<br>includeFilters：指定满足Filter条件的类<br>excludeFilters：指定排除Filter条件的类</p>          </div> <p>当前@ComponentScan注解没有标注basePackages及value，所以扫描路径默认为@ComponentScan注解的类所在的包为基本的扫描路径（也就是标注了@SpringBootApplication注解的项目启动类所在的路径）</p><p>这个被标注的注解的类的注解所在的包，就是要扫描的包；（com.lagou）;</p><hr><p>注解不是标注上就生效；</p><p>注解也是要进行解析的；</p><p>注解是何时进行加载解析的？</p><p>其实就是启动类的run方法；后面讲；</p><hr><h2 id="源码剖析-SpringApplicatioin初始化过程"><a href="#源码剖析-SpringApplicatioin初始化过程" class="headerlink" title="源码剖析-SpringApplicatioin初始化过程"></a>源码剖析-SpringApplicatioin初始化过程</h2><p>注解是@Enable开头的注解，底层会使用@Import注解导入组件类；</p><p>获取所有的自动配置类全路径；</p><p>然后进行层层的筛选，得到最终要自动配置的自动配置工厂类的全路径；</p><p>工厂配置类是什么时候被执行的呢？</p><p>@Compo  是何时进行架子啊解析的呢？</p><p>接下来就是对启动类中的main方法中的run方法进行解析；</p><p>run方法中传入了两个参数（当前类的class,main方法传递的参数）；</p><p>进入run方法；</p><p>看到调用了重载的方法；</p><p><a href="SourceCode%5Cspringframework%5CSpringApplication.java" title="SpringApplication.java">SpringApplication.java</a></p><p>将传入的方法继续向下传递；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(Class&lt;?&gt;[] primarySources, String[] args)</span> &#123;<br><span class="hljs-comment">// 两件事：1.初始化SpringApplication  2.执行run方法</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(primarySources).run(args);<br>&#125;<br></code></pre></td></tr></table></figure><p>做两件事：先创建一个SpringApplication对象；</p><p>在执行run方法；</p><p>最后走到了有参构造方法；</p><p><a href="SourceCode%5Cspringframework%5CSpringApplication.java" title="SpringApplication.java">SpringApplication.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;<br><span class="hljs-comment">//设置资源加载器为null</span><br><span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<br><span class="hljs-comment">//断言加载资源类不能为null</span><br>Assert.notNull(primarySources, <span class="hljs-string">&quot;PrimarySources must not be null&quot;</span>);<br><span class="hljs-comment">//将primarySources数组转换为List，最后放到LinkedHashSet集合中</span><br><span class="hljs-built_in">this</span>.primarySources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));<br><br><span class="hljs-comment">//【1.1 推断应用类型，后面会根据类型初始化对应的环境。常用的一般都是servlet环境 】</span><br><span class="hljs-built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br><span class="hljs-comment">//【1.2 初始化classpath下 META-INF/spring.factories中已配置的ApplicationContextInitializer 】</span><br>setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));<br><span class="hljs-comment">//【1.3 初始化classpath下所有已配置的 ApplicationListener 】</span><br>setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));<br><span class="hljs-comment">//【1.4 根据调用栈，推断出 main 方法的类名 】</span><br><span class="hljs-built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();<br>&#125;<br></code></pre></td></tr></table></figure><p>*@-设置资源加载器不能为null；</p><p>断言如何使用呢？</p><p>WebApplication.java</p><p>*@-根据classpath下的class判断是什么环境；</p><p>七个初始化对象是如何拿到的:</p><p>getSpringFactoriesInstances(ApplicationContextInitializer.class)方法【很重要】</p><p>传入的参数要有个印象；</p><p>locdFactoryNames(type)；</p><p>factoryTypeName&#x3D;ApplicationContextInitializer的全路径；</p><p>上面我们也用到过这个方法，获取到的是EnableAutoConfiguration的全路径；</p><p>找到对应的key(ApplicationContextInitializer)(总共有七个value);</p><p>setInitializers():通过反射生成实例对象，并通过list进行返回；</p><p>七个初始化器的实例对象；</p><p>spring的事件监听器；</p><p>spring声明周期的监听；</p><p>获取核心启动类的类名；</p><p>SpringApplication构造方法就是对SpringApplication各个成员变量进行复制；</p><p>-》就是一个准备工作，就是对后续操作做准备；</p><p>总结：主要完成几步；</p><p>*@-推断应用类型，servlet</p><p>*@-设置初始化器，在spring容器刷新之前会被回调到；</p><p>*@-设置些监听器，会监听spring的生命周期；</p><p>*@-记录main方法的位置</p><p>这节学的不太好；</p><hr><h2 id="源码剖析-run方法执行流程介绍"><a href="#源码剖析-run方法执行流程介绍" class="headerlink" title="源码剖析-run方法执行流程介绍"></a>源码剖析-run方法执行流程介绍</h2><p>run方法是springboot启动中最重要的方法；</p><p>整体执行逻辑比价复杂；</p><p>在启动过程中的重要步骤进行介绍；</p><p>首先创建一个StopWatcher对象；记录程序运行时间；</p><p>ConfigurableApplicationContext容器的高级接口；</p><p>SpringApplication.java-步骤是在这个java文件中；</p><p>-将这个文件写进去</p><p>ConfigurableApplicationContext run方法；</p><p>下节对这个方法的步骤进行介绍【6个步骤】</p><hr><h2 id="源码剖析-run方法第一步：获取启动监听器"><a href="#源码剖析-run方法第一步：获取启动监听器" class="headerlink" title="源码剖析-run方法第一步：获取启动监听器"></a>源码剖析-run方法第一步：获取启动监听器</h2><p>对run方法的六大主要步骤进行介绍；</p><p>*@-获取并启动监听器</p><p>getRunListeners()</p><p>更贱一个对象并返回；</p><p>使用有残构造方法来完成；</p><p>当去获取监听去的时候调用的方法是：getSpringFactoriesInstances：</p><p>是根据指定的key来找value的；</p><p>SpringApplicationRunListener.class</p><p>上上节所讲到的实例化的监听器并不是这里的监听器；</p><p>在spring.factories这个对应的键值只有一个；</p><p>拿到这个监听器，获取到实例化的监听器对象并返回；</p><p>打到监听器对象并启动；</p><p>SpringApplciationRunnLIsteners负责在SpringBoot启动的不同阶段，广播出不同的消息，传递给ApplciationListener监听器实现类（很多的实现类）；</p><p>启动的监听器，完成事件的监听；</p><p>知道启动的监听器是哪个一个，起到的作用是什么？</p><hr><h2 id="源码剖析-run方法第二步：构建应用上下文对象"><a href="#源码剖析-run方法第二步：构建应用上下文对象" class="headerlink" title="源码剖析-run方法第二步：构建应用上下文对象"></a>源码剖析-run方法第二步：构建应用上下文对象</h2><p>上节介绍了第一步：获取并启动监听器；</p><p>知道启动的是哪个监听器；</p><p>这节讲解第二部：沟改造应用上下文环境；</p><p>什么是应用上下文环境？</p><p>指环境的集合，包含多部分的环境信息；</p><p>多部分的环境信息（配置文件信息）都进行一个加载；</p><p>去封装到Environment对象中；</p><p>在后续步骤中需要用到配置文件信息，直接拿到获取就好；</p><p>Environment对象是如何构造出来的？</p><p>主要做了三件事；-SpringApplciation.java-prepareEnvironment;</p><p>第三部中有一个很重要的监听器；-ConfigFileApplicaitonListener;</p><p>在执行springApplciation方法的时候当时就设置了很多的监听器；</p><p>就好汉了ConfigFileApplicationContext,这里直接获取到就好；</p><p>这个监听器的作用就是加载项目配置文件的监听器；</p><p>getOrCreateEnvironment() -创建并配置当前环境；</p><p>在执行springApplication构造方法中就对webApplciation进行了一个赋值-SERVLET；（推断应用类型）</p><p>run方法中会用到准备工作中的值；</p><p>根据应用类型构建不同的环境实例对象；</p><p>configureEnvironment方法；</p><p>多环境情况下；</p><p>开发、测试、生产有不用的配置文件；</p><p>applicaiton-dev.properties;</p><p>applciation-prod.properties;</p><p>在启动核心启动类的时候，需要配置一下；</p><p>在Program arguments：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">--spring.profiles.active=prod<br></code></pre></td></tr></table></figure><p>进行封装 new SimpleCommandLinePropertySource(args)</p><p>添加到sources中；</p><p>激活相应的配置文件；</p><p>activeProfiles&#x3D;prod;</p><p>这个ConfigFileApplicationListener这个问阿金很重要；</p><p>之前查看了是官方文档，加载配置文件的四个路径；</p><p>现在可以在源码中找到这个四个配置文件的目录；</p><p>想要看到效果，需要要在配置文件中配置属性及值；例如server.port&#x3D;8080;</p><p>在orginXX 7中就可以看到效果；</p><p>Spring的图标就是通过Banner来打印出来的；</p><hr><h2 id="源码剖析-run方法第三步：初始化应用上下文"><a href="#源码剖析-run方法第三步：初始化应用上下文" class="headerlink" title="源码剖析-run方法第三步：初始化应用上下文"></a>源码剖析-run方法第三步：初始化应用上下文</h2><p>当前范围的属性集合；</p><p>这是主要步骤的第三步；</p><p>ConfigurableApplicationContext是ApplicationContext接口的子接口；</p><p>在ApplicationContext基础撒花姑娘添加了配置上下文的工具；</p><p>ConfigurableApplicationContext是容器的高级接口；</p><p>看类图：</p><p>要知道ConfigurableApplciationContext、ApplicationContext、BeanFactory这三个接口中的关系；</p><p>AnnotationConfigServletWebServerApplicationContext类；</p><p>看类图：</p><p>有两点需要知道；</p><p>它有一个父类：GenericWebApplicationContext</p><p>在后续的介绍中会介绍到它；</p><p>它是ConfigurableWebServerApplicationContext的具体实现；</p><p>可以用这个接口类型来接收；</p><p>在创建应用上下文对象的同事也会将IOC容器给创建出来；</p><p>DefaultListableBeanFactory就是IOC容器；</p><p>getSpringFacotiesInstances()这个方法要牢记，前面已经出现很多次了，根据key加载spring.properties文件；</p><p>这节介绍了-初始化应用上下文对象；</p><p>要知道应用剩下文对象是如何构建出来的？也完成了IOC容器的创建；</p><p>最关键的createApplicationContext()方法的调用；</p><hr><p> 源码剖析-run方法-第四步：刷新上下文的准备阶段 </p>]]></content>
    
    
    <categories>
      
      <category>Java工程师高薪训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一阶段-开源框架源码剖析</tag>
      
      <tag>模块四-约定优于配置设计范式及Spring Boot源码剖析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8s容器编排系统</title>
    <link href="/1022/03/31/K8s%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/"/>
    <url>/1022/03/31/K8s%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="Kubernetes快速实战"><a href="#Kubernetes快速实战" class="headerlink" title="Kubernetes快速实战"></a>Kubernetes快速实战</h2><h3 id="K8S介绍"><a href="#K8S介绍" class="headerlink" title="K8S介绍"></a>K8S介绍</h3><p>Kubernetes &#x3D;&#x3D; k8s</p><p><strong>课程的技术架构图？？</strong></p><p>开发人员在本地编写代码</p><p>开发人员将代码提交到GitLab上</p><p>Jenkins会根据自制的流水线技术自动的到gitlab上去拉取整个项目代码</p><p>Jenkins选择交给Docker容器还是K8s集群完成项目的测试、编译、部署等一系列动作</p><p>最终都是有nginx完成反向代理及负载均衡</p><p>用户就可以通过浏览器端去访问到整个产品</p><hr><p>建议在学习k8s之前将内存升级到16+，否则可能反应慢或死机的情况</p><p>这里准备了五台虚拟机</p><p>k8s集群的主节点（一台）</p><p>k8s集群的工作节点节点（三台）</p><p>docker-harbor的一个私服（一台）</p><hr><p>k8s是有谷歌公司出品的，因国内法规及政策的影响，无法下载k8s相关镜像及组件，课程中也会提供这些下载</p><hr><p>将精力主要放在快速实战部分，核心原理及运维相关的了解即可</p><hr><h3 id="k8s与docker-swarm"><a href="#k8s与docker-swarm" class="headerlink" title="k8s与docker swarm"></a>k8s与docker swarm</h3><p>docker是属于 Paas ：平台服务</p><blockquote><p>云服务基础概念</p></blockquote><p>laaS  基础设施服务</p><p>Paas 平台服务</p><p>SaaS 软件服务</p><hr><p>建议先学习下Docker Swarm再学习K8s</p><p>Docker Swarm不要的地方，k8s会完善它</p><p>Docker Swarm是基础</p><p>k8s是工作中要使用的</p><p>客户群体就有1000人不建议使用k8s,使用Docker Swarm是好的选择</p><p>docker三剑客是什么：</p><p>Docker Swarm出现什么问题，可能很少能解决方案</p><p>Docker Swarm英文文档较多</p><p>k8s中文文档有很多</p><hr><p>Docker Swarm更适合做入门的集群操作</p><p>缺点：跨平台支持效果差</p><p>不提供存储选项</p><p>监控信息不足</p><hr><p>Docker Swarm与k8s都里面没有携带一款内置的监控软件或容器</p><p>产品出现问题已短信等的方式通知运维人员</p><hr><p>几十台集群 建议使用Docker Swarm</p><p>几百台几千台上万台 建议使用K8s</p><hr><h3 id="k8s集群快速部署"><a href="#k8s集群快速部署" class="headerlink" title="k8s集群快速部署"></a>k8s集群快速部署</h3>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高薪-第八阶段</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第九阶段-SpringBoot基本应用</title>
    <link href="/1000/09/01/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20SpringBoot&amp;SpringCloud@Docker/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5-SpringBoot%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/"/>
    <url>/1000/09/01/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20SpringBoot&amp;SpringCloud@Docker/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5-SpringBoot%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="任务一：-SpringBoot基本应用"><a href="#任务一：-SpringBoot基本应用" class="headerlink" title="任务一： SpringBoot基本应用"></a>任务一： SpringBoot基本应用</h2><h3 id="SpringBoot课程内容介绍"><a href="#SpringBoot课程内容介绍" class="headerlink" title="SpringBoot课程内容介绍"></a>SpringBoot课程内容介绍</h3><p>微服务架构是使用比较多的</p><p>springboot是微服务的基石</p><p>需要了解springboot约定优于配置的软件范式</p><p>大大简化了对配置文件与依赖管理的开发</p><p>了解springboot的相关概念</p><hr><p>springboot减少了对配置的编写，springboot是如何做的呢</p><p>springboot整合mybatis</p><p>springboot整合redis</p><p>springboot整合Thymeleaf</p><p>springboot整合ssm</p><p>springboot项目的部署</p><hr><h3 id="约定优于配置"><a href="#约定优于配置" class="headerlink" title="约定优于配置"></a>约定优于配置</h3><p>springboot就是实现了约定优于配置这样的框架</p><p>springBoot是所有基于spring开发项目的起点；</p><p>可以尽可能快的跑起来；</p><p>尽可能的减少配置文件；</p><p>因为springboot的约定优于配置；</p><p>约定优于配置：就是一个约定，就像我们生活中的民俗一样，像我们开车一样（靠右行驶） 是一下好姑娘软件设计范式；</p><p>系统、类库都有默认的配置</p><p>springboot提供了大量了默认配置；</p><p>想要有特殊的配置，还是需要我们去修改配置文件的；</p><hr><h3 id="Spring-Boot核心概念"><a href="#Spring-Boot核心概念" class="headerlink" title="Spring Boot核心概念"></a>Spring Boot核心概念</h3><p><strong>起步依赖</strong>与<strong>自动配置</strong>（springboot的<strong>作用</strong>，<strong>核心概念</strong>）</p><p>springboot简化了原有的开发方式</p><p>原有的开发方式存在弊端</p><p>spring的优缺点：</p><p>优点：ioc(依赖注入)：实现组件间的解耦</p><p>aop(面向切面编程)：实现组件的增强处理引入了组件</p><p>缺点：代码是轻量级的，</p><p>但是配置文件特别多</p><p>虽然spring2.5开始引入了组件扫描（大大简化了配置文件），但是配置文件还是很多</p><p>项目的依赖管理也是一件耗时耗力的事情</p><p>SSM整合需要很多的jar包：spring\springMVC\mybatis\spring-mybatis整合包</p><p>特别多的jar包，可能还存在版本冲突问题</p><p>springboot就解决了这些问题</p><p>springboot有起步依赖：将某种功能相同或相似的依赖打包在一起（我们不需要处理版本冲突问题）</p><p>将这些jar包打包在一起作为一个独立的项目，使用的时候直接引入即可</p><p>springboot有自动配置：会自动的将一些配置类bean注册进ioc容器，直接引入jar包就会自动将配置类注册到ioc容器中；</p><hr><h3 id="Spring-Boot入门案例"><a href="#Spring-Boot入门案例" class="headerlink" title="Spring Boot入门案例"></a>Spring Boot入门案例</h3><p>需求：调用controller层的一个方法，并将返回值返回到页面中</p><p>使用idea create project</p><p>创建一个空的一个项目</p><p>创建一个模块，选择maven</p><p>对模块编写一个名称；</p><p>接触一个新的技术的时候，最好的方法是进入它的官网进行学习；</p><p>spring官网：<a href="https://spring.io/">https://spring.io/</a></p><p><img src="/1000/09/01/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20SpringBoot&SpringCloud@Docker/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5-SpringBoot%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/1652375947464.png" alt="1652375947464"></p><p>我们不快速开始，使用正式的版本进行学习，其他的是快照版本</p><p>文档中会告诉如何开始及使用springboot</p><p><img src="/1000/09/01/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20SpringBoot&SpringCloud@Docker/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5-SpringBoot%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/1652376036674.png" alt="1652376036674"></p><p><img src="/1000/09/01/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20SpringBoot&SpringCloud@Docker/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5-SpringBoot%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/1652376232033.png" alt="1652376232033"></p><p>开发你的第一个springboot项目</p><p><img src="/1000/09/01/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20SpringBoot&SpringCloud@Docker/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5-SpringBoot%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/1652376294894.png" alt="1652376294894"></p><p>开发最大的不同，使用的依赖不一样</p><p>引入父依赖；</p><p><img src="/1000/09/01/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20SpringBoot&SpringCloud@Docker/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5-SpringBoot%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/1652376659167.png" alt="1652376659167"></p><p>所有的springboot项目都会直接或者间接的继承 spring-boot-starter-parent </p><p>好处：（四个好处）</p><p>会指定项目的编码格式为utf-8(项目的版本就统一了)</p><p>指定了jdk的版本：1.8（可以又该）</p><p>对项目依赖的版本进行管理，当前项目再引入其它常用的依赖时就不需要再指定版本号了（避免了版本冲突问题）</p><p>默认的资源过滤和插件管理（这个后面再说）</p><hr><p>引入web模块j及springmvc相关的依赖</p><p>看到starter就不是一个依赖，引入的是一个依赖集合（一系列依赖）</p><p><img src="/1000/09/01/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20SpringBoot&SpringCloud@Docker/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5-SpringBoot%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/1652376697355.png" alt="1652376697355"></p><hr><p>还需要打包能够运行</p><p>可以将我们的project打包为可以运行的jar</p><p><img src="/1000/09/01/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83/%E6%A8%A1%E5%9D%97%E4%B8%80%20SpringBoot&SpringCloud@Docker/%E7%AC%AC%E4%B9%9D%E9%98%B6%E6%AE%B5-SpringBoot%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/1652376780001.png" alt="1652376780001"></p><hr><p>@RestController 定义返回的都是json串</p><p>jar包有启动的入口</p><p>通常会放在二级包的下面</p><p>Java是一级包</p><p>com.lagou是二级包</p><p>因为springboot项目在做包扫描的时候，会扫描启动类所在包及其子包的所有内容</p><p>表示当前类为springbooot项目的启动类</p><p>@SpringBootApplication</p><p>两个参数：（当前类的字节码文件，main函数的方法参数）样板代码，都一样</p><hr><p>还没有做配置：包扫描</p><p>springboot会自动配置</p><p>也没有定义容器</p><p>运行main函数就会将当前项目打包</p><p>分析日志：</p><p>项目启动时tomcat显示初始化（包含端口号）</p><p>tomcat服务启动，与tomcat服务器已经启动；</p><p>直接根据端口号及映射路径访问即可</p><hr><h3 id="快速构建SpringBoot项目"><a href="#快速构建SpringBoot项目" class="headerlink" title="快速构建SpringBoot项目"></a>快速构建SpringBoot项目</h3><p>这次学习如何快速的构建springboot项目；</p><p>springboot自带的快速构建的方式；</p><p>前提：电脑必须联网</p><p>new Model )&gt;搜sring initializr</p><p>使用JDK11</p><p>选择初始化服务器的url:</p><p>如果使用快速构建springboot项目的方式，必须联网</p><p>构建的方式底层：开发工具指定个项参数后，有spring提供的url所对应的服务器自动生成；idea将服务器生成的springboot项目下载到本地空间中；</p><p>参数提交到指定的url中，服务器会自动生成springboot项目，idea下载生成的springboot项目；</p><p>packaging:jar war都是可以的（这里我们先使用jar吧）</p><p>项目会自动生成启动类；所以要自动哪个包；</p><p>需要选择要引入的依赖；</p><p>如果还是想要通过浏览器访问的时候，还是需要引入web包；</p><p>web-&gt;spring Web（下面会有这个包的介绍）</p><p>finned，在服务端会生成这个项目，idea会将这个springboot项目下载下来；</p><p>多了一些点mvn文件,我们可以将这些文件给删除掉【五个】；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(.mvn|.gitignore|.HELP.md|mvnw|mvnw.cmd)<br></code></pre></td></tr></table></figure><hr><p>知道启动类的位置；</p><p>static：下面我们经常放置一些静态资源文件（例如：css,js）</p><p>templates:我们经常放置一些网页或者网页模板</p><p>application.properties：springboot的配置文件</p><p>配置文件可以是properties结尾，也可以是其他格式的结尾；</p><p>springboot已经帮助我们自动配置了；</p><p>如果想要修改端口号；需要再配置文件中修改；</p><p>server.port&#x3D;8888</p><p>会有提示的；</p><p>启动的是项目编译的路径；</p><hr><h3 id="Spring-Boot单元测试"><a href="#Spring-Boot单元测试" class="headerlink" title="Spring Boot单元测试"></a>Spring Boot单元测试</h3><p> 每次完成一个功能，都要完成自测（自测就是单元测试） 【重要】</p><p>springboot会自动给我们创建一个测试类</p><p>首先，我们需要引入测试的依赖：spring-boot-starter-test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>&lt;scope&gt;test&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><code>@SpringBootTest </code></p><p>标记为当前类为springBoot测试类，加载项目的applicationContext上下文环境；</p><p>同时还使用了一个@RunWith()注解</p><p><code>@RunWith()</code>：表示一个启动器（运行器）</p><p>处于什么的运行环境，取决于参数</p><p>@RunWith(JUnit4.class) 使用JUnit4的运行环境；</p><p>@RunWith(SpringJUnit4ClassRunner.class) 使用的是spring运行环境；</p><p>我们的项目是springboot项目,所以应该使用springboot的运行环境；</p><p><code>@RunWith(SpringRunner.class) </code>使用springboot的运行环境</p><p>测试controller的方法，需要将controller引入进来；（@Autowired）</p><p>@SpringBootTest会扫描，加载项目的applicationContext上下文环境</p><hr><p>总结：完成单元测试，需要引入依赖，使用@SpringBootTest（加载项目的applicationContext上下文环境）@RunWith(SpringRunner.class) 指明使用springboot的运行环境</p><hr><h3 id="SpringBoot项目热部署"><a href="#SpringBoot项目热部署" class="headerlink" title="SpringBoot项目热部署"></a>SpringBoot项目热部署</h3><p> springboot对热部署的支持</p><p>项目上线之后， 发现有bug;</p><p>传统的方式：修完bug,需要重启，这对用户的体验非常不好；</p><p>需要发公告，某某日要发布；到时间重启项目；</p><p>如果要对项目进行一个微调，感觉不太友好；</p><p>这里可以使用热部署，在不重启服务的时候就可以完成项目的重新部署；</p><p>在修改完代码之后，不需要重启我们的容器，就可以实现更新；</p><p>一个方法，返回的是“hello spring boot”;</p><p>springboot是支持特部署的；</p><p>1）添加springboot的特部署依赖启动器；（引入依赖）</p><p>2）开启idea的自动编译；【settings-&gt;bulid-&gt;compiler-&gt;Build project automatically(勾选)（允许项目的自动编译）】</p><p>3）开启idea的在运行中自动编译功能；【ctrl+shift+alt+&#x2F;-&gt;registry-&gt;compiler.automake.allow.when.app.running(当程序处于运行状态的时候允许自动编译)（勾选）】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 引入热部署依赖 --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>启动之后对接口中的文字进行修改；</p><p>如何看是否重新编译了呢？会打印重新编译的日志</p><p>initializing …. （正在初始话。。。）</p><p>如果出现（completed initialization in 3 ms）后则重新编译完成；</p><p>是不是我们发布到服务器上，修改代码后也会自动编译呢，不用重新重启项目；</p><hr><h3 id="properties全局配置文件（上）"><a href="#properties全局配置文件（上）" class="headerlink" title="properties全局配置文件（上）"></a>properties全局配置文件（上）</h3><p>我们会使用三种结尾格式的配置文件（properties,yaml,yml）；</p><p>yml是yaml的简写；</p><p>如何知道是支持这三种格式呢？如何知道名字要是application呢？</p><p>在父工程中查看，点开</p><p>实现start-partent的好处：</p><p>1）约定jdk的版本为1.8；</p><p>2）项目的指定的编码格式为UTF-8；</p><p>3）引入其它的依赖不用再指定版本号；</p><p>spring-boot-dependencies已经定义好了很多组件的版本号</p><p>这个文件特别的大，这些版本号都是spring官方经过兼容性测试的</p><p>spring-boot-starter-parent中定义了yml、yaml、properties</p><p>配置文件：需要配置属性和属性值</p><p>在spring中可以定义的内容，在springboot的配置文件中都是可以定义的；</p><p>案例：定义数据库的连接信息</p><p>spring定义登录一个模板类“：JdbcTemplate</p><p>连接数据库需要需要到数据库的驱动-》需要引入驱动包</p><p>mvnrepository.com中输入：mysql</p><p>MySQL connector&#x2F;J(选择这个)（6.0.6）这个版本使用人数较多；</p><p>驱动包，可以使用原始的jdbc,太原始了，这里使用jdbcTemplate;</p><p>所以还需要引入：spring-boot-starter-jdbc（跟其他包很类似，直接将最后一位改为jdbcj就好了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.datasoruce.driver-class-name=com.mysql.cj.jdbc.Driver<br>spring.datasoruce.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/lagou</span><br>spring.datasoruce.username=root<br>spring.datasoruce.password=wu7787879  <br></code></pre></td></tr></table></figure><p>springboot 的启动一个核心功能，就是帮我们注入；</p><p>只需要对应的jar包引入进来，并定义属性与属性值会自动帮我们在容器中注入进（jdbcTemplate）来；</p><p>验证是否配置jdbcTemplate成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowored</span><br><span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><span class="hljs-meta">@RequestMapping(&quot;/jdbc&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">jdbc</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-keyword">return</span> jdbcTemplate.toString();<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="properties全局配置文件（下）"><a href="#properties全局配置文件（下）" class="headerlink" title="properties全局配置文件（下）"></a>properties全局配置文件（下）</h3><p>这里尝试自定义属性并注入到person实体类中；</p><p>首先要有一个Person类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123;<br><span class="hljs-keyword">private</span> String type;<br><span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id; <span class="hljs-comment">//id</span><br><span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//名称</span><br><span class="hljs-keyword">private</span> List hobby; <span class="hljs-comment">//爱好</span><br><span class="hljs-keyword">private</span> String[] family; <span class="hljs-comment">//家庭成员</span><br><span class="hljs-keyword">private</span> Map map;<br><span class="hljs-keyword">private</span> Pet pet; <span class="hljs-comment">//宠物</span><br>&#125;<br></code></pre></td></tr></table></figure><p>生成getset方法、toString();</p><p>效果：使用测试类，打印person对象</p><p>需要将Person交给容器管理：使用@Component注解</p><p>@Component：将该类交给容器管理；可以被容器扫描到；</p><p>在配置文件中自定义配置信息注入到Person对象中；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">#自定义配置信息<br>person.id=<span class="hljs-number">1</span><br>person.name=王二麻子<br>person.hobby=read,write<br>person.family=father,mather<br>person.map.key1=value1<br>person.map.key2=value2<br>person.pet.type=dog<br>person.pet.name=哈士奇<br></code></pre></td></tr></table></figure><p>list使用逗号分隔就好了（private List hobby; &#x2F;&#x2F;爱好）</p><p>数组也使用逗号分隔就好了（private String[] family; &#x2F;&#x2F;家庭成员）</p><p>map需要使用key&#x3D;value的形式（private Map map;）</p><hr><p>@ConfigurationProperties(prefix&#x3D;”person”):将配置文件中所有以person开头的信息注入到下面的类中；</p><p>前提（两个）：</p><p>1）必须保证配置文件中person.xx与当前Person类的<strong>属性名一致</strong>；</p><p>2）使用的是设值注入（要注入的属性需要有set方法）；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix =&quot;person&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id; <span class="hljs-comment">//id</span><br><span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//名称</span><br><span class="hljs-keyword">private</span> List hobby; <span class="hljs-comment">//爱好</span><br><span class="hljs-keyword">private</span> String[] family; <span class="hljs-comment">//家庭成员</span><br><span class="hljs-keyword">private</span> Map map;<br><span class="hljs-keyword">private</span> Pet pet; <span class="hljs-comment">//宠物</span><br>&#125;<br></code></pre></td></tr></table></figure><p>测试是否Person类的属性值被注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span> <span class="hljs-comment">// 测试启动器，并加载Spring Boot测试注解</span><br><span class="hljs-meta">@SpringBootTest</span> <span class="hljs-comment">// 标记为Spring Boot单元测试类，并加载项目的ApplicationContext上下文环境</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootDemoApplicationTests</span> &#123;<br><span class="hljs-comment">// 配置测试</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> Person person;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">configurationTest</span><span class="hljs-params">()</span> &#123;<br>System.out.println(person);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以在controller层进行测试；</p><p>如果通过浏览器访问出现中文乱码的时候(四个设置)：</p><p>settings-&gt;editor-&gt;file encodings(Global Encoding(全局)、Project encoding（项目）、properties Files、Transparent native-to-ascii conversior)</p><p>如果还不能解决的话,将下面配置信息粘贴到配置文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">#解决中文乱码<br>server.tomcat.uri-encoding=UTF-<span class="hljs-number">8</span><br>spring.http.encoding.force=<span class="hljs-literal">true</span><br>spring.http.encoding.charset=UTF-<span class="hljs-number">8</span><br>spring.http.encoding.enabled=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="yaml全局配置文件"><a href="#yaml全局配置文件" class="headerlink" title="yaml全局配置文件"></a>yaml全局配置文件</h3><p>配置文件可以以yaml结尾；</p><p>yaml的简化格式是yml;</p><p>yaml是一种json文件格式；</p><p>yaml是以数据为核心的，说明更加简洁；</p><p>key:空格value的形式；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">server<br>  port= <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>server中的port属性，点击配置文件中的port属性，可以定位到这个类的setPort方法</p><p>![1652517991073](..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;我的博客&#x2F;test&#x2F;source&#x2F;_posts&#x2F;Java就业训练营&#x2F;第九阶段 微服务技术核心&#x2F;模块一 SpringBoot&amp;SpringCloud@Docker&#x2F;1652517991073.png)</p><p>使用properties，看层级关系是不明确的</p><p>使用yaml或yml,看层级关系是很明确的；</p><p>peoperties、yaml、yml是可以共存的；</p><p>修改完配置文件后需要重启；</p><p>springboot的三钟配置文件，为什么文件可以共存：</p><p>starter-parent 中定义了加载这三种配置文件；</p><p>spring-boot-starter-parent（点击不进去不知道是什么原因）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">#对实体类对象Person进行属性配置<br>person:<br>id: <span class="hljs-number">1</span><br>name: 王二麻子<br>family:<br>- 妻<br>- 妾<br>hobby:<br>- play<br>- read<br>- sleep<br>map:<br>k1: value1<br>k2: value2<br>pet:<br>type: 狗<br>name: 哈士奇<br></code></pre></td></tr></table></figure><p>list使用缩进法（建议使用）（private List hobby; &#x2F;&#x2F;爱好）</p><p>当然也可以使用下面的方式;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">person:<br>hobby: [play,read,sleep]<br></code></pre></td></tr></table></figure><p>数组也使用缩进法（建议使用）（private String[] family; &#x2F;&#x2F;家庭成员）</p><p>map需要使用key: value的形式（private Map map;）</p><p>springboot可以存在0-N个配置文件，但是名称都是application，后缀名为properties、yaml、yml,但是存在优先级的关系；</p><p>使用yaml与yml都可以</p><hr><h3 id="配置文件属性值的注入"><a href="#配置文件属性值的注入" class="headerlink" title="配置文件属性值的注入"></a>配置文件属性值的注入</h3><p>使用<code>@ConfigurationProperties</code>注解【加载类上的注解】的情况不是很多，因为要么来源于关系型数据库，要么来源于非关系型数据库，要么来源于缓存，很少通过属性直接注入；</p><p><code>@Value</code>的方式更加实用;</p><p>这两种方式都需要掌握；</p><p>使用Student类来学习；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-meta">@Value(&quot;$&#123;person.id&#125;&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//名称</span><br><span class="hljs-comment">//省略toString</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而<code>@Value</code>注解对于包含Map集合、对象以及YAML文件格式的行内式写法的配置文件的属性注入都不支持，如果赋值会出现错误</p><p><code>@Value</code>不支持list、数组、map、对象的注入，如果强行注入会报异常</p><hr><h3 id="配置文件优先级问题"><a href="#配置文件优先级问题" class="headerlink" title="配置文件优先级问题"></a>配置文件优先级问题</h3><p>配置文件有三种格式；</p><p>可以使用tomcat版本号来测试；</p><p>优先级properties&gt;yml；</p><p>yml的文件与properties文件共存的时候，properties优先级更高</p><p>原因：starter-parent定义了配置文件的加载顺序；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;includes&gt;<br>&lt;include&gt;**/application*.yml&lt;/include&gt;<br>&lt;include&gt;**/application*.yaml&lt;/include&gt;<br>&lt;include&gt;**/application*.properties&lt;/include&gt;<br>&lt;/includes&gt;<br></code></pre></td></tr></table></figure><p>properties配置文件最后加载，如果有重复的，会替换前面配置文件中的值；</p><p>谁在最后优先级最高；</p><p>在开发高使用一种配置文件就好（yml,层次性好，易于阅读）；</p><hr><h3 id="加载读取自定义配置"><a href="#加载读取自定义配置" class="headerlink" title="加载读取自定义配置"></a>加载读取自定义配置</h3><p>这种使用自定义的配置文件的情况很少；官方定义的配置文件已经够用了</p><p>配置文件中已经定义好了配置文件的名称及后缀；</p><p>如果我们自己定义配置文件，是不会别加载的（也没有配置文件小标志）；</p><p>我们可以使用<code>@PropertySource(&quot;&quot;)</code>注解将外部自定义的配置文件加载到容器中；</p><p><code>@PropertySource(&quot;classpath:my.properties&quot;)</code></p><hr><h3 id="自定义配置类"><a href="#自定义配置类" class="headerlink" title="自定义配置类"></a>自定义配置类</h3><p>编写自定义的配置类；</p><p>使用注解<code>@Configuration</code>；【加载类上的注解】</p><p>官方推荐使用配置类的方式向容器中添加和配置组件</p><p><strong>好处：</strong>指名当前的类使用配置类，springboot会自动扫描该类(其实扫描是方法)并将<code>@Bean</code>注解的方法的返回值注入到容器中</p><p>一个配置类中可以定义多个配置信息；【重要】</p><p>使用时非常的方便的；</p><p><code>@Bean </code> 注入的名称就是方法的名称，注入的类型就是返回值的类型</p><p>注入的名称是可以修改的(其实就是注入到上下文中了【ApplicationContext(spring上下文环境)】)</p><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">iocTest</span><span class="hljs-params">()</span> &#123;<br>System.out.println(applicationContext.containsBean(<span class="hljs-string">&quot;myService&quot;</span>));  <span class="hljs-comment">// true</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="SpringBoot原理剖析及高级实战"><a href="#SpringBoot原理剖析及高级实战" class="headerlink" title="SpringBoot原理剖析及高级实战"></a>SpringBoot原理剖析及高级实战</h2><h3 id="源码剖析-依赖管理-spring-boot-starter-parent"><a href="#源码剖析-依赖管理-spring-boot-starter-parent" class="headerlink" title="源码剖析-依赖管理-spring-boot-starter-parent"></a>源码剖析-依赖管理-spring-boot-starter-parent</h3><p>这节讲解springboot如何实现依赖管理？</p><p>传统的spring服务，需要导入大量的jar包</p><p>使用springboot非常的方便；</p><p>为生命导入依赖的时候不需要导入版本？</p><p>引入父依赖后再引入依赖不需要再引入版本；</p><p>starter-partends-&gt;dependencies</p><p><code>spring-boot-dependencies</code>中定义了大量的配置文件（版本信息）(依赖版本)</p><p>这些依赖再引入的时候不需要再指定版本号</p><p>代码非常多，有三千多行；</p><p>这些版本都是springboot官方经过版本冲突测试的；</p><p><code>spring-boot-starter-parent</code>中指定了项目的编码格式；</p><p>如果我们键项目的时候选中了JDK11则，使用新的版本；【有待确认】</p><p><code>spring-boot-starter-parent</code>中也定义了资源路径</p><p>是否过滤、资源目录、资源名称</p><p>如果springboot引入了，我们也引入了，以我们引入的为准；</p><p>2）spring-boot-starter-parent父依赖启动器的主要作用是进行版本统一管理，那么项目运行依赖的JAR包是从何而来的？</p><p>只有jar中带有stater，就不再是一个依赖，而是一个依赖集合</p><p>例如：<code>spring-boot-starter-web</code></p><p>我们根据<code>spring-boot-starter-web</code>进行分析；</p><p>里面有<code>spring-boot-starter-json</code></p><p><code>spring-boot-starter-json</code>中的三个包一定会支持</p><p><code>jackson-databind</code></p><p><code>jackson-datatype-jdk8</code></p><p><code>jackson-datatype-jsr310</code></p><p><code>spring-boot-starter-json</code>中又依赖了spring-web【需要验证】</p><p>只要引入的<code>spring-boot-starter-web</code>包，跟web相关的久不需要再依赖了；</p><p>starter是一堆依赖，不只是一个依赖</p><p>3）有哪些starter我们可以选择呢？</p><p>可以在spring的官网中进行查找；</p><p>【更加常见的方法】也可以在github中搜索<code>spring-boot</code>进行查找（选中里面的spring-boot-project-》spring-boot-starters）【需要验证】</p><p>这就是我们项目中可以使用的所有的starters；</p><p>![1652596049573](..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;我的博客&#x2F;test&#x2F;source&#x2F;_posts&#x2F;Java就业训练营&#x2F;第九阶段 微服务技术核心&#x2F;模块一 SpringBoot&amp;SpringCloud@Docker&#x2F;1652596049573.png)</p><p>根据Github-url查看starters：<a href="https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-starters">https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-starters</a></p><p>第三种方法：在mvnrepository.com中搜索  starter</p><p><a href="https://mvnrepository.com/search?q=starter">https://mvnrepository.com/search?q=starter</a></p><hr><h3 id="源码剖析-自动配置-SpringBootConfiguration"><a href="#源码剖析-自动配置-SpringBootConfiguration" class="headerlink" title="源码剖析-自动配置-SpringBootConfiguration"></a>源码剖析-自动配置-SpringBootConfiguration</h3><p>这节讲解springboot如何实现配置？</p><p>需要知道springboot程序开始的入口；</p><p><code>@SpringBootApplication</code>指明springboot的启动类</p><p>该类中还含有大量的注解</p><p><code>@Target(ElementType.TYPE)</code>作用：指明当前注解的作用范围，Type标识可以描述类、接口、注解、枚举类型等 </p><p><code>@Retention(RetentionPolicy.RUNTIOME)</code>作用：注解的声明周期，Runntime标识运行时</p><p><code>Documentc</code>作用：标识可以记录到java doc文档中</p><p><code>@Inherited</code>作用：标识可以被子类继承</p><p>上面四个描述的是元数据信息，没有太核心的作用；</p><p><code>@SpringBootConfiguration</code>作用：标识该类是一个配置类</p><p><code>@EnableAutoConfiguration</code>作用：启动自动配置功能;</p><p><code>@ComponentScan</code>启动组件扫描功能；</p><p>下面三个是核心注解，需要重点讲解；</p><hr><h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><p>内部使用了一个<code>@Configuration</code>注解</p><p>指明是一个配置类，进行了一个重新命名，可读型高一点了；因为是一个springboot的项目中；</p><p>对组件的扫描，那还需要<code>@ComponentScan</code>干嘛</p><hr><h3 id="源码剖析-自动配置-AutoConfigurationPackage"><a href="#源码剖析-自动配置-AutoConfigurationPackage" class="headerlink" title="源码剖析-自动配置-AutoConfigurationPackage"></a>源码剖析-自动配置-AutoConfigurationPackage</h3><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><p>内部含有两个核心注解：</p><p><code>@AutoConfigurationPackage</code>注解</p><p><code>Import(AutoConfigurationImportSelector.class)</code>注解</p><h5 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h5><p>自动配置包，可以进入里面查看</p><p><code>@Import(AutoConfigurationPackages.Registar.class)</code>作用：经常用于spring底层，给容器中导入某一组件</p><p>子类是：Registar</p><p>可以 进入 这个类中查看：</p><p>Registar是一个静态类，所以可以点的形式；</p><p>Registar中有两个方法：</p><p><code>registerBeanDefinitions</code>【重点关注】【在项目启动的时候会调用这个类】</p><p><code>determineImport</code></p><hr><p><code>registerBeanDefinitions</code>参数：</p><p>注解的元数据：AnnotationMetadata</p><p>引入了基础的包；</p><p>主要是将启动类的当前类所在的包及其子包；中的所有组件；扫描到了容器中；</p><p>可以使用debug的形式启动项目；</p><p>启动的时候一定会加载这个类中的方法；</p><p>元数据中包含，当前类的名称（com.lagou.SpringBootDemo1Application）</p><p>packageName&#x3D;”com.lagou”(启动类的当前包)</p><hr><h3 id="源码剖析-自动配置-AutoConfigurationImportSelector"><a href="#源码剖析-自动配置-AutoConfigurationImportSelector" class="headerlink" title="源码剖析-自动配置-AutoConfigurationImportSelector"></a>源码剖析-自动配置-AutoConfigurationImportSelector</h3><p><code>@Import</code>spring框架底层的注解</p><p>selectImports 方法，真正实现自动配置的方法；</p><p>AnnotationMetadata 判断是否实现自动配置</p><p>获取元数据对象；（使用类加载器获取）</p><p>需要传入路径；（自动配置文件路径）（自动配置的类所对应的条件）</p><p>非常大，大约4000多行；</p><p>如何看这个文件？</p><p>不是自动配置的文件，是自动配置元数据的一个文件；</p><p>等号前面最后一个逗号前面，是一个类，逗号后面是一个注解；</p><p>会将整个文件都加载进来；</p><p>将所有的内容都放到了properties对象中；</p><p>文件的内容都封装到了AutoConfigurationMetadata中；</p><p>spring-autoconfigure-metadata.properties属性文件中，存在的是自动配置的类及所对应的条件，只有满足对应的条件才会自动配置；</p><p>获取到了自动配置类及自动配置类及对应的条件；</p><p>很重要的一段代码；（AutoConfigurationImportSelector类 getAutoConfigurationEntry方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> AutoConfigurationEntry<br><span class="hljs-title function_">getAutoConfigurationEntry</span><span class="hljs-params">(AutoConfigurationMetadata autoConfigurationMetadata,</span><br><span class="hljs-params">AnnotationMetadata annotationMetadata)</span> &#123;<br><span class="hljs-comment">//判断EnabledAutoConfiguration注解有没有开启,默认开启</span><br><span class="hljs-keyword">if</span> (!isEnabled(annotationMetadata)) &#123;<br><span class="hljs-keyword">return</span> EMPTY<br>_<br>ENTRY;<br>&#125;<br><span class="hljs-comment">//获得注解的属性信息</span><br><span class="hljs-type">AnnotationAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> getAttributes(annotationMetadata);<br><span class="hljs-comment">//获取默认支持的自动配置类列表</span><br>List&lt;String&gt; configurations =<br>getCandidateConfigurations(annotationMetadata, attributes);<br><span class="hljs-comment">//去重</span><br>configurations = removeDuplicates(configurations);<br><span class="hljs-comment">//去除一些多余的配置类，根据EnabledAutoConfiguratio的exclusions属性进行排除</span><br>Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);<br>checkExcludedClasses(configurations, exclusions);<br>configurations.removeAll(exclusions);<br><span class="hljs-comment">//根据pom文件中加入的依赖文件筛选中最终符合当前项目运行环境对应的自动配置类</span><br>configurations = filter(configurations, autoConfigurationMetadata);<br><span class="hljs-comment">//触发自动配置导入监听事件</span><br>fireAutoConfigurationImportEvents(configurations, exclusions);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoConfigurationEntry</span>(configurations, exclusions);<br>&#125;<br></code></pre></td></tr></table></figure><p>得到自动配置的列表；</p><p>使用spring工厂的加载器加载，内部有加载了一个资源文件（spring.factories）这个文件就是自动配置的文件，只看自动配置的就好了（20行开始）；</p><p>加载这些类干什么？</p><p>例如：</p><p>org,springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</p><p>点进去查看文件；</p><p><code>@ConditionalOnClass(&#123;RabbitTemplate.class,Channel.Class&#125;)</code></p><p>如果要自动配置，<code>RabbitAutoConfiguration</code>（类）需保证classPath下有<code>RabbitTemplate.class,Channel.Class</code></p><p>我们可以在<code>spring-autoconfigure-metadata.properties</code>中搜索；<code>RabbitAutoConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration.ConditionalOnClass=com.rabbitmq.client.Channel,org.springframework.amqp.rabbit.core.RabbitTemplate<br></code></pre></td></tr></table></figure><p><code>spring-autoconfigure-metadata.properties</code>文件其实就是一个对照关系；</p><p>将<code>spring.factories</code>（内部有非常多的配置类）文件加载了，会获取默认自动配置的一个列表-》去重-》去除一些多余的配置类（@EnableAutoConfiguration）-》pom文件中有哪些依赖并且符合注入条件的才进行自动配置；</p><p>如何看这些事多余的配置类呢？</p><p><code>@EnableAutoConfiguration</code>通过这个注解就可以添加一个属性exclusions,就会将这些给排除出去；</p><p><code>spring.factories</code>（内部有非常多的配置类），不能全部都加载，pom文件中有哪些依赖并且符合注入条件的才进行自动配置；</p><p>总结：自动配置步骤（这是为什么springboot能够进行自动配置的原理）</p><p>1）启动springboot应用；</p><p>2）@SpringBootApplication起作用</p><p>3）@EnableAutoConfiguration中有两个注解</p><p>4）@AutoConfigurationPackage：中使用@Import(AutoConfigutationPackages,Registrar.class)，通过将Registrar类导入到容器中，而Registrar类的作用是扫描主配置类同级目录及子包，并将相应的组件导入到springBoot创建管理的容器中；</p><p>5）@Import(AutoConfigurationImportSelector.class)：通过将AutoCongigurationImportSelector类导入到容器中，AutoConfigurationImportSelector类作用：通过selectImports方法执行的过程中，使用内部工具类SpringFactoriesLoader，查找classpath上所有jar包中的META-INF&#x2F;spring.factories进行加载，实现将【配置类信息交给SpringFactory加载器进行一系列的容器创建过程；</p><hr><h3 id="源码剖析-自动配置-ComponentScan"><a href="#源码剖析-自动配置-ComponentScan" class="headerlink" title="源码剖析-自动配置-ComponentScan"></a>源码剖析-自动配置-ComponentScan</h3><p>前面对springBootApplication注解中的注解进行了剖析</p><p>下面讲解最后一个注解，<code>@ComponentScan </code></p><p>作用：就是进行自动扫描的；(实现包扫描)</p><p>三个核心注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">|- <span class="hljs-meta">@SpringBootConfiguration</span><br>|- <span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//通过javaConfig的方式来添加组件到IOC容器中</span><br>|- <span class="hljs-meta">@EnableAutoConfiguration</span><br>|- <span class="hljs-meta">@AutoConfigurationPackage</span> <span class="hljs-comment">//自动配置包，与@ComponentScan扫描到的添加到IOC</span><br>|- <span class="hljs-meta">@Import(AutoConfigurationImportSelector.class)</span> <span class="hljs-comment">//到META-INF/spring.factories中定义的bean添加到IOC容器中</span><br>|- <span class="hljs-meta">@ComponentScan</span> <span class="hljs-comment">//包扫描</span><br></code></pre></td></tr></table></figure><p>注解就是分析的入口</p><p>例如：SpringBootApplication注解</p><p>通过注解，就知道它到底有什么作用；</p><p>如果Import引入了什么类，这就是我们分析的重点；</p><hr><h3 id="SpringBoot整合MyBatis-环境准备"><a href="#SpringBoot整合MyBatis-环境准备" class="headerlink" title="SpringBoot整合MyBatis-环境准备"></a>SpringBoot整合MyBatis-环境准备</h3><p>需要引入对应的启动器，并设计数据库的参数就可以；</p><p>创建数据库；</p><p>新建一个模块：</p><p>定义组织编号及坐标；</p><p>引入依赖：SQL-MyBatis Framework、Mysql-Driver、wb-&gt;spring web（可以通过浏览器访问）</p><p>版本不要使用快照版（注意啊）</p><p>启动器里面引入了一系列的依赖；</p><p>编写实体类（pojo）(Comment)，toString()</p><p>配置数据库的连接信息(application.yml):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"># MySQL数据库连接配置<br>spring:<br>datasource:<br>url: jdbc:mysql:<span class="hljs-comment">//localhost:3306/springbootdata?</span><br>serverTimezone=UTC&amp;characterEncoding=UTF-<span class="hljs-number">8</span><br>username: root<br>password: wu7787879<br></code></pre></td></tr></table></figure><p>驱动类可以不用指定，或默认指定的</p><hr><h3 id="SpringBoot整合MyBatis-注解方式"><a href="#SpringBoot整合MyBatis-注解方式" class="headerlink" title="SpringBoot整合MyBatis-注解方式"></a>SpringBoot整合MyBatis-注解方式</h3><p>需求：通过评论的ID查询评论的对象；</p><p>interFace CommentMapper</p><p>@Select(“select * from t_comment where id &#x3D; #{id}”)</p><p>Comment findById(Integer id)</p><p>需要程序在运行中，对这个接口生成一个动态代理类，这样才可以去访问数据库；<code>@MapperScan</code></p><p>在启动类上使用<code>@MapperScan(&quot;com.lagou.bootmybatis.mapper&quot;)</code>，这样当我们启动这个项目的时候就会去这个包的下面查找mapper接口并且生成对应的动态代理类；</p><p>在测试类中测试；</p><p>默认是不开启驼峰规则的；(默认值是false)需要我们开启（application.yml）；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">#开启驼峰命名匹配映射<br>mybatis:<br>configuration:<br>map-underscore-to-camel-<span class="hljs-keyword">case</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><hr><h3 id="SpringBoot整合MyBatis-配置文件方式"><a href="#SpringBoot整合MyBatis-配置文件方式" class="headerlink" title="SpringBoot整合MyBatis-配置文件方式"></a>SpringBoot整合MyBatis-配置文件方式</h3><p>使用配置文件的方式整合mybatis</p><p>接口中使用<code>@Mapper</code>注解</p><p>建议使用插件<code>Free Mybatis plugin</code>，可以快速的生成</p><p>配置连接数据库的信息就可以使用了；</p><p>选中要生成的表-》右击-》mybatis-generator</p><p>table setting</p><p>表的名称  表的主键   将生成在实体、mapper接口、映射文件放在哪个项目中；</p><p>model setting:针对实体进行设置；</p><p>类名    实体所在的包  包所在的文件目录</p><p>dao  setting :Mapper接口的设置</p><p>mapper的名称  mapper所在的包</p><p>xml mapper setting:映射文件的设置</p><p>名称不需要指定</p><p>生成后实体类报错；因为这个插件是Lombok的插件；</p><p>需要设置mapper加载路径：（application.yml）</p><p>mapper-locations: classpath:mapper&#x2F;*.xml</p><p>插件生成的xml默认使用的是全限定类名，如果使用别名的方式需要我们自己设置（applciation.yml）</p><p>type-aliases-package: com.lagou.bootmybatis.pojo</p><p>使用配置文件：所有的项目都使用配置文件方式</p><hr><h3 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h3><p>只需要引入redis启动器就可以；</p><p>如果redis安装在本机并且使用6379端口号的话，不许要配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- redis依赖包 --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">#redis配置<br>#Redis服务器地址<br>spring.redis.host=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>#Redis服务器连接端口<br>spring.redis.port=<span class="hljs-number">6379</span><br>#Redis数据库索引（默认为<span class="hljs-number">0</span>）<br>spring.redis.database=<span class="hljs-number">0</span><br>#连接池最大连接数（使用负值表示没有限制）<br>spring.redis.jedis.pool.max-active=<span class="hljs-number">50</span><br>#连接池最大阻塞等待时间（使用负值表示没有限制）<br>spring.redis.jedis.pool.max-wait=<span class="hljs-number">3000</span><br>#连接池中的最大空闲连接<br>spring.redis.jedis.pool.max-idle=<span class="hljs-number">20</span><br>#连接池中的最小空闲连接<br></code></pre></td></tr></table></figure><p>编写Redis工具类：</p>]]></content>
    
    
    <categories>
      
      <category>Java就业训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>就业-第九阶段模块一</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端进阶-jQuery</title>
    <link href="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/"/>
    <url>/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/</url>
    
    <content type="html"><![CDATA[<h1 id="任务一：jQuery"><a href="#任务一：jQuery" class="headerlink" title="任务一：jQuery"></a>任务一：jQuery</h1><h2 id="jQuery介绍"><a href="#jQuery介绍" class="headerlink" title="jQuery介绍"></a>jQuery介绍</h2><p>美国人创建的</p><p>2006年创建的</p><p>很多框架都是基于jQuery开发的</p><p>jquery是js对象和函数的封装</p><p>jquery代码越来越少</p><p>jquery只需要一句带代码就可以实现隔行变色</p><hr><p class="note note-primary">jquery能做什么：</p>访问和操作DOM元素对象<p>控制页面样式</p><p>控制页面时间</p><p>扩展了新了jquery插件（鼠标放大镜效果、日历控件、地图控件、报表控件）</p><p>与Ajax技术完美结合</p><hr><p class="note note-primary">jquery是什么：</p>使用jquery可以提高开发效率<p>jquery是成语</p><p>js是白话文</p><p>成语是白话文的深度压缩</p><p>烽火戏诸侯与一个故事</p><div class="note note-success">            <p>jquery就是js</p><p>jquery能做的js都是可以做的，js能做的事情jquery不一定能做</p><p>成语能描述的事情，记叙文可不可以描述</p><p>js是大王，jQuery是js下的小王爷</p>          </div><hr><p class="note note-primary">jquery的优势：</p>体积小，压缩后只有100KB左右（jquery中有很多的方法，特别特别好yogn）<p>强大的选择器（遍历节点）</p><p>出色的DOM封装（创建节点、修改节点，改变节点的颜色或样式）</p><p>可靠的事件处理机制</p><p>出色的浏览器兼容性（浏览器运行效果都是一样的）</p><hr><h2 id="jQuery的使用"><a href="#jQuery的使用" class="headerlink" title="jQuery的使用"></a>jQuery的使用</h2><p><a class="btn" href="http://jQuery.com" title="下载jquery">下载jquery</a></p><p>不要使用最新的版本，使用第二个版本</p><p>最新的东西，不是很稳定，前一个版本比较稳定一些</p><p>也可以在网络上查询哪个版本更稳定一些</p><p>是国外的网站，下载比较慢</p><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651655932260.png" alt="1651655932260"></p><p>compressed:压缩过的（代码一行显示）</p><p>production:发布</p><p>development:开发版本</p><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651656145575.png" alt="1651656145575"></p><p>拿过来就可以了，拿压缩过的发布版本就可以了</p><p>3.4.1版本，是比较稳定的（开发中我们就使用这个版本）</p><p><a href="jquery-3.4.1.min.js" title="查看jquery-3.4.1.min.js">查看jquery-3.4.1.min.js</a> </p><p><a href="jquery-3.4.1.min.js.zip" title="下载jquery-3.4.1.min.js">下载jquery-3.4.1.min.js</a> </p><hr><p>引入jquery</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script src=<span class="hljs-string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>工厂函数：将DOM对象转化为jquery对象</p><p>选择器selector:获取需要操作的DOM元素对象</p><p>获取p标签中的文字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">text</span>();<br></code></pre></td></tr></table></figure><hr><h2 id="js对象和jQuery对象转换"><a href="#js对象和jQuery对象转换" class="headerlink" title="js对象和jQuery对象转换"></a>js对象和jQuery对象转换</h2><p>DOM对象（HTML对象） 与jquery对象</p><p class="note note-primary">dom对象与jquery对象自己都有一套自己的方法，不能混用</p>使用dom对象和jquery对象获取元素中的内容<p>dom对象使用 innerHTML()</p><p>jquery对象使用 html()</p><p>方法不能混用</p><p class="note note-primary">如果dom对象想使用jquery的方法，需要将js对象转换成jquery对象</p>使用工厂函数($(js对象))，转换一下<p>jquery对象转化为js对象：jqDom.get(0);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>测试信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> jsDom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;title&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsDom.<span class="hljs-property">innerHTML</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// js对象转化为jquery对象</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> jqDom = $(jsDom);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jqDom.<span class="hljs-title function_">html</span>());</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// jquery对象转化为js对象</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jqDom.<span class="hljs-title function_">get</span>(<span class="hljs-number">0</span>).<span class="hljs-property">innerHTML</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651657874707.png" alt="1651657874707"></p><p>特别注意：js对象使用innerHTML的时候，后面不要加上();</p><hr><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651675677268.png" alt="1651675677268"></p><p>p标签变为红色   .css(“color”,”red”)</p><p>id选择器，具备唯一性；</p><p>一个页面有对个ID，只是第一个会生效吗？ – 只有第一个才会生效</p><p>类选择器不具备唯一性；</p><p>并集选择器：两个标签元素都会修改</p><p>交集选择器：即是又是  交在一起的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;p&gt;中国&lt;/p&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>武汉<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jy&quot;</span>&gt;</span>加油<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wan&quot;</span>&gt;</span>祖国万岁<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jy&quot;</span>&gt;</span>祖国万岁<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//$(&quot;p&quot;).css(&quot;color&quot;,&quot;red&quot;); // 标签选择器，获得所有的p</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//$(&quot;.jy&quot;).css(&quot;color&quot;,&quot;red&quot;); //类选择器</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//$(&quot;#wan&quot;).css(&quot;color&quot;,&quot;red&quot;); //ID选择器,更具备唯一性</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//$(&quot;.jy,#wan&quot;).css(&quot;color&quot;,&quot;red&quot;); // 并集选择器，.jy和#wan</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;h3.jy&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>); <span class="hljs-comment">// 交集选择器，既是h3标签，又拥有.jy的元素</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h2 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h2><p>后代、子代、相邻的、</p><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651676252974.png" alt="1651676252974"></p><p>后代元素选择器（空格），忽略层级</p><p>子代元素选择器（&gt;），只负责子元素</p><p>同辈元素选择器（~），兄弟姐妹，下面的所有兄弟元素</p><p>​注意：不包含上面的兄弟</p><p>相邻元素选择器（+），紧邻的兄弟h3</p><p>​注意是下一个紧邻的兄弟元素，不包含上一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>000<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;x&quot;</span>&gt;</span></span><br><span class="language-xml">111</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 后代元素选择器</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;#x p&quot;).css(&quot;color&quot;,&quot;red&quot;); // p1 p2 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 子代元素选择器</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//  $(&quot;#x&gt;p&quot;).css(&quot;color&quot;,&quot;red&quot;); // p1 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 同辈元素选择器</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;#x~h3&quot;).css(&quot;color&quot;,&quot;red&quot;); // 222 333 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 相邻元素选择器</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#x+h3&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);<span class="hljs-comment">// 222 红</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>需要注意：script标签需要写在标签元素的下面，否则不会有效果的（因为js是解释型语言，是一行一行解释并执行的）</p><hr><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>可以对属性进行一次或多次过滤（元素属性过滤）</p><p>标签中可能是有很多的属性的</p><p>属性的各种过滤特别的强悍</p><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651677402755.png" alt="1651677402755"></p><p>属性的引用使用的是[]</p><p>属性的值使用单引号‘’，使用等号连接</p><p>属性值不等于使用！</p><p>属性值以什么开头使用^(类似于正则表达式的开头)</p><p>属性值以什么结尾使用$（类似于正则表达式的结尾）</p><p>属性值包含某值使用*（包含）</p><p>多属性使用多个[]</p><p>可以和基础选择器一起使用，中间不需要加任何的符号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.lagou.com&quot;</span>&gt;</span>拉勾网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.sina.com.cn&quot;</span>&gt;</span>新浪网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.163.com&quot;</span>&gt;</span>网易<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;x&quot;</span>&gt;</span>哈哈1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;x&quot;</span>&gt;</span>哈哈2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;[href]&quot;).css(&quot;color&quot;,&quot;red&quot;); // 全红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;[href=&#x27;x&#x27;]&quot;).css(&quot;color&quot;,&quot;red&quot;); // 哈哈1 哈哈2 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;[href!=&#x27;x&#x27;]&quot;).css(&quot;color&quot;,&quot;red&quot;); // 全红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;a[href!=&#x27;x&#x27;]&quot;).css(&quot;color&quot;,&quot;red&quot;); // 拉勾网 新浪网 网易 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;[href^=&#x27;www&#x27;]&quot;).css(&quot;color&quot;,&quot;red&quot;); // 拉勾网 新浪网 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;[href$=&#x27;com&#x27;]&quot;).css(&quot;color&quot;,&quot;red&quot;);  //  拉勾网 网易 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;[href*=&#x27;www&#x27;]&quot;).css(&quot;color&quot;,&quot;red&quot;); // 拉勾网 新浪网 网易 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;[href^=&#x27;www&#x27;][href$=&#x27;cn&#x27;]&quot;).css(&quot;color&quot;,&quot;red&quot;); // 新浪网 红</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;a[href^=&#x27;www&#x27;][href$=&#x27;cn&#x27;]&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);  <span class="hljs-comment">// 新浪网 红</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>不理解：$(“[href!&#x3D;’x’]”).css(“color”,”red”); &#x2F;&#x2F; 全红  为什么全红</p><p>原因：p标签是不拥有这个元素的，也会将其选取出来，解决：使用标签要符合规范，属性不要乱用；标签允许使用的标签才可以使用</p><hr><h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><p>过滤选择器重行啊</p><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651678762017.png" alt="1651678762017"></p><p>标签选择器的基础上使用过滤选择器</p><p>选择标签的偶数行元素【:even】（0,2,4。。。）</p><p>选择标签的奇数行元素【:odd】（1,3,5.。。）</p><p>选择标签的第一个元素【:first】</p><p>选择标签的最后一个元素【:last】</p><p>选择标签某行的元素【:eq(行下标)】</p><p>选择标签下标大于某行的元素【:gt(行下标)】</p><p>选择标签下标小于某行的元素【:lt(行下标)】</p><p>id等属性值不要使用特殊字符，否则无法识别，如果非要使用，需使用转义字符</p><p>转义符：<code>\\</code>这里需要使用两个，负责还认为有含义呢</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;h2#x&quot;</span>&gt;</span>修仙小说<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>凡人修仙传<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>遮天<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>神墓<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>残袍<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>大主宰<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;li:even&quot;).css(&quot;color&quot;,&quot;red&quot;); // 0 2 4 行 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;li:odd&quot;).css(&quot;color&quot;,&quot;red&quot;); // 1 3 行 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;li:first&quot;).css(&quot;color&quot;,&quot;red&quot;); // 第一行 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;li:last&quot;).css(&quot;color&quot;,&quot;red&quot;); // 最后一行 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;li:eq(2)&quot;).css(&quot;color&quot;,&quot;red&quot;); // 第三行 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;li:gt(2)&quot;).css(&quot;color&quot;,&quot;red&quot;); // 4 5 行 红</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;li:lt(2)&quot;).css(&quot;color&quot;,&quot;red&quot;); // 0 1 行 红</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#h2\\#x&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>); <span class="hljs-comment">// 修仙小说 红</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>注意：gt是大于，不是大于等于；lt是小于，不是小于等于</p><hr><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><p>常用鼠标事件有：</p><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651761252635.png" alt="1651761252635"></p><p>某个元素绑定单击事件，事件中写一个函数</p><p>函数：点击一下，换照片（换的是点中的元素）</p><p>使用this关键字，this就是事件触发的那一个</p><p>移上，边框颜色为红色，</p><p>移出，边框颜色为白色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>&lt;img src=&quot;testImg02.png&quot;&gt;<br>&lt;img src=&quot;testImg02.png&quot;&gt;<br>&lt;img src=&quot;testImg02.png&quot;&gt;<br>&lt;script&gt;<br>// 鼠标点中图片，换图片<br>$(&quot;img&quot;).click(function()&#123;<br>$(this).attr(&quot;src&quot;,&quot;testImg.jpg&quot;);<br>&#125;)<br>// 鼠标移动到图片上(移上)，给图片加上红边框<br>$(&quot;img&quot;).mouseover(function()&#123;<br>$(this).css(&quot;border&quot;,&quot;2px solid red&quot;)<br>&#125;)<br>// 鼠标移出到图片(移出)，给图片加上白边框<br>$(&quot;img&quot;).mouseout(function()&#123;<br>$(this).css(&quot;border&quot;,&quot;2px solid white&quot;)<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><hr><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p>常用键盘事件有：</p><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651762063044.png" alt="1651762063044"></p><p>在输入框中输入什么，在h3中打印什么</p><p>键盘按下去的，获得input框中的值并放到h3标签中显示</p><p>里边的文字，使用text()方法</p><p>按下去的时候，input框中是空值，会将空值给复制到h3中</p><p>如果使用keydown会有一个延迟的效果</p><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651762666707.png" alt="1651762666707"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>&lt;input&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 键盘按下去的时候将input框中的值赋值到h3中</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">keyup</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// $(&quot;h3&quot;).val($(this).val()); 错误的写法，h3没有val方法</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;h3&quot;</span>).<span class="hljs-title function_">text</span>($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>());</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651762748937.png" alt="1651762748937"></p><hr><h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><p>表单常用事件：</p><table><thead><tr><th>方法</th><th>描述</th><th>执行时机</th></tr></thead><tbody><tr><td>focus( )</td><td>触发或将函数绑定到指定元素的focus事件</td><td>获得焦点</td></tr><tr><td>blur( )</td><td>触发或将函数绑定到指定元素的blur事件</td><td>失去焦点</td></tr></tbody></table><p>获取焦点的时候，input值清空；</p><p>失去焦点的时候，input恢复默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>帐号: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入帐号...&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>电话: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 获取焦点的时候，input值清空；</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#a&quot;</span>).<span class="hljs-title function_">focus</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 失去焦点的时候，input恢复默认值</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#a&quot;</span>).<span class="hljs-title function_">blur</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;请输入帐号...&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651763536001.png" alt="1651763536001"></p><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651763553498.png" alt="1651763553498"></p><hr><h2 id="复合事件"><a href="#复合事件" class="headerlink" title="复合事件"></a>复合事件</h2><p>jquery专有的，有两个</p><h3 id="鼠标悬停复合事件"><a href="#鼠标悬停复合事件" class="headerlink" title="鼠标悬停复合事件"></a>鼠标悬停复合事件</h3><p>hover()方法相当于mouseover与mouseout事件的组合</p><p>移上加红边框，移出加白边框</p><p>第一个函数是移上</p><p>第二个函数是移出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;testImg02.png&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 移上加红边框，移出加白边框</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">hover</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;border&quot;</span>,<span class="hljs-string">&quot;2px solid red&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;border&quot;</span>,<span class="hljs-string">&quot;2px solid white&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651764589813.png" alt="移上"></p><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651764609006.png" alt="移出"></p><hr><h3 id="连续点击复合事件"><a href="#连续点击复合事件" class="headerlink" title="连续点击复合事件"></a>连续点击复合事件</h3><p>toggle()可以模拟鼠标的连续单击事件</p><p>第一次点击，隐藏</p><p>第二次点击，显示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>修仙小说<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>凡人修仙传<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>遮天<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>神墓<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>残袍<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>大主宰<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 点击一次隐藏，再点击一次显示</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;ul&quot;</span>).<span class="hljs-title function_">toggle</span>();</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651764352484.png" alt="默认显示"></p><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651764366027.png" alt="点击一次隐藏"></p><hr><h2 id="动态绑定事件"><a href="#动态绑定事件" class="headerlink" title="动态绑定事件"></a>动态绑定事件</h2><p>绑定事件的另一种写法</p><p>之前对元素绑定时间</p><p>动态绑定时间：使用on()函数，</p><p>第一个参数，是事件的名称</p><p>第二个函数，是绑定的事件</p><p class="note note-primary">动态绑定的强大之处：</p><p>可以绑定多种类型的事件，可以一次绑定多个事件</p><p>既可以绑定点击事件，也可以绑定移上事件</p><p>事件与事件之间使用空格隔开</p><hr><h2 id="隐藏和显示"><a href="#隐藏和显示" class="headerlink" title="隐藏和显示"></a>隐藏和显示</h2><p>显示及隐藏并含有动画效果</p><h3 id="改变元素的宽和高（带动画效果）"><a href="#改变元素的宽和高（带动画效果）" class="headerlink" title="改变元素的宽和高（带动画效果）"></a>改变元素的宽和高（带动画效果）</h3><ul><li><p>show( speed )：显示</p></li><li><p>hide( speed )：隐藏</p></li><li><p>toggle( speed )等价于show+hide : 显示的隐藏，隐藏的显示</p><p>speed可以不使用</p></li></ul><p>如果想要动画效果，需要将速度变慢</p><p class="note note-primary">可以向方法中传入参数：</p><p>fast：快速的</p><p>slow：缓慢的</p><p>毫秒：自定义</p><hr><h3 id="改变元素的高（拉伸效果）"><a href="#改变元素的高（拉伸效果）" class="headerlink" title="改变元素的高（拉伸效果）"></a>改变元素的高（拉伸效果）</h3><ul><li>slideDown( speed ) ：显示</li><li>slideUp( speed )：隐藏</li><li>slideToggle( speed )等价于slideDown+slideUp</li></ul><p>可选的 speed 参数规定隐藏&#x2F;显示的速度，可以取以下值：”slow”<br>、”fast” 或毫秒</p><hr><h3 id="不改变元素的大小（淡入淡出效果）"><a href="#不改变元素的大小（淡入淡出效果）" class="headerlink" title="不改变元素的大小（淡入淡出效果）"></a>不改变元素的大小（淡入淡出效果）</h3><table><thead><tr><th>方法</th><th>效果</th></tr></thead><tbody><tr><td>fadeIn( speed )</td><td>显示</td></tr><tr><td>fadeOut( speed )</td><td>隐藏</td></tr><tr><td>fadeToggle( speed )</td><td>等价于fadeIn+fadeOut动画</td></tr><tr><td>fadeTo( speed , 透明度 )</td><td>方法允许渐变为给定的不透明度（值介于 0 与 1 之间）</td></tr></tbody></table><hr><h2 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h2><p>可以实现将代码写到一行</p><p>使用点点点的方式</p><p>连着完成四个操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;pink&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>).<span class="hljs-title function_">slideUp</span>(<span class="hljs-number">1000</span>).<span class="hljs-title function_">slideDown</span>(<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="属性函数"><a href="#属性函数" class="headerlink" title="属性函数"></a>属性函数</h2><p>DOM和CSS的操作</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>attr( “属性” );</td><td>获得元素的属性值</td></tr><tr><td>attr( “属性” , “新值” );</td><td>修改元素的属性值</td></tr><tr><td>attr( 样式参数 ) ：</td><td>样式参数可以写成json格式，修改多个属性的值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>点我试试<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;hr&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;testImg02.png&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;美女大图&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 获取属性的值</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> title = $(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;title&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(title);  <span class="hljs-comment">// 美女大图</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 给属性赋值</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;新的图片&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;title&quot;</span>)); <span class="hljs-comment">// 新的图片</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 给多个属性赋值</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">attr</span>(&#123;<span class="hljs-attr">width</span>:<span class="hljs-string">&quot;150&quot;</span>,<span class="hljs-attr">height</span>:<span class="hljs-string">&quot;150&quot;</span>&#125;);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651766961779.png" alt="点击前的效果"></p><p><img src="/1000/03/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-jQuery/1651766926269.png" alt="点击后的效果"></p><hr><h2 id="文本函数"><a href="#文本函数" class="headerlink" title="文本函数"></a>文本函数</h2>]]></content>
    
    
    <categories>
      
      <category>Java就业训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第三阶段</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端基础-JavaScript</title>
    <link href="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/"/>
    <url>/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/</url>
    
    <content type="html"><![CDATA[<h2 id="任务三：JavaScript"><a href="#任务三：JavaScript" class="headerlink" title="任务三：JavaScript"></a>任务三：JavaScript</h2><p>前端基础-javaScript</p><p><a href="JavaScript%E8%AF%A6%E8%A7%A3.pdf" title="JavaScript详解.pdf">点击查看</a> </p><h3 id="js简介"><a href="#js简介" class="headerlink" title="js简介"></a>js简介</h3><p>javaScript  ECMAScript——》ECMA推出的</p><p>是在HTML页面中进行的（在jsp页面中也可以）</p><p>是解释性语言，读一行运行一行，不会预先编译</p><p>javaScript提供了很多对象，直接拿来用就好</p><hr><p>浏览器和服务器要分工合作，可以分担服务器的压力</p><p>客户端的数据计算可以在前端进行</p><p>合法性校验，要在客户端进行</p><p>js很厉害的话完全可以开发游戏的；</p><hr><p>标准+DOM+BOM</p><p>DOM：是js方便操作页面节点形成的</p><hr><h3 id="js的三种使用方式"><a href="#js的三种使用方式" class="headerlink" title="js的三种使用方式"></a>js的三种使用方式</h3><p>on 绑定</p><p><strong>行内js</strong></p><p>可以在标签中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;gbk&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文档标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;测试成功!&#x27;)&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651072062327.png" alt="1651072062327"></p><p>疑问：编码格式是跟浏览器有关的吗？  我的理解：没有关系【charset使用，charset如何使用】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;gbk&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>charset使用什么编码格式，跟你文件保存的格式编码有关，文件保存时已UTF-8格式保存，那么charset就要指明为utf-8;这样浏览器html文件的时候就会这种格式去解析这个文件</p><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651073402466.png" alt="1651073402466"></p><p><strong>内部JS</strong></p><p>建议写在脖子的地方</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;测试通过&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><p><strong>外部js</strong></p><p>在html同级目录下创建一个test01.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;测试001&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;test01.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>进入页面提示</p><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651073890469.png" alt="1651073890469"></p><p>代码优先级：谁在上谁先执行</p><hr><h3 id="变量和运算符"><a href="#变量和运算符" class="headerlink" title="变量和运算符"></a>变量和运算符</h3><p>js是弱类型语言-》所有的数据类型都用var定义；</p><p>声明变量的时候可以声明一个，可以一下声明多个；</p><p>虽然可以都使用var声明，但是js是有这些类型的</p><ul><li>数值类型：number</li><li>字符串：string</li><li>布尔类型：true &#x3D; 1 false &#x3D; 0</li></ul><hr><p><strong>案例-自动类型转换：</strong></p><p>要知道自动类型转换：记住一条：字符串参与计算得到的都是字符串</p><p>要知道什么时候布尔类型要转化。什么时候不转化（遇到字符串的时候不转化）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">10</span>+<span class="hljs-string">&#x27;a&#x27;</span>);  <span class="hljs-comment">// 10a</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">10</span>+<span class="hljs-literal">true</span>); <span class="hljs-comment">// 11</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">true</span>+<span class="hljs-literal">true</span>); <span class="hljs-comment">// 2</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">true</span> + <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">//truea</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><p><strong>案例-数据类型转换</strong></p><p>数字类型转换成数字类型</p><p>判断是什么数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;script&gt;<br>console.log(parseInt(<span class="hljs-number">6.32</span>));  <span class="hljs-comment">// 6</span><br><span class="hljs-comment">//console.log(parseInt(a));   // 会报错： a is not defined</span><br>console.log(parseInt(<span class="hljs-string">&#x27;a&#x27;</span>));   <span class="hljs-comment">// NaN</span><br>console.log(parseFloat(<span class="hljs-number">6.32</span>)); <span class="hljs-comment">// 6.32</span><br>console.log(parseFloat(<span class="hljs-number">6.3274</span>)); <span class="hljs-comment">// 6.3274</span><br><span class="hljs-comment">// console.log(parseFloat(a)); // 会报错： a is not defined</span><br>console.log(parseFloat(<span class="hljs-string">&#x27;a&#x27;</span>)); <span class="hljs-comment">// NaN</span><br>console.log(typeof(a)); <span class="hljs-comment">// undefined(注意这个不会报错)</span><br>console.log(typeof(<span class="hljs-number">6</span>));<span class="hljs-comment">// number</span><br>console.log(typeof(<span class="hljs-number">6.32</span>));<span class="hljs-comment">// number</span><br>console.log(typeof(<span class="hljs-string">&quot;6.32&quot;</span>));<span class="hljs-comment">// string</span><br>console.log(typeof(<span class="hljs-literal">true</span>));<span class="hljs-comment">// boolean</span><br>console.log(typeof(<span class="hljs-string">&quot;true&quot;</span>));<span class="hljs-comment">// string</span><br>&lt;/script&gt;<br>&lt;body&gt;<br>&lt;h2&gt;测试&lt;/h2&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651076003267.png" alt="1651076003267"></p><hr><p><strong>null与undefind区别</strong></p><p>**null:**无值或者无对象（不理解）</p><p>**undefind:**对象被声明过，但是从来没有被使用过或对象属性不存在</p><hr><p>算数运算：+ - *  &#x2F;  % 递增 递减</p><hr><p>关系运算：</p><p>严格相等：&#x3D;&#x3D;&#x3D; 类型及值都相等</p><p>非严格相等 !&#x3D;&#x3D; (不理解)</p><hr><h3 id="逻辑运算和控制语句"><a href="#逻辑运算和控制语句" class="headerlink" title="逻辑运算和控制语句"></a>逻辑运算和控制语句</h3><p>逻辑运算：与  或 非</p><p>我要吃两碗面或者十个包子才能吃饱   吃两碗面：可以吃饱  吃十个包子：可以吃饱</p><p>我要吃两碗面和十个包子才能吃饱  吃两碗面：不可以吃饱  吃十个包子：不可以吃饱</p><hr><p>if-else</p><p>类似于到一个路口判断下是否转弯，不转弯-直走</p><hr><p>switch</p><p>类似于从中选择一个</p><hr><h3 id="字符串API"><a href="#字符串API" class="headerlink" title="字符串API"></a>字符串API</h3><h4 id="length"><a href="#length" class="headerlink" title="length"></a><strong>length</strong></h4><p>获取字符串的长度（字符串中字符的个数） 属性，没有小括号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br><span class="hljs-type">var</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;hello&quot;</span>;<br>console.log( str.length ); <span class="hljs-comment">// 5</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h4><h4 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase()"></a><strong>toLowerCase()</strong></h4><p>转大小写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> name =<span class="hljs-string">&quot;AngierSun&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&quot;大写：&quot;</span>+name.<span class="hljs-title function_">toUpperCase</span>() ); <span class="hljs-comment">// 大写：ANGIERSUN</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&quot;小写：&quot;</span>+name.<span class="hljs-title function_">toLowerCase</span>() ); <span class="hljs-comment">// 小写：angiersun</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="charAt-下标"><a href="#charAt-下标" class="headerlink" title="charAt(下标)"></a><strong>charAt(下标)</strong></h4><p>返回某个下标上的字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> str1 =<span class="hljs-string">&quot;javascript网页教程&quot;</span>;<br><span class="hljs-keyword">var</span> str2 = str1.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">12</span>); <span class="hljs-comment">// 下标12上的字符</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2); <span class="hljs-comment">//教</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="charCodeAt-下标"><a href="#charCodeAt-下标" class="headerlink" title="charCodeAt(下标)"></a><strong>charCodeAt(下标)</strong></h4><p>返回某个下标上unicode编码中的字符编号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> str1 =<span class="hljs-string">&quot;javascript网页教程&quot;</span>;<br><span class="hljs-keyword">var</span> str2 =str1.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">12</span>); <span class="hljs-comment">// （汉字“教”在unicode编码中的编号）</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2); <span class="hljs-comment">//25945</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="indexOf-字符"><a href="#indexOf-字符" class="headerlink" title="indexOf(字符)"></a><strong>indexOf(字符)</strong></h4><p>查找字符串中字符出现的首次下标</p><h4 id="lastIndexOf-字符"><a href="#lastIndexOf-字符" class="headerlink" title="lastIndexOf(字符)"></a><strong>lastIndexOf(字符)</strong></h4><p>查找字符串中字符最后一次出现的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br><span class="hljs-type">var</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;javascript网页教程&quot;</span>;<br><span class="hljs-type">var</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span>str1.indexOf(<span class="hljs-string">&#x27;c&#x27;</span>);     <span class="hljs-comment">// 5</span><br><span class="hljs-type">var</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> str1.lastIndexOf(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">// 3</span><br>console.log(str2); <br>console.log(str3);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="substring-开始-结束"><a href="#substring-开始-结束" class="headerlink" title="substring(开始,结束)"></a><strong>substring(开始,结束)</strong></h4><p>截取字符串中一部分（结束是不包含的）**[)**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> str1 =<span class="hljs-string">&quot;javascript网页教程&quot;</span>;<br><span class="hljs-comment">//var str2 =str1.subString(2,6);     // 错误的写法</span><br><span class="hljs-keyword">var</span> str2 =str1.<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>);   <span class="hljs-comment">// vasc</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2); <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="replace-旧的-新的"><a href="#replace-旧的-新的" class="headerlink" title="replace(旧的,新的)"></a><strong>replace(旧的,新的)</strong></h4><p>将字符串中的旧字符替换成新字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br><span class="hljs-type">var</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;javascript网页教程&quot;</span>;<br><span class="hljs-type">var</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span>str1.replace(<span class="hljs-string">&quot;va&quot;</span>,<span class="hljs-string">&quot;xx&quot;</span>);   <br>console.log(str1);    <span class="hljs-comment">// javascript网页教程</span><br>console.log(str2);    <span class="hljs-comment">// jaxxscript网页教程</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="split-分割的节点"><a href="#split-分割的节点" class="headerlink" title="split(分割的节点)"></a><strong>split(分割的节点)</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br><span class="hljs-type">var</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;一,二,三,四,五&quot;</span>;<br><span class="hljs-type">var</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span>str1.split(<span class="hljs-string">&quot;,&quot;</span>);   <br>console.log(arr.length);  <span class="hljs-comment">// 5</span><br>console.log(arr[<span class="hljs-number">2</span>])  <span class="hljs-comment">// 三</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h3><h4 id="创建数组："><a href="#创建数组：" class="headerlink" title="创建数组："></a><strong>创建数组：</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br></code></pre></td></tr></table></figure><hr><h4 id="初始化数组的三种方式"><a href="#初始化数组的三种方式" class="headerlink" title="初始化数组的三种方式"></a>初始化数组的三种方式</h4><p><strong>方式一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br><span class="hljs-type">var</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>arr[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;张三&quot;</span>;<br>arr[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;李四&quot;</span>;<br>arr[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;王五&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>console.log(arr[i]);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651079284513.png" alt="1651079284513"></p><p><strong>方式二：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> arr =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[i]);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>方式三：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> arr =[<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[i]);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>数组常用的方法</strong></p></blockquote><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a><strong>toString()</strong></h4><p>将数组转化为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> arr =[<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>];<br><span class="hljs-keyword">var</span> str = arr.<span class="hljs-title function_">toString</span>(); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str); <span class="hljs-comment">// 张三,李四,王五</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">typeof</span>(arr)); <span class="hljs-comment">// object</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">typeof</span>(str));  <span class="hljs-comment">// string</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651079963941.png" alt="1651079963941"></p><hr><h4 id="join-连接符号"><a href="#join-连接符号" class="headerlink" title="join(连接符号)"></a><strong>join(连接符号)</strong></h4><p>将数组中的每个元素用连接符号连接成一个新的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br><span class="hljs-type">var</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span>[<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>];<br><span class="hljs-type">var</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> arr.join(<span class="hljs-string">&quot;-&quot;</span>); <br>console.log(str); <span class="hljs-comment">// 张三-李四-王五</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="concat-新元素"><a href="#concat-新元素" class="headerlink" title="concat(新元素)"></a><strong>concat(新元素)</strong></h4><p>将原来的数组连接新元素，原数组不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> arr =[<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>];<br><span class="hljs-keyword">var</span> newArr = arr.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;赵六&quot;</span>,<span class="hljs-number">11</span>); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">toString</span>()); <span class="hljs-comment">// 张三,李四,王五</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr.<span class="hljs-title function_">toString</span>()); <span class="hljs-comment">//张三,李四,王五,赵六,11</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="slice-开始，结束"><a href="#slice-开始，结束" class="headerlink" title="slice(开始，结束)"></a><strong>slice(开始，结束)</strong></h4><p>在数组中提取一部分，形成新的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br><span class="hljs-type">var</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span>[<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-type">var</span> <span class="hljs-variable">newArr</span> <span class="hljs-operator">=</span> arr.slice(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>); <br>console.log(arr.toString()); <span class="hljs-comment">// 张三,李四,王五,a,b,c</span><br>console.log(newArr.toString()); <span class="hljs-comment">//王五,a</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>数组的反转（倒序）</p><p>开车倒挡就是R</p><p>需要注意：是将操作的数组倒序排列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">31</span>,<span class="hljs-number">12</span>,<span class="hljs-number">111</span>,<span class="hljs-number">444</span>];<br>arr.<span class="hljs-title function_">reverse</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">toString</span>());  <span class="hljs-comment">// 444,111,12,31</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>注意：默认是字符排序</p><p>要清楚什么是字符排序:先所有元素的首字符，如果相同再看第二个字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br><span class="hljs-type">var</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> [<span class="hljs-number">31</span>,<span class="hljs-number">12</span>,<span class="hljs-number">111</span>,<span class="hljs-number">444</span>];<br>arr.sort();<br>console.log(arr.toString());  <span class="hljs-comment">// 111,12,31,444</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="sort-func"><a href="#sort-func" class="headerlink" title="sort(func)"></a>sort(func)</h4><p>数值排序：根据数值大小排序</p><p>需要自己写一个方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">31</span>,<span class="hljs-number">12</span>,<span class="hljs-number">111</span>,<span class="hljs-number">444</span>];<br>arr.<span class="hljs-title function_">sort</span>(liujq);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">toString</span>());  <span class="hljs-comment">// 12,31,111,444</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">liujq</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> a-b<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="Math数学对象和Number数字对象"><a href="#Math数学对象和Number数字对象" class="headerlink" title="Math数学对象和Number数字对象"></a>Math数学对象和Number数字对象</h3><p>Math数学对象</p><p>本来就有，拿来会用就好</p><h4 id="Math对象方法"><a href="#Math对象方法" class="headerlink" title="Math对象方法"></a>Math对象方法</h4><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651162152975.png" alt="1651162152975"></p><h4 id="Math方法案例"><a href="#Math方法案例" class="headerlink" title="Math方法案例"></a>Math方法案例</h4><p><strong>返回0-9之间任意一个随机数字</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">10</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);  <span class="hljs-comment">// 3</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><p><strong>返回数的平方根</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(<span class="hljs-number">16</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);  <span class="hljs-comment">// 4</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="Number对象"><a href="#Number对象" class="headerlink" title="Number对象"></a>Number对象</h4><h5 id="toFixed-保留几位小数"><a href="#toFixed-保留几位小数" class="headerlink" title="toFixed(保留几位小数)"></a>toFixed(保留几位小数)</h5><p>Number.fixed(2); 自带四舍五入技能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> i = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">32.455</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>));  <span class="hljs-comment">// 32.45  有疑问</span><br><span class="hljs-keyword">var</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">32.456</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>));  <span class="hljs-comment">// 32.46</span><br><span class="hljs-keyword">var</span> j = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">32.454</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>));  <span class="hljs-comment">// 32.45</span><br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">32.4</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 32.40</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>没有得到想要的结果</p><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651163447732.png" alt="1651163447732"></p><p> <strong>注意：</strong>toFixed不是以四舍五入的形式进行取舍的，而是使用银行家舍入法进行取舍的 </p><blockquote><p><strong>银行家舍入法</strong></p><p>银行家舍入法是四舍六入。五后面有非0的数字将直接向前进位，没有数字的情况下还要看前一位是偶数还是奇数。偶数舍去，奇数进位。</p><p>总结为一句话就是：四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> i = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">32.455</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>));  <span class="hljs-comment">// 32.45</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">32.455</span>.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 32.45</span><br><span class="hljs-keyword">var</span> j = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">32.4550</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>));  <span class="hljs-comment">// 32.45</span><br><span class="hljs-keyword">var</span> k = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">32.45501</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>));  <span class="hljs-comment">// 32.46 </span><br><span class="hljs-keyword">var</span> l = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">32.465</span>); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(l.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>));  <span class="hljs-comment">// 32.47</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>感觉还有问题</p><hr><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>功能特别强大</p><p>不需要写各种复杂的逻辑及返回true或者false</p><p>经常先在网上查找，看是否满足要求</p><p>正则是一个对象，必须先创建出来</p><p>必须要&#x2F;^开始，必须以$&#x2F;结束</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^  $/</span>;<br></code></pre></td></tr></table></figure><p>变量名尽量使用reg</p><p>返回值一定是boolean类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> reg.test(<span class="hljs-string">&quot;x8&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="表达式全集"><a href="#表达式全集" class="headerlink" title="表达式全集"></a>表达式全集</h4><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651165365396.png" alt="1651165365396"></p><h4 id="两种写法"><a href="#两种写法" class="headerlink" title="两种写法"></a>两种写法</h4><p><strong>方法一：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;1,3&#125;$/</span>;<br><span class="hljs-keyword">if</span> (reg.<span class="hljs-title function_">test</span>(age))&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;验证通过&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;年龄不合法&quot;</span>);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>方法二：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;^\d&#123;1,3&#125;$&quot;</span>);<br><span class="hljs-keyword">if</span> (reg.<span class="hljs-title function_">test</span>(age))&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;验证通过&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;年龄不合法&quot;</span>);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>疑问：为什么方式一：验证通过，方式二，验证不通过</p><hr><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a><strong>案例</strong></h4><h5 id="验证年龄是否合法"><a href="#验证年龄是否合法" class="headerlink" title="验证年龄是否合法"></a>验证年龄是否合法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;1,3&#125;$/</span>;<br><span class="hljs-keyword">if</span> (reg.<span class="hljs-title function_">test</span>(age))&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;验证通过&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;年龄不合法&quot;</span>);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="大小写字母和数字的组合"><a href="#大小写字母和数字的组合" class="headerlink" title="大小写字母和数字的组合"></a>大小写字母和数字的组合</h5><p>大小写字母和数字的组合（特殊字符不能出现）, 5~8位</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;23AwfERF4&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[a-zA-Z0-9]&#123;5,8&#125;$/</span>;<br><span class="hljs-keyword">if</span> (reg.<span class="hljs-title function_">test</span>(name))&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;验证通过&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;验证不通过&quot;</span>);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br><span class="hljs-type">var</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;23AwfER4&quot;</span>;<br><span class="hljs-type">var</span> <span class="hljs-variable">reg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;^[a-zA-Z0-9]&#123;5,8&#125;$&quot;</span>);<br><span class="hljs-keyword">if</span> (reg.test(name))&#123;<br>alert(<span class="hljs-string">&quot;验证通过&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>alert(<span class="hljs-string">&quot;验证不通过&quot;</span>);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><p>每个国家都是在一个时区内（ 欧洲大陆、美洲大陆和亚洲大陆都有各自的时区 ）</p><p>参照物：本初子午线</p><p>北京与本初子午线的时间相差八小时</p><p>GMT：   <strong>格林威治标准时间</strong> 是指位于英国伦敦郊区的皇家格林威治天文台的标准时间，因为本初子午线被定义在通过那裡的经线。 </p><p>外国是0-11月，中国是1-12月，所以月份要加1</p><hr><p>首先需要创建日期对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br><span class="hljs-type">var</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>console.log(time);   <span class="hljs-comment">// Fri Apr 29 2022 23:07:52 GMT+0800 (中国标准时间)</span><br><span class="hljs-type">var</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> time.getFullYear(); <span class="hljs-comment">// 年份</span><br><span class="hljs-type">var</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> time.getMonth()+<span class="hljs-number">1</span>; <span class="hljs-comment">// 月份从0开始 11结束</span><br><span class="hljs-type">var</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> time.getDate(); <span class="hljs-comment">// 几号</span><br><span class="hljs-type">var</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> time.getHours(); <span class="hljs-comment">// 几点</span><br><span class="hljs-type">var</span> <span class="hljs-variable">mm</span> <span class="hljs-operator">=</span> time.getMinutes(); <span class="hljs-comment">// 分钟</span><br><span class="hljs-type">var</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> time.getSeconds(); <span class="hljs-comment">// 秒</span><br><span class="hljs-type">var</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> time.getMilliseconds(); <span class="hljs-comment">//毫秒</span><br><br><span class="hljs-type">var</span> <span class="hljs-variable">timeStr</span> <span class="hljs-operator">=</span> year+<span class="hljs-string">&quot;年&quot;</span>+month+<span class="hljs-string">&quot;月&quot;</span>+day+<span class="hljs-string">&quot;日&quot;</span>+hour+<span class="hljs-string">&quot;时&quot;</span>+mm+<span class="hljs-string">&quot;分&quot;</span>+s+<span class="hljs-string">&quot;秒&quot;</span>+ms+<span class="hljs-string">&quot;毫秒&quot;</span>;<br>console.log(timeStr);  <span class="hljs-comment">// 2022年4月29日23时7分52秒392毫秒</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="函数的声明和使用"><a href="#函数的声明和使用" class="headerlink" title="函数的声明和使用"></a>函数的声明和使用</h3><p>前端所有的函数都是统一格式</p><p>函数只有被调用才能够执行</p><p>函数不需要写类型，因为js是弱类型语言</p><p>有无返回值的函数如何写，这里不过多介绍</p><h4 id="参数对象的使用"><a href="#参数对象的使用" class="headerlink" title="参数对象的使用"></a>参数对象的使用</h4><p>不需要new这个对象就可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br> function <span class="hljs-title function_">func</span><span class="hljs-params">(a,b,c)</span>&#123;<br>console.log(arguments.length); <span class="hljs-comment">// 3</span><br>console.log(arguments[<span class="hljs-number">1</span>]);  <span class="hljs-comment">// 2  位数是从0开始的</span><br>console.log(arguments[<span class="hljs-number">3</span>]);  <span class="hljs-comment">// undefined</span><br>alert(<span class="hljs-string">&quot;测试通过&quot;</span>);<br> &#125;<br>&lt;/script&gt;<br>&lt;body&gt;<br>&lt;h2 onclick=<span class="hljs-string">&quot;func(1,2,3)&quot;</span>&gt;测试&lt;/h2&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>很少见，了解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br> <span class="hljs-type">var</span> <span class="hljs-variable">fn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;return a*b&quot;</span>);<br> <span class="hljs-type">var</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> fn(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br> console.log(x); <span class="hljs-comment">// 12</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>没有名字的函数，结果用变量来接收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br> <span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> a*b;<br> &#125;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)); <span class="hljs-comment">// 12</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="常用的全局函数"><a href="#常用的全局函数" class="headerlink" title="常用的全局函数"></a>常用的全局函数</h3><h4 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN"></a>isNaN</h4><p>检查参数是否是非数值</p><p>非数值，返回为真</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isNaN</span>(<span class="hljs-number">123</span>)); <span class="hljs-comment">// false</span><br> onsole.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot;123&quot;</span>)); <span class="hljs-comment">// false 带引号与不带引号没有什么区别</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot;hello&quot;</span>)); <span class="hljs-comment">// ture</span><br> onsole.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot;1A23&quot;</span>)); <span class="hljs-comment">// ture</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><p>用来转换字符串中的运算</p><p>将字符串中的符号实现运算功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;2+3&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str); <span class="hljs-comment">// 2+3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">eval</span>(str)); <span class="hljs-comment">// 5</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="encodeURI-转码"><a href="#encodeURI-转码" class="headerlink" title="encodeURI 转码"></a>encodeURI 转码</h4><h4 id="decodeURI解码"><a href="#decodeURI解码" class="headerlink" title="decodeURI解码"></a>decodeURI解码</h4><p>比价敏感的词，可以使用这两个方法进行加密解密</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;张三&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;转码前:&quot;</span>+name);  <span class="hljs-comment">// 转码前:张三</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;转码后:&quot;</span>+<span class="hljs-built_in">encodeURI</span>(name));  <span class="hljs-comment">// 转码后:%E5%BC%A0%E4%B8%89</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;解码后:&quot;</span>+<span class="hljs-built_in">decodeURI</span>(name));  <span class="hljs-comment">// 解码后:张三</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>一个函数中包含另一个函数</p><p>函数套函数</p><p>闭包的目的：保持函数一直存在，不会被垃圾回收处理</p><p>封闭的环境，不会被垃圾回收机制发现及处理</p><hr><p>知道什么是全局变量；</p><p>所有的方法中都可以使用；</p><p>全局变量被声明的时候可以不使用var；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;<br><span class="hljs-title function_">test1</span>();  <span class="hljs-comment">// zhangsan</span><br><span class="hljs-title function_">test2</span>();  <span class="hljs-comment">// zhangsan</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>不使用var声明的变量就是成员变量；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params"></span>)&#123;<br>name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;<br><span class="hljs-title function_">test1</span>();  <span class="hljs-comment">// zhangsan</span><br><span class="hljs-title function_">test2</span>();  <span class="hljs-comment">// zhangsan</span><br>&lt;/script<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params"></span>)&#123;<br>name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;<br><span class="hljs-title function_">test1</span>();  <span class="hljs-comment">// zhangsan</span><br><span class="hljs-title function_">test2</span>();  <span class="hljs-comment">// zhangsan</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>在函数中并用var声明的变量：是局部变量</p><h4 id="需求：统计方法执行了多少次"><a href="#需求：统计方法执行了多少次" class="headerlink" title="需求：统计方法执行了多少次"></a>需求：统计方法执行了多少次</h4><p>最原始的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br><span class="hljs-type">var</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>function <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>count ++;<br>&#125;<br>test1();<br>test1();<br>test1();<br>console.log(count); <span class="hljs-comment">// 3</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>count 作为成员变量，不安全（谁都可以操作它）</p><p>将其改为局部变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> count++;<br>&#125;<br><span class="hljs-title function_">test1</span>(); <br><span class="hljs-title function_">test1</span>();<br><span class="hljs-title function_">test1</span>(); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">test1</span>()); <span class="hljs-comment">// 0</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>每次调用都会重置count，不满足要求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> count++<br>&#125;<br><span class="hljs-keyword">return</span> test2;<br>&#125;<br><span class="hljs-keyword">var</span> fn = <span class="hljs-title function_">test1</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn);<br><span class="hljs-title function_">fn</span>(); <span class="hljs-comment">//0</span><br><span class="hljs-title function_">fn</span>(); <span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>()); <span class="hljs-comment">// 2</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>每次调用test1中的test2方法就好了</p><p>test1里面形成一个封闭空间，不会被垃圾回收机制方法并处理，一直存在在内存中</p><p>适当的用个一次两次可以，但是会消耗内存，不建议使用很多，否则可能造成内存泄漏</p><hr><h3 id="弹框和输出"><a href="#弹框和输出" class="headerlink" title="弹框和输出"></a>弹框和输出</h3><h4 id="普通弹窗"><a href="#普通弹窗" class="headerlink" title="普通弹窗"></a>普通弹窗</h4><p>alert();  </p><p>调试的时候一两次还可以，多次的话很让人烦</p><hr><h4 id="控制台日志输出"><a href="#控制台日志输出" class="headerlink" title="控制台日志输出"></a>控制台日志输出</h4><p>console.log(“谷歌浏览器按F12进入控制台”);</p><p>建议使用；</p><h4 id="页面输出"><a href="#页面输出" class="headerlink" title="页面输出"></a>页面输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br>document.write(<span class="hljs-string">&quot;&lt;h2&gt;我的输出&lt;/h2&gt;&quot;</span>)<br>&lt;/script&gt;<br>&lt;body&gt;<br>&lt;h2 &gt;测试&lt;/h2&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>将h2元素输出到body中</p><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651250482214.png" alt="1651250482214"></p><h4 id="确认框"><a href="#确认框" class="headerlink" title="确认框"></a>确认框</h4><p>confirm(“确定要删除吗？”)</p><p>返回的是true，或者false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> b = <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;确定要删除吗?&quot;</span>);<br><span class="hljs-keyword">if</span> (b )&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;h2&gt;删除成功&lt;/h2&gt;&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;h2&gt;您取消了删除操作&lt;/h2&gt;&quot;</span>)<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651250648132.png" alt="1651250648132"></p><p>点击确定：页面上显示-删除成功</p><p>点击取消：页面上显示-您取消了删除操作</p><h4 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h4><p>prompt(“请输入姓名：”);</p><p>需要使用变量接收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> name = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入你的名字：&quot;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;h2&gt;你的名字:&quot;</span>+name+<span class="hljs-string">&quot;&lt;/h2&gt;&quot;</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651250942407.png" alt="1651250942407"></p><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651250978110.png" alt="1651250978110"></p><p>没有输入，点击确定：页面上显示：你的名字:</p><p>点击取消，页面上显示：你的名字:null</p><h3 id="DOM介绍"><a href="#DOM介绍" class="headerlink" title="DOM介绍"></a>DOM介绍</h3><p>DOM:文档对象模型</p><p>各种标签形成漂亮的页面</p><p>想要动态的修改某个标签中元素的值</p><p>如何查到这个元素，是个难题，</p><p>​W3C组织的工程师，想到了大树</p><p>​想要找到某片叶子，哟啊怎么做？</p><p>​顺藤摸瓜：主树干有很多分支，只要知道分支结构，就能找到任何的叶子</p><p>叶子可以看作我们的一个标签，也是一个对象</p><p>主树干，根元素</p><p>根节点（root）,所有的节点都是由它来的：没有父节点的节点就是根节点（html）</p><p>父节点</p><p>子节点</p><p>同胞：拥有相同父节点的节点</p><p>文本节点：标签中间的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;p&gt;hello word&lt;/p&gt;<br></code></pre></td></tr></table></figure><p>hello word是文本节点，它的父节点是p</p><p>js提供了 很多方法在页面上查找某元素的节点</p><hr><h3 id="阻止表单提交"><a href="#阻止表单提交" class="headerlink" title="阻止表单提交"></a>阻止表单提交</h3><p>根据id属性获取标签对象</p><p>！是声明的意思，</p><p>doc是文档document</p><p>type是类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">document.getElementById(<span class="hljs-string">&quot;username&quot;</span>);<br></code></pre></td></tr></table></figure><p>当表单提交的时候调用方法</p><p>注意：是需要加一个return的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;form action=<span class="hljs-string">&quot;XXX&quot;</span> onsubmit=<span class="hljs-string">&quot;return login()&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>组织表单的提交</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>放行表单提交</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkLogin</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> username = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>).<span class="hljs-property">value</span>;<br>  <span class="hljs-keyword">if</span> (username==<span class="hljs-string">&quot;&quot;</span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;账号不能为空&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 阻止表单提交</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 放行</span><br>&#125;<br><br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;XXX&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return checkLogin()&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>账号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>电话：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;phone&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651252763231.png" alt="1651252763231"></p><hr><h3 id="购物车全选效果"><a href="#购物车全选效果" class="headerlink" title="购物车全选效果"></a>购物车全选效果</h3><p>通过name属性也可以获取对象</p><p>表格table  tr td  很多tr</p><p>做一个全选效果（点击全选，下面的多选框都被选中）</p><p>使用name属性（document.getElementsByName(“name”)）</p><p>使用checked属性  checked &#x3D; true;</p><p>根据选中框的状态this，将选中框的状态赋值给每一个选择框</p><p>checked &#x3D; this.checked</p><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651302516476.png" alt="1651302516476"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">selectAll</span>(<span class="hljs-params">obj</span>)&#123;<br><span class="hljs-keyword">var</span> ones = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;one&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;ones.<span class="hljs-property">length</span>;i++)&#123;<br>ones[i].<span class="hljs-property">checked</span> = obj.<span class="hljs-property">checked</span>;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;selectAll(this)&quot;</span> /&gt;</span>全选<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h3 id="表格隔行变色"><a href="#表格隔行变色" class="headerlink" title="表格隔行变色"></a>表格隔行变色</h3><p>拿到所有的tr，判断奇偶数</p><p>拿到所有的tr：使用获取标签的方法 document.getElementsByTagName(“tr”);</p><p>设置背景颜色：rows[i].style.backgroundColor&#x3D;”pink”;</p><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651303191616.png" alt="1651303191616"></p><p><strong>正确的写法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;selectAll(this)&quot;</span> /&gt;</span>全选<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> rows = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;tr&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;rows.<span class="hljs-property">length</span>;i++)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123; </span></span><br><span class="language-javascript"><span class="language-xml">rows[i].<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;pink&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>错误的写法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> rows = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;tr&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;rows.<span class="hljs-property">length</span>;i++)&#123;<br><span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123; <br>rows[i].<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;pink&quot;</span>;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;selectAll(this)&quot;</span> /&gt;</span>全选<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="dom修改"><a href="#dom修改" class="headerlink" title="dom修改"></a>dom修改</h3><ul><li>改变 HTML 内容</li><li>改变 CSS 样式</li><li>改变 HTML 属性</li><li>创建新的 HTML 元素</li><li>删除已有的 HTML 元素</li><li>改变事件（处理程序）</li></ul><h4 id="改变html内容"><a href="#改变html内容" class="headerlink" title="改变html内容"></a>改变html内容</h4><p>注意：使用的是innerHTML，不是innerHtml</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeContent</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>).<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&quot;今天天气不错&quot;</span>;<br>&#125;<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeContent()&quot;</span>&gt;</span>点我试试<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span> =<span class="hljs-string">&quot;test&quot;</span>&gt;</span>你好啊！<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="改变html样式"><a href="#改变html样式" class="headerlink" title="改变html样式"></a>改变html样式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeStyle</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>).<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&quot;今天天气不错&quot;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">color</span>=<span class="hljs-string">&quot;red&quot;</span>;<br><span class="hljs-comment">// document.getElementById(&quot;test&quot;).style.font-family=&quot;华文彩云&quot;; 错误的写法</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">fontFamily</span>=<span class="hljs-string">&quot;宋体&quot;</span>;<br>&#125;<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeStyle()&quot;</span>&gt;</span>点我试试<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span> =<span class="hljs-string">&quot;test&quot;</span>&gt;</span>你好啊！<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h3 id="添加删除替换节点"><a href="#添加删除替换节点" class="headerlink" title="添加删除替换节点"></a>添加删除替换节点</h3><h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><p>使用document.createElement(“img”)</p><p>给新创建的标签加属性</p><p>获取图片：上一级目录：..&#x2F;</p><p>给div加子节点（我们创建的节点）：父节点.appendChild(我们的节点);【父节点添加子节点】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> imgNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;img&quot;</span>);<br>imgNode.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;testImg.jpg&quot;</span>);<br>imgNode.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;我的图片&quot;</span>);<br>imgNode.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;myImg&quot;</span>);<br><span class="hljs-keyword">var</span> divNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>); <br>divNode.<span class="hljs-title function_">appendChild</span>(imgNode);<br>&#125;<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span>添加图片<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>必须通过父节点才可以删除子节点</p><p>要删除的节点.parentNode.removeChild(“img”);</p><blockquote><p>错误的写法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">del</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> divNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">// 获取父节点</span><br><span class="hljs-keyword">var</span> imgNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;img&quot;</span>); <span class="hljs-comment">//获取子节点</span><br>divNode.<span class="hljs-title function_">removeChild</span>(imgNode);   <span class="hljs-comment">//  Failed to execute &#x27;removeChild&#x27; on &#x27;Node&#x27;: parameter 1 is not of type &#x27;Node&#x27;.</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>正确的写法</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> imgNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;img&quot;</span>);<br>imgNode.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;testImg.jpg&quot;</span>);<br>imgNode.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;我的图片&quot;</span>);<br>imgNode.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;myImg&quot;</span>);<br><span class="hljs-keyword">var</span> divNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>); <br>divNode.<span class="hljs-title function_">appendChild</span>(imgNode);<br>&#125;<br><span class="hljs-comment">// 删除操作</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">del</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> myImg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myImg&quot;</span>);<br>myImg.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(myImg);<br>&#125;<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span>添加图片<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;del()&quot;</span>&gt;</span>删除图片<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h4><p>方式一：将标签的路径替换一下就可以（src属性替换）</p><p>方式二：创建新的节点，老节点.parentNode.replaceChild(新节点，老节点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> imgNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;img&quot;</span>);<br>imgNode.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;testImg.jpg&quot;</span>);<br>imgNode.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;我的图片&quot;</span>);<br>imgNode.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;myImg&quot;</span>);<br><span class="hljs-keyword">var</span> divNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>); <br>divNode.<span class="hljs-title function_">appendChild</span>(imgNode);<br>&#125;<br><span class="hljs-comment">// 删除操作</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">del</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> myImg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myImg&quot;</span>);<br>myImg.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(myImg);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">replace</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">// 方法一</span><br><span class="hljs-comment">//var myImg = document.getElementById(&quot;myImg&quot;);</span><br><span class="hljs-comment">//myImg.setAttribute(&quot;src&quot;,&quot;testImg02.png&quot;);</span><br><span class="hljs-comment">// 方法二</span><br><span class="hljs-comment">// 创建新的节点</span><br><span class="hljs-keyword">var</span> newImg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;img&quot;</span>);<br>newImg.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;testImg02.png&quot;</span>);<br><span class="hljs-comment">// 获取老的节点</span><br><span class="hljs-keyword">var</span> oldImg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myImg&quot;</span>);<br><span class="hljs-comment">// 将老节点替换成新节点</span><br>oldImg.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">replaceChild</span>(newImg,oldImg);<br>&#125;<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span>添加图片<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;del()&quot;</span>&gt;</span>删除图片<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;replace()&quot;</span>&gt;</span>替换图片<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h3 id="窗口事件和表单事件"><a href="#窗口事件和表单事件" class="headerlink" title="窗口事件和表单事件"></a>窗口事件和表单事件</h3><p>动作触发事件</p><h4 id="窗口事件"><a href="#窗口事件" class="headerlink" title="窗口事件"></a>窗口事件</h4><p>onload() 当文档被载入时执行脚本</p><p>当body整个元素显示完整的时候执行这个方法</p><p>仅在body和frameset元素有效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">load</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;进入页面时加载&quot;</span>);<br>&#125;<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;load()&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意：页面上只会显示“进入页面时加载”</p><hr><h4 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h4><p>onload中使用document.wriet(“”) 会将页面内容覆盖掉</p><p>onfocus  获得焦点</p><p>onblur  失去焦点</p><p>注意：得到检点与失去焦点 alert使用注意</p><p><strong>错误的写法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">load</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;进入页面是加载&quot;</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;获得焦点&quot;</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;失去焦点&quot;</span>);<br>&#125;<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;load()&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>姓名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;test1()&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;test2()&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>正确的写法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;获得焦点&quot;</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;失去焦点&quot;</span>);<br>&#125;<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>姓名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;test1()&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;test2()&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>onclick 鼠标单击</p><p>ondbclick  鼠标双击</p><p>onmouseout  鼠标移出</p><p>onmouseover  鼠标移入</p><p>示例：鼠标移动上，图片边框显示红框，移出显示白框</p><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651374148851.png" alt="1651374148851"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;style&gt;<br>img&#123;<br><span class="hljs-attr">border</span>: 5px solid white;<br>&#125;<br>&lt;/style&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">shang</span>(<span class="hljs-params">obj</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">obj.<span class="hljs-property">style</span>.<span class="hljs-property">border</span> = <span class="hljs-string">&quot;5px solid red&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">xia</span>(<span class="hljs-params">obj</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">obj.<span class="hljs-property">style</span>.<span class="hljs-property">border</span> = <span class="hljs-string">&quot;5px solid white&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;testImg02.png&quot;</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;shang(this)&quot;</span> <span class="hljs-attr">onmouseout</span>=<span class="hljs-string">&quot;xia(this)&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;testImg02.png&quot;</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;shang(this)&quot;</span> <span class="hljs-attr">onmouseout</span>=<span class="hljs-string">&quot;xia(this)&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;testImg02.png&quot;</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;shang(this)&quot;</span> <span class="hljs-attr">onmouseout</span>=<span class="hljs-string">&quot;xia(this)&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>如果移动上去没有效果，检查obj.style.border &#x3D; “5px solid red”; 中的border是否拼接错误</p><hr><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>键盘按下 onkeydown</p><p>键盘弹出 onkeyup (按住按键不松手是不会触发的，松手时按键回弹则触发)</p><p>每个按键都会有一个编码</p><p>输入用户名及密码，按回车（13）进行登录</p><p> 键盘按下去触发事件（event）</p><p>event:事件源（按键）</p><p>案例：在浏览器窗口中，按回车键，弹出“登录成功”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onkeydown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;  <span class="hljs-comment">// 窗口按键的时候执行方法</span><br><span class="hljs-keyword">if</span> (event.<span class="hljs-property">keyCode</span> == <span class="hljs-number">13</span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;登录成功!&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onkeyup</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">keyCode</span>)<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="事件冒泡机制"><a href="#事件冒泡机制" class="headerlink" title="事件冒泡机制"></a>事件冒泡机制</h3><p>是自内向外的</p><p>使用两个div:一个父div，一个子div</p><p>代码不重要，重要的是知道这个事件发生时正常现象</p><p>点击父div,显示父级元素触发</p><p>点击子div,先显示自己元素触发，再显示父级元素触发</p><p>打在儿身上，痛在母心里</p><p>效果：点击子元素，先弹出子元素触发的内容，再弹出父元素的内容</p><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651377028810.png" alt="1651377028810"></p><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651377061879.png" alt="1651377061879"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;style&gt;<br>#father&#123;<br><span class="hljs-attr">width</span>:200px;<br><span class="hljs-attr">height</span>:200px;<br><span class="hljs-attr">background</span>: black;<br><span class="hljs-attr">padding</span>: 10px;  <span class="hljs-comment">// 内边距填充大小 盒子里填充一层泡沫一样，大小就是填充的厚度</span><br>&#125;<br>#child&#123;<br><span class="hljs-attr">width</span>:80px;<br><span class="hljs-attr">height</span>:80px;<br><span class="hljs-attr">background</span>: red;<br>&#125;<br>&lt;/style&gt;<br>&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;father&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;父级元素事件被触发&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;child&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;子级元素事件被触发&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>错误的写法：</strong>要知道错误的原因</p><p>因为jsp是解释性语言，浏览器是一行一行读并且执行的，因为先执行的时候没有获取到这个标签元素，又在这个标签元素中加了一个监听事件，所以报空了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;style&gt;<br>#father&#123;<br><span class="hljs-attr">width</span>:200px;<br><span class="hljs-attr">height</span>:200px;<br><span class="hljs-attr">background</span>: black;<br><span class="hljs-attr">padding</span>: 10px;  <span class="hljs-comment">// 内边距填充大小 盒子里填充一层泡沫一样，大小就是填充的厚度</span><br>&#125;<br>#child&#123;<br><span class="hljs-attr">width</span>:80px;<br><span class="hljs-attr">height</span>:80px;<br><span class="hljs-attr">background</span>: red;<br>&#125;<br>&lt;/style&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;father&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;父级元素事件被触发&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;child&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;子级元素事件被触发&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><p>可以取消冒泡事件机制，传一个事件源，e.stopPropagation();</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;father&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;父级元素事件被触发&quot;</span>);<br>&#125;);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;child&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>e.<span class="hljs-title function_">stopPropagation</span>();<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;子级元素事件被触发&quot;</span>);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>比事件冒泡机制多加了一个参数:第三个参数 true</p><p>效果：点击子级，先触发父级，再触发子级</p><p>与“事件冒泡机制”触发的顺序不同</p><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651377734960.png" alt="1651377734960"></p><p><img src="/1000/03/09/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-JavaScript/1651377750940.png" alt="1651377750940"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;style&gt;<br>#father&#123;<br><span class="hljs-attr">width</span>:200px;<br><span class="hljs-attr">height</span>:200px;<br><span class="hljs-attr">background</span>: black;<br><span class="hljs-attr">padding</span>: 10px;  <span class="hljs-comment">// 内边距填充大小 盒子里填充一层泡沫一样，大小就是填充的厚度</span><br>&#125;<br>#child&#123;<br><span class="hljs-attr">width</span>:80px;<br><span class="hljs-attr">height</span>:80px;<br><span class="hljs-attr">background</span>: red;<br>&#125;<br>&lt;/style&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;father&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;父级元素事件被触发&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,<span class="hljs-literal">true</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;child&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;子级元素事件被触发&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>OOP</p><p>面向对象编程，面向对象，使用对象</p><h4 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h4><p>java中将对象单独写一个类，而js写在同一个页面就可以实现</p><blockquote><p>方式一：new</p></blockquote><p>var user &#x3D; new Object();</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>user.<span class="hljs-property">username</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>;<br>user.<span class="hljs-property">password</span>=<span class="hljs-string">&quot;123&quot;</span>;<br>user.<span class="hljs-property">say</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;username:&quot;</span>+thisr.<span class="hljs-property">username</span>+<span class="hljs-string">&quot;,password:&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span>);<br>&#125;<br>user.<span class="hljs-title function_">say</span>(); <span class="hljs-comment">// username:zhangsan,password:123</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>方式二：构造方法</p></blockquote><p>构造方法是一个方法</p><p>使用构造方法要先创建对象</p><p>注意：需要使用this关键字，跟java是一样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">user</span>(<span class="hljs-params">username,password</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span>=username;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span>=password<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">say</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;username:&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span>+<span class="hljs-string">&quot;,password:&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title function_">user</span>(<span class="hljs-string">&quot;zhangsna&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>user.<span class="hljs-title function_">say</span>(); <span class="hljs-comment">// username:zhangsna,password:123</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>方式三：使用直接量</p></blockquote><p>直接使用一个变量，等于。。</p><p>变量方法中使用变量的属性，也是需要使用this的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script&gt;<br><span class="hljs-type">var</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> &#123;<br>username:<span class="hljs-string">&quot;zhagnsan&quot;</span>,<br>password:<span class="hljs-string">&quot;123&quot;</span>,<br>say:function()&#123;<br>console.log(<span class="hljs-string">&quot;username:&quot;</span>+<span class="hljs-built_in">this</span>.username+<span class="hljs-string">&quot;,password:&quot;</span>+<span class="hljs-built_in">this</span>.password);<br>&#125;<br>&#125;<br>user.say(); <span class="hljs-comment">// username:zhagnsan,password:123</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>在互联网上来回传递数据</p><p>需要一个统一的格式，（一人一套）否则解析难度就比较大了</p><p>JSON：是一种轻量级的数据交换格式</p><p>易于人阅读和编写，同时也易于机器解析和生成</p><p><strong>json格式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>属性<span class="hljs-number">1</span>：值<span class="hljs-number">1</span>，<br>属性<span class="hljs-number">2</span>：值<span class="hljs-number">2</span>，<br>。。。。<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="普通json"><a href="#普通json" class="headerlink" title="普通json"></a>普通json</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> json1=&#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&quot;吕布&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">31</span>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json1.<span class="hljs-property">username</span>+<span class="hljs-string">&quot;,&quot;</span>+json1.<span class="hljs-property">age</span>);  <span class="hljs-comment">// 吕布,31</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="json数组"><a href="#json数组" class="headerlink" title="json数组"></a>json数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> jsonArr = [&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;貂蝉&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;小乔&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">17</span>&#125;];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsonArr[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>+<span class="hljs-string">&quot;,&quot;</span>+jsonArr[<span class="hljs-number">0</span>].<span class="hljs-property">age</span>);  <span class="hljs-comment">// 貂蝉,18</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsonArr[<span class="hljs-number">1</span>].<span class="hljs-property">name</span>+<span class="hljs-string">&quot;,&quot;</span>+jsonArr[<span class="hljs-number">1</span>].<span class="hljs-property">age</span>);  <span class="hljs-comment">// 小乔,17</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="复杂的json对象"><a href="#复杂的json对象" class="headerlink" title="复杂的json对象"></a>复杂的json对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> jsonObj=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;赵云&quot;</span>,<br><span class="hljs-attr">sex</span>:<span class="hljs-string">&quot;男&quot;</span>,<br><span class="hljs-attr">hobby</span>:[<span class="hljs-string">&quot;篮球&quot;</span>,<span class="hljs-string">&quot;游泳&quot;</span>,<span class="hljs-string">&quot;上网&quot;</span>]<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsonObj.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;,&quot;</span>+jsonObj.<span class="hljs-property">sex</span>+<span class="hljs-string">&quot;,&quot;</span>+jsonObj.<span class="hljs-property">hobby</span>[<span class="hljs-number">2</span>]); <span class="hljs-comment">//赵云,男,上网</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="window对象open方法"><a href="#window对象open方法" class="headerlink" title="window对象open方法"></a>window对象open方法</h3><p>文件丢失</p><h3 id="screen屏幕对象和location资源定位"><a href="#screen屏幕对象和location资源定位" class="headerlink" title="screen屏幕对象和location资源定位"></a>screen屏幕对象和location资源定位</h3><h3 id="history历史对象"><a href="#history历史对象" class="headerlink" title="history历史对象"></a>history历史对象</h3><h3 id="navigator导航对象"><a href="#navigator导航对象" class="headerlink" title="navigator导航对象"></a>navigator导航对象</h3><h3 id="本地储存"><a href="#本地储存" class="headerlink" title="本地储存"></a>本地储存</h3>]]></content>
    
    
    <categories>
      
      <category>Java就业训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第三阶段</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java新特性和项目-任务二新特性</title>
    <link href="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="任务二：新特性"><a href="#任务二：新特性" class="headerlink" title="任务二：新特性"></a>任务二：新特性</h1><h2 id="Java8的概述和函数式接口的概念"><a href="#Java8的概述和函数式接口的概念" class="headerlink" title="Java8的概述和函数式接口的概念"></a>Java8的概述和函数式接口的概念</h2><p>2014年3月份发布</p><p>这个版本很多的公司还正在使用</p><p>是一个跨时代的版本</p><p>语言、编译器、库、工具和JVM等方面多了十多个特性</p><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>接口中只包含一个抽象方法的接口</p><p>新特性由别的语言发展过来的，所以没有叫方法式接口</p><p><strong>函数式接口判断</strong>：只需要判断是否只包含一个抽象方法就可以判断</p><p>Runnable接口，只有一个run抽象方法</p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651564644232.png" alt="Runnable接口"></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@FunctionalInterface</span><br></code></pre></td></tr></table></figure><p>@FunctionalInterface 声明是函数式接口，会对接口进行检查</p><p>Comparator接口</p><p><code>&lt;T&gt;</code>表示支持泛型</p><p>java8中增加了function包（java.util.function）</p><p>里面有大量的函数式接口</p><hr><h3 id="查看function包"><a href="#查看function包" class="headerlink" title="查看function包"></a><strong>查看function包</strong></h3><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651565194039.png" alt="1651565194039"></p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651565225770.png" alt="1651565225770"></p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651565259692.png" alt="1651565259692"></p><p>java官方为什么提供这么多函数式接口：以后自己就不用写函数式接口了</p><p>我们需要学会常用的函数式接口</p><hr><h3 id="常用的函数式接口"><a href="#常用的函数式接口" class="headerlink" title="常用的函数式接口"></a>常用的函数式接口</h3><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651565410311.png" alt="1651565410311"></p><p>Runnable:没参数，没返回值</p><p>Supplier:没有参数，有返回值</p><p>Consumer:有参数，没有返回值</p><p>Predicate:有参数，有返回值（boolean）</p><p>Function:有参数，有返回值</p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651582989624.png" alt="1651582989624"></p><hr><h2 id="匿名内部类实现函数式接口"><a href="#匿名内部类实现函数式接口" class="headerlink" title="匿名内部类实现函数式接口"></a>匿名内部类实现函数式接口</h2><p>要使用这些接口，要知道</p><div class="note note-success">            <p>当接口类型的引用作为方法的参数形参时，实参的传递方式有两种</p><ul><li>自定义类实现这个接口</li><li>匿名内部类</li></ul>          </div><p>使用匿名内部类的形式使用这些接口</p><p>匿名内部类的语法格式</p><div class="note note-success">            <p>匿名内部类的语法形式：</p><p>父类&#x2F;接口类型 &#x3D; new 父类&#x2F;接口类型(){方法的重写};</p>          </div><p>Runnable runnable &#x3D; new Runnable()</p><p class="note note-primary">该回车的时候就回车，只要出现就可回车</p>![该回车的时候就回车](1651567517341.png)<p class="note note-primary">代码案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 没参数没返回值</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;测试Function接口&quot;</span>);<br>            &#125;<br>        &#125;;<br>        runnable.run();<br>        <span class="hljs-comment">// 没参数，有返回值</span><br>        Supplier&lt;String&gt; supplier = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Supplier</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这是我的返回值&quot;</span>;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">supplierReturn</span> <span class="hljs-operator">=</span> supplier.get();<br>        System.out.println(supplierReturn);<br>        <span class="hljs-comment">// 有参数，没返回值</span><br>        Consumer&lt;String&gt; consumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String s)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;我传入的参数&quot;</span>+s);<br>            &#125;<br>        &#125;;<br>        consumer.accept(<span class="hljs-string">&quot;你真是太好拉&quot;</span>);<br>        <span class="hljs-comment">// 有参数有返回值</span><br>        Predicate&lt;String&gt; predicate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String s)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">predicateReturn</span> <span class="hljs-operator">=</span> predicate.test(<span class="hljs-string">&quot;我的predicate测试&quot;</span>);<br>        System.out.println(predicateReturn);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-primary">运行结果：</p>![运行结果](1651568189004.png)<p>其他三个new的时候可以不传泛型，默认是Object</p><hr><h2 id="lambda表达式实现函数式接口"><a href="#lambda表达式实现函数式接口" class="headerlink" title="lambda表达式实现函数式接口"></a>lambda表达式实现函数式接口</h2><p>可以一直接实例化函数式接口</p><p>比匿名内部类更加简介</p><p>简化了代码</p><h3 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h3><div class="note note-success">            <p>(参数列表) -&gt; { 方法体; } </p><p>其中()、参数类型、{} 以及return关键字 可以省略。</p>          </div><hr><h3 id="省略讲解"><a href="#省略讲解" class="headerlink" title="省略讲解"></a>省略讲解</h3><div class="note note-success">            <p>()-可以省略</p><p>前提：有且仅有一个参数</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 有参数，没返回值</span><br>        Consumer&lt;String&gt; consumer = (String s)-&gt; System.out.println(s);<br>        Consumer&lt;String&gt; consumer1 = s-&gt; System.out.println(s);<br></code></pre></td></tr></table></figure><hr><div class="note note-success">            <p>参数类型-可以省略</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 有参数，没返回值</span><br>        Consumer&lt;String&gt; consumer = (String s)-&gt; System.out.println(s);<br>        Consumer&lt;String&gt; consumer1 = s-&gt; System.out.println(s);<br></code></pre></td></tr></table></figure><hr><div class="note note-success">            <p>{}与return可以省略</p><p>前提：{}中只有一句并没有return</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 没参数没返回值</span><br>      <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> ()-&gt;&#123;System.out.println(<span class="hljs-string">&quot;runnable测试lambda&quot;</span>); &#125;;<br>      <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable1</span> <span class="hljs-operator">=</span> ()-&gt;System.out.println(<span class="hljs-string">&quot;runnable1测试lambda&quot;</span>);<br></code></pre></td></tr></table></figure><p>带有return的时候不能省略{}【可以直接连return也一起省略】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 没参数，有返回值</span><br>      Supplier&lt;String&gt; supplier = ()-&gt;&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;supplier测试lambda&quot;</span>;&#125;;<br>      Supplier&lt;String&gt; supplier1 = ()-&gt;<span class="hljs-string">&quot;supplier测试lambda&quot;</span>;<br></code></pre></td></tr></table></figure><hr><h3 id="lambda使用案例"><a href="#lambda使用案例" class="headerlink" title="lambda使用案例"></a>lambda使用案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 没参数没返回值</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> ()-&gt;&#123;System.out.println(<span class="hljs-string">&quot;runnable测试lambda&quot;</span>); &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable1</span> <span class="hljs-operator">=</span> ()-&gt;System.out.println(<span class="hljs-string">&quot;runnable1测试lambda1&quot;</span>);<br>        runnable.run();<br>        runnable1.run();<br>        <span class="hljs-comment">// 没参数，有返回值</span><br>        Supplier&lt;String&gt; supplier = ()-&gt;&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;supplier测试lambda&quot;</span>;&#125;;<br>        Supplier&lt;String&gt; supplier1 = ()-&gt;<span class="hljs-string">&quot;supplier测试lambda1&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">supplierReturn</span> <span class="hljs-operator">=</span> supplier.get();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">supplierReturn1</span> <span class="hljs-operator">=</span> supplier1.get();<br>        System.out.println(supplierReturn);<br>        System.out.println(supplierReturn1);<br>        <span class="hljs-comment">// 有参数，没返回值</span><br>        Consumer&lt;String&gt; consumer = (String s)-&gt; System.out.println(s);<br>        Consumer&lt;String&gt; consumer1 = s-&gt; System.out.println(s);<br>        consumer.accept(<span class="hljs-string">&quot;Consumer测试lambda&quot;</span>);<br>        consumer1.accept(<span class="hljs-string">&quot;Consumer测试lambda1&quot;</span>);<br>        <span class="hljs-comment">// 有参数有返回值</span><br>        Predicate&lt;String&gt; predicate = (String s)-&gt;&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;;<br>        Predicate&lt;String&gt; predicate1 = s-&gt;<span class="hljs-literal">false</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">predicateReturn</span> <span class="hljs-operator">=</span> predicate.test(<span class="hljs-string">&quot;predicate测试lambda&quot;</span>);<br>        System.out.println(predicateReturn);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">predicateReturn1</span> <span class="hljs-operator">=</span> predicate1.test(<span class="hljs-string">&quot;predicate测试lambda1&quot;</span>);<br>        System.out.println(predicateReturn1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651570058244.png" alt="运行结果"></p><hr><h2 id="方法引用实现函数式接口的方式一"><a href="#方法引用实现函数式接口的方式一" class="headerlink" title="方法引用实现函数式接口的方式一"></a>方法引用实现函数式接口的方式一</h2><p>lambda是对匿名内部类的一个简化</p><p>比lambda更简化的代码（方法引用）</p><p class="note note-primary">方法引用是lambda的简化</p><p class="note note-primary">方法引用使用一对冒号 :: 将类或对象与方法名进行连接</p>需要先创建一个对象类<p>使用匿名内部类、lambda、方法引用方式调用对象中的方法</p><div class="note note-success">            <p>匿名内部类的方法与对象的方法结构类似：</p><p>创建对象，与匿名内部类方法关联，匿名内部类方法与对象方法关联</p><p>匿名内部类方法与对象方法还类似</p><p>对象方法的调用交给了匿名内部类方法</p>          </div><p class="note note-primary">代码案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String userName, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Preson&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;userName=&#x27;&quot;</span> + userName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.userName+<span class="hljs-string">&quot;,&quot;</span>+<span class="hljs-built_in">this</span>.password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 没参数没返回值</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;124&quot;</span>);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                person.show();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable02</span> <span class="hljs-operator">=</span> ()-&gt;&#123;person.show(); &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable03</span> <span class="hljs-operator">=</span> person::show;<br>        runnable.run();<br>        runnable02.run();<br>        runnable03.run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-primary">运行结果：</p>![运行结果](1651572121221.png)<hr><h2 id="方法引用实现函数式接口的方式二"><a href="#方法引用实现函数式接口的方式二" class="headerlink" title="方法引用实现函数式接口的方式二"></a>方法引用实现函数式接口的方式二</h2><h3 id="有参无返回值"><a href="#有参无返回值" class="headerlink" title="有参无返回值"></a>有参无返回值</h3><p>如何调用对象的setXXX（String XXX）方法；</p><p>setXXX有参数、没有返回值</p><p>Consumer，使用这个函数式接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 没参数没返回值</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;124&quot;</span>);<br>        Consumer&lt;String&gt; consumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String s)</span> &#123;<br>                person.setUserName(s);<br>            &#125;<br>        &#125;;<br>        consumer.accept(<span class="hljs-string">&quot;李四&quot;</span>);<br>        System.out.println(person);<br>        Consumer&lt;String&gt; consumer2 = person::setUserName;<br>        consumer2.accept(<span class="hljs-string">&quot;王五&quot;</span>);<br>        System.out.println(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651582478462.png" alt="1651582478462"></p><hr><h3 id="无参有返回值"><a href="#无参有返回值" class="headerlink" title="无参有返回值"></a>无参有返回值</h3><p>调用对象中的getXXX（）方法</p><p>Supplier 使用的是这个函数式接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">ublic <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 没参数没返回值</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;124&quot;</span>);<br>        Supplier&lt;String&gt; supplier = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Supplier</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> person.getUserName();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personName</span> <span class="hljs-operator">=</span> supplier.get();<br>        System.out.println(personName);<br>        Supplier&lt;String&gt; supplier2 = person::getUserName;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personName2</span> <span class="hljs-operator">=</span> supplier2.get();<br>        System.out.println(personName2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651582703202.png" alt="1651582703202"></p><hr><h2 id="方法引用实现函数式接口的方式三"><a href="#方法引用实现函数式接口的方式三" class="headerlink" title="方法引用实现函数式接口的方式三"></a>方法引用实现函数式接口的方式三</h2><p>之前都是调用  引用::非静态方法</p><p>现在我们使用  类名::静态方法</p><h3 id="实现Integer类中的parseInt方法"><a href="#实现Integer类中的parseInt方法" class="headerlink" title="实现Integer类中的parseInt方法"></a>实现Integer类中的parseInt方法</h3><p>有参有返回值，返回值的类型不是boolean</p><p>Function&lt;T,R&gt; apply</p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651583472795.png" alt="1651583472795"></p><p>先入后出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 静态方法  有参有返回值</span><br>        Function&lt;String,Integer&gt; function = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;String,Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(String str)</span> &#123;<br>                <span class="hljs-keyword">return</span> Integer.parseInt(str);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">apply</span> <span class="hljs-operator">=</span> function.apply(<span class="hljs-string">&quot;12589&quot;</span>);<br>        System.out.println(apply);<br>        <span class="hljs-comment">// 使用方法引用的方式</span><br>        Function&lt;String,Integer&gt; function2 = Integer::parseInt;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">apply1</span> <span class="hljs-operator">=</span> function2.apply(<span class="hljs-string">&quot;45895&quot;</span>);<br>        System.out.println(apply1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651583688897.png" alt="1651583688897"></p><hr><h3 id="实现Integer中compare方法"><a href="#实现Integer中compare方法" class="headerlink" title="实现Integer中compare方法"></a>实现Integer中compare方法</h3><p>小于是-1  &#x3D;&#x3D; 0  否则是1</p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651583748734.png" alt="1651583748734"></p><p>有两个入参（入参都是Integer类型），一个出参</p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651584320550.png" alt="1651584320550"></p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651584347574.png" alt="1651584347574"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 静态方法  有参有返回值</span><br>        Comparator&lt;Integer&gt; comparator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> Integer.compare(o1,o2);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">compare</span> <span class="hljs-operator">=</span> comparator.compare(<span class="hljs-number">12</span>, <span class="hljs-number">34</span>);<br>        System.out.println(compare);<br>        Comparator&lt;Integer&gt; comparator1 = Integer::compare;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">compare1</span> <span class="hljs-operator">=</span> comparator1.compare(<span class="hljs-number">45</span>, <span class="hljs-number">12</span>);<br>        System.out.println(compare1);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651584410142.png" alt="1651584410142"></p><hr><h2 id="方法引用实现函数式接口的方式四"><a href="#方法引用实现函数式接口的方式四" class="headerlink" title="方法引用实现函数式接口的方式四"></a>方法引用实现函数式接口的方式四</h2><p>之前都是调用  </p><p>​引用::非静态方法</p><p>​ 类名::静态方法</p><div class="note note-success">            <p>还用一种特殊的写法：类名::非静态方法</p><p>一个参数对象作为调用对象来调用方法时，可以使用上述方式</p><p>传两个参数，一个参数做为调用对象调用时</p><p>这种写法比较抽象；比较特殊</p><p>o1.compareTo(o2)</p>          </div><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651586829162.png" alt="1651586829162"></p><p>Integer 非静态方法compare具体实现不知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 静态方法  类名::非静态方法 一个参数对象作为调用对象来调用方法时</span><br>        Comparator&lt;Integer&gt; comparator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">compare</span> <span class="hljs-operator">=</span> comparator.compare(<span class="hljs-number">23</span>, <span class="hljs-number">45</span>);<br>        System.out.println(compare);  <span class="hljs-comment">// -1</span><br>        <span class="hljs-comment">// lambda格式</span><br>        Comparator&lt;Integer&gt; comparator1 = (o1,o2)-&gt;&#123;<span class="hljs-keyword">return</span> o1.compareTo(o2);&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">compare1</span> <span class="hljs-operator">=</span> comparator1.compare(<span class="hljs-number">45</span>, <span class="hljs-number">23</span>);<br>        System.out.println(compare1);  <span class="hljs-comment">// 1</span><br>        <span class="hljs-comment">// 方法引用形式</span><br>        Comparator&lt;Integer&gt; comparator2 = Integer::compareTo;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">compare2</span> <span class="hljs-operator">=</span> comparator2.compare(<span class="hljs-number">34</span>, <span class="hljs-number">14</span>);<br>        System.out.println(compare2);  <span class="hljs-comment">// 1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651587000188.png" alt="1651587000188"></p><hr><h2 id="方法引用实现函数式接口的方式五"><a href="#方法引用实现函数式接口的方式五" class="headerlink" title="方法引用实现函数式接口的方式五"></a>方法引用实现函数式接口的方式五</h2><p>另外一种特殊的引用：构造器的引用(第四种了)</p><p>类名::new</p><h3 id="无参方式创建对象"><a href="#无参方式创建对象" class="headerlink" title="无参方式创建对象"></a>无参方式创建对象</h3><p>使用匿名内部类的方式通过Supplier函数式接口创建Person类型的对象并返回</p><p>无参，有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 构造器的引用 类名::new</span><br>        Supplier&lt;Person&gt; supplier = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Supplier</span>&lt;Person&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> supplier.get();<br>        System.out.println(person);  <span class="hljs-comment">// Preson&#123;userName=&#x27;null&#x27;, password=&#x27;null&#x27;&#125;</span><br>        <span class="hljs-comment">// lambad表达式的方式</span><br>        Supplier&lt;Person&gt; supplier1 = ()-&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> supplier1.get();<br>        System.out.println(person1);  <span class="hljs-comment">// Preson&#123;userName=&#x27;null&#x27;, password=&#x27;null&#x27;&#125;</span><br>        <span class="hljs-comment">// 方法引用的方式</span><br>        Supplier&lt;Person&gt; supplier2 = Person::<span class="hljs-keyword">new</span>;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person2</span> <span class="hljs-operator">=</span> supplier2.get();<br>        System.out.println(person2);  <span class="hljs-comment">// Preson&#123;userName=&#x27;null&#x27;, password=&#x27;null&#x27;&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651587678383.png" alt="1651587678383"></p><hr><h3 id="有参方式创建对象"><a href="#有参方式创建对象" class="headerlink" title="有参方式创建对象"></a>有参方式创建对象</h3><p>在手册中找，两个参数，一个返回值</p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651587710751.png" alt="1651587710751"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 构造器的引用 类名::new</span><br>        BiFunction&lt;String,String,Person&gt; biFunction = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BiFunction</span>&lt;String, String, Person&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">apply</span><span class="hljs-params">(String s, String s2)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(s,s2);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> biFunction.apply(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;234&quot;</span>);<br>        System.out.println(person);  <span class="hljs-comment">// Preson&#123;userName=&#x27;张三&#x27;, password=&#x27;234&#x27;&#125;</span><br>        <span class="hljs-comment">// lambad表达式的方式</span><br>        BiFunction&lt;String,String,Person&gt; biFunction1 = (s,s2)-&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(s,s2);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> biFunction1.apply(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;324&quot;</span>);<br>        System.out.println(person1);  <span class="hljs-comment">// Preson&#123;userName=&#x27;李四&#x27;, password=&#x27;324&#x27;&#125;</span><br>        <span class="hljs-comment">// 方法引用的方式</span><br>        BiFunction&lt;String,String,Person&gt; biFunction2 = Person::<span class="hljs-keyword">new</span>;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person2</span> <span class="hljs-operator">=</span> biFunction2.apply(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;453&quot;</span>);<br>        System.out.println(person2); <span class="hljs-comment">// Preson&#123;userName=&#x27;王五&#x27;, password=&#x27;453&#x27;&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651588293068.png" alt="1651588293068"></p><hr><h2 id="方法引用实现函数式接口的方式六"><a href="#方法引用实现函数式接口的方式六" class="headerlink" title="方法引用实现函数式接口的方式六"></a>方法引用实现函数式接口的方式六</h2><p>使用Function函数式接口创建指定数量的Person类型的对象数组</p><p>第五中特殊的方法引用：数组的引用 :</p><p>类[]::new</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 数组的引用 类名[]::new</span><br>        Function&lt;Integer,Person[]&gt; function = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;Integer, Person[]&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Person[] apply(Integer integer) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[integer];<br>            &#125;<br>        &#125;;<br>        Person[] personArr = function.apply(<span class="hljs-number">3</span>);<br>        System.out.println(Arrays.asList(personArr));  <span class="hljs-comment">// [null, null, null]</span><br>        <span class="hljs-comment">// lambad表达式的方式</span><br>        Function&lt;Integer,Person[]&gt; function1 = i-&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[i];<br>        System.out.println(Arrays.asList(function1.apply(<span class="hljs-number">3</span>)));  <span class="hljs-comment">// [null, null, null]</span><br>        <span class="hljs-comment">// 方法引用的方式</span><br>        Function&lt;Integer,Person[]&gt; function2=Person[]::<span class="hljs-keyword">new</span>;<br>        System.out.println(Arrays.asList(function2.apply(<span class="hljs-number">3</span>)));  <span class="hljs-comment">// [null, null, null]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651588931825.png" alt="1651588931825"></p><hr><h2 id="使用List集合实现元素的过滤"><a href="#使用List集合实现元素的过滤" class="headerlink" title="使用List集合实现元素的过滤"></a>使用List集合实现元素的过滤</h2><p>案例：Person集合，对list中所有的成年人过滤并放到另一个list中</p><p class="note note-primary"> Person2类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person2</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person2</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person2</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person2&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-primary"> 老的方式代码案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.准备一个List集合并放入Person类型的对象后打印</span><br>        List&lt;Person2&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">34</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;xiaoqiao&quot;</span>, <span class="hljs-number">17</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhouyu&quot;</span>, <span class="hljs-number">20</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">30</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;guanyu&quot;</span>, <span class="hljs-number">35</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;liubei&quot;</span>, <span class="hljs-number">40</span>));<br>        <span class="hljs-comment">//System.out.println(Arrays.asList(list));  // 错误的写法，虽然不会报错，但打印出来的是地址(打印数组用的)</span><br>        <span class="hljs-keyword">for</span> (Person2 person2 : list) &#123;<br>            System.out.println(person2);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;-------------------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">// 2.将List集合中所有成年人过滤出来并放入另外一个集合中打印</span><br>        List&lt;Person2&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Person2 tp : list) &#123;<br>            <span class="hljs-keyword">if</span> (tp.getAge() &gt;= <span class="hljs-number">18</span>) &#123;<br>                list1.add(tp);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//System.out.println(Arrays.asList(list1));  // 这是打印数组用的，不要这样用</span><br>        <span class="hljs-keyword">for</span> (Person2 person2 : list1) &#123;<br>            System.out.println(person2);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651590231684.png" alt="1651590231684"></p><hr><h2 id="Stream流实现集合元素的过滤和打印"><a href="#Stream流实现集合元素的过滤和打印" class="headerlink" title="Stream流实现集合元素的过滤和打印"></a>Stream流实现集合元素的过滤和打印</h2><p>以前的方式是可以实现数据过滤的；</p><p>Java8中有更好的实现方法</p><p>java8中的流是对集合功能的增强</p><p>比原有集合的功能还要强</p><p>可以对集合元素进行负责的查找、过滤、筛选等操作</p><p>对集合通过Stream做一个中间操作，返回处理后的结果</p><hr><p>使用stream调用filter可以进行过滤操作</p><p>通过stream方法拿到Stream方法的引用，引用.可以调用filter方法，返回的还是Stream，然后调用forEach方法</p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651590943632.png" alt="1651590943632"></p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651590972278.png" alt="1651590972278"></p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651591066857.png" alt="1651591066857"></p><h3 id="匿名内部类的方式"><a href="#匿名内部类的方式" class="headerlink" title="匿名内部类的方式"></a>匿名内部类的方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.准备一个List集合并放入Person类型的对象后打印</span><br>        List&lt;Person2&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">34</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;xiaoqiao&quot;</span>, <span class="hljs-number">17</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhouyu&quot;</span>, <span class="hljs-number">20</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">30</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;guanyu&quot;</span>, <span class="hljs-number">35</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;liubei&quot;</span>, <span class="hljs-number">40</span>));<br>        <span class="hljs-comment">//System.out.println(Arrays.asList(list));  // 错误的写法，虽然不会报错，但打印出来的是地址(打印数组用的)</span><br>        <span class="hljs-keyword">for</span> (Person2 person2 : list) &#123;<br>            System.out.println(person2);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;-------------------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">// 2.将List集合中所有成年人过滤出来并放入另外一个集合中打印</span><br>        list.stream().filter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Person2&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Person2 person2)</span> &#123;<br>                <span class="hljs-keyword">return</span> person2.getAge()&gt;=<span class="hljs-number">18</span>;<br>            &#125;<br>        &#125;).forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Person2&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Person2 person2)</span> &#123;<br>                System.out.println(person2);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651591427012.png" alt="1651591427012"></p><hr><h3 id="Lambda的方式"><a href="#Lambda的方式" class="headerlink" title="Lambda的方式"></a>Lambda的方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">list.stream().filter(p2-&gt;p2.getAge()&gt;=<span class="hljs-number">18</span>).forEach(p2-&gt; System.out.println(p2));<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651591582968.png" alt="1651591582968"></p><hr><h3 id="方法引用的方式"><a href="#方法引用的方式" class="headerlink" title="方法引用的方式"></a>方法引用的方式</h3><p>这个地方较难</p><p>调用方法是可以的，调用方法后进行判断，方法引用是不成的;</p><p class="note note-primary">感觉方法引用只能做最简单的动作，最强大的还是Lambda</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.准备一个List集合并放入Person类型的对象后打印</span><br>        List&lt;Person2&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">34</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;xiaoqiao&quot;</span>, <span class="hljs-number">17</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhouyu&quot;</span>, <span class="hljs-number">20</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">30</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;guanyu&quot;</span>, <span class="hljs-number">35</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;liubei&quot;</span>, <span class="hljs-number">40</span>));<br>        <span class="hljs-comment">//System.out.println(Arrays.asList(list));  // 错误的写法，虽然不会报错，但打印出来的是地址(打印数组用的)</span><br>        <span class="hljs-keyword">for</span> (Person2 person2 : list) &#123;<br>            System.out.println(person2);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;-------------------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">// 2.将List集合中所有成年人过滤出来并放入另外一个集合中打印</span><br>        list.stream().filter(p2-&gt;p2.getAge()&gt;=<span class="hljs-number">18</span>).forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651591893126.png" alt="1651591893126"></p><hr><h2 id="Stream流实现集合元素的切片和映射"><a href="#Stream流实现集合元素的切片和映射" class="headerlink" title="Stream流实现集合元素的切片和映射"></a>Stream流实现集合元素的切片和映射</h2><p>上面是用集合的默认方法来获取流</p><p>也可以使用其他的方式来获取流，其他方式需要自己尝试</p><h3 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h3><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651592200384.png" alt="1651592200384"></p><hr><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><h4 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a>筛选与切片</h4><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651592291831.png" alt="1651592291831"></p><p>通过流跳过两个元素后再获取三个元素</p><p>这些方法的返回值都是Stream</p><p>StringBuffer与它类似</p><blockquote><p><strong>通过流跳过两个元素后再获取三个元素</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.准备一个List集合并放入Person类型的对象后打印</span><br>        List&lt;Person2&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">34</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;xiaoqiao&quot;</span>, <span class="hljs-number">17</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhouyu&quot;</span>, <span class="hljs-number">20</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">30</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;guanyu&quot;</span>, <span class="hljs-number">35</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;liubei&quot;</span>, <span class="hljs-number">40</span>));<br>        list.stream().skip(<span class="hljs-number">2</span>).limit(<span class="hljs-number">3</span>).forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651592526998.png" alt="1651592526998"></p><hr><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><p>映射：一组元素按照一定的规则，处理处另外一组元素</p><p>一组元素与另一组元素建立映射关系</p><p>使用的是Function函数式接口，有参有返回值</p><p>获取person中age并打印</p><p class="note note-primary">匿名内部类的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.准备一个List集合并放入Person类型的对象后打印</span><br>        List&lt;Person2&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">34</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;xiaoqiao&quot;</span>, <span class="hljs-number">17</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhouyu&quot;</span>, <span class="hljs-number">20</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">30</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;guanyu&quot;</span>, <span class="hljs-number">35</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;liubei&quot;</span>, <span class="hljs-number">40</span>));<br>        list.stream().map(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;Person2, Object&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">apply</span><span class="hljs-params">(Person2 person2)</span> &#123;<br>                <span class="hljs-keyword">return</span> person2.getName();<br>            &#125;<br>        &#125;).forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Object&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Object o)</span> &#123;<br>                System.out.println(o);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651593293054.png" alt="1651593293054"></p><p class="note note-primary">Lambda的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">list.stream().map(p2-&gt;p2.getName()).forEach(p2-&gt; System.out.println(p2));<br></code></pre></td></tr></table></figure><p class="note note-primary">方法引用的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">list.stream().map(Person2::getName).forEach(System.out::println);<br></code></pre></td></tr></table></figure><p class="note note-primary">方法引用：类名作为参数的时候，可以使用类名.调用非静态方法的形式</p>##  Stream流实现集合元素的排序<p>中间操作的，排序</p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651595240384.png" alt="1651595240384"></p><p>实现集合中的元素的自然排序并打印</p><p>注意：是自然排序：</p><div class="note note-success">            <p>Person类中没有定义自然排序，如果对person对象进行自然排序，会报异常</p><p>需要实现一个接口： Comparable<Person></p><p>实现compareTo方法</p><p>可以在方法中规定按什么排序，可以规定按姓名排序(也可以规定按年龄排序)</p><p>按姓名排序  getName().compareTo(o.getName());</p>          </div><h3 id="排序方式一"><a href="#排序方式一" class="headerlink" title="排序方式一"></a>排序方式一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.准备一个List集合并放入Person类型的对象后打印</span><br>        List&lt;Person2&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">34</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;xiaoqiao&quot;</span>, <span class="hljs-number">17</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhouyu&quot;</span>, <span class="hljs-number">20</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">30</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;guanyu&quot;</span>, <span class="hljs-number">35</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;liubei&quot;</span>, <span class="hljs-number">40</span>));<br>        <span class="hljs-comment">//list.stream().sorted((p1,p2)-&gt;p1.getName().compareTo(p2.getName())).forEach(System.out::println);</span><br>        list.stream().sorted(Comparator.comparing(Person2::getName)).forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651595697717.png" alt="1651595697717"></p><hr><h3 id="排序方式二"><a href="#排序方式二" class="headerlink" title="排序方式二"></a>排序方式二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Person2&gt;&#123;<br>  <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Person2 o)</span> &#123;<br>        <span class="hljs-keyword">return</span> getName().compareTo(o.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.准备一个List集合并放入Person类型的对象后打印</span><br>        List&lt;Person2&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">34</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;xiaoqiao&quot;</span>, <span class="hljs-number">17</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhouyu&quot;</span>, <span class="hljs-number">20</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">30</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;guanyu&quot;</span>, <span class="hljs-number">35</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;liubei&quot;</span>, <span class="hljs-number">40</span>));<br>        list.stream().sorted().forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651595292233.png" alt="1651595292233"></p><hr><h2 id="Stream流实现集合元素的匹配和查找"><a href="#Stream流实现集合元素的匹配和查找" class="headerlink" title="Stream流实现集合元素的匹配和查找"></a>Stream流实现集合元素的匹配和查找</h2><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651595861974.png" alt="1651595861974"></p><p>noneMatch与max来讲</p><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p>判断集合中是否没有元素的年龄大于45岁的</p><p>不太会写，先使用匿名内部类的方式去写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.准备一个List集合并放入Person类型的对象后打印</span><br>        List&lt;Person2&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">34</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;xiaoqiao&quot;</span>, <span class="hljs-number">17</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhouyu&quot;</span>, <span class="hljs-number">20</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">30</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;guanyu&quot;</span>, <span class="hljs-number">35</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;liubei&quot;</span>, <span class="hljs-number">40</span>));<br>        <span class="hljs-comment">// 判断集合中是否没有元素的年龄大于45岁的</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> list.stream().noneMatch(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Person2&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Person2 person2)</span> &#123;<br>                <span class="hljs-keyword">return</span> person2.getAge() &gt; <span class="hljs-number">45</span>;<br>            &#125;<br>        &#125;);<br>        System.out.println(b); <span class="hljs-comment">// true</span><br>        <span class="hljs-comment">// lambda的方式</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> list.stream().noneMatch(p2 -&gt; p2.getAge() &gt; <span class="hljs-number">45</span>);<br>        System.out.println(b1); <span class="hljs-comment">// true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651596503764.png" alt="1651596503764"></p><hr><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><p>按照指定的比较器规则获取集合所有元素中的最大值</p><p>感觉题目出的有点问题</p><p>有点难度：max中如何比较不会（Comparator）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.准备一个List集合并放入Person类型的对象后打印</span><br>        List&lt;Person2&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">34</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;xiaoqiao&quot;</span>, <span class="hljs-number">17</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhouyu&quot;</span>, <span class="hljs-number">20</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">30</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;guanyu&quot;</span>, <span class="hljs-number">35</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;liubei&quot;</span>, <span class="hljs-number">40</span>));<br>        <span class="hljs-comment">// 按照指定的比较器规则获取集合所有元素中的最大值</span><br>        Optional&lt;Person2&gt; max = list.stream().max(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Person2&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Person2 o1, Person2 o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o1.getAge() - o2.getAge();<br>            &#125;<br>        &#125;);<br>        System.out.println(max);  <span class="hljs-comment">// Optional[Person2&#123;name=&#x27;liubei&#x27;, age=40&#125;]</span><br>        <span class="hljs-comment">// lambda方式</span><br>        Optional&lt;Person2&gt; max1 = list.stream().max((o1, o2) -&gt; o1.getAge() - o2.getAge());<br>        System.out.println(max1); <span class="hljs-comment">// Optional[Person2&#123;name=&#x27;liubei&#x27;, age=40&#125;]</span><br>        <span class="hljs-comment">// 方法引用方式(视频上没有教这种方式)</span><br>        Optional&lt;Person2&gt; max2 = list.stream().max(Comparator.comparing(Person2::getAge));<br>        System.out.println(max2); <span class="hljs-comment">// Optional[Person2&#123;name=&#x27;liubei&#x27;, age=40&#125;]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651596925585.png" alt="1651596925585"></p><p>Person类没有指定自然还需的规则，如果对改对象进行尽然</p><hr><h2 id="Stream流实现集合元素的规约和收集"><a href="#Stream流实现集合元素的规约和收集" class="headerlink" title="Stream流实现集合元素的规约和收集"></a>Stream流实现集合元素的规约和收集</h2><h3 id="规约"><a href="#规约" class="headerlink" title="规约"></a>规约</h3><p>年龄映射出来并进行累加</p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651649889118.png" alt="1651649889118"></p><p>规约：对映射出来的数据进行处理</p><p>代码有背景颜色，代码有待优化</p><p>Integer中有有一个静态求和的方法</p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651650762582.png" alt="1651650762582"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.准备一个List集合并放入Person类型的对象后打印</span><br>        List&lt;Person2&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">34</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;xiaoqiao&quot;</span>, <span class="hljs-number">17</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhouyu&quot;</span>, <span class="hljs-number">20</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">30</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;guanyu&quot;</span>, <span class="hljs-number">35</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;liubei&quot;</span>, <span class="hljs-number">40</span>));<br>        <span class="hljs-comment">// 年龄映射出来并进行累加</span><br>        Optional&lt;Integer&gt; reduce = list.stream().map(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;Person2, Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(Person2 person2)</span> &#123;<br>                <span class="hljs-keyword">return</span> person2.getAge();<br>            &#125;<br>        &#125;).reduce(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryOperator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(Integer integer, Integer integer2)</span> &#123;<br>                <span class="hljs-keyword">return</span> integer + integer2;<br>            &#125;<br>        &#125;);<br>        System.out.println(reduce);  <span class="hljs-comment">// Optional[176]</span><br>        <span class="hljs-comment">// lambda形式</span><br>        Optional&lt;Integer&gt; reduce1 = list.stream().map(p2 -&gt; p2.getAge()).reduce((o1, o2) -&gt; o1 + o2);<br>        System.out.println(reduce1);  <span class="hljs-comment">// Optional[176]</span><br>        <span class="hljs-comment">// 方法引用方式</span><br>        Optional&lt;Integer&gt; reduce2 = list.stream().map(Person2::getAge).reduce(Integer::sum);<br>        System.out.println(reduce2); <span class="hljs-comment">// Optional[176]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651650893240.png" alt="1651650893240"></p><h3 id="搜集"><a href="#搜集" class="headerlink" title="搜集"></a>搜集</h3><p>实现将元素中所有元素的姓名映射出来并搜集到集合中打印</p><p>Collections.toList()</p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651650229428.png" alt="1651650229428"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.准备一个List集合并放入Person类型的对象后打印</span><br>        List&lt;Person2&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">34</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;xiaoqiao&quot;</span>, <span class="hljs-number">17</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhouyu&quot;</span>, <span class="hljs-number">20</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;zhangfei&quot;</span>, <span class="hljs-number">30</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;guanyu&quot;</span>, <span class="hljs-number">35</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>(<span class="hljs-string">&quot;liubei&quot;</span>, <span class="hljs-number">40</span>));<br>        <span class="hljs-comment">// 实现将元素中所有元素的姓名映射出来并搜集到集合中打印</span><br>        List&lt;String&gt; collect = list.stream().map(Person2::getName).collect(Collectors.toList());<br>        System.out.println(Arrays.asList(collect));  <span class="hljs-comment">// [[zhangfei, xiaoqiao, zhouyu, zhangfei, guanyu, liubei]]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651651303147.png" alt="1651651303147"></p><hr><h2 id="Optional类的概念和使用"><a href="#Optional类的概念和使用" class="headerlink" title="Optional类的概念和使用"></a>Optional类的概念和使用</h2><p>案例：判断字符串是否为空，如果不为空就将字符串的长度打印出来</p><p>hello 5</p><p>null  空指针异常</p><p>null !&#x3D; null</p><p>如果为空，打印为空，如果不为空，打印长度</p><p>java.util.Option类可以想象为要给容器</p><p>根据这个容器可以判断数值是否为空（可以解决空指针异常）</p><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651651731456.png" alt="1651651731456"></p><p>第一个方法，类层级，类名点调用，将数值装到Option中</p><p>第二个方法：根map类似，建立一个映射关系，数据处理后返回（例如：字符串长度与字符串建立映射关系）</p><p>第三个方法：如果不存在为多少</p><p>开发中可能：Person是否为空，Person中的name是否为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        Optional&lt;String&gt; str1 = Optional.ofNullable(str);<br>        <span class="hljs-comment">// 匿名内部类的方式</span><br>        Optional&lt;Integer&gt; integer = str1.map(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;String, Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(String s)</span> &#123;<br>                <span class="hljs-keyword">return</span> s.length();<br>            &#125;<br>        &#125;);<br>        System.out.println(integer);  <span class="hljs-comment">// Optional.empty</span><br>        System.out.println(integer.orElse(<span class="hljs-number">0</span>));  <span class="hljs-comment">// 0</span><br>        <span class="hljs-comment">// lambda的方式</span><br>        Optional&lt;Integer&gt; integer1 = str1.map(s -&gt; s.length());<br>        System.out.println(integer1);  <span class="hljs-comment">// Optional.empty</span><br>        System.out.println(integer1.orElse(<span class="hljs-number">0</span>));  <span class="hljs-comment">// 0</span><br>        <span class="hljs-comment">// 方法引用的方式</span><br>        Optional&lt;Integer&gt; integer2 = str1.map(String::length);<br>        System.out.println(integer2);  <span class="hljs-comment">// Optional.empty</span><br>        System.out.println(integer2.orElse(<span class="hljs-number">0</span>));  <span class="hljs-comment">// 0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/1000/01/22/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%BA%8C%E6%96%B0%E7%89%B9%E6%80%A7/1651652756708.png" alt="1651652756708"></p><hr><h2 id="模块化的概念和使用"><a href="#模块化的概念和使用" class="headerlink" title="模块化的概念和使用"></a>模块化的概念和使用</h2><p>Java9的新特性</p><p>2017年9月份发布</p><p>这个用的时候再学</p>]]></content>
    
    
    <categories>
      
      <category>Java就业训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一阶段JavaSE</tag>
      
      <tag>模块五Java新特性和项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java就业训练营模板</title>
    <link href="/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5%E6%A8%A1%E6%9D%BF/"/>
    <url>/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="任务一：常用设计原则和设计模式"><a href="#任务一：常用设计原则和设计模式" class="headerlink" title="任务一：常用设计原则和设计模式"></a>任务一：常用设计原则和设计模式</h1><h2 id="软件开发的流程"><a href="#软件开发的流程" class="headerlink" title="软件开发的流程"></a>软件开发的流程</h2><p>常用的设计原则；</p><p>首先讲解下软件开发的流程；</p><p>软件 开发 是一个复杂的过程</p><ul><li>需求分析文档（分析客户需求，让客户更容易上手，尽可能的比需求想的更好）签合同，首款</li><li>概要设计文档（这个项目需要采用什么架构，项目分成几层哪，几个大模块几个小模块，大模块与小模块有什么关系呢）（公司项目经理及有资质的员工来做）</li><li>详细设计文档（可以参考类图结构）</li></ul><p>类名、成员变量、成员方法（方法参数与返回值类型）；就只剩下方法体了；这是最初始的程序员；</p><p>详细设计文档会非常的详细</p><p>开会讨论、再修改、开会讨论、再修改、。。。。</p><p>差不多了，然后分工；</p><p><img src="/1652670425609.png" alt="1652670425609"></p><ul><li>编码和测试</li></ul><p>编码过程中需要进行测试（我们进行的是一个功能测试）</p><p>开发完成后会提交给测试人员测试（代码的抗压能力，功能问题），需要不断的修改与测试</p><p>知道暂时没有大的问题</p><ul><li>安装和调试</li></ul><p>安装到用户的电脑上，让项目运行，交给用户如何用</p><ul><li>维护和升级</li></ul><p>有这个的话价格是不一样的；需要注意；（需要注意这点）</p><p>一个项目可能半年的时间，编码可能占用一个月的时间（六分之一的时间），重点在项目的设计方面，设计不好后面的都白搭；</p><p>架构方面的错误导致加班的，还是非常的少的；</p><p>测试也是非常消耗时间的；（不能到客户的电脑上运行就不行了）</p><p>加班很多的时候（活干不完）（客户一会让这样，一会让那样）</p><p>在整个软件的开发过程中，设计是很重要的；</p><p>经验的提升，也会到设计里面，不仅仅写代码，我们需要做的还有很多；</p><hr><h2 id="开闭原则和里氏代换原则"><a href="#开闭原则和里氏代换原则" class="headerlink" title="开闭原则和里氏代换原则"></a>开闭原则和里氏代换原则</h2><p>软件开发的过程中，设计非常重要；</p><p>这里讲解写常用的设计原则</p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>代码写完后，尽量不要修改；对扩展开发对修改关闭；</p><p>例如：</p><p>写一个Person实体类；构造方法，getset</p><p>很多的地方用到了这个Person类，测试人员测试的没有任何的问题；然后客户改了需求，人还需要添加年龄的特征（直接在原有的Person类中加一个age属性【不建议】），这可能造成所有使用Person类的方法都要重新做；大大增加了工作量；</p><p>可以新写一个SubPerson类；继承Person类</p><p>建议、尽量不要修改；都测试完了建议对修改关闭，扩展开放；</p><p>好处：测试工作不需要做了；</p><hr><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><p>任何基类可以出现的地方，子类一定可以出现</p><p>理念让我们多使用多态</p><p>屏蔽不同子类的差异性实现通用的编程，实现不一样的效果；</p><p>想打印圆形的对象，又要打印圆形的对象又要打印矩形的对象；使用基类；</p><p>建议多使用多态；</p><p>多态：父类类型的引用指向子类对象；</p><hr><h2 id="依赖倒转原则和接口隔离原则"><a href="#依赖倒转原则和接口隔离原则" class="headerlink" title="依赖倒转原则和接口隔离原则"></a>依赖倒转原则和接口隔离原则</h2><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p>尽量去依赖抽象类，而不是具体的实现类；</p><p>原因：抽象类对子类具有强制性和规范性；</p><p>抽象类的意义：抽象类的实际意义不在于自身创建对象，而在于被继承；当一个类继承抽象类之后，必须重写所有的抽象方法，否则该类也会是抽象类；</p><p>具体实现类没有规范性和约束性；</p><p>person类中写了一个show方法，在subPerson类中没有反应；</p><p>如果将Person类变成抽象类，如果在Person中写了一个show方法，subPerson就会报错，必须要重写show方法</p><p>具体实现类管不住子类</p><hr><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>开发中多使用小接口，而不是大接口，避免接口的污染；降低了类之间的关联；</p><p>是对依赖倒转原则的补充；</p><p>例如：写一个Animal接口</p><p>接口中写一个run()与fly()方法；</p><p>写一个Dao类，实现Animal接口，需要重写run()与fly()方法；</p><p>由于Animal接口中有fly()方法，造成了dao类可以fly了；</p><p>是对依赖倒转原则的补充；</p><p>新建两个接口RunAnimal及FlyAnimal接口；</p><p>创建接口的时候需要考虑周全，需要经验；</p><p>降低了类之间的关联；</p><hr><h2 id="迪米特法则和合成复用原则"><a href="#迪米特法则和合成复用原则" class="headerlink" title="迪米特法则和合成复用原则"></a>迪米特法则和合成复用原则</h2><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>迪米特法则又叫做最少知道原则；</p><p>配角喜欢打听主角的事情，然后之后就死了；</p><p>一个实体类尽可能的较少其他实体之间发生相关作用；使系统功能模块相对独立；</p><p>高内聚，低耦合</p><p>类该有的都写进这类中，使用的时候能拿到用；</p><p>和其他类的功能能不关联就不要关联；</p><p>例如：在拉钩网中担任java讲师</p><p>java讲师该有的技能都尽可能拥有；</p><p>跟讲师无关的功能，尽可能的越少越好；</p><p>比如说会修水龙头，结果水龙头出问题了，就让去修水龙头；</p><p>在讲课的时候，结果敲门让去修水龙头，会不断的别打断；</p><p>这造成不断的打断自己的功能；</p><p>尽可能的高内聚，低耦合</p><hr><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>在开发中尽量多使用合成&#x2F;聚合的方式，而不是继承的方式。</p><p>例如：创建了一个类B，写了一个test()方法</p><p>可以类B继承类A，可以实现（不建议）</p><p>java中只支持单继承，不能继承多继承；</p><p>造成B不能再继承B的父类了；</p><p>又想调用A中的show方法；</p><p>可以在B的类中，声明一个其他类类型的引用作为这个类的成员变量；在这个类的构造方法中，可以进行初始化；再调用其他类的方法的时候，就可以直接的调用； </p><p>在生产者消费者的案例中使用了这个方法；</p><p>这个方法会在很多的地方使用到（合成服用原则）</p><p>类中使用到其他类的方法，要想到合成服用原则；</p><p>先将这六个原则先记下来，使用的时候理解体会；</p><hr><h2 id="设计模式的概念和分类"><a href="#设计模式的概念和分类" class="headerlink" title="设计模式的概念和分类"></a>设计模式的概念和分类</h2><p>设计模式是反复使用的、被多数人知晓的、经过分类的、代码经验的总结；</p><p>前辈总结的规则，规律；</p><p>java诞生已经20多年了；</p><p>已经有很多的java开发工程师；</p><p>写了大量的代码，有了很多的经验；</p><p>对这些经验的总结，就是设计模式；</p><p>适用于固定场合的固定套路；</p><hr><p>单例类、单例设计模式：</p><p>1)私有化成员变量，使用private关键字修饰</p><p>2）使用本类类型的引用指向本类类型的对象，</p><p>3）使用公有的get方法将这个对象返回出去（public static修饰）</p><hr><p>分为三大类：</p><p>创建型模式：单例设计模式、工厂方法模式、抽象工厂模式。。。</p><p>结构型模式：装饰类模式、代理模式。。</p><p>行为型模式：（这种模式带来的行为效果）模板设计模式；（抽象类）</p><p>23中设计模式，只讲几种，其他的后面再慢慢学习；</p><hr><h2 id="懒汉式的线程同步实现"><a href="#懒汉式的线程同步实现" class="headerlink" title="懒汉式的线程同步实现"></a>懒汉式的线程同步实现</h2><p>设计模式的详解（重点）</p><p>单例设计模式之前已经讲过了，分为饿汉式及懒汉式</p><p>建议使用饿汉式，懒汉式存在线程安全问题</p><p>饿汉式：【非常重要】</p><p>1）私有化构造方法，使用private关键字修饰；</p><p>2）声明本类类型的引用执行本类类型的对象并使用private static关键字修饰</p><p>3）提供公有的get方法负责将上述的对象返回出去，使用public static关键字修饰；</p><p>写的排序是2）1）3）</p><p>有多个线程同时访问这个get方法，new对象是需要时间了，还没有new完（没有将对象赋值）的时候另一个线程也进来了，也会执行new；就会创建了两个对象；这就不是单例设计模式了；</p><p>-》我们对get这个方法的调用进行进一步处理；</p><p>只能有一个线程执行new；</p><p>使用<code>synchronized</code>关键字，在get上加上这个关键字；只有一个线程可以进入这个方法；</p><p>也可以在方法中使用<code>synchronized</code>关键字</p><p>synchronized(Singleton.class){需要new的代码}</p><p>只能进入一个class</p><hr><h2 id="懒汉式的线程同步优化"><a href="#懒汉式的线程同步优化" class="headerlink" title="懒汉式的线程同步优化"></a>懒汉式的线程同步优化</h2><p>上面可以使用单例效果，但还是不完美；</p><p>第一次调用的时候需要锁起来，第二次，第三次就不需要加锁了，需要对get中的方法优化；</p><p>只有第一次调用这个方法的时候才锁起来；</p><p>在加锁的外面加一个条件：if(null&#x3D;&#x3D;sin)</p><p>sin 指的是我们创建的那个单例对象；</p><p>减少了流程，提高了性能；</p><p>如果在面试中写到了这样，就是完美的写法了；</p><p>注意笔试部分；</p><hr><h2 id="普通工厂模式的概念和实现"><a href="#普通工厂模式的概念和实现" class="headerlink" title="普通工厂模式的概念和实现"></a>普通工厂模式的概念和实现</h2><p>第二钟设计模式：工厂设计模式；</p><p>富士康：造产品的，</p><p>工厂设计模式：造对象的；</p><p>之前我们自己new，-》现在我们通过工厂类去new对象；</p><p>我们可以通过类图来看：</p><p><img src="/1652670425609.png" alt="1652670425609"></p><p>三部分：接口名、成员变量、成员方法；</p><p>接口的下面（实现了这个接口）有两个实现类，都要实现接口中的方法</p><p>发送工厂类：工厂类的作用就是new对象的，new mailSender对象呢，还是SmsSender对象呢，根据参数来确定；</p><p>通过返回值形成多态（返回的对象是接口）；</p><p>先写Sender接口；里面写一个send()方法，不需要返回值也不需要参数；</p><p>写一个MailSender类（实现Sender接口），重写Send方法；</p><p>写一个SmsSender类（实现Sender接口），重写Send方法；</p><p>创建一个SendFactory类，自定义成员方法实现对象的创建；</p><p>public Sender produce(String type){}</p><p>根据type的值判断创建哪个对象，并返回；</p><p>编写一个方法测试工具类；</p><p>1）声明工厂类类型的引用指向工厂类类型的对象；</p><p>2）调用生产方法来实现对象的创建；</p><p>3）使用对象调用模拟发生行为；</p><p>照着类图写方法；需要写明白；</p><p>照着架子写就好；</p><hr><h2 id="普通工厂模式的意义"><a href="#普通工厂模式的意义" class="headerlink" title="普通工厂模式的意义"></a>普通工厂模式的意义</h2><p>最终写的效果，可以使用两行代码来实现；</p><p>new+调用对象的方法；</p><p>为什么不直接new对象来使用呢？而使用工厂模式；</p><p>我们将两种方式进行一个对比；</p><p>两行代码实现的优点：代码简单，可读性强；</p><p>上一节代码的缺点：代码复杂，可读性差；</p><p>如果想要new200个对象，new完之后客户改了需求，要在new之前打印一个语句；使用上一节的方法new之前加一个打印语句就好了；上一节的方法更轻松一些；</p><p>好不容易加上去了，客户有让将这一行打印给去掉，老的方法就又麻烦了；</p><p>-》上一节方法的好处：扩展性和可维护性更强，尤其是创建大量对象的前提下</p><p>&#x3D;》老的方法的缺点：扩展性和可维护性略差；</p><p>制作手机，不会自己造一个工厂来造手机；会让第三方公司来造手机；</p><hr><h2 id="多个工厂方法模式的实现"><a href="#多个工厂方法模式的实现" class="headerlink" title="多个工厂方法模式的实现"></a>多个工厂方法模式的实现</h2><p>普通工厂方法模式，有一个小问题；</p><p>调用工厂方法的时候，需要传一个字符串，如果字符串写错的话，就不会成功调用对象；会返回一个null,用null掉用方法会造成空指针异常；</p><p><img src="/1652708407754.png" alt="1652708407754"></p><p>使用普通工程模式可以实现对象的创建，但是传入的字符串出错会造成不会创建对象，调用发发发的时候会造成空指针异常；</p><p>解决：在工程类中写两个成员方法；</p><p>普通工厂模式是一个成员方法可以创建多个不一样的对象；</p><p>这个工厂模式是多个成员方法创建多个不一样的对象；</p><p>多个工厂方法模式-》一个方法变成了多个方法；</p><hr><h2 id="静态工厂方法模式的实现"><a href="#静态工厂方法模式的实现" class="headerlink" title="静态工厂方法模式的实现"></a>静态工厂方法模式的实现</h2><p>多个工厂方法模式比普通工厂模式有的优点是，不用再传字符串了，避免了空指针异常的发生；</p><p>但是上面两种工厂模式，需要先new factory，；</p><p>需要先创建工厂类的对象，根据工厂类对象的引用才可以取创建对象；</p><p><img src="/1652708709807.png" alt="1652708709807"></p><p>-》可以直接将工厂类中的方法加上static关键字，变成静态方法；（可以看到图中工厂方法下面使用了下划线-便是静态方法）</p><p>-》直接工厂类名点调用我们的方法就就可以了；</p><p>这样我们的工厂类使用起来就更方便了；</p><p>我们什么时候使用工厂模式呢？</p><p>不管是普通，多个方法、静态工厂模式，只要是大量对象的创建且具有共同的接口时就可以使用我们的工厂设计模式；【重要】</p><hr><h2 id="抽象工厂模式的实现"><a href="#抽象工厂模式的实现" class="headerlink" title="抽象工厂模式的实现"></a>抽象工厂模式的实现</h2><p>静态工厂模式已经相对于完美了，但是还是存在一定的不理想之处；</p><p>如果还想创建一个新的对象，需要再工厂类中加一个新的静态方法，这就违反了开闭原则；</p><p>不建议这样写；</p><p><img src="/1652709043311.png" alt="1652709043311"></p><p>之间是一个工厂类，多个静态方法-》一个工厂接口，两个工厂方法；</p><p>新建一个Provider接口，内部写一个produce方法</p><p>创建一个MailSendFactory类（继承Provider接口），重写produce方法；</p><p>创建一个SmsSendFactory类（继承Provicer接口），重写produce方法；</p><p>抽象工厂模式与工厂方法模式的区别：之前是一个工厂类多个工厂方法，现在是多个工厂类，一个工厂方法；</p><p>注意：抽象工厂模式，使用的时候，还是需要new的；</p><hr><h2 id="抽象工厂模式的扩展优势"><a href="#抽象工厂模式的扩展优势" class="headerlink" title="抽象工厂模式的扩展优势"></a>抽象工厂模式的扩展优势</h2><p>抽象工厂模式，使用多个工厂列，不许要违背开闭原则；</p><p>原有的类没有做任何的改变，不违背开闭原则；</p><p>新建一个工厂类（PacketSendFactory）实现之前的工厂方法；</p><p>抽象工厂模式，建议使用啊；因为不用违背开闭原则；</p><hr><h2 id="装饰器模式的实现"><a href="#装饰器模式的实现" class="headerlink" title="装饰器模式的实现"></a>装饰器模式的实现</h2><p>在原有功能不变的情况下，添加新的功能时使用装饰器模式；</p><p>在原有对象的基础上进行；</p><p>要理解什么是装饰，装修是装饰、化妆也是装饰；</p><p>装饰器模式：是给一个对象动态的添加一些新的功能；</p><p><img src="/1652709645146.png" alt="1652709645146"></p><p>装饰类，是对被装饰类的修饰，-号是私有的；</p><p>先写接口；Sourceable，自定义一个抽象方法 void method();</p><p>创建Source类（实现Sourceable接口），重写method方法（打印一句话）；</p><p>创建SourceableTest类；</p><p>使用抽象类来创建对象；</p><p>代码写完之后，不要再修改；需要在原来类的基础上增加一些装饰语句；</p><p>创建一个Decorator类（实现Sourceable类），</p><p>private Sourceable source;</p><p>public Secorator(Sourceable source){this.soruce&#x3D;source}</p><p>使用合成复用原则；</p><p>method;保证原有功能不变；</p><p>使用装饰类实现功能；</p><p>Sourceable sourceable1 &#x3D; new Decorator(sourceable);</p><p>在原有功能不变的情况下，添加新 的功能</p><p>确定：产生很多相似的对象，不易排错；</p><hr><h2 id="代理模式的实现"><a href="#代理模式的实现" class="headerlink" title="代理模式的实现"></a>代理模式的实现</h2><p>就是找一个代理类，替代对象进行一系列操作；</p><p>跟修饰类模式完全不同；</p><p>跟我们找房子的中介一样；</p><p>中介代替我们找房子；</p><p><img src="/1652710423516.png" alt="1652710423516"></p><p>创建一个Proxy类（实现Sourceable接口）；</p><p>重写抽象方法；</p><p>private Source source;</p><p>不需要Source类创建对象再传过来了；</p><p>构造方法中直接new一个对象；</p><p>全权创建对象就可以了；</p><hr><h2 id="模板方法模式的实现"><a href="#模板方法模式的实现" class="headerlink" title="模板方法模式的实现"></a>模板方法模式的实现</h2><p>写一个抽象类，斜体标识抽象的含义；</p><p>op:将什么符号</p><p>【不知道为什么没有了，记得以后写好后保存，关闭文件】</p>]]></content>
    
    
    <categories>
      
      <category>Java就业训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一阶段JavaSE</tag>
      
      <tag>模块五Java新特性和项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java工程师高薪训练营-学习文档</title>
    <link href="/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5-%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/"/>
    <url>/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5-%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="第一阶段-开源框架源码剖析"><a href="#第一阶段-开源框架源码剖析" class="headerlink" title="第一阶段 开源框架源码剖析"></a>第一阶段 开源框架源码剖析</h1><p>该阶段只要是通过纯手写持久层、IoC&amp;AOP等框架来培养框架思维和自定义框架的能力，通过SSM源码剖析进一步理解设计模式的具体应用，通过SpringSecurity和SpringWebFlux框架的强化应用增强企业实战能力。</p><hr><h2 id="模块一：持久层框架设计实现及MyBatis源码分析"><a href="#模块一：持久层框架设计实现及MyBatis源码分析" class="headerlink" title="模块一：持久层框架设计实现及MyBatis源码分析"></a>模块一：持久层框架设计实现及MyBatis源码分析</h2><p>通过持久层框架的衍生分析，推导出开发步骤进而纯手写持久层框架，对MyBatis技术系统复习后进行源码剖析。</p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/Mybatis-2021-12.pdf" title="Mybatis-2021-12.pdf">Mybatis-2021-12.pdf</a></p><hr><h2 id="模块二：IoC容器设计实现及Spring源码分析"><a href="#模块二：IoC容器设计实现及Spring源码分析" class="headerlink" title="模块二：IoC容器设计实现及Spring源码分析"></a>模块二：IoC容器设计实现及Spring源码分析</h2><p>从分析代码耦合到IoC思想演进，从功能代码抽取到面向切面AOP思想演进，最后会手写Spring和对Spring进行源码深入分析。</p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/Spring%E9%AB%98%E7%BA%A7%E6%A1%86%E6%9E%B6%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0.pdf" title="Spring高级框架课程笔记.pdf">Spring高级框架课程笔记.pdf</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">课程学习spring-<span class="hljs-number">5.1</span>.x中文注释版源码<br>链接：https:<span class="hljs-comment">//pan.baidu.com/s/1scSKyMkgVmThFvU3ep8Ufw </span><br>提取码：j4go<br></code></pre></td></tr></table></figure><hr><h2 id="模块三：MVC框架设计实现及SpringMVC源码分析、通用数据操作接口设计、SpringData高级应用"><a href="#模块三：MVC框架设计实现及SpringMVC源码分析、通用数据操作接口设计、SpringData高级应用" class="headerlink" title="模块三：MVC框架设计实现及SpringMVC源码分析、通用数据操作接口设计、SpringData高级应用"></a>模块三：MVC框架设计实现及SpringMVC源码分析、通用数据操作接口设计、SpringData高级应用</h2><p>本模块从MVC设计模式及前端控制器模型分析，手写属于自己的MVC框架，并对SpringMVC源码分析；对Spring Data 接口规范进行深入剖析。</p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/SpringMVC%E9%AB%98%E7%BA%A7%E6%A1%86%E6%9E%B6%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0.pdf" title="SpringMVC高级框架课程笔记.pdf">SpringMVC高级框架课程笔记.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/SpringDataJPA%E8%AE%B2%E4%B9%89_Java%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5.pdf" title="SpringDataJPA讲义_Java高薪训练营.pdf">SpringDataJPA讲义_Java高薪训练营.pdf</a></p><hr><h2 id="模块四-约定优于配置设计范式及Spring-Boot源码剖析"><a href="#模块四-约定优于配置设计范式及Spring-Boot源码剖析" class="headerlink" title="模块四-约定优于配置设计范式及Spring Boot源码剖析"></a>模块四-约定优于配置设计范式及Spring Boot源码剖析</h2><p>通过持久层框架的衍生分析，推导出开发步骤进而纯手写持久层框架，对MyBatis技术系统复习后进行源码剖析。</p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/SpringBoot_v2.0.pdf" title="SpringBoot_v2.0.pdf">SpringBoot_v2.0.pdf</a></p><hr><h2 id="模块五：安全框架设计实战及SpringSecurity源码剖析【选修】"><a href="#模块五：安全框架设计实战及SpringSecurity源码剖析【选修】" class="headerlink" title="模块五：安全框架设计实战及SpringSecurity源码剖析【选修】"></a>模块五：安全框架设计实战及SpringSecurity源码剖析【选修】</h2><p>本模块将会剖析Spring全家桶中的安全管理框架SpringSecurity，重点分析SpringSecurity认证和授权的核心流程，通过对其源码的剖析，探秘底层实现原理及框架设计思想。</p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/SpringSecurity%E5%BA%94%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.pdf" title="SpringSecurity应用及源码分析.pdf">SpringSecurity应用及源码分析.pdf</a></p><hr><h2 id="模块六：响应式编程设计实战及SpringWebFlux源码剖析【选修】"><a href="#模块六：响应式编程设计实战及SpringWebFlux源码剖析【选修】" class="headerlink" title="模块六：响应式编程设计实战及SpringWebFlux源码剖析【选修】"></a>模块六：响应式编程设计实战及SpringWebFlux源码剖析【选修】</h2><p>本模块会对Spring5.0新引入的响应式编程技术进行全面剖析，掌握Reactor、WebFlux核心机制和内部原理，并对Spring WebFlux源码进行剖析，探秘底层实现原理及框架设计思想。</p><p><a href="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/webflux.pdf" title="webflux.pdf">webflux.pdf</a></p><hr><h1 id="第二阶段-分布式架构性能调优"><a href="#第二阶段-分布式架构性能调优" class="headerlink" title="第二阶段 分布式架构性能调优"></a>第二阶段 分布式架构性能调优</h1><p>该阶段是对Web应用服务器进行深入使用，对Tomcat、Nginx性能调优进行讲解，以及Cluster模式潜在问题及解决方案深入讲解。</p><hr><h2 id="模块一：Tomcat深度剖析及性能调优、Nginx深度剖析及性能调优"><a href="#模块一：Tomcat深度剖析及性能调优、Nginx深度剖析及性能调优" class="headerlink" title="模块一：Tomcat深度剖析及性能调优、Nginx深度剖析及性能调优"></a>模块一：Tomcat深度剖析及性能调优、Nginx深度剖析及性能调优</h2><p>本模块会对Tomcat工作原理及架构进行剖析、性能调优，分析Tomcat漏洞防护与安全加固策略，及Nginx进程模型及产线配置学习。</p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/Apache-Tomcat-Web%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0.pdf" title="Apache-Tomcat-Web应用服务器课程笔记.pdf">Apache-Tomcat-Web应用服务器课程笔记.pdf</a></p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/Nginx%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0.pdf" title="Nginx课程笔记.pdf">Nginx课程笔记.pdf</a></p><hr><h2 id="模块二-Cluster模式潜在问题及解决方案、Web服务综合解决方案"><a href="#模块二-Cluster模式潜在问题及解决方案、Web服务综合解决方案" class="headerlink" title="模块二:Cluster模式潜在问题及解决方案、Web服务综合解决方案"></a>模块二:Cluster模式潜在问题及解决方案、Web服务综合解决方案</h2><p>本模块会对集群状态下一致性Hash和Session共享提出解决方案，并对页面动态模块化渲染、CDN等加以说</p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84%E4%B8%AD%E5%9C%BA%E6%99%AF%E5%8C%96%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0.pdf" title="分布式集群架构中场景化解决方案课程笔记.pdf">分布式集群架构中场景化解决方案课程笔记.pdf</a></p><hr><h2 id="模块三：并发编程与环境优化【选修】"><a href="#模块三：并发编程与环境优化【选修】" class="headerlink" title="模块三：并发编程与环境优化【选修】"></a>模块三：并发编程与环境优化【选修】</h2><p>本模块会深入讲解线程高级部分，例如线程状态机制分析与线程池实现原理、抽象队列化同步器AQS等，还会深入JVM分析与调优，Linux性能监控与调优。</p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%89/JVM%E4%BC%98%E5%8C%96.pdf" title="JVM优化.pdf">JVM优化.pdf</a></p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%89/Linux-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.pdf" title="Linux-性能优化.pdf">Linux-性能优化.pdf</a></p><p><a href="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/%E6%A8%A1%E5%9D%97%E4%B8%89/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-20210930.pdf" title="并发编程-20210930.pdf">并发编程-20210930.pdf</a></p><hr><h2 id="模块四：Web应用安全与加速【选修】"><a href="#模块四：Web应用安全与加速【选修】" class="headerlink" title="模块四：Web应用安全与加速【选修】"></a>模块四：Web应用安全与加速【选修】</h2><p>本模块会剖析HTTP和HTTPS协议，加深理解Web交互机制，还会介绍各种防护技术，来抵御XSS、CSRF、注入等多种类型的攻击，并详解CDN加速实现原理，对系统访问速度进行优化。</p><p><a href="%E6%A8%A1%E5%9D%97%E4%BA%8C/web%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E4%B8%8E%E5%8A%A0%E9%80%9F%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89.pdf" title="web应用安全与加速课程讲义.pdf">web应用安全与加速课程讲义.pdf</a></p><hr><h1 id="第三阶段-分布式架构设计-amp-微服务深入剖析"><a href="#第三阶段-分布式架构设计-amp-微服务深入剖析" class="headerlink" title="第三阶段 分布式架构设计&amp;微服务深入剖析"></a>第三阶段 分布式架构设计&amp;微服务深入剖析</h1><p>该阶段为分布式学习提供理论基础，如分布式一致性协议Paxos、远程过程调用RPC等，并对分布式中间件Dubbo和SpringCloud进行深入剖析。</p><h2 id="模块一-分布式理论、架构设计（自定义RPC）"><a href="#模块一-分布式理论、架构设计（自定义RPC）" class="headerlink" title="模块一 分布式理论、架构设计（自定义RPC）"></a>模块一 分布式理论、架构设计（自定义RPC）</h2><p>本模块会对分布式架构的理论、架构设计、网络通信、Netty、NIO、RPC等进行讲解，并设计实现一个RPC远程过程调用框架。</p><p><a href="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E3%80%81%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E8%87%AA%E5%AE%9A%E4%B9%89RPC%EF%BC%89.pdf" title="分布式理论、架构设计（自定义RPC）.pdf">分布式理论、架构设计（自定义RPC）</a></p><hr><h2 id="模块二-分布式服务治理、分布式协调服务Zookeeper深入"><a href="#模块二-分布式服务治理、分布式协调服务Zookeeper深入" class="headerlink" title="模块二 分布式服务治理、分布式协调服务Zookeeper深入"></a>模块二 分布式服务治理、分布式协调服务Zookeeper深入</h2><p>本模块会对分布式治理中遇到的问题，例如权重、降级、容错路由等进行讲解，并对分布式协调服务Zookeeper进行系统的说明。</p><p><a href="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/Zookeeper%E8%AE%B2%E4%B9%89.pdf" title="Zookeeper讲义.pdf">Zookeeper讲义.pdf</a></p><hr><h2 id="模块三-高性能RPC框架Apache-Dubbo"><a href="#模块三-高性能RPC框架Apache-Dubbo" class="headerlink" title="模块三 高性能RPC框架Apache Dubbo"></a>模块三 高性能RPC框架Apache Dubbo</h2><p>本模块对Apache的Dubbo框架进行深入讲解，涉及架构设计、SPI机制、高级使用及其源码分析等内容。</p><p><a href="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/Dubbo%E8%AE%B2%E4%B9%89.pdf" title="Dubbo讲义.pdf">Dubbo讲义.pdf</a></p><hr><h2 id="模块四-SpringCloud组件设计原理及实战（上）"><a href="#模块四-SpringCloud组件设计原理及实战（上）" class="headerlink" title="模块四 SpringCloud组件设计原理及实战（上）"></a>模块四 SpringCloud组件设计原理及实战（上）</h2><p>本模块对SpringCloud的一些高级特性，例如链路追踪设计原理及Sleuth+Zipkin、Spring Cloud Alibaba等进行讲解。</p><p><a href="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/Spring_Cloud_%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0.pdf" title="Spring_Cloud_微服务课程笔记.pdf">Spring_Cloud_微服务课程笔记.pdf</a></p><hr><h2 id="模块五：SpringCloud组件设计原理及实战（下）"><a href="#模块五：SpringCloud组件设计原理及实战（下）" class="headerlink" title="模块五：SpringCloud组件设计原理及实战（下）"></a>模块五：SpringCloud组件设计原理及实战（下）</h2><p>本模块对SpringCloud的一些高级特性以及Spring Cloud Alibaba进行原理和源码剖析。涉及链路追踪设计原理及Sleuth+Zipkin、Nacos、Sentinel、Seata等内容。</p><p><a href="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/Spring_Cloud_%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0.pdf" title="Spring_Cloud_微服务课程笔记.pdf">Spring_Cloud_微服务课程笔记.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/sentinel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.pdf" title="sentinel源码分析.pdf">sentinel源码分析.pdf</a></p><p><a href="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/seata%E8%AE%B2%E4%B9%89.pdf" title="seata讲义.pdf">seata讲义.pdf</a></p><hr><h1 id="第四阶段-大型分布式存储系统架构进阶"><a href="#第四阶段-大型分布式存储系统架构进阶" class="headerlink" title="第四阶段 大型分布式存储系统架构进阶"></a>第四阶段 大型分布式存储系统架构进阶</h1><p>数据存储瓶颈是架构师重要技能之一，该阶段是对市场上分布式存储进行深入剖析，有分布式数据存储MySQL，分布式文件存储DFS系列，分布式云存储OSS等。</p><hr><h2 id="模块一：MySQL海量数据存储与优化（上）"><a href="#模块一：MySQL海量数据存储与优化（上）" class="headerlink" title="模块一：MySQL海量数据存储与优化（上）"></a>模块一：MySQL海量数据存储与优化（上）</h2><p>本模块对MySQL体系架构、运行机制、存储引擎、索引原理、事务和锁以及集群架构设计等方面的内容进行深入系统的介绍，并对SQL和架构进行分析及提出性能优化方案。</p><p><a href="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5/MySQL%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8A%EF%BC%89.pdf" title="MySQL海量数据存储与优化（上）.pdf">MySQL海量数据存储与优化（上）.pdf</a></p><p><a href="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.pdf" title="MySQL性能优化.pdf">MySQL性能优化.pdf</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">MySQL相关软件：<br>链接：https:<span class="hljs-comment">//pan.baidu.com/s/16mYajunoFNMxItzjMhPdIQ </span><br>提取码：08ao<br></code></pre></td></tr></table></figure><hr><h2 id="模块二：MySQL海量数据存储与优化（下）"><a href="#模块二：MySQL海量数据存储与优化（下）" class="headerlink" title="模块二：MySQL海量数据存储与优化（下）"></a>模块二：MySQL海量数据存储与优化（下）</h2><p>本模块主要对MySQL海量数据处理中的分库分表架构、ShardingSphere、MyCat中间件实战应用、数据库实战规范、以及一些运维分析工具等内容进行讲解。</p><p><a href="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5/MySQL%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8B%EF%BC%89.pdf" title="MySQL海量数据存储与优化（下）.pdf">MySQL海量数据存储与优化（下）.pdf</a></p><hr><h2 id="模块三：分布式文档存储独角兽MongoDB、知识图谱存储数据库Neo4j"><a href="#模块三：分布式文档存储独角兽MongoDB、知识图谱存储数据库Neo4j" class="headerlink" title="模块三：分布式文档存储独角兽MongoDB、知识图谱存储数据库Neo4j"></a>模块三：分布式文档存储独角兽MongoDB、知识图谱存储数据库Neo4j</h2><p>本模块对MongoDB的存储原理以及replica sets &amp; Sharded Cluster等、对Neo4j数据模型及图形理论等进行深入讲解。</p><p><a href="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5/MongoDB.pdf" title="MongoDB.pdf">MongoDB.pdf</a></p><p><a href="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5/MongoDB-%E6%96%B0%E5%A2%9E%E7%AC%AC8%E9%83%A8%E5%88%86.pdf" title="MongoDB-新增第8部分.pdf">MongoDB-新增第8部分.pdf</a></p><p><a href="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5/Neo4j%E8%AE%B2%E4%B9%89.pdf" title="Neo4j讲义.pdf">Neo4j讲义.pdf</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">资料地址：<br>链接:https:<span class="hljs-comment">//pan.baidu.com/s/1FPqkGds9BMRxjxTX-WtO7g  密码:ri2r</span><br></code></pre></td></tr></table></figure><hr><h2 id="模块四：轻量级分布式文件系统FastDFS、阿里云OSS云存储平台【选修】"><a href="#模块四：轻量级分布式文件系统FastDFS、阿里云OSS云存储平台【选修】" class="headerlink" title="模块四：轻量级分布式文件系统FastDFS、阿里云OSS云存储平台【选修】"></a>模块四：轻量级分布式文件系统FastDFS、阿里云OSS云存储平台【选修】</h2><p>本模块对分布式文件系统FastDFS集群架构与原理剖析，使用FastDFS+Nginx搭建高吞吐文件服务器，并对阿里云OSS云存储平台系统讲解。</p><p><a href="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5/FastDFS.pdf" title="FastDFS.pdf">FastDFS.pdf</a></p><p><a href="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5/%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1OSS.pdf" title="云对象存储服务OSS.pdf">云对象存储服务OSS.pdf</a></p><hr><h1 id="第五阶段-大型分布式系统缓存架构进阶"><a href="#第五阶段-大型分布式系统缓存架构进阶" class="headerlink" title="第五阶段 大型分布式系统缓存架构进阶"></a>第五阶段 大型分布式系统缓存架构进阶</h1><p>大型互联网项目必备分布式缓存，该阶段对市场上主流的及有一定潜力的缓存服务中间件进行重点讲解，最终可以达到根据不同业务进行分布式缓存选型的能力。</p><h2 id="模块一：高性能分布式缓存Redis、分布式解决方案Codis"><a href="#模块一：高性能分布式缓存Redis、分布式解决方案Codis" class="headerlink" title="模块一：高性能分布式缓存Redis、分布式解决方案Codis"></a>模块一：高性能分布式缓存Redis、分布式解决方案Codis</h2><p>本模块对Redis底层存储结构和原理、持久化方案、删除策略、IO多路复用模型、Redis集群模式、预热、雪崩、击穿、穿透等进行系统剖析。</p><p><a href="%E7%AC%AC%E4%BA%94%E9%98%B6%E6%AE%B5/Redis%E8%AE%B2%E4%B9%89.pdf" title="Redis讲义.pdf">Redis讲义.pdf</a></p><p><a href="%E7%AC%AC%E4%BA%94%E9%98%B6%E6%AE%B5/Redis%E5%8A%A0%E9%A4%90.pdf" title="Redis加餐.pdf">Redis加餐.pdf</a></p><hr><h1 id="第六阶段-分布式消息服务中间件进阶"><a href="#第六阶段-分布式消息服务中间件进阶" class="headerlink" title="第六阶段 分布式消息服务中间件进阶"></a>第六阶段 分布式消息服务中间件进阶</h1><p>该阶段是对高效可靠的消息传递机制进行理论讲解，并对市场上常用的中间件进行讲解，并结合业务场景，完成服务解耦、削峰填谷、分布式事务等实际场景应用。</p><h2 id="模块一：开源消息中间件RabbitMQ"><a href="#模块一：开源消息中间件RabbitMQ" class="headerlink" title="模块一：开源消息中间件RabbitMQ"></a>模块一：开源消息中间件RabbitMQ</h2><p>本模块对市场上常用的开源消息中间件RabbitMQ进行深度剖析、并对ACK、限流、TTL、死信、延迟等高级应用进行讲解。</p><p><a href="%E7%AC%AC%E5%85%AD%E9%98%B6%E6%AE%B5/RabbitMQ.pdf" title="RabbitMQ.pdf">RabbitMQ.pdf</a></p><hr><h1 id="第八阶段-容器虚拟化技术和自动化部署"><a href="#第八阶段-容器虚拟化技术和自动化部署" class="headerlink" title="第八阶段 容器虚拟化技术和自动化部署"></a>第八阶段 容器虚拟化技术和自动化部署</h1><p>通过该阶段学习，我们可以使用Docker&amp;K8s打包应用以及依赖包到一个轻量级容器中，方便移植，该阶段还包括其他一系列运维工具的学习。</p><h2 id="模块一-Docker容器虚拟化技术"><a href="#模块一-Docker容器虚拟化技术" class="headerlink" title="模块一:Docker容器虚拟化技术"></a>模块一:Docker容器虚拟化技术</h2><p>本模块主要深入讲解容器引擎Docker。</p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/docker/docker.pdf" title="docker.pdf">docker.pdf</a></p><hr><h2 id="模块二：K8s容器编排系统"><a href="#模块二：K8s容器编排系统" class="headerlink" title="模块二：K8s容器编排系统"></a>模块二：K8s容器编排系统</h2><p>本模块主要深入讲解容器引擎Docker &amp; K8s容器编排系统，对续集成工具Jenkins、代码质量管理工具Sonar、APM管理工具Skywalking等进行讲解。</p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/k8s/01.k8s%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85.pdf" title="01.k8s集群安装.pdf">01.k8s集群安装.pdf</a></p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/k8s/02.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80.pdf" title="02.快速入门一.pdf">02.快速入门一.pdf</a></p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/k8s/03.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BA%8C.pdf" title="03.快速入门二.pdf">03.快速入门二.pdf</a></p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/k8s/04.%E8%B5%84%E6%BA%90%E6%B8%85%E5%8D%95-pod%E8%BF%9B%E9%98%B6.pdf" title="04.资源清单-pod进阶.pdf">04.资源清单-pod进阶.pdf</a></p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/k8s/05.%E8%B5%84%E6%BA%90%E6%8E%A7%E5%88%B6%E5%99%A8.pdf" title="05.资源控制器.pdf">05.资源控制器.pdf</a></p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/k8s/06.service%E9%AB%98%E7%BA%A7.pdf" title="06.service高级.pdf">06.service高级.pdf</a></p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/k8s/07.k8s%E5%AD%98%E5%82%A8%E5%8D%B7.pdf" title="07.k8s存储卷.pdf">07.k8s存储卷.pdf</a></p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/k8s/08.k8s%E9%AB%98%E5%8F%AF%E7%94%A8-kubesray.pdf" title="08.k8s高可用-kubesray.pdf">08.k8s高可用-kubesray.pdf</a></p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/k8s/09.k8s%E9%AB%98%E5%8F%AF%E7%94%A8-sealos.pdf" title="09.k8s高可用-sealos.pdf">09.k8s高可用-sealos.pdf</a></p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/k8s/10.k8s%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85.pdf" title="10.k8s运维常用软件安装.pdf">10.k8s运维常用软件安装.pdf</a></p><hr><h2 id="模块三-CI-x2F-CD、DevOps【选修】"><a href="#模块三-CI-x2F-CD、DevOps【选修】" class="headerlink" title="模块三:CI&#x2F;CD、DevOps【选修】"></a>模块三:CI&#x2F;CD、DevOps【选修】</h2><p>本模块主要深入讲解基于容器技术，实现开发运维测试一体化。对持续集成工具Jenkins、代码管理工具GitLab、与K8s环境集成等方面进行讲解。</p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/jenkins/01jenkins%E5%AE%9E%E6%88%98%E7%AF%87.pdf" title="01jenkins实战篇.pdf">01jenkins实战篇.pdf</a></p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/jenkins/02.jenkins%E9%85%8D%E7%BD%AE%E7%AF%87.pdf" title="02.jenkins配置篇.pdf">02.jenkins配置篇.pdf</a></p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/jenkins/03.jenkins%E8%BF%90%E7%BB%B4%E7%AF%87.pdf" title="03.jenkins运维篇.pdf">03.jenkins运维篇.pdf</a></p><p><a href="%E7%AC%AC%E5%85%AB%E9%98%B6%E6%AE%B5/jenkins/04.jenkinsCICD%E7%90%86%E8%AE%BA%E7%AF%87.pdf" title="04.jenkinsCICD理论篇.pdf">04.jenkinsCICD理论篇.pdf</a></p><hr><h2 id="模块四-APM管理和性能监控工具【选修】"><a href="#模块四-APM管理和性能监控工具【选修】" class="headerlink" title="模块四:APM管理和性能监控工具【选修】"></a>模块四:APM管理和性能监控工具【选修】</h2><p>本模块主要深入讲解APM管理工具Skywalking、性能监控工具Pinpoint、代码质量管理工具Sonar等进行讲解。</p><hr><h1 id="第九阶段-大型互联网项目实战和业务解决方案（一）"><a href="#第九阶段-大型互联网项目实战和业务解决方案（一）" class="headerlink" title="第九阶段 大型互联网项目实战和业务解决方案（一）"></a>第九阶段 大型互联网项目实战和业务解决方案（一）</h1><p>该阶段会结合真实的大型互联网项目，将前8个阶段学到的内容与该实际业务相结合，根据实际业务进行架构选型，技术选型等。</p><h2 id="模块一-在线教育项目开发实战和解决方案"><a href="#模块一-在线教育项目开发实战和解决方案" class="headerlink" title="模块一:在线教育项目开发实战和解决方案"></a>模块一:在线教育项目开发实战和解决方案</h2><p>本模块会以真实开发流程，从需求分析、概要设计、详细设计、编码实现等几个环节对大型互联网项目进行讲解，其中涉及了很多互联网公司常用的解决方案，例如：秒杀、SSO、IM、Security、推送、三方支付、权限控制、分布式事务等，夯实之前所学技术。</p><hr><h1 id="第十一阶段-进大厂必备-面试求职深度辅导"><a href="#第十一阶段-进大厂必备-面试求职深度辅导" class="headerlink" title="第十一阶段 进大厂必备-面试求职深度辅导"></a>第十一阶段 进大厂必备-面试求职深度辅导</h1><p>该阶段会从专项能力突击、如何打造一份让人无法拒绝的简历、如何在面试中发挥应有的实力三部分进行剖析，此外数据结构与算法是架构师必备技能之一，也会重点训练加强。</p><h2 id="模块一-数据结构与算法"><a href="#模块一-数据结构与算法" class="headerlink" title="模块一:数据结构与算法"></a>模块一:数据结构与算法</h2><p>本模块会讲解算法高级内容，例如高级数据结构、排序、递归与回溯、深度与广度优先搜索、动态规划、二分搜索与贪婪算法等。</p><p><a href="%E7%AC%AC%E5%8D%81%E4%B8%80%E9%98%B6%E6%AE%B5/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.pdf" title="数据结构与算法.pdf">数据结构与算法.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>Java工程师高薪训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java工程师高薪训练营</title>
    <link href="/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/"/>
    <url>/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="任务一：常用设计原则和设计模式"><a href="#任务一：常用设计原则和设计模式" class="headerlink" title="任务一：常用设计原则和设计模式"></a>任务一：常用设计原则和设计模式</h1><h2 id="软件开发的流程"><a href="#软件开发的流程" class="headerlink" title="软件开发的流程"></a>软件开发的流程</h2><p>常用的设计原则；</p><p>首先讲解下软件开发的流程；</p><p>软件 开发 是一个复杂的过程</p><ul><li>需求分析文档（分析客户需求，让客户更容易上手，尽可能的比需求想的更好）签合同，首款</li><li>概要设计文档（这个项目需要采用什么架构，项目分成几层哪，几个大模块几个小模块，大模块与小模块有什么关系呢）（公司项目经理及有资质的员工来做）</li><li>详细设计文档（可以参考类图结构）</li></ul><p>类名、成员变量、成员方法（方法参数与返回值类型）；就只剩下方法体了；这是最初始的程序员；</p><p>详细设计文档会非常的详细</p><p>开会讨论、再修改、开会讨论、再修改、。。。。</p><p>差不多了，然后分工；</p><p><img src="/1652670425609.png" alt="1652670425609"></p><ul><li>编码和测试</li></ul><p>编码过程中需要进行测试（我们进行的是一个功能测试）</p><p>开发完成后会提交给测试人员测试（代码的抗压能力，功能问题），需要不断的修改与测试</p><p>知道暂时没有大的问题</p><ul><li>安装和调试</li></ul><p>安装到用户的电脑上，让项目运行，交给用户如何用</p><ul><li>维护和升级</li></ul><p>有这个的话价格是不一样的；需要注意；（需要注意这点）</p><p>一个项目可能半年的时间，编码可能占用一个月的时间（六分之一的时间），重点在项目的设计方面，设计不好后面的都白搭；</p><p>架构方面的错误导致加班的，还是非常的少的；</p><p>测试也是非常消耗时间的；（不能到客户的电脑上运行就不行了）</p><p>加班很多的时候（活干不完）（客户一会让这样，一会让那样）</p><p>在整个软件的开发过程中，设计是很重要的；</p><p>经验的提升，也会到设计里面，不仅仅写代码，我们需要做的还有很多；</p><hr><h2 id="开闭原则和里氏代换原则"><a href="#开闭原则和里氏代换原则" class="headerlink" title="开闭原则和里氏代换原则"></a>开闭原则和里氏代换原则</h2><p>软件开发的过程中，设计非常重要；</p><p>这里讲解写常用的设计原则</p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>代码写完后，尽量不要修改；对扩展开发对修改关闭；</p><p>例如：</p><p>写一个Person实体类；构造方法，getset</p><p>很多的地方用到了这个Person类，测试人员测试的没有任何的问题；然后客户改了需求，人还需要添加年龄的特征（直接在原有的Person类中加一个age属性【不建议】），这可能造成所有使用Person类的方法都要重新做；大大增加了工作量；</p><p>可以新写一个SubPerson类；继承Person类</p><p>建议、尽量不要修改；都测试完了建议对修改关闭，扩展开放；</p><p>好处：测试工作不需要做了；</p><hr><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><p>任何基类可以出现的地方，子类一定可以出现</p><p>理念让我们多使用多态</p><p>屏蔽不同子类的差异性实现通用的编程，实现不一样的效果；</p><p>想打印圆形的对象，又要打印圆形的对象又要打印矩形的对象；使用基类；</p><p>建议多使用多态；</p><p>多态：父类类型的引用指向子类对象；</p><hr><h2 id="依赖倒转原则和接口隔离原则"><a href="#依赖倒转原则和接口隔离原则" class="headerlink" title="依赖倒转原则和接口隔离原则"></a>依赖倒转原则和接口隔离原则</h2><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p>尽量去依赖抽象类，而不是具体的实现类；</p><p>原因：抽象类对子类具有强制性和规范性；</p><p>抽象类的意义：抽象类的实际意义不在于自身创建对象，而在于被继承；当一个类继承抽象类之后，必须重写所有的抽象方法，否则该类也会是抽象类；</p><p>具体实现类没有规范性和约束性；</p><p>person类中写了一个show方法，在subPerson类中没有反应；</p><p>如果将Person类变成抽象类，如果在Person中写了一个show方法，subPerson就会报错，必须要重写show方法</p><p>具体实现类管不住子类</p><hr><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>开发中多使用小接口，而不是大接口，避免接口的污染；降低了类之间的关联；</p><p>是对依赖倒转原则的补充；</p><p>例如：写一个Animal接口</p><p>接口中写一个run()与fly()方法；</p><p>写一个Dao类，实现Animal接口，需要重写run()与fly()方法；</p><p>由于Animal接口中有fly()方法，造成了dao类可以fly了；</p><p>是对依赖倒转原则的补充；</p><p>新建两个接口RunAnimal及FlyAnimal接口；</p><p>创建接口的时候需要考虑周全，需要经验；</p><p>降低了类之间的关联；</p><hr><h2 id="迪米特法则和合成复用原则"><a href="#迪米特法则和合成复用原则" class="headerlink" title="迪米特法则和合成复用原则"></a>迪米特法则和合成复用原则</h2><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>迪米特法则又叫做最少知道原则；</p><p>配角喜欢打听主角的事情，然后之后就死了；</p><p>一个实体类尽可能的较少其他实体之间发生相关作用；使系统功能模块相对独立；</p><p>高内聚，低耦合</p><p>类该有的都写进这类中，使用的时候能拿到用；</p><p>和其他类的功能能不关联就不要关联；</p><p>例如：在拉钩网中担任java讲师</p><p>java讲师该有的技能都尽可能拥有；</p><p>跟讲师无关的功能，尽可能的越少越好；</p><p>比如说会修水龙头，结果水龙头出问题了，就让去修水龙头；</p><p>在讲课的时候，结果敲门让去修水龙头，会不断的别打断；</p><p>这造成不断的打断自己的功能；</p><p>尽可能的高内聚，低耦合</p><hr><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>在开发中尽量多使用合成&#x2F;聚合的方式，而不是继承的方式。</p><p>例如：创建了一个类B，写了一个test()方法</p><p>可以类B继承类A，可以实现（不建议）</p><p>java中只支持单继承，不能继承多继承；</p><p>造成B不能再继承B的父类了；</p><p>又想调用A中的show方法；</p><p>可以在B的类中，声明一个其他类类型的引用作为这个类的成员变量；在这个类的构造方法中，可以进行初始化；再调用其他类的方法的时候，就可以直接的调用； </p><p>在生产者消费者的案例中使用了这个方法；</p><p>这个方法会在很多的地方使用到（合成服用原则）</p><p>类中使用到其他类的方法，要想到合成服用原则；</p><p>先将这六个原则先记下来，使用的时候理解体会；</p><hr><h2 id="设计模式的概念和分类"><a href="#设计模式的概念和分类" class="headerlink" title="设计模式的概念和分类"></a>设计模式的概念和分类</h2><p>设计模式是反复使用的、被多数人知晓的、经过分类的、代码经验的总结；</p><p>前辈总结的规则，规律；</p><p>java诞生已经20多年了；</p><p>已经有很多的java开发工程师；</p><p>写了大量的代码，有了很多的经验；</p><p>对这些经验的总结，就是设计模式；</p><p>适用于固定场合的固定套路；</p><hr><p>单例类、单例设计模式：</p><p>1)私有化成员变量，使用private关键字修饰</p><p>2）使用本类类型的引用指向本类类型的对象，</p><p>3）使用公有的get方法将这个对象返回出去（public static修饰）</p><hr><p>分为三大类：</p><p>创建型模式：单例设计模式、工厂方法模式、抽象工厂模式。。。</p><p>结构型模式：装饰类模式、代理模式。。</p><p>行为型模式：（这种模式带来的行为效果）模板设计模式；（抽象类）</p><p>23中设计模式，只讲几种，其他的后面再慢慢学习；</p><hr><h2 id="懒汉式的线程同步实现"><a href="#懒汉式的线程同步实现" class="headerlink" title="懒汉式的线程同步实现"></a>懒汉式的线程同步实现</h2><p>设计模式的详解（重点）</p><p>单例设计模式之前已经讲过了，分为饿汉式及懒汉式</p><p>建议使用饿汉式，懒汉式存在线程安全问题</p><p>饿汉式：【非常重要】</p><p>1）私有化构造方法，使用private关键字修饰；</p><p>2）声明本类类型的引用执行本类类型的对象并使用private static关键字修饰</p><p>3）提供公有的get方法负责将上述的对象返回出去，使用public static关键字修饰；</p><p>写的排序是2）1）3）</p><p>有多个线程同时访问这个get方法，new对象是需要时间了，还没有new完（没有将对象赋值）的时候另一个线程也进来了，也会执行new；就会创建了两个对象；这就不是单例设计模式了；</p><p>-》我们对get这个方法的调用进行进一步处理；</p><p>只能有一个线程执行new；</p><p>使用<code>synchronized</code>关键字，在get上加上这个关键字；只有一个线程可以进入这个方法；</p><p>也可以在方法中使用<code>synchronized</code>关键字</p><p>synchronized(Singleton.class){需要new的代码}</p><p>只能进入一个class</p><hr><h2 id="懒汉式的线程同步优化"><a href="#懒汉式的线程同步优化" class="headerlink" title="懒汉式的线程同步优化"></a>懒汉式的线程同步优化</h2><p>上面可以使用单例效果，但还是不完美；</p><p>第一次调用的时候需要锁起来，第二次，第三次就不需要加锁了，需要对get中的方法优化；</p><p>只有第一次调用这个方法的时候才锁起来；</p><p>在加锁的外面加一个条件：if(null&#x3D;&#x3D;sin)</p><p>sin 指的是我们创建的那个单例对象；</p><p>减少了流程，提高了性能；</p><p>如果在面试中写到了这样，就是完美的写法了；</p><p>注意笔试部分；</p><hr><h2 id="普通工厂模式的概念和实现"><a href="#普通工厂模式的概念和实现" class="headerlink" title="普通工厂模式的概念和实现"></a>普通工厂模式的概念和实现</h2><p>第二钟设计模式：工厂设计模式；</p><p>富士康：造产品的，</p><p>工厂设计模式：造对象的；</p><p>之前我们自己new，-》现在我们通过工厂类去new对象；</p><p>我们可以通过类图来看：</p><p><img src="/1652670425609.png" alt="1652670425609"></p><p>三部分：接口名、成员变量、成员方法；</p><p>接口的下面（实现了这个接口）有两个实现类，都要实现接口中的方法</p><p>发送工厂类：工厂类的作用就是new对象的，new mailSender对象呢，还是SmsSender对象呢，根据参数来确定；</p><p>通过返回值形成多态（返回的对象是接口）；</p><p>先写Sender接口；里面写一个send()方法，不需要返回值也不需要参数；</p><p>写一个MailSender类（实现Sender接口），重写Send方法；</p><p>写一个SmsSender类（实现Sender接口），重写Send方法；</p><p>创建一个SendFactory类，自定义成员方法实现对象的创建；</p><p>public Sender produce(String type){}</p><p>根据type的值判断创建哪个对象，并返回；</p><p>编写一个方法测试工具类；</p><p>1）声明工厂类类型的引用指向工厂类类型的对象；</p><p>2）调用生产方法来实现对象的创建；</p><p>3）使用对象调用模拟发生行为；</p><p>照着类图写方法；需要写明白；</p><p>照着架子写就好；</p><hr><h2 id="普通工厂模式的意义"><a href="#普通工厂模式的意义" class="headerlink" title="普通工厂模式的意义"></a>普通工厂模式的意义</h2><p>最终写的效果，可以使用两行代码来实现；</p><p>new+调用对象的方法；</p><p>为什么不直接new对象来使用呢？而使用工厂模式；</p><p>我们将两种方式进行一个对比；</p><p>两行代码实现的优点：代码简单，可读性强；</p><p>上一节代码的缺点：代码复杂，可读性差；</p><p>如果想要new200个对象，new完之后客户改了需求，要在new之前打印一个语句；使用上一节的方法new之前加一个打印语句就好了；上一节的方法更轻松一些；</p><p>好不容易加上去了，客户有让将这一行打印给去掉，老的方法就又麻烦了；</p><p>-》上一节方法的好处：扩展性和可维护性更强，尤其是创建大量对象的前提下</p><p>&#x3D;》老的方法的缺点：扩展性和可维护性略差；</p><p>制作手机，不会自己造一个工厂来造手机；会让第三方公司来造手机；</p><hr><h2 id="多个工厂方法模式的实现"><a href="#多个工厂方法模式的实现" class="headerlink" title="多个工厂方法模式的实现"></a>多个工厂方法模式的实现</h2><p>普通工厂方法模式，有一个小问题；</p><p>调用工厂方法的时候，需要传一个字符串，如果字符串写错的话，就不会成功调用对象；会返回一个null,用null掉用方法会造成空指针异常；</p><p><img src="/1652708407754.png" alt="1652708407754"></p><p>使用普通工程模式可以实现对象的创建，但是传入的字符串出错会造成不会创建对象，调用发发发的时候会造成空指针异常；</p><p>解决：在工程类中写两个成员方法；</p><p>普通工厂模式是一个成员方法可以创建多个不一样的对象；</p><p>这个工厂模式是多个成员方法创建多个不一样的对象；</p><p>多个工厂方法模式-》一个方法变成了多个方法；</p><hr><h2 id="静态工厂方法模式的实现"><a href="#静态工厂方法模式的实现" class="headerlink" title="静态工厂方法模式的实现"></a>静态工厂方法模式的实现</h2><p>多个工厂方法模式比普通工厂模式有的优点是，不用再传字符串了，避免了空指针异常的发生；</p><p>但是上面两种工厂模式，需要先new factory，；</p><p>需要先创建工厂类的对象，根据工厂类对象的引用才可以取创建对象；</p><p><img src="/1652708709807.png" alt="1652708709807"></p><p>-》可以直接将工厂类中的方法加上static关键字，变成静态方法；（可以看到图中工厂方法下面使用了下划线-便是静态方法）</p><p>-》直接工厂类名点调用我们的方法就就可以了；</p><p>这样我们的工厂类使用起来就更方便了；</p><p>我们什么时候使用工厂模式呢？</p><p>不管是普通，多个方法、静态工厂模式，只要是大量对象的创建且具有共同的接口时就可以使用我们的工厂设计模式；【重要】</p><hr><h2 id="抽象工厂模式的实现"><a href="#抽象工厂模式的实现" class="headerlink" title="抽象工厂模式的实现"></a>抽象工厂模式的实现</h2><p>静态工厂模式已经相对于完美了，但是还是存在一定的不理想之处；</p><p>如果还想创建一个新的对象，需要再工厂类中加一个新的静态方法，这就违反了开闭原则；</p><p>不建议这样写；</p><p><img src="/1652709043311.png" alt="1652709043311"></p><p>之间是一个工厂类，多个静态方法-》一个工厂接口，两个工厂方法；</p><p>新建一个Provider接口，内部写一个produce方法</p><p>创建一个MailSendFactory类（继承Provider接口），重写produce方法；</p><p>创建一个SmsSendFactory类（继承Provicer接口），重写produce方法；</p><p>抽象工厂模式与工厂方法模式的区别：之前是一个工厂类多个工厂方法，现在是多个工厂类，一个工厂方法；</p><p>注意：抽象工厂模式，使用的时候，还是需要new的；</p><hr><h2 id="抽象工厂模式的扩展优势"><a href="#抽象工厂模式的扩展优势" class="headerlink" title="抽象工厂模式的扩展优势"></a>抽象工厂模式的扩展优势</h2><p>抽象工厂模式，使用多个工厂列，不许要违背开闭原则；</p><p>原有的类没有做任何的改变，不违背开闭原则；</p><p>新建一个工厂类（PacketSendFactory）实现之前的工厂方法；</p><p>抽象工厂模式，建议使用啊；因为不用违背开闭原则；</p><hr><h2 id="装饰器模式的实现"><a href="#装饰器模式的实现" class="headerlink" title="装饰器模式的实现"></a>装饰器模式的实现</h2><p>在原有功能不变的情况下，添加新的功能时使用装饰器模式；</p><p>在原有对象的基础上进行；</p><p>要理解什么是装饰，装修是装饰、化妆也是装饰；</p><p>装饰器模式：是给一个对象动态的添加一些新的功能；</p><p><img src="/1652709645146.png" alt="1652709645146"></p><p>装饰类，是对被装饰类的修饰，-号是私有的；</p><p>先写接口；Sourceable，自定义一个抽象方法 void method();</p><p>创建Source类（实现Sourceable接口），重写method方法（打印一句话）；</p><p>创建SourceableTest类；</p><p>使用抽象类来创建对象；</p><p>代码写完之后，不要再修改；需要在原来类的基础上增加一些装饰语句；</p><p>创建一个Decorator类（实现Sourceable类），</p><p>private Sourceable source;</p><p>public Secorator(Sourceable source){this.soruce&#x3D;source}</p><p>使用合成复用原则；</p><p>method;保证原有功能不变；</p><p>使用装饰类实现功能；</p><p>Sourceable sourceable1 &#x3D; new Decorator(sourceable);</p><p>在原有功能不变的情况下，添加新 的功能</p><p>确定：产生很多相似的对象，不易排错；</p><hr><h2 id="代理模式的实现"><a href="#代理模式的实现" class="headerlink" title="代理模式的实现"></a>代理模式的实现</h2><p>就是找一个代理类，替代对象进行一系列操作；</p><p>跟修饰类模式完全不同；</p><p>跟我们找房子的中介一样；</p><p>中介代替我们找房子；</p><p><img src="/1652710423516.png" alt="1652710423516"></p><p>创建一个Proxy类（实现Sourceable接口）；</p><p>重写抽象方法；</p><p>private Source source;</p><p>不需要Source类创建对象再传过来了；</p><p>构造方法中直接new一个对象；</p><p>全权创建对象就可以了；</p><hr><h2 id="模板方法模式的实现"><a href="#模板方法模式的实现" class="headerlink" title="模板方法模式的实现"></a>模板方法模式的实现</h2><p>写一个抽象类，斜体标识抽象的含义；</p><p>op:将什么符号</p><p>【不知道为什么没有了，记得以后写好后保存，关闭文件】</p>]]></content>
    
    
    <categories>
      
      <category>Java工程师高薪训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模块五Java新特性和项目</tag>
      
      <tag>第一阶段-开源框架源码剖析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>任务一：Tomcat高级使用及其原理剖析</title>
    <link href="/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E6%A8%A1%E5%9D%97%E4%B8%80Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E3%80%81Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ATomcat%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/"/>
    <url>/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E6%A8%A1%E5%9D%97%E4%B8%80Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E3%80%81Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ATomcat%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="任务一：Tomcat高级使用及其原理剖析"><a href="#任务一：Tomcat高级使用及其原理剖析" class="headerlink" title="任务一：Tomcat高级使用及其原理剖析"></a>任务一：Tomcat高级使用及其原理剖析</h1><p> <a href="Apache-Tomcat-Web%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0.pdf" title="Apache Tomcat Web应用服务器课程笔记.pdf">点击查看</a>  </p><h2 id="Tomcat课程主要内容"><a href="#Tomcat课程主要内容" class="headerlink" title="Tomcat课程主要内容"></a>Tomcat课程主要内容</h2><p>第⼀部分：Tomcat 系统架构与原理剖析<br>第⼆部分：Tomcat 服务器核⼼配置详解<br>第三部分：⼿写实现迷你版 Tomcat<br>第四部分：Tomcat 源码构建及核⼼流程源码剖析<br>第五部分：Tomcat 类加载机制剖析（tomcat启动的时候这些类是如何加载进去的）<br>第六部分：Tomcat 对 Https 的⽀持及 Tomcat 性能优化策略</p><p>说明：本课程基于 8.5.50 版本的 Tomcat 讲解</p><p>企业中主要使用的还是7.X和8.X；</p><hr><h2 id="Tomcat软件包源码包获取及Tomcat标准目录结构"><a href="#Tomcat软件包源码包获取及Tomcat标准目录结构" class="headerlink" title="Tomcat软件包源码包获取及Tomcat标准目录结构"></a>Tomcat软件包源码包获取及Tomcat标准目录结构</h2><p>在浏览器中输入tomcat，找到带有apache的网站（<a href="https://tomcat.apache.org/%EF%BC%89">https://tomcat.apache.org/）</a></p><p>点击DownLoad中的tomcat 8；</p><p><img src="/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E6%A8%A1%E5%9D%97%E4%B8%80Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E3%80%81Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ATomcat%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/1655227687849.png" alt="1655227687849"></p><p>资料中已经给了下载后的软件包、源代码；</p><p><strong>解压软件包，查看目录结构：</strong></p><p><img src="/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E6%A8%A1%E5%9D%97%E4%B8%80Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E3%80%81Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ATomcat%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/1655228392074.png" alt="1655228392074"></p><p><strong>bin:</strong> 启动与关闭的脚本（startrup.bat、startup.sh、shutdown.bat、shutdown.sh）</p><p><strong>conf:</strong> 配置文件存放的目录（logging.properties、server.xml、tomcat-users.xml(tomcat的用户、角色及功能)、web.xml(全局的配置项-index.html跳转)）</p><p><strong>lib:</strong> tomcat基于jar包来开发的，也需要依赖些jar包；</p><p><strong>logs:</strong> 存放日志</p><p><strong>temp：</strong>存放临时文件的；</p><p><strong>webapps:</strong> 发布项目需要的目录；</p><p><strong>work:</strong> jsp解析成java文件，存放解析过程文件（有时间需要研究一下）</p><hr><h2 id="Tomcat总体架构之浏览器请求服务器流程"><a href="#Tomcat总体架构之浏览器请求服务器流程" class="headerlink" title="Tomcat总体架构之浏览器请求服务器流程"></a>Tomcat总体架构之浏览器请求服务器流程</h2><p>浏览器访问服务器的流程-》即http请求的处理过程；</p><p><img src="/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E6%A8%A1%E5%9D%97%E4%B8%80Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E3%80%81Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ATomcat%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/1655824781058.png" alt="1655824781058"></p><p><code>http(应用层协议)</code>：定义数据格式的；真正传输使用的TCP协议；</p><p>tcp&#x2F;ip协议用于数据的传输；</p><p>三次握手需要三次连接；</p><p>三次连接发送的就是TCP连接请求；</p><p><code>通信的底层</code>就是socket；</p><p>数据按照http格式进行封装（组织）；</p><p>tcp的数据是按照http格式进行组织的；</p><p>将静态数据通过浏览器呈现给用户；（静态数据：html&#x2F;js&#x2F;图片）</p><p>tomcat运行的时候会将jsp解析成servlet的一个类，在这个类中通过responses输出的还是html代码段；html代码段通过浏览器呈现给用户；</p><p>注意：浏览器访问服务器使⽤的是Http协议，Http是应⽤层协议，⽤于定义数据通信的格式，具体的数据传输使⽤的是TCP&#x2F;IP协议</p><hr><h2 id="Tomcat总体架构之Tomcat处理请求大致流程"><a href="#Tomcat总体架构之Tomcat处理请求大致流程" class="headerlink" title="Tomcat总体架构之Tomcat处理请求大致流程"></a>Tomcat总体架构之Tomcat处理请求大致流程</h2><p>当一个请求来的时候，tomcat进行怎样的处理（也就是上一节的第五步）；</p><p><strong>Tomcat是一个Http服务器（原因：能够接收并且处理http请求，所以tomcat是⼀个http服务器）</strong></p><p><strong>Tomcat不是这样做的：</strong></p><p><img src="/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E6%A8%A1%E5%9D%97%E4%B8%80Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E3%80%81Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ATomcat%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/1655825633697.png" alt="1655825633697"></p><p>如果http服务器接收到http请求的时候，调用java业务处理类；【存在问题，耦合度上升了-tomcat和业务类耦合在一起了】</p><p>tomcat不是这样做的；</p><hr><p><strong>Tomcat是这样做的：</strong></p><p><img src="/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E6%A8%A1%E5%9D%97%E4%B8%80Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E3%80%81Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ATomcat%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/1655825865827.png" alt="1655825865827"></p><p><code>http服务器</code>将请求传递给了<code>Servlet容器</code>;</p><p><code>Servlet容器</code>在容器中找哪个servlet能够处理；</p><p>如果<code>Servlet</code>发现servlet中的<code>java业务处理类</code>没有被加载，会将<code>java业务处理类</code>进行加载；</p><p>HTTP 服务器接收到请求之后把请求交给Servlet容器来处理，<code>Servlet 容器</code>通过<code>Servlet接⼝</code>调⽤业务类。Servlet接⼝和Servlet容器这⼀整套内容叫作<code>Servlet规范</code>。</p><p>整个Tomcat就是Servlet容器；</p><p>注意：Tomcat既按照Servlet规范的要求去实现了Servlet容器，同时它也具有HTTP服务器的功能。<br><strong>Tomcat的两个重要身份</strong><br>1）http服务器<br>2）Tomcat是⼀个Servlet容器</p><hr><h2 id="Tomcat总体架构之Servlet容器处理请求流程"><a href="#Tomcat总体架构之Servlet容器处理请求流程" class="headerlink" title="Tomcat总体架构之Servlet容器处理请求流程"></a>Tomcat总体架构之Servlet容器处理请求流程</h2><p><code>http服务器</code>只是与客户端完成交互；</p><p><code>servlet容器</code>完成业务逻辑；</p><p><strong>Tomcat Servlet容器处理流程</strong></p><p><img src="/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E6%A8%A1%E5%9D%97%E4%B8%80Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E3%80%81Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ATomcat%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/1655827805587.png" alt="1655827805587"></p><p>Request对象转换为ServeltRequest对象；</p><p>【定位Servlet】容器根据传进来的ServletRequest找到能够处理这个请求的Servlet(根据请求的url和servlet进行一个匹配);</p><p>【加载Servlet】底层通过反射机制完成Servlet实例化；</p><blockquote><p>当⽤户请求某个URL资源时<br>1）HTTP服务器会把请求信息使⽤ServletRequest对象封装起来<br>2）进⼀步去调⽤Servlet容器中某个具体的Servlet<br>3）在 2）中，Servlet容器拿到请求后，根据URL和Servlet的映射关系，找到相应的Servlet<br>4）如果Servlet还没有被加载，就⽤反射机制创建这个Servlet，并调⽤Servlet的init⽅法来完成初始化<br>5）接着调⽤这个具体Servlet的service⽅法来处理请求，请求处理结果使⽤ServletResponse对象封装<br>6）把ServletResponse对象返回给HTTP服务器，HTTP服务器会把响应发送给客户端</p></blockquote><hr><h2 id="Tomcat总体架构综述"><a href="#Tomcat总体架构综述" class="headerlink" title="Tomcat总体架构综述"></a>Tomcat总体架构综述</h2><p>对上面两点的汇总（Tomcat处理请求+Servelt处理流程）</p><p>通过上面的讲解，我们奋发tomcat有两个非常重要的功能需要完成；</p><p>1）和客户端浏览器进行交互，进行socket通信，将字节流和Request&#x2F;Response等对象进行转换；</p><p>2）Servlet容器处理业务逻辑；</p><p><img src="/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E6%A8%A1%E5%9D%97%E4%B8%80Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E3%80%81Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ATomcat%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/1655829907431.png" alt="1655829907431"></p><p>Tomcat设计了<code>两个重要的组件</code>（重要），完成特定的功能；</p><ul><li><code>连接器组件（Connector）</code>：和客户端交互（socket通信）</li></ul><p>对应角色：http服务器功能</p><ul><li><code>容器组件（Container）</code>：处理业务逻辑（Servlet容器）</li></ul><p>对应角色：servlet容器</p><p>在这两个组件的外部，还存在其他的东西，在后面我们会涉及到；</p><hr><h2 id="连接器组件Coyote简介及支持的协议和IO模型"><a href="#连接器组件Coyote简介及支持的协议和IO模型" class="headerlink" title="连接器组件Coyote简介及支持的协议和IO模型"></a>连接器组件Coyote简介及支持的协议和IO模型</h2><p>Coyote 是Tomcat 中连接器的组件名称 , 是对外的接⼝。客户端通过Coyote与服务器建⽴连接、发送请求并接受响应 。</p><p>Coyote就是处理Socket连接的；</p><p><img src="/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E6%A8%A1%E5%9D%97%E4%B8%80Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E3%80%81Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ATomcat%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/1655830582465.png" alt="1655830582465"></p><blockquote><p>（1）Coyote 封装了底层的⽹络通信（Socket 请求及响应处理）<br>（2）Coyote 使Catalina 容器（容器组件）与具体的请求协议及IO操作⽅式完全解耦<br>（3）Coyote 将Socket 输⼊转换封装为 Request 对象，进⼀步封装后交由Catalina 容器进⾏处理，处理请求完成后, Catalina 通过Coyote 提供的Response 对象将结果写⼊输出流<br>（4）Coyote 负责的是具体协议（应⽤层）和IO（传输层）相关内容</p></blockquote><p><strong>对第二步的讲解：</strong></p><ul><li><p>http请求是应用层协议；</p></li><li><p>数据在传输的时候，使用的是io模型（bio，nio等）【传输层】；</p></li></ul><p>在处理请求的时候需要使用到的；</p><p>Coyote进行处理，避免了Catalina 容器进行处理；解耦了；</p><hr><p><strong>对第四步的讲解：</strong></p><p>Coyote的解析处理，需要用到一个应用层，传输层；</p><hr><p>Tomcat Coyote ⽀持的 IO模型与协议</p><p>Tomcat⽀持多种应⽤层协议和I&#x2F;O模型，如下：</p><p><img src="/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E6%A8%A1%E5%9D%97%E4%B8%80Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E3%80%81Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ATomcat%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/1655831090766.png" alt="1655831090766"></p><p>在使用的时候可以特定的指定某个协议的；</p><p><strong>BIO：</strong> 阻塞io模型（同步）</p><p><strong>NIO：</strong> 非阻塞io模型（非同步）</p><p>在 8.0 之前 ，Tomcat 默认采⽤的I&#x2F;O⽅式为 BIO，之后改为 NIO。 ⽆论 NIO、NIO2 还是 APR， 在性能⽅⾯均优于以往的BIO。 如果采⽤APR， 甚⾄可以达到 Apache HTTP Server 的影响性能。</p><hr><h2 id="连接器组件Coyote内部组件及工作流程"><a href="#连接器组件Coyote内部组件及工作流程" class="headerlink" title="连接器组件Coyote内部组件及工作流程"></a>连接器组件Coyote内部组件及工作流程</h2><p>详细讲解下Coyote内部组件；</p><p><img src="/1000/01/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%20%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E6%A8%A1%E5%9D%97%E4%B8%80Tomcat%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E3%80%81Nginx%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9ATomcat%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/1655831679091.png" alt="1655831679091"></p><p>里面有些许子组件：</p><ul><li><code>EndPoint组件</code>：处理传输层协议（TCP&#x2F;IP）的；socket处理（做socket通信编码的），是对传输层的抽象；</li><li><code>Processor组件</code>：处理应用层协议（Http）的；</li><li><code>Adapter组件</code>：将原生的Request转换成ServletRequest;</li></ul><p>三个组件共同完成Coyote的功能；</p><p><code>ProtocolHandler组件</code>：是一个组合组件</p><p>适配器设计模式，开发中经常会使用到；</p><p>以后追踪源码的时候也会看到；</p>]]></content>
    
    
    <categories>
      
      <category>Java工程师高薪训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第二阶段 分布式架构性能调优</tag>
      
      <tag>模块一Tomcat深度剖析及性能调优、Nginx深度剖析及性能调优</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java新特性和项目-任务一常用设计原则和设计模式</title>
    <link href="/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%B8%80%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%B8%80%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="任务一：常用设计原则和设计模式"><a href="#任务一：常用设计原则和设计模式" class="headerlink" title="任务一：常用设计原则和设计模式"></a>任务一：常用设计原则和设计模式</h1><p><a href="%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.pdf" title="常用设计原则和设计模式.pdf">点击查看</a> </p><h2 id="软件开发的流程"><a href="#软件开发的流程" class="headerlink" title="软件开发的流程"></a>软件开发的流程</h2><p>常用的设计原则；</p><p>首先讲解下软件开发的流程；</p><p>软件 开发 是一个复杂的过程</p><ul><li>需求分析文档（分析客户需求，让客户更容易上手，尽可能的比需求想的更好）签合同，首款</li><li>概要设计文档（这个项目需要采用什么架构，项目分成几层哪，几个大模块几个小模块，大模块与小模块有什么关系呢）（公司项目经理及有资质的员工来做）</li><li>详细设计文档（可以参考类图结构）</li></ul><p>类名、成员变量、成员方法（方法参数与返回值类型）；就只剩下方法体了；这是最初始的程序员；</p><p>详细设计文档会非常的详细</p><p>开会讨论、再修改、开会讨论、再修改、。。。。</p><p>差不多了，然后分工；</p><p><img src="/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%B8%80%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1652670425609.png" alt="1652670425609"></p><ul><li>编码和测试</li></ul><p>编码过程中需要进行测试（我们进行的是一个功能测试）</p><p>开发完成后会提交给测试人员测试（代码的抗压能力，功能问题），需要不断的修改与测试</p><p>知道暂时没有大的问题</p><ul><li>安装和调试</li></ul><p>安装到用户的电脑上，让项目运行，交给用户如何用</p><ul><li>维护和升级</li></ul><p>有这个的话价格是不一样的；需要注意；（需要注意这点）</p><p>一个项目可能半年的时间，编码可能占用一个月的时间（六分之一的时间），重点在项目的设计方面，设计不好后面的都白搭；</p><p>架构方面的错误导致加班的，还是非常的少的；</p><p>测试也是非常消耗时间的；（不能到客户的电脑上运行就不行了）</p><p>加班很多的时候（活干不完）（客户一会让这样，一会让那样）</p><p>在整个软件的开发过程中，设计是很重要的；</p><p>经验的提升，也会到设计里面，不仅仅写代码，我们需要做的还有很多；</p><hr><h2 id="开闭原则和里氏代换原则"><a href="#开闭原则和里氏代换原则" class="headerlink" title="开闭原则和里氏代换原则"></a>开闭原则和里氏代换原则</h2><p>软件开发的过程中，设计非常重要；</p><p>这里讲解写常用的设计原则</p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>代码写完后，尽量不要修改；对扩展开发对修改关闭；</p><p>例如：</p><p>写一个Person实体类；构造方法，getset</p><p>很多的地方用到了这个Person类，测试人员测试的没有任何的问题；然后客户改了需求，人还需要添加年龄的特征（直接在原有的Person类中加一个age属性【不建议】），这可能造成所有使用Person类的方法都要重新做；大大增加了工作量；</p><p>可以新写一个SubPerson类；继承Person类</p><p>建议、尽量不要修改；都测试完了建议对修改关闭，扩展开放；</p><p>好处：测试工作不需要做了；</p><hr><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><p>任何基类可以出现的地方，子类一定可以出现</p><p>理念让我们多使用多态</p><p>屏蔽不同子类的差异性实现通用的编程，实现不一样的效果；</p><p>想打印圆形的对象，又要打印圆形的对象又要打印矩形的对象；使用基类；</p><p>建议多使用多态；</p><p>多态：父类类型的引用指向子类对象；</p><hr><h2 id="依赖倒转原则和接口隔离原则"><a href="#依赖倒转原则和接口隔离原则" class="headerlink" title="依赖倒转原则和接口隔离原则"></a>依赖倒转原则和接口隔离原则</h2><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p>尽量去依赖抽象类，而不是具体的实现类；</p><p>原因：抽象类对子类具有强制性和规范性；</p><p>抽象类的意义：抽象类的实际意义不在于自身创建对象，而在于被继承；当一个类继承抽象类之后，必须重写所有的抽象方法，否则该类也会是抽象类；</p><p>具体实现类没有规范性和约束性；</p><p>person类中写了一个show方法，在subPerson类中没有反应；</p><p>如果将Person类变成抽象类，如果在Person中写了一个show方法，subPerson就会报错，必须要重写show方法</p><p>具体实现类管不住子类</p><hr><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>开发中多使用小接口，而不是大接口，避免接口的污染；降低了类之间的关联；</p><p>是对依赖倒转原则的补充；</p><p>例如：写一个Animal接口</p><p>接口中写一个run()与fly()方法；</p><p>写一个Dao类，实现Animal接口，需要重写run()与fly()方法；</p><p>由于Animal接口中有fly()方法，造成了dao类可以fly了；</p><p>是对依赖倒转原则的补充；</p><p>新建两个接口RunAnimal及FlyAnimal接口；</p><p>创建接口的时候需要考虑周全，需要经验；</p><p>降低了类之间的关联；</p><hr><h2 id="迪米特法则和合成复用原则"><a href="#迪米特法则和合成复用原则" class="headerlink" title="迪米特法则和合成复用原则"></a>迪米特法则和合成复用原则</h2><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>迪米特法则又叫做最少知道原则；</p><p>配角喜欢打听主角的事情，然后之后就死了；</p><p>一个实体类尽可能的较少其他实体之间发生相关作用；使系统功能模块相对独立；</p><p>高内聚，低耦合</p><p>类该有的都写进这类中，使用的时候能拿到用；</p><p>和其他类的功能能不关联就不要关联；</p><p>例如：在拉钩网中担任java讲师</p><p>java讲师该有的技能都尽可能拥有；</p><p>跟讲师无关的功能，尽可能的越少越好；</p><p>比如说会修水龙头，结果水龙头出问题了，就让去修水龙头；</p><p>在讲课的时候，结果敲门让去修水龙头，会不断的别打断；</p><p>这造成不断的打断自己的功能；</p><p>尽可能的高内聚，低耦合</p><hr><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>在开发中尽量多使用合成&#x2F;聚合的方式，而不是继承的方式。</p><p>例如：创建了一个类B，写了一个test()方法</p><p>可以类B继承类A，可以实现（不建议）</p><p>java中只支持单继承，不能继承多继承；</p><p>造成B不能再继承B的父类了；</p><p>又想调用A中的show方法；</p><p>可以在B的类中，声明一个其他类类型的引用作为这个类的成员变量；在这个类的构造方法中，可以进行初始化；再调用其他类的方法的时候，就可以直接的调用； </p><p>在生产者消费者的案例中使用了这个方法；</p><p>这个方法会在很多的地方使用到（合成服用原则）</p><p>类中使用到其他类的方法，要想到合成服用原则；</p><p>先将这六个原则先记下来，使用的时候理解体会；</p><hr><h2 id="设计模式的概念和分类"><a href="#设计模式的概念和分类" class="headerlink" title="设计模式的概念和分类"></a>设计模式的概念和分类</h2><p>设计模式是反复使用的、被多数人知晓的、经过分类的、代码经验的总结；</p><p>前辈总结的规则，规律；</p><p>java诞生已经20多年了；</p><p>已经有很多的java开发工程师；</p><p>写了大量的代码，有了很多的经验；</p><p>对这些经验的总结，就是设计模式；</p><p>适用于固定场合的固定套路；</p><hr><p>单例类、单例设计模式：</p><p>1)私有化成员变量，使用private关键字修饰</p><p>2）使用本类类型的引用指向本类类型的对象，</p><p>3）使用公有的get方法将这个对象返回出去（public static修饰）</p><hr><p>分为三大类：</p><p>创建型模式：单例设计模式、工厂方法模式、抽象工厂模式。。。</p><p>结构型模式：装饰类模式、代理模式。。</p><p>行为型模式：（这种模式带来的行为效果）模板设计模式；（抽象类）</p><p>23中设计模式，只讲几种，其他的后面再慢慢学习；</p><hr><h2 id="懒汉式的线程同步实现"><a href="#懒汉式的线程同步实现" class="headerlink" title="懒汉式的线程同步实现"></a>懒汉式的线程同步实现</h2><p>设计模式的详解（重点）</p><p>单例设计模式之前已经讲过了，分为饿汉式及懒汉式</p><p>建议使用饿汉式，懒汉式存在线程安全问题</p><p>饿汉式：【非常重要】</p><p>1）私有化构造方法，使用private关键字修饰；</p><p>2）声明本类类型的引用执行本类类型的对象并使用private static关键字修饰</p><p>3）提供公有的get方法负责将上述的对象返回出去，使用public static关键字修饰；</p><p>写的排序是2）1）3）</p><p>有多个线程同时访问这个get方法，new对象是需要时间了，还没有new完（没有将对象赋值）的时候另一个线程也进来了，也会执行new；就会创建了两个对象；这就不是单例设计模式了；</p><p>-》我们对get这个方法的调用进行进一步处理；</p><p>只能有一个线程执行new；</p><p>使用<code>synchronized</code>关键字，在get上加上这个关键字；只有一个线程可以进入这个方法；</p><p>也可以在方法中使用<code>synchronized</code>关键字</p><p>synchronized(Singleton.class){需要new的代码}</p><p>只能进入一个class</p><hr><h2 id="懒汉式的线程同步优化"><a href="#懒汉式的线程同步优化" class="headerlink" title="懒汉式的线程同步优化"></a>懒汉式的线程同步优化</h2><p>上面可以使用单例效果，但还是不完美；</p><p>第一次调用的时候需要锁起来，第二次，第三次就不需要加锁了，需要对get中的方法优化；</p><p>只有第一次调用这个方法的时候才锁起来；</p><p>在加锁的外面加一个条件：if(null&#x3D;&#x3D;sin)</p><p>sin 指的是我们创建的那个单例对象；</p><p>减少了流程，提高了性能；</p><p>如果在面试中写到了这样，就是完美的写法了；</p><p>注意笔试部分；</p><hr><h2 id="普通工厂模式的概念和实现"><a href="#普通工厂模式的概念和实现" class="headerlink" title="普通工厂模式的概念和实现"></a>普通工厂模式的概念和实现</h2><p>第二钟设计模式：工厂设计模式；</p><p>富士康：造产品的，</p><p>工厂设计模式：造对象的；</p><p>之前我们自己new，-》现在我们通过工厂类去new对象；</p><p>我们可以通过类图来看：</p><p><img src="/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%B8%80%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1652670425609.png" alt="1652670425609"></p><p>三部分：接口名、成员变量、成员方法；</p><p>接口的下面（实现了这个接口）有两个实现类，都要实现接口中的方法</p><p>发送工厂类：工厂类的作用就是new对象的，new mailSender对象呢，还是SmsSender对象呢，根据参数来确定；</p><p>通过返回值形成多态（返回的对象是接口）；</p><p>先写Sender接口；里面写一个send()方法，不需要返回值也不需要参数；</p><p>写一个MailSender类（实现Sender接口），重写Send方法；</p><p>写一个SmsSender类（实现Sender接口），重写Send方法；</p><p>创建一个SendFactory类，自定义成员方法实现对象的创建；</p><p>public Sender produce(String type){}</p><p>根据type的值判断创建哪个对象，并返回；</p><p>编写一个方法测试工具类；</p><p>1）声明工厂类类型的引用指向工厂类类型的对象；</p><p>2）调用生产方法来实现对象的创建；</p><p>3）使用对象调用模拟发生行为；</p><p>照着类图写方法；需要写明白；</p><p>照着架子写就好；</p><hr><h2 id="普通工厂模式的意义"><a href="#普通工厂模式的意义" class="headerlink" title="普通工厂模式的意义"></a>普通工厂模式的意义</h2><p>最终写的效果，可以使用两行代码来实现；</p><p>new+调用对象的方法；</p><p>为什么不直接new对象来使用呢？而使用工厂模式；</p><p>我们将两种方式进行一个对比；</p><p>两行代码实现的优点：代码简单，可读性强；</p><p>上一节代码的缺点：代码复杂，可读性差；</p><p>如果想要new200个对象，new完之后客户改了需求，要在new之前打印一个语句；使用上一节的方法new之前加一个打印语句就好了；上一节的方法更轻松一些；</p><p>好不容易加上去了，客户有让将这一行打印给去掉，老的方法就又麻烦了；</p><p>-》上一节方法的好处：扩展性和可维护性更强，尤其是创建大量对象的前提下</p><p>&#x3D;》老的方法的缺点：扩展性和可维护性略差；</p><p>制作手机，不会自己造一个工厂来造手机；会让第三方公司来造手机；</p><hr><h2 id="多个工厂方法模式的实现"><a href="#多个工厂方法模式的实现" class="headerlink" title="多个工厂方法模式的实现"></a>多个工厂方法模式的实现</h2><p>普通工厂方法模式，有一个小问题；</p><p>调用工厂方法的时候，需要传一个字符串，如果字符串写错的话，就不会成功调用对象；会返回一个null,用null掉用方法会造成空指针异常；</p><p><img src="/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%B8%80%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1652708407754.png" alt="1652708407754"></p><p>使用普通工程模式可以实现对象的创建，但是传入的字符串出错会造成不会创建对象，调用发发发的时候会造成空指针异常；</p><p>解决：在工程类中写两个成员方法；</p><p>普通工厂模式是一个成员方法可以创建多个不一样的对象；</p><p>这个工厂模式是多个成员方法创建多个不一样的对象；</p><p>多个工厂方法模式-》一个方法变成了多个方法；</p><hr><h2 id="静态工厂方法模式的实现"><a href="#静态工厂方法模式的实现" class="headerlink" title="静态工厂方法模式的实现"></a>静态工厂方法模式的实现</h2><p>多个工厂方法模式比普通工厂模式有的优点是，不用再传字符串了，避免了空指针异常的发生；</p><p>但是上面两种工厂模式，需要先new factory，；</p><p>需要先创建工厂类的对象，根据工厂类对象的引用才可以取创建对象；</p><p><img src="/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%B8%80%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1652708709807.png" alt="1652708709807"></p><p>-》可以直接将工厂类中的方法加上static关键字，变成静态方法；（可以看到图中工厂方法下面使用了下划线-便是静态方法）</p><p>-》直接工厂类名点调用我们的方法就就可以了；</p><p>这样我们的工厂类使用起来就更方便了；</p><p>我们什么时候使用工厂模式呢？</p><p>不管是普通，多个方法、静态工厂模式，只要是大量对象的创建且具有共同的接口时就可以使用我们的工厂设计模式；【重要】</p><hr><h2 id="抽象工厂模式的实现"><a href="#抽象工厂模式的实现" class="headerlink" title="抽象工厂模式的实现"></a>抽象工厂模式的实现</h2><p>静态工厂模式已经相对于完美了，但是还是存在一定的不理想之处；</p><p>如果还想创建一个新的对象，需要再工厂类中加一个新的静态方法，这就违反了开闭原则；</p><p>不建议这样写；</p><p><img src="/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%B8%80%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1652709043311.png" alt="1652709043311"></p><p>之间是一个工厂类，多个静态方法-》一个工厂接口，两个工厂方法；</p><p>新建一个Provider接口，内部写一个produce方法</p><p>创建一个MailSendFactory类（继承Provider接口），重写produce方法；</p><p>创建一个SmsSendFactory类（继承Provicer接口），重写produce方法；</p><p>抽象工厂模式与工厂方法模式的区别：之前是一个工厂类多个工厂方法，现在是多个工厂类，一个工厂方法；</p><p>注意：抽象工厂模式，使用的时候，还是需要new的；</p><hr><h2 id="抽象工厂模式的扩展优势"><a href="#抽象工厂模式的扩展优势" class="headerlink" title="抽象工厂模式的扩展优势"></a>抽象工厂模式的扩展优势</h2><p>抽象工厂模式，使用多个工厂列，不许要违背开闭原则；</p><p>原有的类没有做任何的改变，不违背开闭原则；</p><p>新建一个工厂类（PacketSendFactory）实现之前的工厂方法；</p><p>抽象工厂模式，建议使用啊；因为不用违背开闭原则；</p><hr><h2 id="装饰器模式的实现"><a href="#装饰器模式的实现" class="headerlink" title="装饰器模式的实现"></a>装饰器模式的实现</h2><p>在原有功能不变的情况下，添加新的功能时使用装饰器模式；</p><p>在原有对象的基础上进行；</p><p>要理解什么是装饰，装修是装饰、化妆也是装饰；</p><p>装饰器模式：是给一个对象动态的添加一些新的功能；</p><p><img src="/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%B8%80%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1652709645146.png" alt="1652709645146"></p><p>装饰类，是对被装饰类的修饰，-号是私有的；</p><p>先写接口；Sourceable，自定义一个抽象方法 void method();</p><p>创建Source类（实现Sourceable接口），重写method方法（打印一句话）；</p><p>创建SourceableTest类；</p><p>使用抽象类来创建对象；</p><p>代码写完之后，不要再修改；需要在原来类的基础上增加一些装饰语句；</p><p>创建一个Decorator类（实现Sourceable类），</p><p>private Sourceable source;</p><p>public Secorator(Sourceable source){this.soruce&#x3D;source}</p><p>使用合成复用原则；</p><p>method;保证原有功能不变；</p><p>使用装饰类实现功能；</p><p>Sourceable sourceable1 &#x3D; new Decorator(sourceable);</p><p>在原有功能不变的情况下，添加新 的功能</p><p>确定：产生很多相似的对象，不易排错；</p><hr><h2 id="代理模式的实现"><a href="#代理模式的实现" class="headerlink" title="代理模式的实现"></a>代理模式的实现</h2><p>就是找一个代理类，替代对象进行一系列操作；</p><p>跟修饰类模式完全不同；</p><p>跟我们找房子的中介一样；</p><p>中介代替我们找房子；</p><p><img src="/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E4%BB%BB%E5%8A%A1%E4%B8%80%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1652710423516.png" alt="1652710423516"></p><p>创建一个Proxy类（实现Sourceable接口）；</p><p>重写抽象方法；</p><p>private Source source;</p><p>不需要Source类创建对象再传过来了；</p><p>构造方法中直接new一个对象；</p><p>全权创建对象就可以了；</p><hr><h2 id="模板方法模式的实现"><a href="#模板方法模式的实现" class="headerlink" title="模板方法模式的实现"></a>模板方法模式的实现</h2><p>写一个抽象类，斜体标识抽象的含义；</p><p>op:将什么符号</p><p>【不知道为什么没有了，记得以后写好后保存，关闭文件】</p>]]></content>
    
    
    <categories>
      
      <category>Java就业训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一阶段JavaSE</tag>
      
      <tag>模块五Java新特性和项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java新特性和项目-加餐-NIO技术</title>
    <link href="/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E5%8A%A0%E9%A4%90-NIO%E6%8A%80%E6%9C%AF/"/>
    <url>/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E5%8A%A0%E9%A4%90-NIO%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="加餐：NIO技术"><a href="#加餐：NIO技术" class="headerlink" title="加餐：NIO技术"></a>加餐：NIO技术</h2><h3 id="NIO概念"><a href="#NIO概念" class="headerlink" title="NIO概念"></a>NIO概念</h3><p><strong>要知道io的概念；</strong></p><p>io的作用：解决设备与设备之间数据的传输问题；</p><p>生活中经常会用到io;</p><p>上传图片，下载图片，都会用到技术；</p><p><strong>什么是NIO？</strong></p><p>NIO的概念：java new io;</p><p>新的io,</p><p>java1.4后提供了IO API；</p><p>使用NIO对并发的情况更好一些；</p><p>天猫等要解决并发问题，NIO能很好的解决并发问题；</p><table><thead><tr><th>javaAPI中提供了两套NIO：</th></tr></thead><tbody><tr><td>1）是针对标准输入输出NIO</td></tr><tr><td>2）网络编程（客户端、服务端）</td></tr></tbody></table><p>一个服务端多个客户端，可以做一个聊天室；</p><p><strong>学习NIO能够做什么事情？</strong></p><p>NIO和IO有相同的作用和目的，但是实现方式不同；</p><p>IO是以流的形式处理数据，NIO是以快的形式处理数据（缓冲流）</p><p>IO一次一个字节的处理数据，NIO是以快的形式处理数据；</p><p>流像水龙头滴水，出来一滴，处理一滴；</p><p>块：像一个水壶在接水，接慢后再进行处理</p><p>NIO的新特性？</p><p>要知道NIO和标准的IO的差异在哪；【重要】</p><table><thead><tr><th>IO</th><th>NIO</th></tr></thead><tbody><tr><td>IO是面向流的操作</td><td>NIO是面向缓冲区的操作</td></tr><tr><td>IO是一个阻塞IO（针对网络IO的）</td><td>NIO是一个非阻塞IO（针对网络IO的）</td></tr><tr><td>无</td><td>NIO有selector选择器</td></tr></tbody></table><p>selector选择器；后面讲</p><hr><p><strong>什么是阻塞IO？什么是非阻塞IO？</strong></p><p>当进程执行的时候，需要的数据还未就绪时，是否要处于一个等待状态；如果是：阻塞IO ，不是：非阻塞（去干别的事情）</p><p>两件事去做：</p><p>买书-》打电话给书店老板（是否有NIO这本书）-》不确定，老板查看书清单</p><p>刷抖音</p><p>老板在找书清单的时候，是否我们去做另一件事情，如果去刷抖音（非阻塞）；</p><p>NIO是一套新的输入输出；</p><p>NIO是以块的形式处理数据，速度会更快一些；</p><p>有两套：一套是标准的输入输出，另一套是针对网络编程</p><hr><h3 id="NIO中核心组件"><a href="#NIO中核心组件" class="headerlink" title="NIO中核心组件"></a>NIO中核心组件</h3><p>NIO中的核心组件有三个</p><ul><li>通道</li><li>缓冲区</li><li>选择器</li></ul><p>将通道、缓冲区在一起看</p><p>将选择器在一起看；</p><p>通道和缓冲区一起使用恶意实现对数据的处理；</p><p>因为多路复用，所以加了一个选择器；</p><p>通道、缓冲区是怎样配合来处理数据？</p><p>buffer缓冲器 channel 管道</p><p>与面向流的操作有什么区别？</p><p>D盘中有一个图片，需要使用程序来读取图片；</p><p>首先需要创建一个链接（new FileInputStream(“d:&#x2F;&#x2F;美女.jpg”)）；</p><p>这个管道就是对字节数据的处理；</p><p>如果想要通过程序在D盘中写一个内容，需要建立一个链接（new FileOutputStream）；</p><p>在面向流的过程中，是一个单向操作，要么读要么写；</p><p>buffer缓冲区如何配置channer管道进行配合呢？</p><p>北京区   广州区</p><p>成吨的货物，需要通过火车运输货物（前提：必须建立铁路轨道）；</p><p>货物需要装到火车上，火车行驶，运输到广州；</p><p>如果货物想从广州运输到北京，也是可以的；</p><p>要处理的数据（d:&#x2F;&#x2F;美女.jdp）  </p><p>铁路轨道（channel管道）</p><p>火车（buffer缓冲区）</p><p>基于NIO对数据进行一个处理，数据都要写入到缓冲区中，管道负责进行一个运输，程序操作的都是buffer缓冲区【重要】，操作的都是buffer缓冲区，读写都是双向的；</p><p>要处理的数据写入到buffer缓冲区中，写满，通过管道运输到另一程序端；</p><p>总结：数据的处理需要管道和buffer缓冲区；</p><p>buffer缓冲区是进行存储的；</p><p>channel管道不与数据进行交互；</p><p>NIO中读写都是双向的；</p><p>通道与缓冲区是如何配合处理数据的？</p><p>通过Channel管道运输存储数据的Buffer缓冲区来实现数据的处理的；</p><p>Channel-&gt;运输</p><p>Buffer-》数据（与数据进行交互）</p><hr><h3 id="ByteBuffer概述及创建"><a href="#ByteBuffer概述及创建" class="headerlink" title="ByteBuffer概述及创建"></a>ByteBuffer概述及创建</h3><p>进行网络io是会用到选择器这个组件；</p><p>buffer缓冲区能实现什么作用？</p><p>货物和火车进行一个交互；</p><p>buffer缓冲区的作用就是和数据进行交互的，就是用来存储数据的；</p><p>之前学习过存储数据的容器？</p><p>例如：数组；</p><p>buffer缓冲区可以理解为就是一个数组；</p><p>有八种基本数据类型，没一钟类型都对应一个buffer，‘</p><p>总共有其中，因为boolean就是一个true,value,不是用来存储数据的；</p><p>所以提供了其中数据类型的buffer，</p><p>都继承了Buffer这个抽象类；</p><p>操作字符数据，使用charBuffer;</p><p><strong>最常用的buffer是</strong>：ByteBuffer;</p><p>使用ByteBuffer来演示如何处理数据的：</p><p>需要先创建ByteBuffer，七种buffer的创建都是类似的；</p><table><thead><tr><th>三种ByteBuffer的创建方式</th><th>1</th></tr></thead><tbody><tr><td>1）在堆中创建缓冲区：</td><td>allocate(int capacity)</td></tr><tr><td>2)  在系统内存创建缓冲区</td><td>allocateDirect(int capacity)</td></tr><tr><td>3)  通过普通数组创建缓冲区</td><td>wrap(byte[] arr)</td></tr></tbody></table><p>创建java工程；</p><p>类名不要带有中文；（开发中）</p><hr><p>ByteBuffer的三种创建方式【案例】：</p><p>这种方式是我们要经常使用的，后面两种了解即可；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">by</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>10是容量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">by</span> <span class="hljs-operator">=</span> ByteBuffer.allocateDirect(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] arr = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>&#125;;<br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">by</span> <span class="hljs-operator">=</span> ByteBuffer.wrap(arr);<br></code></pre></td></tr></table></figure><hr><h3 id="ByteBuffer数据存取"><a href="#ByteBuffer数据存取" class="headerlink" title="ByteBuffer数据存取"></a>ByteBuffer数据存取</h3><p>上面讲解了ByteBuffer 的创建；</p><p>这节我们要学习操作ByteBuffer对象；</p><table><thead><tr><th>ByteBuffer的两个核心方法：</th><th>ByteBuffer的方法</th></tr></thead><tbody><tr><td>给数组添加元素</td><td>put(byte b)</td></tr><tr><td>根据索引获取指定索引元素</td><td>get(索引)</td></tr></tbody></table><p>使用Arrays.toString需要使用到字节数组；</p><p>将缓冲区数组转化为普通数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">byteBuffer.put((<span class="hljs-type">byte</span>)<span class="hljs-number">10</span>);  <span class="hljs-comment">// 存储元素</span><br>byteBuffer.put((<span class="hljs-type">byte</span>)<span class="hljs-number">20</span>);  <span class="hljs-comment">// 存储元素</span><br><span class="hljs-type">byte</span>[] array = byteBuffer.array();<br>Arrays.toString(array).sout;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> byteBuffer.get(<span class="hljs-number">1</span>);  <span class="hljs-comment">// 从0开始  // 20</span><br></code></pre></td></tr></table></figure><hr><h3 id="Buffer核心属性-01"><a href="#Buffer核心属性-01" class="headerlink" title="Buffer核心属性_01"></a>Buffer核心属性_01</h3><p>这只是简单的存取；</p><p>想进一步的掌握buffer缓冲区；</p><p>需要掌握四个黑心变量</p><p>每个缓冲buffer中都含有四个核心变量（Buffer接口中有四个核心变量）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;   <span class="hljs-comment">// 容量【重要】 缓冲区中能容纳的缓冲区中的最大容量</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> limit;  <span class="hljs-comment">// 界线（限制）-缓冲区中可以操作的数据大小</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 位置：下一个要被读或写的位置</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">mark</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>学习的过程中需要思考，变量都有什么作用；</p><p>创建ByteBuffer的时候会指定ByteBuffer的最大容量；</p><p>创建ByteBuffer的时候，limit的值就是10；</p><p>limit开始后面的位置是不能进行操作的（只能操作前面的位置）；</p><p>创建ByteBuffer的时候，下一个要操作的元素就是0这个位置；</p><p>注意：capacity一经设定，不能改变；</p><p>limit和position的值会随着一些的操作而改变（例如put、get操作）</p><p>重点放在前三个属性；</p><p>初始化的时候，打印capacity\limit\position这三个值；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">byteBuffer.capacity().sout<br></code></pre></td></tr></table></figure><p>经过get\put方法limit及position都是会发生改变的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">byteBuffer.put((<span class="hljs-type">byte</span>)<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>limit值是不会发生变化的（因为limit值后的元素是不能进行操作的）；</p><p>每次写一个元素，position值是会发生改变的，从零开始；</p><p>写六个元素，值就会变成6；</p><p>写模式下：下一次进行一个操作，</p><p>读模式：要进行一个读取的话：能够读只能读到界线这，读让读几个零食不合适的；读的haul是从position开始读，到limit结束；怎么去读取到javaee这些存进去的数据？（下一节将如何将写模式切断成读模式）</p><hr><h3 id="Buffer核心属性-02"><a href="#Buffer核心属性-02" class="headerlink" title="Buffer核心属性_02"></a>Buffer核心属性_02</h3><p>capacity已经确定不会改变；</p><p>limit与position会根据操作的改变而改变；</p><p>虽然put方法没有改变limit的值，调用其他的方法有可能改变的；</p><p>要进行读取操作；</p><p>读取到的是一片空白，或者几个0；</p><p>而我们不是要这些数据，而是存储的数据；</p><p>如果将position变成0的话是可以将数据读取出来的；</p><p>但是后面还会加上四个000（javaee0000）;</p><p>-》所有不仅要改变position的值，还需要改变limit的值；</p><p>那如何修改position与limit的值呢；</p><p>可以使用<code>flip()</code>方法;</p><p>调用这个方法后，limit变成了6，position的值变成了0；</p><p>变化的情况：</p><p>（1）limit的值会变成position的值；</p><p>（2）position变成0；</p><p>注意：<code>filp()</code>方法称为切换成<strong>读模式</strong>；</p><p>我们每次要从缓冲区中读取数据时，就要调用filp方法-切换为读模式（否则读的内容会是一片空白）；【重要】</p><p>进入到读模式后如何去读写到数据呢？</p><p>之前使用的是get(索引的方法)；</p><p>这是使用的是get(byte)方法；</p><p>需要先创建一个数组；new byte[byteBuffer.limit];(byteBuffer.limit&#x3D;6 足够了)；</p><p>使用byteBuffer.limit的原因，只有byteBuffer.limit多个数据可读；</p><table><thead><tr><th>读取缓冲区中的内容</th><th>code</th></tr></thead><tbody><tr><td>1）创建一个limit()大小的字节数组；(因为只有这个多个数据可读)</td><td>new byte[byteBuffer.limit()]</td></tr><tr><td>2）当读取出来的数据放到字节数组中</td><td>byteBuffer.get(bytes)</td></tr><tr><td>3）输出数据</td><td>new String(bytes,0,bytes.length)</td></tr></tbody></table><p>如果想要向缓冲区中再次写入数据;可以使用<code>clear()</code>方法；</p><p>get方法执行完成后会影响position的变化；</p><p>例如，读模式读取完成后，position的值变成了6；</p><p>使用clear方法后，limit的值变成了10，position的值变成了0；</p><p><code>clear()</code>:清空缓冲区：核心变量回归写模式，重置核心变量的值；</p><p>思考：之前存到缓冲区中的数据，数据是否还存在？</p><p>数据时还会存在的，数据处于被遗忘的状态（不能再根据索引的值进行获取了）；</p><p>执行clear方法后再次使用get()方法，得到一个数值（74），转化为字符(使用char强转下)为（J）;</p><p>这节要清楚读写模式的切换；</p><hr><h3 id="Buffer核心属性-03"><a href="#Buffer核心属性-03" class="headerlink" title="Buffer核心属性_03"></a>Buffer核心属性_03</h3><p>这里讲解最后一个核心变量：mark;</p><p>mark的默认值是-1（标记：一个备忘位置，用于记录上一次的读写位置【position】）</p><p>读写位置就是position的值；</p><p>案例：</p><p>先进行一个put操作（”lagou”）；position的值为5；</p><p>再进行一个put操作（“zimu”）:position的值为9；</p><p>第一次put后调用mark()方法，position的值为5；</p><p>如果想调用第二个put后想还原到第一个put后的位置（<code>reset()</code>）,position的值变成了5；</p><p>mark方法了解记下即可；</p><hr><h3 id="Channel概述"><a href="#Channel概述" class="headerlink" title="Channel概述"></a>Channel概述</h3><p>前面讲解了buffer缓冲区，接下来讲解channel通道的学习；</p><p>也会讲解缓冲区配合通道进行数据处理；</p><p>Channel的作用：配合缓冲区进行数处理；</p><p>Channel标识IO</p><p>源于目标打开的连接，类似于传说中的”流”；</p><p>标准的IO是基于字节流和字符欧进行操作的；</p><p>NIO是基于通道Channel和缓冲区进行操作的；</p><p>Channel通道是一个接口，由java.nio.channels包定义的；</p><p><img src="/1000/01/21/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%BA%94-Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE/Java%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E9%A1%B9%E7%9B%AE-%E5%8A%A0%E9%A4%90-NIO%E6%8A%80%E6%9C%AF/1652798820854.png" alt="1652798820854"></p><p>如果对本地资源处理，可以使用FileChannel</p><p>其他三个是解决网络资源处理的；</p><p>UDP是不安全的协议；</p><p>TCP是相对安全的协议；</p><p>DatagramChannel：通过UDP读写网络中的数据通道；</p><p>SocketSocketChannel：通过TCP读写网络中国的数据【常用】</p><p>ServerSockerChannel: 可以监听新进来的TCP连接。对每一个新进来的连接都会创建一个SocketChannel;</p><hr><h3 id="FileChannel完成文件复制"><a href="#FileChannel完成文件复制" class="headerlink" title="FileChannel完成文件复制"></a>FileChannel完成文件复制</h3><p>如果想进行本地文件的处理，可以使用FIleCHannel+缓冲区进行对本地数据的处理；</p><p>需求：将本地的图片复制到我们的工程中；</p><p>写时候结合标准IO来写；</p><p>先要创建输入流和输出流；（如果想要获取一个channel,需要依赖于IO流来获取channel）</p><table><thead><tr><th>将本地的图片复制到我们的工程中</th><th>javacode</th></tr></thead><tbody><tr><td>1)javacode先要创建输入流和输出流；<br/>（如果想要获取一个channel,需要依赖于IO流来获取channel）</td><td>new FileInputStream(“D:\xxx.jpg”);<br/>new FileOutPutStream(“D:\复制.jpg”);</td></tr><tr><td>2)通过IO流获取channel通道</td><td>fileInputStream.getChannel();<br>fileOutPutStream.getChannel();</td></tr><tr><td>3)创建缓冲区</td><td>ByteBuffer.allocate(1024);</td></tr><tr><td>4)循环读写</td><td></td></tr><tr><td>5）关流</td><td>fileInputStream.close();<br>fileOutputStream.class();</td></tr></tbody></table><p>存在的问题，没有结束（程序一直没有结束）；</p><p>手动结束；</p><p>看到图片根据就没有完成（图片中没有内容）（图片无法查看）</p><p>可能出现的问题，就是循环读写中出现了问题；</p><hr><p>对循环读取进行分析：</p><p>要复制的文件；</p><p>复制到的文件；</p><p>缓冲区；</p><p>循环读取；</p><p>缓冲区创建完成后，limit在最后的位置，posiiton的开始的位置；</p><p>进入到循环的时候；channel1.read(byteBuffer)（存入到缓冲区中）</p><p>写入的时候：position在最后的位置，limit也在最后的位置；</p><p>卡着了，放不了，写不了；</p><p>-》需要移动下position，clear();</p><p>在read后调用buffer.clear();</p><p>如果文件只有500个字节，又会写多了；</p><p>buffer.flip()方法， 切换读模式，改变position和limit的值</p><p>将position的值赋值给limit,position的值设置为0；</p><p>byteBuffer.flip();</p><p>-》还是处于死循环中；（复制的文件依旧打不开）</p><p>channel2.write(byteBuffer); 相当于做了一个buffer.get方法；</p><p>position的值又到了最后了；limit也是最后，又没有方法将资源文件写入到缓冲区中了</p><p>-》解决，将position的位置还原到最开始的位置；</p><p>buffer.clear();</p><hr><h3 id="网络编程客户端"><a href="#网络编程客户端" class="headerlink" title="网络编程客户端"></a>网络编程客户端</h3><p>上节完成了对本地文件资源的处理；</p><p>这节完成对网络文件资源的处理；</p><p>在学习NIO网络编程之前，先会不下BIO;</p><p>服务端调用<code>accept()</code>方法，会一直等待客户端的连接；</p><p>客户端，使用ip+端口号，创建Socket对象</p><p>BIO:是一个同步阻塞的（服务器会调用accept进入一个阻塞状态，做不了任何的事情）；</p><p>NIO：同步非阻塞的（有处理，没有做其他事情）并发支持的更好一些，现在的很多的长久都是高并发场景，NIO更受欢迎；</p><table><thead><tr><th>根据BIO客户端代码编写NIO客户端代码；</th><th>javacode</th></tr></thead><tbody><tr><td>1）创建SocketChannel对象</td><td>SocketChannel.open();<br>socketChannel.connect(new InetSocketAddress(“127.0.0.1”,”9999”))</td></tr><tr><td>2）创建缓冲区数组</td><td>ByteBuffer byteBuffer&#x3D;ByteBuffer.allocate(1024);</td></tr><tr><td>3）设置数据</td><td>byteBuffer.put(“哈哈哈”.getBytes());</td></tr><tr><td>4）输出数据</td><td>socketChannel.write(byteBuffer);</td></tr><tr><td>5) 关闭sockerChannel</td><td>socketChannel.close();</td></tr></tbody></table><p>InetSocketAddress是SocketAddress的子类</p><p>socketChannel相当于一个流；</p><hr><h3 id="网络编程服务器端"><a href="#网络编程服务器端" class="headerlink" title="网络编程服务器端"></a>网络编程服务器端</h3><p>编写客户端后需要编写服务器端的代码；</p><p>可以根据BIO的代码对比着写；</p><table><thead><tr><th>编写服务器端的代码</th><th>javaCode</th></tr></thead><tbody><tr><td>1)创建服务器端对象，监听对应的端口<br>绑定需要监听的端口</td><td>ServerSocketChannel.open();<br>serverSocketChannel.bind(new InetSocketAddress(9999));</td></tr><tr><td>2)连接客户端</td><td>SocketChannel socketChannel&#x3D;serverSockerChannel.accept();</td></tr><tr><td>3)读取数据<br>读取到的字节长度<br>打印</td><td>ByteBuffer byteBuffer &#x3D; ByteBuffer.allocate(1024);，<br>int len &#x3D; socketChannel.read(byteBuffer);<br>new String(byteBuffer.array(),0,len);</td></tr></tbody></table><p>抽象类：不能直接的new；看是否有静态方法</p><p>NIO是一种同步非阻塞，默认会处于阻塞状态，非阻塞 的需要设置；</p><p>SocketChannel实际就是一个流；</p><p>上面代码存在问题，不是没有数据，打印的都是空格；</p><p>客户端：创建了一个缓冲区数组；（ByteBuffer）</p><p>limit的值在最后面（1024），position在0位置；</p><p>做了一个put操作（“哈哈哈”），汉字对应三个字节；</p><p>position会移动到9的位置；</p><p>write输出的内容是：position开始（9开始），到limit（1024），打印的全是空格；</p><p>调用flip方法，进入读模式；可以解决这个问题；</p><p>读的时候，1024，为什么后面的空格没有进行一个打印呢？</p><p>看服务器端：读取客户端的内容的时候，读取的是字节的长度，打印的时候就是从0打印到9；</p><p>要知道如何才能正常的输出数据；</p><hr><h3 id="accept阻塞问题"><a href="#accept阻塞问题" class="headerlink" title="accept阻塞问题"></a>accept阻塞问题</h3><p>现在客户端与服务器端已经可以正常的进行交互了；</p><p>但是还是会存在问题；</p><p>需要知道如何将网络连接设置为非阻塞连接；【重点】</p><p>服务器端调用accept的方法会进行阻塞状态；不会打印accept后面的代码；</p><p>NIO是同步非阻塞的，如果是组合的和BIO就没什么区别的；</p><p>预约一个快递，京东上门取货，上门之前什么就不做了，会造成资源的浪费；可以在上门取货之前去干其他的事情；</p><p>请求过来的时候处理请你去，没有过来的时候干其他事情；</p><p>如何在服务器端设置为非阻塞状态？</p><p>在调用accept方法之前，将一个参数设置为false；</p><p><code>serverSocketChannel.configureBlocking(false);</code></p><p>但是执行后出现了一个异常；（空指针异常）；</p><p>没有与客户端建立连接，socketChannel就是一个null,null调用方法就会报异常；</p><p>需要对这个异常进行解决：</p><p>在连接客户端的外面进行一个循环（white ture）</p><p>连接客户端的后面加一个判断（判断socketChannel是否为空）；</p><p>如果为空，else,完成其他逻辑的一些代码；</p><p>想要处理完客户端连接后，需要结束循环（break;）</p><p>上面的情况就类似于京东上门取件；</p><p>需要知道如何将网络连接设置为非阻塞连接；【重点】</p><hr><h3 id="多路复用的概念"><a href="#多路复用的概念" class="headerlink" title="多路复用的概念"></a>多路复用的概念</h3><p>后面再学吧；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">byteBuffer.capacity().sout<br></code></pre></td></tr></table></figure><p>经过get\put方法limit及position都是会发生改变的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">byteBuffer.put((<span class="hljs-type">byte</span>)<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>limit值是不会发生变化的（因为limit值后的元素是不能进行操作的）；</p><p>每次写一个元素，position值是会发生改变的，从零开始；</p><p>写六个元素，值就会变成6；</p><p>写模式下：下一次进行一个操作，</p><p>读模式：要进行一个读取的话：能够读只能读到界线这，读让读几个零食不合适的；读的haul是从position开始读，到limit结束；怎么去读取到javaee这些存进去的数据？（写一节将如何将写模式切断成读模式）</p><hr>]]></content>
    
    
    <categories>
      
      <category>Java就业训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一阶段JavaSE</tag>
      
      <tag>模块五Java新特性和项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第十七章 IO流</title>
    <link href="/1000/01/17/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E5%9B%9B-Java%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8B%EF%BC%89/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%20IO%E6%B5%81/"/>
    <url>/1000/01/17/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E5%9B%9B-Java%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8B%EF%BC%89/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%20IO%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="第十七章-IO流"><a href="#第十七章-IO流" class="headerlink" title="第十七章 IO流"></a>第十七章 IO流</h1><h2 id="IO流的概念和分类"><a href="#IO流的概念和分类" class="headerlink" title="IO流的概念和分类"></a>IO流的概念和分类</h2><p><strong>io:</strong> input  and output【输入 and 输入】【读and写】</p><p><strong>流：</strong>寒流、水流【水流动的状态】、</p><p><strong>io流：</strong>数据可以像流一样，从一端到另一端的模型；</p><p>io的分类：</p><h3 id="基础单位不同："><a href="#基础单位不同：" class="headerlink" title="基础单位不同："></a><strong>基础单位不同</strong>：</h3><p><strong>字节流</strong>（以字节为单位：1个字节）、<strong>字符流</strong>（以字符为单位：2个字节）</p><p>字节流可以读写任意类型的文件（因为字符流可以拆分为字节流）</p><p>字符流只能读写文本文件，里面只能是文字，不能读取图片、视频等；</p><p>一般读取有汉字的话建议使用字符流，一次可以读取完整的一个汉字；</p><h3 id="按照读写数据的方向不同："><a href="#按照读写数据的方向不同：" class="headerlink" title="按照读写数据的方向不同："></a>按照读写数据的方向不同：</h3><p><strong>输入流</strong>、<strong>输出流</strong></p><p>输入流-读文件  输出流-写文件</p><p>输入流-将数据从文件中读取到内存中；</p><p>输出流【从内存中输出】【写文件】-将内存中的数据写入到文件中；</p><h3 id="按照流的角色不同："><a href="#按照流的角色不同：" class="headerlink" title="按照流的角色不同："></a><strong>按照流的角色不同</strong>：</h3><p><strong>节点流</strong>、<strong>处理流</strong></p><p>节点流：根文件直接关联的流</p><p>处理流：根文件间接关联的流</p><hr><h2 id="IO流的框架结构"><a href="#IO流的框架结构" class="headerlink" title="IO流的框架结构"></a>IO流的框架结构</h2><p><strong>IO流的框架结构可分为四部分：</strong></p><p>字节为单位读，字符为单位读；</p><p>字节为单位写，字符为单位写；</p><p><img src="/1000/01/17/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E5%9B%9B-Java%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8B%EF%BC%89/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%20IO%E6%B5%81/IO%E6%B5%81%E7%9A%84%E4%BD%93%E7%B3%BB%E5%9B%BE.png" alt="体系结构"></p><p><strong>抽象基类</strong>：是四种分类的顶层分类</p><p>是模板基类，对子类有强制型和规范性，不能new对象，new对象只能通过子类来完成；</p><p>–的意思：没有，没有访问字符串的流，不擅长；</p><p><strong>缓冲流</strong>，对流加了一个缓冲区的流；</p><p><strong>转换流</strong>：可以将字节流转换成字符流，字符流装换成字节流；</p><p><strong>特殊流</strong>：对数据的读写，这里是对基础数据的读写；</p><p>这个不需要背会；</p><p>有些类有些是不需要学的，工作中不会用到</p><p><strong>下面的图需要我们牢记；</strong></p><p><img src="/1000/01/17/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E5%9B%9B-Java%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8B%EF%BC%89/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%20IO%E6%B5%81/IO%E6%B5%81%E7%9A%84%E6%A1%86%E6%9E%B6%E5%9B%BE.png" alt="IO流的框架图"></p><p>数据输入输出 </p><p>对象输入输出</p><p>都是成对出现的；</p><p>上面这张图需要背会，我们经常要使用的；</p><p>这是io流的框架；</p><hr><h2 id="FileWriter类的概念和基本使用"><a href="#FileWriter类的概念和基本使用" class="headerlink" title="FileWriter类的概念和基本使用"></a>FileWriter类的概念和基本使用</h2><p>先讲解<strong>字符流的输入输出流</strong>；</p><p>主要处理文本文件的；</p><p><img src="/1000/01/17/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E5%9B%9B-Java%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8B%EF%BC%89/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%20IO%E6%B5%81/1653273935013.png" alt="1653273935013"></p><p>构造方法（普通构造方法）；</p><p>构造方法（追加内容）；</p><p>写单个字符；</p><p>写一部分字符；</p><p>将整个字符写进去；</p><p>刷新流；</p><p>关闭流；</p><p>案例：</p><p>1、构造FileWrite类型的对象与d:&#x2F;a.txt文件关联</p><p>2、通过流对象写入数据内容；</p><p>3、关闭流对象并释放有关的资源；</p><p> <a href="FileWriterTest.java" title="FileWriterTest.java">FileWriterTest.java</a> </p><p>类似于那种水管桶到了水桶里；</p><p>输水；</p><p>断开水管和水桶；</p><p>【flush】水管中可能会残留一些水分，将水分给刷新出去</p><p><strong>close自带刷新功能</strong>，所以这里不用写了；</p><p>java虚拟机跟来工作量就很大了，所以我们直接捕获处理；</p><p>ctrl+alt+t：来生成异常的捕获代码等；</p><p>将关闭流的代码写到finally中，避免资源的浪费；</p><p>如果new的时候报了异常，finally中调用close中会报空指针异常；</p><p>需要在funally中处理；</p><p>调用close的时候也可能发生异常，再使用try catch下；</p><p>【重要】若文件不存在，该流会创建一个空的文件；</p><p>若文件已经存在，保留原有的内容还是不保留呢？</p><p>若文件存在，该流会清空文件中的原有内容；</p><p>想要以追加的方式创建对象去关联文件？</p><p>使用图片中第二个构造方法；</p><hr><h2 id="FileWriter类的方法使用"><a href="#FileWriter类的方法使用" class="headerlink" title="FileWriter类的方法使用"></a>FileWriter类的方法使用</h2><p>继续讲解上节的内容；</p><p>写入一部分字符，写入字符数组；</p><p> <a href="FileWriterTest.java" title="FileWriterTest.java">FileWriterTest.java</a> </p><p>管道与水桶关联；</p><p>有：清空；</p><p>没有：创建；</p><p>暂时我们不需要写刷新的方法；</p><hr><h2 id="FileReader类的概念和基本使用"><a href="#FileReader类的概念和基本使用" class="headerlink" title="FileReader类的概念和基本使用"></a>FileReader类的概念和基本使用</h2><p>FileReader从文本文件到读取数据；</p><p><img src="/1000/01/17/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E5%9B%9B-Java%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8B%EF%BC%89/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%20IO%E6%B5%81/1653285447082.png" alt="1653285447082"></p><table><thead><tr><th align="left">方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td align="left">FileReader(StringfileName)</td><td>【构造函数】根据参数指定的文件名构造对象</td></tr><tr><td align="left">int read()</td><td>【读取单个字符】读取单个字符的数据并返回，返回-1表示读取到末尾</td></tr><tr><td align="left">int read(char[] cbuf, intoffset, int length)</td><td>【读取一部分字符】从输入流中将最多len个字符的数据读入一个字符数组中，返回读取到的字符个数，返回-1表示读取到末尾</td></tr><tr><td align="left">int read(char[] cbuf)</td><td>【读取字符数组】从此输入流中将最多 cbuf.length 个字符的数据读入字符数组中，返回读取到的字符个数，返回-1表示读取到末尾</td></tr><tr><td align="left">void close()</td><td>【关闭流】关闭流对象并释放有关的资源</td></tr></tbody></table><p>1、构造FileReader类型的对象与d:&#x2F;a.txt文件关联</p><p>2、读取数据内容并打印</p><p>3、关闭流对象并释放有关资源</p><p>将水管插入到瓶子中；</p><p>从瓶子中抽水；</p><p>将水管中残留的水抽出来并断开瓶子与水管的连接；</p><p> <a href="FileReaderTest.java" title="FileReaderTest.java">FileReaderTest.java</a> </p><hr><h2 id="FileReader类的方法使用"><a href="#FileReader类的方法使用" class="headerlink" title="FileReader类的方法使用"></a>FileReader类的方法使用</h2><p>接着上节的学习；</p><p>读字符数组的一部分；</p><p>读整个字符数组；</p><p> <a href="FileReaderTest.java" title="FileReaderTest.java">FileReaderTest.java</a> </p><p>读取字符数组中的部分字符：</p><p>读取的是哪个数组，读取字符的开始下标，读取多少个字符；</p><p>还是将数据读到原来的字符数组中；</p><p>所有打印出来时：啥也没有，字符1，字符2，字符3，啥也没有</p><hr><h2 id="文件字符流实现文件的拷贝"><a href="#文件字符流实现文件的拷贝" class="headerlink" title="文件字符流实现文件的拷贝"></a>文件字符流实现文件的拷贝</h2><p>对签名字符输出流与字符输入流的总结；</p><p>将a.txt文件中的内容拷贝到b.txt文件中；</p><p>1.创建FileReader类型的对象与d:&#x2F;a.txt文件关联</p><p>2.创建FileWriter类型的对象与d:&#x2F;b.txt文件关联</p><p>3.不断地从输入流中读取数据内容并写入到输出流中</p><p>4.关闭流对象并释放有关的资源</p><p> <a href="FileCharCopyTest.java" title="FileCharCopyTest.java">FileCharCopyTest.java</a> </p><p>不断的读取：</p><p>一个字符一个字符的读和写；</p><p>一个水桶一个管道</p><p>一个水桶一个管道</p><p>管道中流出的水注入到另一个管道中；</p><p>一个字符一个字符感觉太慢了呀！</p><hr><h2 id="文件字节流实现文件的拷贝"><a href="#文件字节流实现文件的拷贝" class="headerlink" title="文件字节流实现文件的拷贝"></a>文件字节流实现文件的拷贝</h2><p>如果使用字符流拷贝图片的话是不行的；</p><p>为什么不可以呢？</p><p>是可以拷贝的，但是文件的大小就不一样了（文件已经损坏）</p><p>字符流只能读取文本文件，图片文件处理不了；</p><p>字节流可以处理任意类型的文件；</p><h3 id="FileOutputStream类（重点）"><a href="#FileOutputStream类（重点）" class="headerlink" title="FileOutputStream类（重点）"></a>FileOutputStream类（重点）</h3><p>java.io.FileOutputStream类主要用于将图像数据之类的原始字节流写入到输出流中。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>FileOutputStream(String name)</td><td>根据参数指定的文件名来构造对象</td></tr><tr><td>FileOutputStream(String name,boolean append)</td><td>以追加的方式根据参数指定的文件名来构造对象</td></tr><tr><td>void write(int b)</td><td>将指定字节写入此文件输出流</td></tr><tr><td>void write(byte[] b, int off, int len)</td><td>将指定字节数组中从偏移量off开始的len个字节写入此文件输出流</td></tr><tr><td>void write(byte[] b)</td><td>将 b.length 个字节从指定字节数组写入此文件输出流中</td></tr><tr><td>void flush()</td><td>刷新此输出流并强制写出任何缓冲的输出字节</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr></tbody></table><p>方法的用法类似，就将char类型的数组，替换成了byte类型的数组；</p><h3 id="FileInputStream类（重点）"><a href="#FileInputStream类（重点）" class="headerlink" title="FileInputStream类（重点）"></a>FileInputStream类（重点）</h3><p>java.io.FileInputStream类主要用于从输入流中以字节流的方式读取图像数据等。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>FileInputStream(Stringname)</td><td>根据参数指定的文件路径名来构造对象</td></tr><tr><td>int read()</td><td>从输入流中读取单个字节的数据并返回，返回-1表示读取到末尾</td></tr><tr><td>int read(byte[] b, intoff, int len)</td><td>从此输入流中将最多len个字节的数据读入字节数组中，返回读取到的字节个数，返回-1表示读取到末尾</td></tr><tr><td>int read(byte[] b)</td><td>从此输入流中将最多 b.length 个字节的数据读入字节数组中，返回读取到的字节个数，返回-1表示读取到末尾</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr><tr><td>int available()</td><td>获取输入流所关联文件的大小</td></tr></tbody></table><p>方法的用法类似，就将char类型的数组，替换成了byte类型的数组；</p><hr><h3 id="实现图片的拷贝"><a href="#实现图片的拷贝" class="headerlink" title="实现图片的拷贝"></a>实现图片的拷贝</h3><p>1.创建FileInputStream类型的对象与d:&#x2F;03 IO流的框架图.png文件关联</p><p>2.创建FileOutputStream类型的对象与d:&#x2F;IO流的框架图.png文件关联</p><p>3.不断地从输入流中读取数据内容并写入到输出流中</p><p>4.关闭流对象并释放有关的资源</p><p> <a href="FileByteCopyTest.java" title="FileByteCopyTest.java">FileByteCopyTest.java</a> </p><p>没有规定先关闭谁；</p><p>规定，后创建的先关闭；</p><p>读一个字节写进去，读一个字节写进去；</p><p>字符流只能处理文本文件，字节流可以处理任意类型的文件；</p><h2 id="拷贝文件方式一的缺点"><a href="#拷贝文件方式一的缺点" class="headerlink" title="拷贝文件方式一的缺点"></a>拷贝文件方式一的缺点</h2><p>如果想要拷贝一个视频文件；</p><p>如果使用字节流的方法；</p><p>注意：输入输出的文件格式还是要保持一致的；</p><p>会发现一直在拷贝中；</p><p>几M的文件可能就需要花费比较长的时间；</p><p>没拷贝完的文件时无法播放的【文件无法渲染】；</p><p>文件不完整；</p><p>有的视频文件，拷贝不全，但是还是可以播放的，但是不能拖拽的视频文件；</p><p>尽可能的将视频拷贝完成后再播放；</p><p>造成这个现象的原因：是以单个字节为单位进行拷贝的</p><p>文件稍大的时候，文件拷贝的时间比较长【例如：16M】</p><p>如果电影的大小是几个G的话，可能要疯掉了；</p><p>就像买50个，买一个鸡蛋就回家，跑了50次；</p><hr><h2 id="拷贝文件方式二的实现和缺点"><a href="#拷贝文件方式二的实现和缺点" class="headerlink" title="拷贝文件方式二的实现和缺点"></a>拷贝文件方式二的实现和缺点</h2><p>文件一的方式，效率是很低的；</p><p>原因：一个字节为单位的拷贝；</p><p>解决：我们买鸡蛋的时候，可以带一个篮子；一次买回去；</p><p>准备一个和文件大小一样的缓冲区，一次性将文件中的所有内容读取到缓冲区，一次性的写进去；</p><p>available:获取文件的大小；</p><p>byte[] barr&#x3D;new byte[fis.available()];</p><p> <a href="FileByteCopyTest.java" title="FileByteCopyTest.java">FileByteCopyTest.java</a> </p><p>一下子快了很多；</p><p>这个方式也是有缺点的；例如：20G文件大小</p><p>不如让买五万个鸡蛋，一次装回去难为人啊。</p><p>所以，这种方式，能实现，但是不推荐使用</p><hr><h2 id="拷贝文件方式三的实现"><a href="#拷贝文件方式三的实现" class="headerlink" title="拷贝文件方式三的实现"></a>拷贝文件方式三的实现</h2><p>分批次买鸡蛋；</p><p>准备一个相对适应的缓冲区，分很多次拷贝；</p><p>如果没有强制要求的话使用1024或1024的倍数就好；</p><p>五万个鸡蛋，往前挪动一步就很难；</p><p> <a href="FileByteCopyTest.java" title="FileByteCopyTest.java">FileByteCopyTest.java</a> </p><p>这种方法要注意：如果最后一次不是1024的倍数要如何处理；</p><p>实际读多少个字节就写多少个字节就可以；</p><hr><h2 id="缓冲字节流实现文件的拷贝"><a href="#缓冲字节流实现文件的拷贝" class="headerlink" title="缓冲字节流实现文件的拷贝"></a>缓冲字节流实现文件的拷贝</h2><p>要想提高文件传输的效率，需要使用缓冲区；</p><p>如果不缓存，写一个就要跟磁盘进行一个交互；</p><p>需要减少与磁盘的交互；</p><h3 id="BufferedOutputStream类（重点）"><a href="#BufferedOutputStream类（重点）" class="headerlink" title="BufferedOutputStream类（重点）"></a>BufferedOutputStream类（重点）</h3><p>java.io.BufferedOutputStream类主要用于描述缓冲输出流，此时不用为写入的每个字节调用底层系统。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BufferedOutputStream(OutputStream out)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>BufferedOutputStream(OutputStream out, intsize)</td><td>根据参数指定的引用和缓冲区大小来构造对象</td></tr><tr><td>void write(int b)</td><td>写入单个字节</td></tr><tr><td>void write(byte[] b, int off, int len)</td><td>写入字节数组中的一部分数据</td></tr><tr><td>void write(byte[] b)</td><td>写入参数指定的整个字节数组</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr></tbody></table><p>方法跟之前的都是一样的；</p><h3 id="BufferedInputStream类（重点）"><a href="#BufferedInputStream类（重点）" class="headerlink" title="BufferedInputStream类（重点）"></a>BufferedInputStream类（重点）</h3><p>java.io.BufferedInputStream类主要用于描述<strong>缓冲输入流</strong></p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BufferedInputStream(InputStream in)</td><td>根据参数指定的引用构造对象</td></tr><tr><td>BufferedInputStream(InputStream in, int size)</td><td>根据参数指定的引用和缓冲区大小构造对象</td></tr><tr><td>int read()</td><td>读取单个字节</td></tr><tr><td>int read(byte[] b, int off, int len)</td><td>读取len个字节</td></tr><tr><td>int read(byte[] b)</td><td>读取b.length个字节</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr></tbody></table><p>传入的是inputStream，因为是抽象类，不能new对象，有要new FileInoutStream</p><hr><h3 id="实现视频文件的复制"><a href="#实现视频文件的复制" class="headerlink" title="实现视频文件的复制"></a>实现视频文件的复制</h3><p>流套在流之上，是处理流；</p><p>缓冲流的内部会提供一个缓冲区，大小为：8192【1024*8】</p><p>java官方测试后，8196是比较合适的；</p><p>内部提供了一个缓冲区，我们又提供了一个缓冲区，效率又更高了；</p><p>里面的就不用关闭了；</p><p>将外面的【缓冲流】关闭了就可以了；</p><p>开发中就使用带有缓冲区的这个，也可以再加一个缓冲区；</p><p> <a href="BufferedByteCopyTest.java" title="BufferedByteCopyTest.java">BufferedByteCopyTest.java</a> </p><p>如果在缓冲区的外面有加了一个缓冲区，这个缓冲区的大小是两个缓冲区的乘积吗？【不理解】；</p><hr><h2 id="缓冲字节流和文件字节流效率比较"><a href="#缓冲字节流和文件字节流效率比较" class="headerlink" title="缓冲字节流和文件字节流效率比较"></a>缓冲字节流和文件字节流效率比较</h2><p>缓冲字节流和文件字节流的效率比较；</p><p>根据获取当前系统时间判断；</p><p>System.currentTimeMillis();</p><p>获取当前时间距1970年1月1日到现在的毫秒数；</p><p>文件字节流：165左右</p><p>缓冲字节流：44</p><p>开发中设计到文件的拷贝，首选缓冲流；</p><hr><h2 id="缓冲字符流的使用"><a href="#缓冲字符流的使用" class="headerlink" title="缓冲字符流的使用"></a>缓冲字符流的使用</h2><p>前面介绍了字节流的缓冲流；</p><p>接下来学习字符流的缓冲流；</p><p><img src="/1000/01/17/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E5%9B%9B-Java%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8B%EF%BC%89/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%20IO%E6%B5%81/IO%E6%B5%81%E7%9A%84%E6%A1%86%E6%9E%B6%E5%9B%BE.png" alt="IO流的框架图"></p><h3 id="BufferedWriter类（重点）"><a href="#BufferedWriter类（重点）" class="headerlink" title="BufferedWriter类（重点）"></a>BufferedWriter类（重点）</h3><p>java.io.BufferedWriter类主要用于写入单个字符、字符数组以及字符串到输出流中。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BufferedWriter(Writer out)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>BufferedWriter(Writer out, int sz)</td><td>根据参数指定的引用和缓冲区大小来构造对象</td></tr><tr><td>void write(int c)</td><td>写入单个字符到输出流中</td></tr><tr><td>void write(char[] cbuf, int off, int len)</td><td>将字符数组cbuf中从下标off开始的len个字符写入输出流中</td></tr><tr><td>void write(char[] cbuf)</td><td>将字符串数组cbuf中所有内容写入输出流中</td></tr><tr><td>void write(String s, int off, int len)</td><td>【写入字符串的一部分】将参数s中下标从off开始的len个字符写入输出流中</td></tr><tr><td>void write(String str)</td><td>【写入字符串】将参数指定的字符串内容写入输出流中</td></tr><tr><td>void newLine()</td><td>【写一行】用于写入行分隔符到输出流中</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr></tbody></table><p>额外的方法：可写入字符的一部分</p><h3 id="BufferedReader类（重点）"><a href="#BufferedReader类（重点）" class="headerlink" title="BufferedReader类（重点）"></a>BufferedReader类（重点）</h3><p>java.io.BufferedReader类用于从输入流中读取单个字符、字符数组以及字符串。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BufferedReader(Reader in)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>BufferedReader(Reader in, int sz)</td><td>根据参数指定的引用和缓冲区大小来构造对象</td></tr><tr><td>int read()</td><td>从输入流读取单个字符，读取到末尾则返回-1，否则返回实际读取到的字符内容</td></tr><tr><td>int read(char[] cbuf, intoff, int len)</td><td>从输入流中读取len个字符放入数组cbuf中下标从off开始的位置上，若读取到末尾则返回-1，否则返回实际读取到的字符个数</td></tr><tr><td>int read(char[] cbuf)</td><td>从输入流中读满整个数组cbuf</td></tr><tr><td>String readLine()</td><td>【读一行】读取一行字符串并返回，返回null表示读取到末尾</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr></tbody></table><hr><h3 id="实现文件的拷贝"><a href="#实现文件的拷贝" class="headerlink" title="实现文件的拷贝"></a>实现文件的拷贝</h3><p>读的一行；</p><p>写一行；</p><p>readLine()：返回null表示读取到末尾</p><p> <a href="BufferedCharCopyTest.java" title="BufferedCharCopyTest.java">BufferedCharCopyTest.java</a> </p><hr><h2 id="打印流和转换流模拟聊天的功能实现"><a href="#打印流和转换流模拟聊天的功能实现" class="headerlink" title="打印流和转换流模拟聊天的功能实现"></a>打印流和转换流模拟聊天的功能实现</h2><h3 id="PrintStream类"><a href="#PrintStream类" class="headerlink" title="PrintStream类"></a>PrintStream类</h3><p>java.io.PrintStream类主要用于更加方便地打印各种数据内容。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>PrintStream(OutputStream out)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>void print(String s)</td><td>用于将参数指定的字符串内容打印出来</td></tr><tr><td>void println(String x)</td><td>用于打印字符串后并终止该行</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>用于关闭输出流并释放有关的资源</td></tr></tbody></table><p>我们从第一天就使用的是println；</p><p>就是下面的pringln；</p><p>可以到javaAPI文档中查找下；</p><p>里面有各种pringln的重载；</p><p>PrintStream不仅可以向控制台中打印，也可以向文件中打印（写入文件）</p><p><img src="/1000/01/17/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E5%9B%9B-Java%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8B%EF%BC%89/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%20IO%E6%B5%81/IO%E6%B5%81%E7%9A%84%E6%A1%86%E6%9E%B6%E5%9B%BE.png" alt="IO流的框架图"></p><hr><h3 id="PrintWriter类"><a href="#PrintWriter类" class="headerlink" title="PrintWriter类"></a>PrintWriter类</h3><p>java.io.PrintWriter类主要用于将对象的格式化形式打印到文本输出流。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>PrintWriter(Writer out)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>void print(String s)</td><td>将参数指定的字符串内容打印出来</td></tr><tr><td>void println(String x)</td><td>打印字符串后并终止该行</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr></tbody></table><hr><h3 id="OutputStreamWriter类"><a href="#OutputStreamWriter类" class="headerlink" title="OutputStreamWriter类"></a>OutputStreamWriter类</h3><p>java.io.OutputStreamWriter类主要用于实现从字符流到字节流的转换。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>OutputStreamWriter(OutputStream out)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>OutputStreamWriter(OutputStream out, StringcharsetName)</td><td>根据参数指定的引用和编码构造对象</td></tr><tr><td>void write(String str)</td><td>将参数指定的字符串写入</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>用于关闭输出流并释放有关的资源</td></tr></tbody></table><hr><h3 id="InputStreamReader类"><a href="#InputStreamReader类" class="headerlink" title="InputStreamReader类"></a>InputStreamReader类</h3><p>java.io.InputStreamReader类主要用于实现从字节流到字符流的转换。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>InputStreamReader(InputStream in)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>InputStreamReader(InputStream in, StringcharsetName)</td><td>根据参数指定的引用和编码来构造对象</td></tr><tr><td>int read(char[] cbuf)</td><td>读取字符数据到参数指定的数组</td></tr><tr><td>void close()</td><td>用于关闭输出流并释放有关的资源</td></tr></tbody></table><hr><h3 id="案例题目"><a href="#案例题目" class="headerlink" title="案例题目"></a>案例题目</h3><p>不断地提示用户输入要发送的内容，若发送的内容是”bye”则聊天结束，否则将用户输入的内容写入到文件d:&#x2F;a.txt中。<br>要求使用BufferedReader类来读取键盘的输入 System.in代表键盘输入<strong>要求使用PrintStream类负责将数据写入文件</strong></p><p>提示用户输入内容；</p><p>输入bye 聊天结束；</p><p>如果不是bye将聊天内容输入到文件中；</p><p>java.lang 下 System类，in；</p><p>System.in是InputStream类型的；</p><p>代表键盘输入；</p><p>但是写的话使用的是PrintWriter(Writer out)-&gt;类型不匹配，需要将类型转换</p><p>-》使用InputStreamReader(InputStream in)；</p><p>写入文件的话，PrintStream类；</p><p>-》ps.println(String x);</p><p>不断的-》需要使用循环（没有循环次数）-》where(true);</p><p>如果聊天结束：break;</p><p>new 对象的代码都放在循环的外面；</p><p>否则要不断的new；</p><p> <a href="PrintStreamChatTest.java" title="PrintStreamChatTest.java">PrintStreamChatTest.java</a> </p><hr><h2 id="打印流和转换流模拟聊天的功能优化"><a href="#打印流和转换流模拟聊天的功能优化" class="headerlink" title="打印流和转换流模拟聊天的功能优化"></a>打印流和转换流模拟聊天的功能优化</h2><p>在循环的外面；</p><p>声明一个boolean类型的变量作为发送方的代表；</p><p>如果flag：true 张三说：</p><p>如果flag：false 李四说：</p><p> <a href="PrintStreamChatTest.java" title="PrintStreamChatTest.java">PrintStreamChatTest.java</a> </p><p>显示中的聊天还将聊天时间存储到文件中；</p><p>new Date();</p><p>调整时间格式；</p><p>new SimplateDateFormat(“yyyy-MM-dd HH:mm:ss”);</p><p> <a href="PrintStreamChatTest.java" title="PrintStreamChatTest.java">PrintStreamChatTest.java</a> </p><p><img src="/1000/01/17/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E5%9B%9B-Java%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8B%EF%BC%89/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%20IO%E6%B5%81/1653307751006.png" alt="1653307751006"></p><p>写入空行与之前的聊天记录隔开；</p><p>设计到打印-》使用打印流   Pringwrite与</p><hr><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>【待补充】</p><p>给我们的字符指定编号；</p><p>因为九三级底层只能识别二进制数据；</p><p>a是一个图案，是无法直接在计算机中存储的</p><p>给图案a指定一个编数-97；</p><p>把字符与整数之间对应关系的表-》编码表；</p><p>每个国家的文字都要将其存到计算机中；</p><p>常见的编码表：</p><p>ASCII：美国标砖信息交换码，使用一个字节的低7位二进制进行表示，因为使用的很少啊；</p><p>ISO8859-1：拉丁码表，欧洲码表，使用的文字比美国人多一些，所以使用一个字节的8位二进制表示；</p><p>文字多，对应的编号也多，使用的二进制位数也多；</p><p>GB2312:中国的中文编码表，汉字比美国人和欧洲人使用的文字要多很多，所以需要编号的范围也比较大，使用的二进制位数也就比较多；<strong>最多</strong>使用的是两个字节，16位二进制进行表示；</p><p>之后对GB2312进行了一个升级-》GBK</p><p>GBK:中国的中文编码表（升级版本），融合了更多的中文文字符号；最多使用两个字节16位二进制位表示；</p><p>对多：对于英文字母，使用两个字节就太浪费了；</p><p>如果出现英文字母还是使用一个字节来表示，如果出现汉字还是两个字节来表示；</p><p>那我们如何知道按一个字节来解析，还是两个字节来解析呢？</p><p>需要一个标识；</p><p>如果二进制位最高位是0：一个字节代表一个编号</p><p>如果二进制位最高位是1：两个字节代表一个编号</p><p>各个国家都制定了编码表；</p><p>如果一个文档中有各个国家的文字，要如何处理呢？</p><p>-》所有出现了一个新的编码表，涵盖各个国家的文字；</p><p>Unicode:国际编码表，兼容和了目前人类使用的所有字符，为每个字符分配唯一的字符码，所有的问题都用两个字节16位二进制来表示；</p><p>这个编码表也有一个问题，使用一个字节还是两个字节来解析呢</p><p>如果将最高位来表示解析标识的话，那么标识编号的范围就少了；</p><p>造成各个国家加起来就不够描述所有的文字了；</p><p>所有这个编码格式还是存在一定的问题；</p><p>UTF标准的出现解决了这个问题；</p><hr><p>英文符号使用一个字节，</p><p>一个字节能够表示编号；</p><p>两个字节也能表示编号；</p><p>三个字节也能表示编号；</p><p><strong>UTF-8</strong>：变长的编码方式，可用1-4个字节来表示符号；</p><p>如果一个字节的最高位是0：代表一个字节代表一个编号；</p><p>如果一个字节的最高为是110：代表两个字节代表一个编号；</p><p>如果一个字节的最高位为1110：代表三个字节代表一个编号；</p><p>可能会看到UTF-18</p><p>区别是：八个位传输，16个位传输；</p><hr><h2 id="数据流的概念和使用"><a href="#数据流的概念和使用" class="headerlink" title="数据流的概念和使用"></a>数据流的概念和使用</h2><p><img src="/1000/01/17/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E5%9B%9B-Java%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8B%EF%BC%89/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%20IO%E6%B5%81/IO%E6%B5%81%E7%9A%84%E6%A1%86%E6%9E%B6%E5%9B%BE.png" alt="IO流的框架图"></p><p>DataInputStream</p><h3 id="DataOutputStream类（了解）"><a href="#DataOutputStream类（了解）" class="headerlink" title="DataOutputStream类（了解）"></a>DataOutputStream类（了解）</h3><p>java.io.DataOutputStream类主要用于以适当的方式将基本数据类型写入输出流中。</p><p>将八种基础类型的变量进行写入操作；</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>DataOutputStream(OutputStream out)</td><td>根据参数指定的引用构造对象 OutputStream类是个抽象类，实参需要传递子类对象</td></tr><tr><td>void writeInt(int v)</td><td>【int 四个字节，从高到底以此写入】用于将参数指定的整数一次性写入输出流，优先写入高字节</td></tr><tr><td>void close()</td><td>用于关闭文件输出流并释放有关的资源</td></tr></tbody></table><p>OutputStream out登层类，抽象类，不能new对象；</p><p>需要使用子类创建对象，例如：FileOutputStream;</p><p>存在各种各样类型的write方法；</p><p> <a href="DataOutputStreamTest.java" title="DataOutputStreamTest.java">DataOutputStreamTest.java</a> </p><p>writeInt(66)-&gt;前面有三个空白，显示的是B</p><p>0000 0000 … 0100 0010</p><p>这里面有个坑，这里面使用的是writeInt，结果使用的write</p><p>writeInt写入的是四个字节；</p><p>write写入的是一个字节</p><p>这个流后续开发中时候的很少，了解下就行；</p><hr><h3 id="DataInputStream类（了解）"><a href="#DataInputStream类（了解）" class="headerlink" title="DataInputStream类（了解）"></a>DataInputStream类（了解）</h3><p>java.io.DataInputStream类主要用于从输入流中读取基本数据类型的数据。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>DataInputStream(InputStreamin)</td><td>根据参数指定的引用来构造对象 InputStream类是抽象类，实参需要传递子类对象</td></tr><tr><td>int readInt()</td><td>用于从输入流中一次性读取一个整数数据并返回</td></tr><tr><td>void close()</td><td>用于关闭文件输出流并释放有关的资源</td></tr></tbody></table><p><a href="DataInputStreamTest.java" title="DataInputStreamTest.java">DataInputStreamTest.java</a> </p><p>三个空格一个B，读出的结果是：66；</p><hr><h2 id="ObjectOutputStream类的概念和使用"><a href="#ObjectOutputStream类的概念和使用" class="headerlink" title="ObjectOutputStream类的概念和使用"></a>ObjectOutputStream类的概念和使用</h2><h3 id="ObjectOutputStream类（重点）"><a href="#ObjectOutputStream类（重点）" class="headerlink" title="ObjectOutputStream类（重点）"></a>ObjectOutputStream类（重点）</h3><p>java.io.ObjectOutputStream类主要用于将一个对象的所有内容整体写入到输出流中。【可以将一个对象写入到输出流中】</p><p>只能将支持 java.io.Serializable 接口的对象写入流中。【要写的对象必须要实现serializable接口】【为了启用序列化功能】</p><p>类通过实现 java.io.Serializable 接口以启用其序列化功能。</p><p>所谓序列化主要指将一个对象需要存储的相关信息有效组织成字节序列的转化过程。</p><p>图片可不可以看做一个对象？</p><p>万物皆对象，是一个对象；</p><p>我们复制粘贴图片的时候；</p><p>序列化：将图片要存储的所有信息有效的组织成字节序列的过程；</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>ObjectOutputStream(OutputStream out)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>void writeObject(Object obj)</td><td>用于将参数指定的对象整体写入到输出流中</td></tr><tr><td>void close()</td><td>用于关闭输出流并释放有关的资源</td></tr></tbody></table><p> 为什么用Object作为参数呢?</p><p>万物皆对象，什么对象都可以写进去；</p><p><strong>类的使用：</strong></p><p>创建一个User对象：用来操作；</p><p><a href="User.java" title="User.java">User.java</a> </p><p>除了实现serialized接口的话，还需要指定一个序列化的版本号；</p><p>否则会报异常 java.io.NotSerializableException</p><p>自定义异常的时候提到过；</p><p><a href="ObjectOutputStreamTest.java" title="ObjectOutputStreamTest.java">ObjectOutputStreamTest.java</a> </p><p>没有提示让显示序列化ID的话怎么办？如何提示显示序列化ID？</p><p>Settings-&gt;Esitor-&gt;inspections-&gt;java-&gt;Serialization issues-&gt;seriaVersionUID 勾选下；</p><p>光标放到实体类上会提示让现实序列化；</p><p>发现文件中有出现乱码怎么办？</p><p>数据时确实写进去了，乱码就让他乱码吧！无所谓；</p><p>因为我们是要用程序读取的；</p><h3 id="ObjectInputStream类（重点）"><a href="#ObjectInputStream类（重点）" class="headerlink" title="ObjectInputStream类（重点）"></a>ObjectInputStream类（重点）</h3><p>java.io.ObjectInputStream类主要用于从输入流中一次性将对象整体读取出来。</p><p>所谓反序列化主要指将有效组织的字节序列恢复为一个对象及相关信息的转化过程。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>ObjectInputStream(InputStreamin)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>Object readObject()</td><td>主要用于从输入流中读取一个对象并返回 无法通过返回值来判断是否读取到文件的末尾</td></tr><tr><td>void close()</td><td>用于关闭输入流并释放有关的资源</td></tr></tbody></table><hr><h2 id="ObjectInputStream类的使用和补充"><a href="#ObjectInputStream类的使用和补充" class="headerlink" title="ObjectInputStream类的使用和补充"></a>ObjectInputStream类的使用和补充</h2><p><a href="ObjectInputStreamTest.java" title="ObjectInputStreamTest.java">ObjectInputStreamTest.java</a> </p><h3 id="序列化版本号"><a href="#序列化版本号" class="headerlink" title="序列化版本号"></a>序列化版本号</h3><p>为什么需要写序列化版本号呢？</p><p>反序列读的时候，需要和实体列进行比较；</p><p>如果相同是我说需要的；</p><p>对不上，报异常，版本不一致的异常；</p><p>可以比较做暗号；</p><hr><h3 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h3><p>希望有些属性不参与序列化；</p><p>可以使用transient关键字修饰；</p><p>表示该成员变量不参与序列化；</p><p><a href="User.java" title="User.java">User.java</a> </p><p><a href="ObjectOutputStreamTest.java" title="ObjectOutputStreamTest.java">ObjectOutputStreamTest.java</a> </p><p><a href="ObjectInputStreamTest.java" title="ObjectInputStreamTest.java">ObjectInputStreamTest.java</a> </p><hr><h3 id="经验分享"><a href="#经验分享" class="headerlink" title="经验分享"></a>经验分享</h3><p>无法读到是否读到了文件末尾；</p><p>如果读的少了造成数据不全；</p><p>读的数据多了，会造成异常；</p><p>解决：</p><p>可以将所有的对象存储到集合中；</p><p>当这个集合写入到文件中；</p><p>一次性将整个集合写进去，读出来；</p><hr><h2 id="RandomAccessFile类的概念和使用"><a href="#RandomAccessFile类的概念和使用" class="headerlink" title="RandomAccessFile类的概念和使用"></a>RandomAccessFile类的概念和使用</h2><p>Random随机</p><p>Access访问</p><p>之间的流可以对文件的内容进行访问；</p><p>但是：只能从文件的开头读取文件内容；</p><p>读一个，光标往后移动；</p><p>以后的开发中可能涉及，文件打开的时候，想跳过几个字符后读取；</p><p>或者读到某个地方跳结果字符进行读取；</p><p>RandomAccessFile类</p><p>java.io.RandomAccessFile类主要支持对随机访问文件的读写操作。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>RandomAccessFile(String name, Stringmode)</td><td>根据参数指定的名称和模式构造对象<br>【关联文件的方式】<br>r: 以只读方式打开<br/>rw：打开以便读取和写入<br/>rwd:打开以便读取和写入，同步文件内容的更新<br/>rws:打开以便读取和写入，同步文件内容和元数据的更新</td></tr><tr><td>int read()</td><td>读取单个字节的数据</td></tr><tr><td>void seek(long pos)</td><td>用于设置从此文件的开头开始测量的文件指针偏移量</td></tr><tr><td>void write(int b)</td><td>【覆盖了光标指向的字符】将参数指定的单个字节写入</td></tr><tr><td>void close()</td><td>用于关闭流并释放有关的资源</td></tr></tbody></table><p>rw：可读可写</p><p>aellhello</p><p>seek 3</p><p>red  l</p><p>write 2  &#x2F;&#x2F; 光标已经到h了</p><p>是覆盖还是插入？</p><p>是将字符给覆盖了；</p><p><a href="RandomAccessFileTest.java" title="RandomAccessFileTest.java">RandomAccessFileTest.java</a> </p><p>以后的开发中有哪些用呢；</p><p>例如：</p><p>文件中保存了好学员的信息；</p><p>修改刘备的学院信息的年龄修改；</p><p>先使用seek调整位置，再写入；</p><p>相当于更新了文件的内容；</p><hr><h2 id="任务总结"><a href="#任务总结" class="headerlink" title="任务总结"></a>任务总结</h2><p>【待补全】</p>]]></content>
    
    
    <categories>
      
      <category>Java就业训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一阶段JavaSE</tag>
      
      <tag>模块四-Java核心类库（下）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第十一章：常用类的概述和使用</title>
    <link href="/1000/01/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%B8%89-Java%20%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%BB%BB%E5%8A%A1%E4%BA%8C%20String%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/1000/01/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%B8%89-Java%20%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%BB%BB%E5%8A%A1%E4%BA%8C%20String%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="第十二章-String类的概述和使用"><a href="#第十二章-String类的概述和使用" class="headerlink" title="第十二章 String类的概述和使用"></a>第十二章 String类的概述和使用</h1><p> <a href="JavaSE_Chaper12_Mark.pdf" title="JavaSE_Chaper12_Mark.pdf">点击查看</a></p><h2 id="12-1-String类的概念（重点）"><a href="#12-1-String类的概念（重点）" class="headerlink" title="12.1 String类的概念（重点）"></a>12.1 String类的概念（重点）</h2><ul><li><p>java.lang.String类用于描述字符串，Java程序中所有的字符串字面值都可以使用该类的对象加以描  述，如：”abc”。</p></li><li><p>该类由ﬁnal关键字修饰，表示该类不能被继承。</p></li><li><p>从jdk1.9开始该类的底层不使用char[]来存储数据，而是改成   byte[]加上编码标记，从而节约了一些空间。</p></li><li><p>该类描述的字符串内容是个常量不可更改，因此可以被共享使用。如：</p></li></ul><p>String str1 &#x3D; “abc”; - 其中”abc”这个字符串是个常量不可改变。</p><p>str1 &#x3D; “123”;- 将“123”字符串的地址赋值给变量str1。</p><p>- 改变str1的指向并没有改变指向的内容</p><h2 id="12-2-常量池的概念（原理）"><a href="#12-2-常量池的概念（原理）" class="headerlink" title="12.2 常量池的概念（原理）"></a><strong>12.2</strong> 常量池的概念（原理）</h2><p>由于String类型描述的字符串内容是常量不可改变，因此Java虚拟机将首次出现的字符串放入常量池中，若后续代码中出现了相同字符串内容则直接使用池中已有的字符串对象而无需申请内存及创建对象，从而提高了性能。</p><h2 id="12-3-常用的构造方法（练熟、记住）"><a href="#12-3-常用的构造方法（练熟、记住）" class="headerlink" title="12.3 常用的构造方法（练熟、记住）"></a><strong>12.3</strong> 常用的构造方法（练熟、记住）</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>String()</td><td>使用无参方式构造对象得到空字符序列</td></tr><tr><td>String(byte[] bytes, int oﬀset, int length)</td><td>使用bytes数组中下标从oﬀset位置开始的length个字节来 构造对象</td></tr><tr><td>String(byte[] bytes)</td><td>使用bytes数组中的所有内容构造对象</td></tr><tr><td>String(char[] value, int oﬀset, int count)</td><td>使用value数组中下标从oﬀset位置开始的count个字符来构 造对象</td></tr><tr><td>String(char[] value)</td><td>使用value数组中的所有内容构造对象</td></tr><tr><td>String(String original)</td><td>根据参数指定的字符串内容来构造对象，新创建对象为参数对象的副本</td></tr></tbody></table><h2 id="12-4-常用的成员方法（练熟、记住）"><a href="#12-4-常用的成员方法（练熟、记住）" class="headerlink" title="12.4 常用的成员方法（练熟、记住）"></a><strong>12.4</strong> 常用的成员方法（练熟、记住）</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>String toString()</td><td>返回字符串本身</td></tr><tr><td>byte[] getBytes()</td><td>将当前字符串内容转换为byte数组并返回</td></tr><tr><td>char[] toCharArray()</td><td>用于将当前字符串内容转换为char数组并返回</td></tr></tbody></table><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>char charAt(int index)</td><td>方法charAt用于返回字符串指定位置的字符。</td></tr><tr><td>int length()</td><td>返回字符串字符序列的长度</td></tr><tr><td>boolean isEmpty()</td><td>判断字符串是否为空</td></tr></tbody></table><ul><li>案例题目</li></ul><p>判断字符串“上海自来水来自海上”是否为回文并打印，所谓回文是指一个字符序列无论从左向右读  还是从右向左读都是相同的句子。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>int compareTo(String anotherString)</td><td>用于比较调用对象和参数对象的大小关系</td></tr><tr><td>int compareToIgnoreCase(String str)</td><td>不考虑大小写，也就是’a’和’A’是相等的关系</td></tr></tbody></table><ul><li>案例题目</li></ul><p>编程实现字符串之间大小的比较并打印。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>String concat(String str)</td><td>用于实现字符串的拼接</td></tr><tr><td>boolean contains(CharSequence s)</td><td>用于判断当前字符串是否包含参数指定的内容</td></tr><tr><td>String toLowerCase()</td><td>返回字符串的小写形式</td></tr><tr><td>String toUpperCase()</td><td>返回字符串的大写形式</td></tr><tr><td>String trim()</td><td>返回去掉前导和后继空白的字符串</td></tr><tr><td>boolean startsWith(String preﬁx)</td><td>判断字符串是否以参数字符串开头</td></tr><tr><td>boolean startsWith(String preﬁx, int toﬀset)</td><td>从指定位置开始是否以参数字符串开头</td></tr><tr><td>boolean endsWith(String suﬃx)</td><td>判断字符串是否以参数字符串结尾</td></tr></tbody></table><ul><li>案例题目</li></ul><p>编程实现上述方法的使用。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>boolean equals(Object anObject)</td><td>用于比较字符串内容是否相等并返回</td></tr><tr><td>int hashCode()</td><td>获取调用对象的哈希码值</td></tr><tr><td>boolean equalsIgnoreCase(String anotherString)</td><td>用于比较字符串内容是否相等并返回，不考虑大小写， 如：’A’和’a’是相等</td></tr></tbody></table><ul><li>案例题目</li></ul><p>提示用户从键盘输入用户名和密码信息，若输入”admin”和”123456”则提示“登录成功，欢迎使用”，否则提示“用户名或密码错误，您还有n次机会”，若用户输入三次后依然错误则提示“账户已  冻结，请联系客服人员！”</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>int indexOf(int ch)</td><td>用于返回当前字符串中参数ch指定的字符第一次出现的下标</td></tr><tr><td>int indexOf(int ch, int fromIndex)</td><td>用于从fromIndex位置开始查找ch指定的字符</td></tr><tr><td>int indexOf(String str)</td><td>在字符串中检索str返回其第一次出现的位置，若找不到返回-1</td></tr><tr><td>int indexOf(String str, int fromIndex)</td><td>表示从字符串的fromIndex位置开始检索str第一次出现的位置</td></tr><tr><td>int lastIndexOf(int ch)</td><td>用于返回参数ch指定的字符最后一次出现的下标</td></tr><tr><td>int lastIndexOf(int ch, int fromIndex)</td><td>用于从fromIndex位置开始查找ch指定字符出现的下标</td></tr><tr><td>int lastIndexOf(String str)</td><td>返回str指定字符串最后一次出现的下标</td></tr><tr><td>int lastIndexOf(String str, int fromIndex)</td><td>用于从fromIndex位置开始反向搜索的第一次出现的下标。</td></tr></tbody></table><ul><li>案例题目</li></ul><p>编写通用的代码可以查询字符串”Good Good Study, Day Day Up!”中所有”Day”出现的索引位置并打印出来。</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>String substring(int beginIndex, int endIndex)</td><td>返回字符串中从下标beginIndex（包括）开始到endIndex（不包括）结束的子字符串</td></tr><tr><td>String substring(int beginIndex)</td><td>返回字符串中从下标beginIndex（包括）开始到字符串结尾的子字符串</td></tr></tbody></table><ul><li>案例题目</li></ul><p>提示用户从键盘输入一个字符串和一个字符，输出该字符(不含)后面的所有子字符串。</p><h2 id="12-5-正则表达式的概念（了解）"><a href="#12-5-正则表达式的概念（了解）" class="headerlink" title="12.5 正则表达式的概念（了解）"></a><strong>12.5</strong> 正则表达式的概念（了解）</h2><p>正则表达式本质就是一个“规则字符串”，可以用于对字符串数据的格式进行验证，以及匹配、查</p><p>找、替换等操作。该字符串通常使用^运算符作为开头标志，使用$运算符作为结尾标志，当然也可以省  略。</p><h2 id="12-6-正则表达式的规则（了解）"><a href="#12-6-正则表达式的规则（了解）" class="headerlink" title="12.6 正则表达式的规则（了解）"></a><strong>12.6</strong> 正则表达式的规则（了解）</h2><table><thead><tr><th>正则表达式</th><th>说明</th></tr></thead><tbody><tr><td>[abc]</td><td>可以出现a、b、c中任意一个字符</td></tr><tr><td>[^abc]</td><td>可以出现任何字符，除了a、b、c的任意字符</td></tr><tr><td>[a-z]</td><td>可以出现a、b、c、……、z中的任意一个字符</td></tr><tr><td>[a-zA-Z0-9]</td><td>可以出现a<del>z、A</del>Z、0~9中任意一个字符</td></tr></tbody></table><table><thead><tr><th>正则表达式</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>任意一个字符（通常不包含换行符）</td></tr><tr><td>\d</td><td>任意一个数字字符，相当于[0-9]</td></tr><tr><td>\D</td><td>任意一个非数字字符</td></tr><tr><td>\s</td><td>空白字符，相当于[\t\n\x0B\f\r]</td></tr><tr><td>\S</td><td>非空白字符</td></tr><tr><td>\w</td><td>任意一个单词字符，相当于[a-zA-Z_0-9]</td></tr><tr><td>\W</td><td>任意一个非单词字符</td></tr></tbody></table><table><thead><tr><th>正则表达式</th><th>说明</th></tr></thead><tbody><tr><td>X?</td><td>表示X可以出现一次或一次也没有，也就是0 ~ 1次</td></tr><tr><td>X*</td><td>表示X可以出现零次或多次，也就是0 ~ n次</td></tr><tr><td>X+</td><td>表示X可以出现一次或多次，也就是1 ~ n次</td></tr><tr><td>X{n}</td><td>表示X可以出现恰好 n 次</td></tr><tr><td>X{n，}</td><td>表示X可以出现至少 n 次，也就是&gt;&#x3D;n次</td></tr><tr><td>X{n，m}</td><td>表示X可以出现至少 n 次，但是不超过 m 次，也就是&gt;&#x3D;n并且&lt;&#x3D;m次</td></tr></tbody></table><p><strong>12.7</strong> 正则表达式相关的方法（熟悉）</p><table><thead><tr><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>boolean matches(String regex)</td><td>判断当前正在调用的字符串是否匹配参数指定的正则表达式规则</td></tr></tbody></table><ul><li>案例题目</li></ul><p>使用正则表达式描述一下银行卡密码的规则：要求是由6位数字组成。</p><p>使用正则表达式描述一下QQ号码的规则：要求是由非0开头的5~15位数组成。</p><p>使用正则表达式描述一下手机号码的规则：要求是由1开头，第二位数是3、4、5、7、8中的一  位，总共11位</p><p>描述身份证号码的规则：总共18位，6位数字代表地区，4位数字代表年，2位数字代表月，2位数  字代表日期， 3位数字代表个人，最后一位可能数字也可能是X。</p><table><thead><tr><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>String[] split(String regex)</td><td>参数regex为正则表达式，以regex所表示的字符串为分隔符，将字符串拆分成字符串数组</td></tr><tr><td>String replace(char oldChar, char newChar)</td><td>使用参数newChar替换此字符串中出现的所有参数oldChar</td></tr><tr><td>String replaceFirst(String regex, String replacement)</td><td>替换此字符串匹配给定的正则表达式的第一个子字符串</td></tr><tr><td>String replaceAll(String regex, String replacement)</td><td>将字符串中匹配正则表达式regex的字符串替换成replacement</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java就业训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一阶段JavaSE</tag>
      
      <tag>模块三-Java 核心类库（上）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第十一章：常用类的概述和使用</title>
    <link href="/1000/01/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%B8%89-Java%20%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/1000/01/16/Java%E5%B0%B1%E4%B8%9A%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%20JavaSE/%E6%A8%A1%E5%9D%97%E4%B8%89-Java%20%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="第十一章：常用类的概述和使用"><a href="#第十一章：常用类的概述和使用" class="headerlink" title="第十一章：常用类的概述和使用"></a>第十一章：常用类的概述和使用</h1><p> <a href="%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8.pdf" title="第十一章：常用类的概述和使用.pdf">点击查看</a> </p><h2 id="API的使用和常用包的概述"><a href="#API的使用和常用包的概述" class="headerlink" title="API的使用和常用包的概述"></a>API的使用和常用包的概述</h2><p>开始学习java官方提供的类与接口及异常；</p><p>需要使用jdkAPI文档；</p><p>课程中我们提供了一个中文版的jdkAPI文档；</p><p>翻译出来的结果不一定特备的精确；</p><p>不一定特别的完整、严谨；</p><p>如果想要使用严谨的需要下载官方提供的【诠释中文的】；</p><p>可以两个都用；</p><p>中文版的如果感觉不对不够完整，可以使用英文版进行查看；</p><p>引入java官方提供的类和方法太多，从java9开始将java官方提供的类库生成多个模块；</p><p>java.base 基础API；</p><p>我们基本上用这个就够了；</p><p>下面有个包【包就是目录】【解决相同目录下同名问题】</p><p>下面有各种各种的方法、异常、接口；</p><p>可以使用索引、搜索【使用索引】</p><p>如果感觉中文版中的描述描述怪怪的话就使用中文版；</p><p>使用java官方提供的类和方法，大大提高了开发效率；</p><p>课堂上不会将所有的都学过；有三千多个；</p><p>java官方提供的类库考虑到各个的业务的；</p><p>我们在工作中可能就对某些业务进行使用；</p><p>我们学习些常用的类就好；</p><h3 id="java-lang包下的；"><a href="#java-lang包下的；" class="headerlink" title="java.lang包下的；"></a>java.lang包下的；</h3><p>这个包中的类是由java官方自动导入的，不需要我们写import;</p><p>java官方就将我们import完了；</p><p>例如：System类、String类。。。。。</p><p>这个包很浪；【可以这样记忆】</p><h3 id="java-util包"><a href="#java-util包" class="headerlink" title="java.util包"></a>java.util包</h3><p>工具包；</p><p>例如：Scanner类、Random类、List集合。。。</p><h3 id="java-io包"><a href="#java-io包" class="headerlink" title="java.io包"></a>java.io包</h3><p>输入输出包；</p><p>io是input、output的间歇</p><p>可以使用这个包对文件的拷贝等</p><p>可以对文件的内容进行读写；</p><p>例如：FileInputStream类、FileOutPutStream类。。。</p><h3 id="java-net包"><a href="#java-net包" class="headerlink" title="java.net包"></a>java.net包</h3><p> 使用这个包，可以实现网络编程； </p><p>可以使用网络信息的传输</p><p>例如：ServerSocket类、Socket类</p><h3 id="java-sql包"><a href="#java-sql包" class="headerlink" title="java.sql包"></a>java.sql包</h3><p>数据包；</p><p>后面学习数据库的时候讲解；</p><p>学习顺序：lang-&gt;utils-&gt;lang-&gt;io-&gt;lang-&gt;net-&gt;lang</p><p>借助官方提供的类库可以实现快速开发；</p><p>所以我们要经常使用它；开发的时候可以更快的完成功能；</p><hr><h2 id="Object类的概念和构造方法-（重点）"><a href="#Object类的概念和构造方法-（重点）" class="headerlink" title="Object类的概念和构造方法 （重点）"></a>Object类的概念和构造方法 （重点）</h2><p>接下来我们讲解java.lang包；</p><p>我们搞明白类能够实现什么功能，需要的时候能够使用到就好；</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">java.lang.Object类是Java语言中类层次结构的根类，也就是说任何一个类都是该类的直接或者间接子类;<br><br>如果定义一个Java类时没有使用extends关键字声明其父类，则其父类为 java.lang.Object 类。<br><br>Object类定义了“对象”的基本行为, 被子类默认继承。<br></code></pre></td></tr></table></figure><p>没有继承其他的类，默认继承Object类；</p><p>有继承其他的类，间接的继承Object类；</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Object()</td><td>使用无参方式构造对象【可以通过super的方式来调用】</td></tr><tr><td>boolean equals(Objectobj)</td><td>【多态】用于判断调用对象是否与参数对象相等。该方法默认比较两个对象的地址是否相等，与 &#x3D;&#x3D; 运算符的结果一致 若希望比较两个对象的内容，则需要重写该方法。若该方法被重写后，则应该重写hashCode方法来保证结果的一致 性。</td></tr><tr><td>int hashCode()</td><td>用于获取调用对象的哈希码值(内存地址的编号)。若两个对象调用equals方法相等，则各自调用该方法的结果必须相 同若两个调用对象equals方法不相等，则各自调用该方法的结果应该 不相同。为了使得该方法与equals方法保持一致，需要重写该方法。</td></tr><tr><td>String toString()</td><td>用于获取调用对象的字符串形式该方法默认返回的字符串为：包名.类名@哈希码值的十六进制 为了返回更有意义的数据，需要重写该方法使用print或println打印引用或字符串拼接引用都会自动调用该方法</td></tr><tr><td>Class&lt;?&gt; getClass()</td><td>用于返回调用对象执行时的Class实例，反射机制使用</td></tr></tbody></table><p>person类构造方法的代码中，可以使用super方法；</p><p>表示调用父类的无参构造方法；</p><p>即Object的午餐构造方法；</p><hr><h2 id="equals方法默认功能的使用"><a href="#equals方法默认功能的使用" class="headerlink" title="equals方法默认功能的使用"></a>equals方法默认功能的使用</h2><p>boolean equals(Objectobj)</p><p>当父类类型的引用指向子类类型的对象，想成多态；</p><p><a href="code/Student.java" title="Student.java">Student.java</a></p><p>equal是public修饰，可以被继承；</p><p>setId中判断学号是否合理；</p><p>有参构造中可以调用set方法对学号进行合理判断；</p><p><a href="code/StudentTest.java" title="StudentTest.java">StudentTest.java</a></p><p>中判断两个对象是否相等；</p><p>继承必须学扎实，否则以后学习会力不从心；</p><p><strong>equals默认比较两个对象的地址；</strong></p><p>知道什么时候生成栈的内存，什么时候生成推的内存；</p><p>比较对象equals跟比较运算符（&#x3D;&#x3D;）是一样的；</p><p>指向同一块堆区空间就相等了；</p><hr><h2 id="equals方法的重写实现"><a href="#equals方法的重写实现" class="headerlink" title="equals方法的重写实现"></a>equals方法的重写实现</h2><p>查看Object的equals源码；</p><p>return (this&#x3D;&#x3D;obj);</p><p>this:当前正在调用的对象；</p><p>源码中确实比较的是地址；</p><p>现实生活中，判断是否是同一个学生判断学号就好了；</p><p>如果现有的方法不能满足我们的需求，就需要重写这个方法了；</p><p><a href="code/Student.java" title="Student.java">Student.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getId()==obj.getId() --报错<br></code></pre></td></tr></table></figure><p>父类类型的应用不可以直接调用子类类型的应用；需要强转；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Student ts=(Student)obj;<br></code></pre></td></tr></table></figure><p>只要做强制类型装换之前需判断，是否是子类类型的对象；</p><p>如果类型不一致，没有可比性，内容一定不相同；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(obj <span class="hljs-keyword">instanceof</span> Student)&#123;<br>  <span class="hljs-keyword">if</span> xxx <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="equals方法的重写优化"><a href="#equals方法的重写优化" class="headerlink" title="equals方法的重写优化"></a>equals方法的重写优化</h2><p>分析执行流程；</p><p><a href="code/StudentTest.java" title="StudentTest.java">StudentTest.java</a></p><p>栈空间生开辟两块内存；</p><p>推空间开辟两块内存；</p><p>![equals方法的原理分析](01 equals方法的原理分析.png)</p><p>需要注意的点：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">equals方法在非null对象引用上实现等价关系： <br><br>-- 自反性 ：对于任何非空的参考值x ， x.equals(x)应该返回true 。 <br>-- 它是对称的 ：对于任何非空引用值x和y ， x.equals(y)应该返回true当且仅当y.equals(x)回报true 。 <br>-- 传递性 ：对于任何非空引用值x ， y和z ，如果x.equals(y)回报true个y.equals(z)回报true ，然后x.equals(z)应该返回true 。 <br>它是一致的 ：对于任何非空引用值x和y ，多次调用x.equals(y)始终返回true或始终返回false ，前提是未修改对象上的equals比较中使用的信息。 <br>-- 对于任何非空的参考值x ， x.equals(null)应该返回false 。<br></code></pre></td></tr></table></figure><p>有可能出现x.equals(x)的情况；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>==obj) <span class="hljs-keyword">return</span> ture;<br></code></pre></td></tr></table></figure><p>有可能出现x.equals(null)的情况；</p><p>如果是空的话就不需要执行instanceof方法了；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == obj) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>equals方法暂时性的完整实现；</p><p><a href="code/StudentTest.java" title="StudentTest.java">StudentTest.java</a></p><hr><h2 id="hashCode方法的重写实现"><a href="#hashCode方法的重写实现" class="headerlink" title="hashCode方法的重写实现"></a>hashCode方法的重写实现</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">请注意，通常需要在重写此方法时覆盖hashCode方法，以便维护hashCode方法的常规协定，该方法声明相等对象必须具有相等的哈希代码。<br></code></pre></td></tr></table></figure><p>hashCode方法:返回对象的哈希码值；</p><p>可以先理解为返回一个内存地址的编号；</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">hashCode的总合同是： <br><br>-- 只要在执行Java应用程序期间多次在同一对象上调用它， hashCode方法必须始终返回相同的整数，前提是不修改对象上的equals比较中使用的信息。 从应用程序的一次执行到同一应用程序的另一次执行，该整数不需要保持一致。 【hashCode和equals保持一致性】<br>-- 如果两个对象根据equals(Object)方法相等，则对两个对象中的每个对象调用hashCode方法必须生成相同的整数结果。【equals相等，hashCode也要相同】 <br>-- 这不是必需的：如果两个对象根据不相等equals(java.lang.Object)方法，然后调用hashCode在各两个对象的方法必须产生不同的整数结果。 但是，程序员应该知道为不等对象生成不同的整数结果可能会提高哈希表的性能。 【equals不相等，hashCode也要不相同】 <br></code></pre></td></tr></table></figure><p>可看上面的总结：</p><p>用于获取调用对象的哈希码值(内存地址的编号)。若两个对象调用equals方法相等，则各自调用该方法的结果必须相 同若两个调用对象equals方法不相等，则各自调用该方法的结果应该 不相同。为了使得该方法与equals方法保持一致，需要重写该方法。</p><p>java官方有规定；约定；</p><p>equals判断学号是否相等；</p><p>hashCode也依赖于学号就可以了；</p><p>耍流氓的方式；不能区分是学号还是hashCode；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id;<br></code></pre></td></tr></table></figure><p>这样写就不代表内存地址了；</p><p>与学号保持一致性还能与学号进行区分；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-keyword">return</span> type*<span class="hljs-number">31</span>+getId();<br></code></pre></td></tr></table></figure><hr><h2 id="toString方法的重写实现"><a href="#toString方法的重写实现" class="headerlink" title="toString方法的重写实现"></a>toString方法的重写实现</h2><p>这里讲解toString()方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>:用于获取调用对象的字符串形式该方法默认返回的字符串为：包名.类名@哈希码值的十六进制 为了返回更有意义的数据，需要重写该方法使用print或println打印引用或字符串拼接引用都会自动调用该方法;<br></code></pre></td></tr></table></figure><p>从Object类中继承的toString()方法；</p><p>默认打印：包名.类名@哈希码值的十六进制；</p><p>打印没有意义；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">案例题目：<br>-- 编程实现Student类的封装，特征：学号(id)和姓名，要求提供打印所有特征的方法。<br>-- 编程实现StudentTest类，在main方法中使用有参方式构造两个Student类型的对象并打印特征。<br></code></pre></td></tr></table></figure><p><a href="code/Student.java" title="Student.java">Student.java</a></p><p><strong>当打印一个引用变量的时候会自动调用toString()方法；</strong></p><p>getClass()方法可以先了解下，后面讲反射的时候会讲到；</p><hr><h2 id="姓名作为基准的重写实现"><a href="#姓名作为基准的重写实现" class="headerlink" title="姓名作为基准的重写实现"></a>姓名作为基准的重写实现</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">题目扩展:<br>-- 如何实现以姓名作为基准判断两个对象是否相等？以及以学号和姓名同时作为基准判断两个对象是否相等？<br></code></pre></td></tr></table></figure><p><a href="code/Student.java" title="Student.java">Student.java</a></p><p>比较姓名字符串的内容是否相同</p><p>学号，int类型，基本数据类型（&#x3D;&#x3D;内存空间中判断的是数据本身）；</p><p>姓名,引用数据类型（放的是地址）（&#x3D;&#x3D;判断地址是否相同）；</p><p>判断姓名是否是一个地址是否相同，不够完美；应该比较内容是否相同；</p><p>String类继承了Object，java官方内部重写了equals方法；– 比较的是字符串的内容是否相同；</p><p>注意：重写了equals后，还需要重写hashCode方法；</p><p>String类的内部，也重写了hashCode方法；</p><p>我们的hashCode依赖于String类的hashCode就好；</p><hr><h2 id="equals方法和hashCode方法的生成"><a href="#equals方法和hashCode方法的生成" class="headerlink" title="equals方法和hashCode方法的生成"></a>equals方法和hashCode方法的生成</h2><p>之前equals与hashCode都是手写的；</p><p>开发中这些方法不需要我们自己写；– 可以自动生成；</p><p>可以选择生成的模板；两个模板【借助objects和普通的模式】；</p><p>开发中我们要生成；</p><p>不是开发中我们就需要自己写（笔试中）；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">getClass()!=o.getClass()<br></code></pre></td></tr></table></figure><p><a href="code/Student.java" title="Student.java">Student.java</a></p><p>自己也要会写，自动生成的要理解；</p><p>toString()方法也可以自动生成；</p><hr><h2 id="包装类的概念和分类-（熟悉）"><a href="#包装类的概念和分类-（熟悉）" class="headerlink" title="包装类的概念和分类 （熟悉）"></a>包装类的概念和分类 （熟悉）</h2><p>通常情况下基本数据类型的变量不是对象，为了满足万物皆对象的理念就需要对基本数据类型的变量进行打包封装处理变成对象，而负责将这些变量声明为成员变量进行对象化处理的相关类，叫做包装类。</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>万物接对象，num违背了万物皆对象的理念；</p><p>让变量和类关联起来；</p><p>将num打包中到类中；</p><p>目的：将基本类型的对象变成对象；</p><h3 id="包装类的分类"><a href="#包装类的分类" class="headerlink" title="包装类的分类"></a>包装类的分类</h3><table><thead><tr><th>包装类</th><th>对应的基本类型</th></tr></thead><tbody><tr><td>java.lang.Byte</td><td>byte</td></tr><tr><td>java.lang.Short</td><td>short</td></tr><tr><td>java.lang.Integer</td><td>int</td></tr><tr><td>java.lang.Long</td><td>long</td></tr><tr><td>java.lang.Float</td><td>ﬂoat</td></tr><tr><td>java.lang.Double</td><td>double</td></tr><tr><td>java.lang.Boolean</td><td>boolean</td></tr><tr><td>java.lang.Character</td><td>char</td></tr></tbody></table><p>包装类主要是将我们八种基本类型打包成对象，万物皆对象；</p><h2 id="Integer类的概念和构造方式"><a href="#Integer类的概念和构造方式" class="headerlink" title="Integer类的概念和构造方式"></a>Integer类的概念和构造方式</h2><p>java.lang.Integer类内部包装了一个int类型的变量作为成员变量，主要用于实现对int类型的包装并   提供int类型到String类之间的转换等方法。</p><h3 id="常用的常量"><a href="#常用的常量" class="headerlink" title="常用的常量"></a>常用的常量</h3><table><thead><tr><th>常量类型和名称</th><th>功能介绍</th></tr></thead><tbody><tr><td>public static ﬁnal int MAX_VALUE</td><td>表示int类型可以描述的最大值，即2^31-1</td></tr><tr><td>public static ﬁnal int MIN_VALUE</td><td>表示int类型可以描述的最小值，即-2^31</td></tr><tr><td>public static ﬁnal int SIZE</td><td>表示int类型采用二进制补码形式的位数【32位】</td></tr><tr><td>public static ﬁnal int BYTES</td><td>表示int类型所占的字节个数【四个字节】</td></tr><tr><td>public static ﬁnal Class TYPE</td><td>表示int类型的Class实例【理解为类型的名称】</td></tr></tbody></table><p><a href="code/IntegerTest.java" title="IntegerTest.java">IntegerTest.java</a></p><h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Integer(int value)</td><td>根据参数指定的整数来构造对象（已过时）</td></tr><tr><td>Integer(String s)</td><td>根据参数指定的字符串来构造对象 （已过时）</td></tr><tr><td>int intValue()</td><td>获取调用对象中的整数值并返回</td></tr><tr><td>static Integer valueOf(int i)</td><td>根据参数指定整数值得到Integer类型对象<br>【代替Integer(int value)、Integer(String s)】<br>【int-&gt;integer】【string-&gt;integer】</td></tr><tr><td>boolean equals(Object obj)</td><td>比较调用对象与参数指定的对象是否相等<br>【比较的是内容】</td></tr><tr><td>String toString()</td><td>返回描述调用对象数值的字符串形式</td></tr><tr><td>static int parseInt(String s)</td><td>将字符串类型转换为int类型并返回<br>【string-&gt;int】</td></tr><tr><td>static String toString(int i)</td><td>获取参数指定整数的十进制字符串形式</td></tr><tr><td>static String toBinaryString(int i)</td><td>获取参数指定整数的二进制字符串形式</td></tr><tr><td>static String toHexString(int i)</td><td>获取参数指定整数的十六进制字符串形式</td></tr><tr><td>static String toOctalString(int i)</td><td>获取参数指定整数的八进制字符串形式</td></tr></tbody></table><p><a href="code/IntegerTest.java" title="IntegerTest.java">IntegerTest.java</a></p><p>尽量不要使用已过时的方法；</p><p>Integer(int value):java9后标记为已过时；</p><p>什么时候过时要知道，代码中可以看到；</p><p>使用静态方法就可以得到这个对象;</p><p>因为java9之前有多个相同功能的方法，java9后统一了；</p><p>int-&gt;integer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">123</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><p>string-&gt;interger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-string">&quot;123&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="Integer类的装箱和拆箱机制"><a href="#Integer类的装箱和拆箱机制" class="headerlink" title="Integer类的装箱和拆箱机制"></a>Integer类的装箱和拆箱机制</h2><p>装箱(打包)：int转integer</p><p>拆箱：integer转int</p><p>java5开始新加了自动装箱，自动拆箱的机制；</p><p>不用再调用Integer.valueOf()等方法；</p><p>自动装箱自动拆箱的底层还是调方法；</p><p><strong>装箱+拆箱笔试考点</strong></p><p><a href="code/IntegerTest.java" title="IntegerTest.java">IntegerTest.java</a></p><p><strong>自动装箱池：</strong>在Integer类的内部提供了自动装箱池技术，将-128到 127 之间的整数已经装箱完毕，当程序中使用该范围之间的整数时，无需装箱直接取用自动装箱池中的对象即可，从而提高效率。</p><p>&#x3D;》建议在开发中使用equals进行判断；</p><p>那么大的装箱也是很消耗性能的；</p><p>这个大小可以调整，后续会讲；</p><hr><h2 id="Integer类的常用方法"><a href="#Integer类的常用方法" class="headerlink" title="Integer类的常用方法"></a>Integer类的常用方法</h2><p>接着讲解Integer类的常用方法；</p><p>Integer.parseInt可能会发生异常；</p><p>编译OK，运行发生NumberFormatException数字格式异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-string">&quot;200a&quot;</span>);<br></code></pre></td></tr></table></figure><p><a href="code/IntegerTest.java" title="IntegerTest.java">IntegerTest.java</a></p><p>integer进制转换；</p><p>这些只是integer常用的一些方法；</p><p>开发中常用的练熟就可以了；</p><hr><h2 id="Double类的概念和使用"><a href="#Double类的概念和使用" class="headerlink" title="Double类的概念和使用"></a>Double类的概念和使用</h2><h3 id="（1）-基本概念"><a href="#（1）-基本概念" class="headerlink" title="（1） 基本概念"></a>（1） 基本概念</h3><p>java.lang.Double类型内部包装了一个double类型的变量作为成员变量，主要用于实现对double类型的包装并提供double类型到String类之间的转换等方法。</p><h3 id="（2）-常用的常量"><a href="#（2）-常用的常量" class="headerlink" title="（2） 常用的常量"></a>（2） 常用的常量</h3><table><thead><tr><th>常量类型和名称</th><th>功能介绍</th></tr></thead><tbody><tr><td>public static ﬁnal int SIZE</td><td>表示double类型的二进制位数</td></tr><tr><td>public static ﬁnal int BYTES</td><td>表示double类型的字节个数</td></tr><tr><td>public static ﬁnal Class TYPE</td><td>表示double类型的Class实例</td></tr></tbody></table><h3 id="（3）-常用的方法"><a href="#（3）-常用的方法" class="headerlink" title="（3） 常用的方法"></a>（3） 常用的方法</h3><p>跟Integer类类似；</p><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Double(double value)</td><td>根据参数指定的浮点数据来构造对象（已过时）</td></tr><tr><td>Double(String s)</td><td>根据参数指定的字符串来构造对象 （已过时）</td></tr><tr><td>double doubleValue()</td><td>获取调用对象中的浮点数据并返回</td></tr><tr><td>static Double valueOf(double d)</td><td>根据参数指定浮点数据得到Double类型对象</td></tr><tr><td>boolean equals(Object obj)</td><td>比较调用对象与参数指定的对象是否相等</td></tr><tr><td>String toString()</td><td>返回描述调用对象数值的字符串形式</td></tr><tr><td>static double parseDouble(String s)</td><td>将字符串类型转换为double类型并返回<br>【string-&gt;double】</td></tr><tr><td>boolean isNaN()</td><td>判断调用对象的数值是否为非数字<br>【是数字：false  非数字：true】</td></tr></tbody></table><p> <a href="code/DoubleTest.java" title="DoubleTest.java">DoubleTest.java</a></p><p>从java5开始实现自动装箱和自动拆箱；</p><p>cache-Double中没有提供装箱池；</p><p>算数运算符的时候设计到了非数字；</p><p>【不理解】为什么0&#x2F;0.0是非数字？？？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Double</span> <span class="hljs-variable">db3</span> <span class="hljs-operator">=</span> Double.valueOf(<span class="hljs-number">0</span>/<span class="hljs-number">0.0</span>); <br>db3.isNaN();  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>扩展：</strong></p><p>java.lang.Number类是个抽象类，是上述类的父类来描述所有类共有的成员。</p><p>![包装类的继承关系](02 包装类的继承关系.png)</p><h2 id="Boolean类的概念和使用"><a href="#Boolean类的概念和使用" class="headerlink" title="Boolean类的概念和使用"></a>Boolean类的概念和使用</h2><h3 id="（1）-基本概念-1"><a href="#（1）-基本概念-1" class="headerlink" title="（1） 基本概念"></a>（1） 基本概念</h3><p>java.lang.Boolean类型内部包装了一个boolean类型的变量作为成员变量，主要用于实现对boolean类型的包装并提供boolean类型到String类之间的转换等方法。</p><h3 id="（2）-常用的常量-1"><a href="#（2）-常用的常量-1" class="headerlink" title="（2） 常用的常量"></a>（2） 常用的常量</h3><table><thead><tr><th>常量类型和名称</th><th>功能介绍</th></tr></thead><tbody><tr><td>public static ﬁnal Boolean FALSE</td><td>对应基值为false的对象</td></tr><tr><td>public static ﬁnal Boolean TRUE</td><td>对应基值为true的对象</td></tr><tr><td>public static ﬁnal Class TYPE</td><td>表示boolean类型的Class实例</td></tr></tbody></table><h3 id="（3）-常用的方法-1"><a href="#（3）-常用的方法-1" class="headerlink" title="（3） 常用的方法"></a>（3） 常用的方法</h3><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Boolean(boolean value)</td><td>根据参数指定的布尔数值来构造对象（已过时）</td></tr><tr><td>Boolean(String s)</td><td>根据参数指定的字符串来构造对象 （已过时）</td></tr><tr><td>boolean booleanValue()</td><td>获取调用对象中的布尔数值并返回</td></tr><tr><td>static Boolean valueOf(boolean b)</td><td>根据参数指定布尔数值得到Boolean类型对象<br>【boolean-&gt;Boolean】<br>【从java5开始支持自动装箱和拆箱】</td></tr><tr><td>boolean equals(Object obj)</td><td>比较调用对象与参数指定的对象是否相等</td></tr><tr><td>String toString()</td><td>返回描述调用对象数值的字符串形式</td></tr><tr><td>static boolean parseBoolean(String s)</td><td>将字符串类型转换为boolean类型并返回<br>【String-&gt;boolean】<br>【只要不是true(忽略大小写)都是false】</td></tr></tbody></table><p><a href="code/BooleanTest.java" title="BooleanTest.java">BooleanTest.java</a></p><p>从java5开始支持自动装箱和拆箱；</p><h2 id="Character类的概念和使用"><a href="#Character类的概念和使用" class="headerlink" title="Character类的概念和使用"></a>Character类的概念和使用</h2><h3 id="（1）-基本概念-2"><a href="#（1）-基本概念-2" class="headerlink" title="（1） 基本概念"></a>（1） 基本概念</h3><p>java.lang.Character类型内部包装了一个char类型的变量作为成员变量，主要用于实现对char类型的包装并提供字符类别的判断和转换等方法。</p><h3 id="（2）-常用的常量-2"><a href="#（2）-常用的常量-2" class="headerlink" title="（2） 常用的常量"></a>（2） 常用的常量</h3><table><thead><tr><th>常量类型和名称</th><th>功能介绍</th></tr></thead><tbody><tr><td>public static ﬁnal int SIZE</td><td>表示char类型的二进制位数</td></tr><tr><td>public static ﬁnal int BYTES</td><td>表示char类型的字节个数</td></tr><tr><td>public static ﬁnal Class TYPE</td><td>表示char类型的Class实例</td></tr></tbody></table><h3 id="（3）-常用的方法-2"><a href="#（3）-常用的方法-2" class="headerlink" title="（3） 常用的方法"></a>（3） 常用的方法</h3><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Character(char value)</td><td>根据参数指定的字符数据来构造对象（已过时）</td></tr><tr><td>char charValue()</td><td>获取调用对象中的字符数据并返回</td></tr><tr><td>static Character valueOf(char c)</td><td>根据参数指定字符数据得到Character类型对象</td></tr><tr><td>boolean equals(Object obj)</td><td>比较调用对象与参数指定的对象是否相等</td></tr><tr><td>String toString()</td><td>返回描述调用对象数值的字符串形式</td></tr><tr><td>static boolean isUpperCase(char ch)</td><td>判断参数指定字符是否为大写字符</td></tr><tr><td>static boolean isLowerCase(char ch)</td><td>判断参数指定字符是否为小写字符</td></tr><tr><td>static boolean isDigit(char ch)</td><td>判断参数指定字符是否为数字字符</td></tr><tr><td>static char toUpperCase(char ch)</td><td>将参数指定的字符转换为大写字符</td></tr><tr><td>static char toLowerCase(char ch)</td><td>将参数指定的字符转换为小写字符</td></tr></tbody></table><p><a href="code/CharacterTest.java" title="CharacterTest.java">CharacterTest.java</a></p><hr><h2 id="包装类的使用总结"><a href="#包装类的使用总结" class="headerlink" title="包装类的使用总结"></a>包装类的使用总结</h2><p>*@-基本数据类型转换为对应包装类的方式，调用包装类的<strong>构造方法或静态方法</strong>即可</p><p>*@-获取包装类对象中基本数据类型变量数值的方式</p><p>*@-调用包装类中的xxxValue方法即可,字符串转换为基本数据类型的方式调用包装类中的parseXxx方法即可</p><hr><h2 id="Math类的概念和使用-（熟悉）"><a href="#Math类的概念和使用-（熟悉）" class="headerlink" title="Math类的概念和使用 （熟悉）"></a>Math类的概念和使用 （熟悉）</h2><h3 id="（1）-基本概念-3"><a href="#（1）-基本概念-3" class="headerlink" title="（1） 基本概念"></a>（1） 基本概念</h3><p>java.lang.Math类主要用于提供执行数学运算的方法，如：对数，平方根。</p><h3 id="（2）-常用的方法"><a href="#（2）-常用的方法" class="headerlink" title="（2） 常用的方法"></a>（2） 常用的方法</h3><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>static int max(int a, int b)</td><td>返回两个参数中的最大值</td></tr><tr><td>static int min(int a, int b)</td><td>返回两个参数中的最小值</td></tr><tr><td>static double pow(double a, double b)</td><td>返回第一个参数的幂<br>【2的3次方：8.0】</td></tr><tr><td>static int abs(int a)</td><td>返回参数指定数值的绝对值</td></tr><tr><td>static long round(double a)</td><td>返回参数四舍五入的结果</td></tr><tr><td>static double sqrt(double a)</td><td>返回参数的平方根</td></tr><tr><td>static double random()</td><td>返回<strong>0.0到1.0</strong>的随机数</td></tr></tbody></table><p><a href="code/MathTest.java" title="MathTest.java">MathTest.java</a></p><hr><h2 id="BigDecimal类的概念和使用"><a href="#BigDecimal类的概念和使用" class="headerlink" title="BigDecimal类的概念和使用"></a>BigDecimal类的概念和使用</h2><h3 id="（1）-基本概念-4"><a href="#（1）-基本概念-4" class="headerlink" title="（1） 基本概念"></a>（1） 基本概念</h3><p>由于ﬂoat类型和double类型在运算时<strong>可能会有误差</strong>，若希望<strong>实现精确运算</strong>则借助</p><p>java.math.BigDecimal类型加以描述。</p><h3 id="（2）-常用的方法-1"><a href="#（2）-常用的方法-1" class="headerlink" title="（2） 常用的方法"></a>（2） 常用的方法</h3><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BigDecimal(String val)</td><td>根据参数指定的<strong>字符串</strong>来构造对象</td></tr><tr><td>BigDecimal add(BigDecimal augend)</td><td>用于实现<strong>加法运算</strong></td></tr><tr><td>BigDecimal subtract(BigDecimal subtrahend)</td><td>用于实现<strong>减法运算</strong></td></tr><tr><td>BigDecimal multiply(BigDecimal multiplicand)</td><td>用于实现<strong>乘法运算</strong></td></tr><tr><td>BigDecimal divide(BigDecimal divisor)</td><td>用于实现<strong>除法运算</strong></td></tr></tbody></table><p><a href="code/BigDecimalTest.java" title="BigDecimalTest.java">BigDecimalTest.java</a></p><p>使用之间0.1+0.2是存在误差的，虽然误差很小；</p><p>注意事项：无限循环情况【2&#x2F;0.3】,就报错了；</p><p>可以解决这个问题，根据查中文文档；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">bd5.divide(bd6.RoundingMode.HALF_UP); <span class="hljs-comment">// 7</span><br></code></pre></td></tr></table></figure><hr><h2 id="BigInteger类的概念和使用"><a href="#BigInteger类的概念和使用" class="headerlink" title="BigInteger类的概念和使用"></a>BigInteger类的概念和使用</h2><h3 id="（1）-基本概念-5"><a href="#（1）-基本概念-5" class="headerlink" title="（1） 基本概念"></a>（1） 基本概念</h3><p>若希望<strong>表示比long类型范围还大</strong>的整数数据，则需要借助java.math.BigInteger类型描述。</p><h3 id="（2）-常用的方法-2"><a href="#（2）-常用的方法-2" class="headerlink" title="（2） 常用的方法"></a>（2） 常用的方法</h3><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BigInteger(String val)</td><td>根据参数指定的<strong>字符串</strong>来构造对象</td></tr><tr><td>BigInteger add(BigInteger val)</td><td>用于实现加法运算</td></tr><tr><td>BigInteger subtract(BigInteger val)</td><td>用于实现减法运算</td></tr><tr><td>BigInteger multiply(BigInteger val)</td><td>用于实现乘法运算</td></tr><tr><td>BigInteger divide(BigInteger val)</td><td>用于实现除法运算</td></tr><tr><td>BigInteger remainder(BigInteger val)</td><td>用于实现<strong>取余</strong>运算</td></tr><tr><td>BigInteger[] divideAndRemainder(BigInteger val)</td><td>用于实现<strong>取商和余数</strong>的运算</td></tr></tbody></table><p><a href="code/BigIntegerTest.java" title="BigIntegerTest.java">BigIntegerTest.java</a></p><p>需要了解更多，请查看中文jdkAPI文档；</p>]]></content>
    
    
    <categories>
      
      <category>Java就业训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一阶段JavaSE</tag>
      
      <tag>模块三-Java 核心类库（上）</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
